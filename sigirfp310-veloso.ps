%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: paper.dvi
%%CreationDate: Wed May 21 20:25:33 2014
%%Pages: 5
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: NimbusSanL-Bold NimbusSanL-Regu NimbusRomNo9L-Medi
%%+ NimbusRomNo9L-Regu NimbusRomNo9L-ReguItal CMSY9 CMMI9 CMMI6 CMR6
%%+ CMR9 CMMI5 CMEX9 CMSY6 MSBM10 MSAM10 CMR5 CMTI9
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -P download35 -t letter paper.dvi -o
%+ sigirfp310-veloso.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2014.05.21:1902
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 781 2013-05-21 08:25:07Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.15, 2012/10/18
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa

/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def

%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def

    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 

  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 594 2011-10-31 18:13:18Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 713 2012-10-16 14:25:00Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.03, 2012/10/16
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { 
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get 32 ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ rightTrim psStringwidth } bind def

%/show { rightTrim psShow } bind def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 765 2013-04-09 15:32:28Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.14, 2012/09/18.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
 /startGlobal { true setglobal globaldict begin } bind def
 /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def

/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3dplot.pro 0 0
%% $Id: pst-3dplot.pro 467 2011-03-01 21:04:36Z herbert $
%%
%% This is file `pst-3dplot.pro',
%%
%% IMPORTANT NOTICE:
%%
%% Package `pst-3dplot.tex'
%%
%% Herbert Voss <voss _at_ PSTricks.de>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-3dplot' is a PSTricks package to draw 3d curves and graphical objects
%%
%%
%% version 0.31 / 2010-02-20  Herbert Voss <hvoss _at_ tug.org>
%% with contributions of Darrell Lamm <darrell.lamm _at_ gtri.gatech.edu<
%%            
%
/tx@3DPlotDict 200 dict def
tx@3DPlotDict begin
%
/printDot { gsave 2 copy 2 0 360 arc fill stroke grestore } def
%
/saveCoor { 
  dzUnit mul /z ED
  dyUnit mul /y ED
  dxUnit mul /x ED
} def
%
/3Dto2D { % true or false on stack
  { RotatePoint } if
  1 { %  dummy loop, will run only 1 time, allows exit 
    coorType 0 le {                                               % the default |
      /x2D x leftHanded not { neg } if Alpha cos mul y Alpha sin mul add def %  /\  co system
      /y2D x leftHanded { neg } if Alpha sin mul y Alpha cos mul add neg Beta sin mul z Beta cos mul add def
      exit } if
    coorType 1 le { 
      /x2D y x Alpha 90 sub sin mul sub def  %  |/_  co system, no shortened x axis
      /y2D z x Alpha 90 sub cos mul sub def 
      exit } if
    coorType 2 le { % coorType |/_ with a 1/sqrt(2) shortend x-axis and 135 degrees 
      /x2D y x 0.5 mul sub def
      /y2D z x 0.5 mul sub def 
      exit } if
    coorType 3 le { % coorType |/_ with a 1/sqrt(2) shortend x-axis and 135 degrees 
      /x2D y x -0.5 mul sub def
      /y2D z x -0.5 mul sub def 
      exit } if
    coorType 4 le { % Normalbild in Trimetrie Skalierung so, dass coorType2
       /x2D x -0.5 mul y 1 mul add def
       /y2D x -0.5 mul y -0.25 mul add z 1 mul add def
       exit } if
  } repeat
} def
/ConvertTo2D { true 3Dto2D } def
/ConvertTo2DWithoutRotating { false 3Dto2D } def
%
/Conv3D2D { /z ED /y ED /x ED ConvertTo2D x2D y2D } def
%
/ConvertToCartesian {
  /latitude exch def
  /longitude exch def
  /Radius exch def
  1 { %  dummy loop, will run only 1 time, allows exit
    SphericalCoorType 0 le {                                               % the default |
     /z { Radius latitude sin mul } def
     /x { Radius longitude cos mul latitude cos mul } def
     /y { Radius longitude sin mul latitude cos mul } def
      exit } if
    SphericalCoorType 2 le {
     /z { Radius longitude cos mul } def
     /x { Radius longitude sin mul latitude cos mul} def
     /y { Radius longitude sin mul latitude sin mul } def
      exit } if
  } repeat
} def
%
/ConvCylToCartesian { % r phi h -> x y z
  3 1 roll			% h r phi
  /Phi ED
  /Radius ED			% h->z on stack
  Radius Phi cos mul exch 	% x z
  Radius Phi sin mul exch	% x y z
} def
%
/SphericalTo2D {
  x y z ConvertToCartesian ConvertTo2D
} def
%
/CylinderTo2D { %  r phi h
  x y z ConvCylToCartesian ConvertTo2D
} def
%
/convertStackTo2D {
  counttomark
  /n ED /n3 n 3 div cvi def
  n3 {
    n -3 roll
    SphericalCoor { ConvertToCartesian } { saveCoor } ifelse
    ConvertTo2D
    x2D xUnit y2D yUnit
    /n n 1 sub def
  } repeat
} def
%
% the angle in the parameter equation for an ellipse is not proportional to the real angle!
% phi=atan(b*tan(angle)/a)+floor(angle/180+0.5)*180
%
/getPhi { % on stack: vecA vecB angle 
  3 dict begin
  /angle exch def /vecB exch def /vecA exch def
  angle cvi 90 mod 0 eq { angle } { vecA angle tan mul vecB atan 
  angle 180 div .5 add floor 180 mul add } ifelse 
  end
} def
%
/RotSet (set ) def
%
/eulerRotation false def
% Matrix multiplication procedure
/matmul {

  /M@tMulDict 20 dict def
  M@tMulDict begin
  /m2 ED
  /m1 ED
  m1 dup length 2 sub 2 getinterval aload pop
  /col1max ED
  /row1max ED
  m2 dup length 2 sub 2 getinterval aload pop
  /col2max ED
  /row2max ED
  /m3 row1max col2max mul 2 add array def
  m3 dup length 2 sub row1max col2max 2 array astore putinterval
  0 1 row1max 1 sub {
   /row ED
   0 1 col2max 1 sub {
    /col ED
    /sum 0 def
    0 1 col1max 1 sub{
    /rowcol ED
    sum
    m1 row col1max mul rowcol add get
    m2 rowcol col2max mul col add get
    mul add 
    /sum ED
    } for
    m3 row col2max mul col add sum put
   } for
  } for
  m3
  end % end of M@tMulDict

} def
%
/SetMQuaternion {

  /MnewTOold 11 array def

  /Qu@ternionDict 30 dict def
  Qu@ternionDict begin

  /normRotVec  xRotVec yRotVec zRotVec 3 array astore VecNorm  def
  normRotVec 0 gt
  {/xRotVecNorm xRotVec normRotVec div def
   /yRotVecNorm yRotVec normRotVec div def
   /zRotVecNorm zRotVec normRotVec div def
   RotAngle}
  {/xRotVecNorm 1 def
   /yRotVecNorm 0 def
   /zRotVecNorm 0 def 
   0} ifelse

  2 div dup
  /q0 exch cos def
      sin dup dup
  /q1 exch xRotVecNorm mul def
  /q2 exch yRotVecNorm mul def
  /q3 exch zRotVecNorm mul def

  /q0q0 q0 q0 mul def
  /q0q1 q0 q1 mul def
  /q0q2 q0 q2 mul def
  /q0q3 q0 q3 mul def

  /q1q1 q1 q1 mul def
  /q1q2 q1 q2 mul def
  /q1q3 q1 q3 mul def

  /q2q2 q2 q2 mul def
  /q2q3 q2 q3 mul def

  /q3q3 q3 q3 mul def

  MnewTOold 0 q0q0 q1q1 add q2q2 sub q3q3 sub put
  MnewTOold 1 q1q2 q0q3 sub 2 mul put
  MnewTOold 2 q1q3 q0q2 add 2 mul put

  MnewTOold 3 q1q2 q0q3 add 2 mul put
  MnewTOold 4 q0q0 q1q1 sub q2q2 add q3q3 sub put
  MnewTOold 5 q2q3 q0q1 sub 2 mul put

  MnewTOold 6 q1q3 q0q2 sub 2 mul put
  MnewTOold 7 q2q3 q0q1 add 2 mul put
  MnewTOold 8 q0q0 q1q1 sub q2q2 sub q3q3 add put

  MnewTOold 9 3 put
  MnewTOold 10 3 put

  end % end of Qu@ternionDict

} def
%
/SetMxyz {
  1.0 0.0 0.0  0.0 1.0 0.0  0.0 0.0 1.0  3 3  11 array astore /MnewTOold ED
  RotSequence cvx exec % Now create a new MnewTOold using xyz, etc.
} def
%
/ConcatMQuaternion {
  MnewTOold % Push onto stack
  SetMQuaternion % Uses [xyz]RotVec and RotAngle to make MnewToOld 
  MnewTOold matmul /MnewTOold ED
} def
%
/ConcatMxyz {
  MnewTOold % Push onto stack
  SetMxyz % Uses RotX, etc. to set MnewTOold 
  MnewTOold matmul /MnewTOold ED
} def
%
/RotatePoint{
  MnewTOold x y z  3 1  5 array astore matmul
  0 3 getinterval aload pop 
  /z ED 
  /y ED 
  /x ED 
} def
%
/makeMoldTOnew {
  /MoldTOnew 11 array def
  MoldTOnew 0 MnewTOold 0 get put
  MoldTOnew 1 MnewTOold 3 get put
  MoldTOnew 2 MnewTOold 6 get put
  MoldTOnew 3 MnewTOold 1 get put
  MoldTOnew 4 MnewTOold 4 get put
  MoldTOnew 5 MnewTOold 7 get put
  MoldTOnew 6 MnewTOold 2 get put
  MoldTOnew 7 MnewTOold 5 get put
  MoldTOnew 8 MnewTOold 8 get put
  MoldTOnew 9               3 put
  MoldTOnew 10              3 put
} def
%
/RotXaxis { 
  eulerRotation 
  {1 0 0}
  {makeMoldTOnew MoldTOnew  1 0 0  3 1  5 array astore matmul
   0 3 getinterval aload pop} ifelse
  /zRotVec ED
  /yRotVec ED
  /xRotVec ED
  /RotAngle RotX def
  ConcatMQuaternion
} def
/RotYaxis { 
  eulerRotation 
  {0 1 0}
  {makeMoldTOnew MoldTOnew  0 1 0  3 1  5 array astore matmul
   0 3 getinterval aload pop} ifelse
  /zRotVec ED
  /yRotVec ED
  /xRotVec ED
  /RotAngle RotY def
  ConcatMQuaternion
} def
/RotZaxis { 
  eulerRotation 
  {0 0 1}
  {makeMoldTOnew MoldTOnew  0 0 1  3 1  5 array astore matmul
   0 3 getinterval aload pop} ifelse
  /zRotVec ED
  /yRotVec ED
  /xRotVec ED
  /RotAngle RotZ def
  ConcatMQuaternion
} def
/xyz { RotXaxis RotYaxis RotZaxis } def
/yxz { RotYaxis RotXaxis RotZaxis } def
/yzx { RotYaxis RotZaxis RotXaxis } def
/xzy { RotXaxis RotZaxis RotYaxis } def
/zxy { RotZaxis RotXaxis RotYaxis } def
/zyx { RotZaxis RotYaxis RotXaxis } def
/quaternion { } def % Null
%
/VecNorm { 0 exch { dup mul add } forall sqrt } def
%
/UnitVec {			% on stack is [a]; returns a vector with [a][a]/|a|=1 
  dup VecNorm /norm ED
  norm 0 lt {/norm 0 def} if
  { norm div } forall 3 array astore } def
%
/AxB {				% on the stack are the two vectors [a][b]
    aload pop /b3 ED /b2 ED /b1 ED
    aload pop /a3 ED /a2 ED /a1 ED
    a2 b3 mul a3 b2 mul sub
    a3 b1 mul a1 b3 mul sub
    a1 b2 mul a2 b1 mul sub
    3 array astore } def
%
/AaddB {			% on the stack are the two vectors [a][b]
    aload pop /b3 ED /b2 ED /b1 ED
    aload pop /a3 ED /a2 ED /a1 ED
    a1 b1 add a2 b2 add a3 b3 add
    3 array astore } def
%
/AmulC {			% on stack is [a] and c; returns [a] mul c
    /factor ED { factor mul } forall 3 array astore } def
%
%
/setColorLight { % expects 7 values on stack C M Y K xL yL zL
% les rayons de lumi�re
  xLight dup mul yLight dup mul zLight dup mul add add sqrt /NormeLight ED
% the color values
  /K ED
  /Yellow ED
  /Magenta ED
  /Cyan ED
} def
%
/facetteSphere {
  newpath
  /Xpoint Rsphere theta cos mul phi cos mul CX add def
  /Ypoint Rsphere theta sin mul phi cos mul CY add def
  /Zpoint Rsphere phi sin mul CZ add def
  Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end moveto
  theta 1 theta increment add {%
    /theta1 ED
    /Xpoint Rsphere theta1 cos mul phi cos mul CX add def
    /Ypoint Rsphere theta1 sin mul phi cos mul CY add def
    /Zpoint Rsphere phi sin mul CZ add def
    Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end  lineto
  } for
  phi 1 phi increment add {
    /phi1 ED
    /Xpoint Rsphere theta increment add cos mul phi1 cos mul CX add def
    /Ypoint Rsphere theta increment add sin mul phi1 cos mul CY add def
    /Zpoint Rsphere phi1 sin mul CZ add def
    Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end lineto
  } for
  theta increment add -1 theta {%
    /theta1 ED
    /Xpoint Rsphere theta1 cos mul phi increment add cos mul CX add def
    /Ypoint Rsphere theta1 sin mul phi increment add cos mul CY add def
    /Zpoint Rsphere phi increment add sin mul CZ add def
    Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end lineto
  } for
  phi increment add -1 phi {
    /phi1 ED
    /Xpoint Rsphere theta cos mul phi1 cos mul CX add def
    /Ypoint Rsphere theta sin mul phi1 cos mul CY add def
    /Zpoint Rsphere phi1 sin mul CZ add def
    Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end lineto
  } for
  closepath 
} def
%
/MaillageSphere { 
% on stack must be x y z Radius increment C M Y K 
  setColorLight
  /increment ED
  /Rsphere ED
  /CZ ED
  /CY ED
  /CX ED
  /StartTheta 0 def
  /condition { PSfacetteSphere 0 ge } def
  -90 increment 90 increment sub {%
    /phi ED
    StartTheta increment 360 StartTheta add increment sub {%
      /theta ED
      % Centre de la facette
      /Xpoint Rsphere theta increment 2 div add cos mul phi increment 2 div add cos mul CX add def
      /Ypoint Rsphere theta increment 2 div add sin mul phi increment 2 div add cos mul CY add def
      /Zpoint Rsphere phi increment 2 div add sin mul CZ add def
      % normale a la facette
      /nXfacette Xpoint CX sub def
      /nYfacette Ypoint CY sub def
      /nZfacette Zpoint CZ sub def
      % test de visibilite
      /PSfacetteSphere 
        vX nXfacette mul
        vY nYfacette mul add
        vZ nZfacette mul add
      def
      condition {
        gsave
        facetteSphere
        /cosV { 1 xLight nXfacette mul
          yLight nYfacette mul
          zLight nZfacette mul
          add add
          NormeLight
          nXfacette dup mul
          nYfacette dup mul
          nZfacette dup mul
          add add sqrt mul div sub } bind def
        Cyan cosV mul Magenta cosV mul Yellow cosV mul K cosV mul setcmykcolor fill 
	grestore
%	0 setgray
        showgrid { facetteSphere stroke } if
      } if 
    } for
    % /StartTheta StartTheta increment 2 div add def
  } for
} def
%
%---------------------- Cylinder ---------------------------
%
/PlanCoupeCylinder { %
  /TableauxPoints [
    0 1 359 { 
      /phi ED 
      [ Radius phi Height ConvCyl2d ] % on décrit le cercle
    } for
  ] def
  newpath
  TableauxPoints 0 get aload pop moveto
  1 1 359 { TableauxPoints exch get aload pop lineto } for
  closepath
} def
%
/facetteCylinder { % 
    newpath
    Radius phi currentHeight ConvCyl2d moveto
    phi 1 phi dAngle add  { % loop variable on stack
      Radius exch currentHeight ConvCyl2d lineto        
    } for
    phi dAngle add -1 phi { %	fill dHeight
      Radius exch currentHeight dHeight add ConvCyl2d lineto 
    } for
    closepath
  } def % facette
%
/MaillageCylinder { % on stack true or false for saving values
    { setColorLight  % expects 4 values on stack C M Y K
      /dHeight ED /dAngle ED /Height ED /Radius ED
      /CZ ED /CY ED /CX ED } if
%     
    0 dHeight Height dHeight sub {
      /currentHeight ED
      0 dAngle 360 dAngle sub {
        /phi ED
% Normal vector of the center
        /nXfacetteCylinder Radius phi dAngle 2 div add cos mul CX add def 
        /nYfacetteCylinder Radius phi dAngle 2 div add sin mul CY add def 
        /nZfacetteCylinder currentHeight dHeight 2 div add CZ add def 
        /NormeN 
          nXfacetteCylinder dup mul
          nYfacetteCylinder dup mul
          nZfacetteCylinder dup mul
          add add sqrt def
        NormeN 0 eq { /NormeN 1e-10 def } if
% test de visibilité
       /PSfacetteCylinder 
    	    vX nXfacetteCylinder mul
            vY nYfacetteCylinder mul add
            vZ nZfacetteCylinder mul add def
       condition {
         facetteCylinder
         /cosV 
	   1 xLight nXfacetteCylinder mul
           yLight nYfacetteCylinder mul
           zLight nZfacetteCylinder mul
           add add
	   NormeLight NormeN mul div sub def
         Cyan Magenta Yellow K
         cosV mul 4 1 roll cosV mul 4 1 roll 
	 cosV dup mul mul 4 1 roll cosV dup mul mul 4 1 roll
         setcmykcolor fill
          showgrid { 
            0 setgray
            facetteCylinder % drawing the segments
            stroke } if
       } if
     } for
    } for
} def
%
%------------------------ Cylinder type II -----------------------
%
/MoveTo { Conv3D2D moveto } def
/LineTo { Conv3D2D lineto } def

/IIIDEllipse { % x y z rA rB startAngle endAngle Wedge
  /dAngle 1 def
  /isWedge ED
  /endAngle ED
  /startAngle ED
  /radiusB ED
  /radiusA ED
  startAngle cos radiusA mul startAngle sin radiusB mul 0 
  isWedge { 0 0 moveto LineTo }{ MoveTo } ifelse
  /Angle startAngle def
  startAngle dAngle endAngle {
    /Angle ED
    Angle cos radiusA mul Angle sin radiusB mul 0 LineTo  
  } for
  isWedge { 0 0 lineto } if
} def

/IIIDCircle { % x y z r startAngle endAngle Wedge
  7 3 roll % startAngle endAngle Wedge x y z r
  dup      % startAngle endAngle Wedge x y z r r
  8 -3 roll
  IIIDEllipse 
} def

/IIIDWedge { % x y z r startAngle endAngle
  true IIIDCircle
} def

/IIIDCylinder {% x y z r h start end wedge
  /isWedge ED
  /increment ED
  /endAngle ED
  /startAngle ED
  /height ED
  /radius ED
  startAngle increment endAngle {
    /Angle ED
    radius Angle 0 ConvCylToCartesian MoveTo  
    radius Angle height ConvCylToCartesian LineTo  
  } for
  stroke
} def
%
%---------------------- Box ---------------------------
%
/PlanCoupeBox { % x y z
  /TableauxPoints [
      [ CX CY CZ Height add ConvBox2d ] % top or bottom
      [ CX CY Depth add CZ Height add ConvBox2d ]
      [ CX Width add CY Depth add CZ Height add ConvBox2d ] 
      [ CX Width add CY CZ Height add ConvBox2d ] 
      [ CX CY CZ Height add ConvBox2d ] % bottom
    ] def
    newpath
    TableauxPoints 0 get aload pop moveto
    0 1 3 {
      TableauxPoints exch get aload pop
      lineto } for
    closepath
} def
%
/facetteBox { % 
    newpath
    dup
    1 eq { % back
      CX CY CZ ConvBox2d moveto
      CX CY CZ Height add ConvBox2d lineto
      CX Width add CY CZ Height add ConvBox2d lineto
      CX Width add CY CZ ConvBox2d lineto
      CX CY CZ ConvBox2d lineto
    } if
    dup
    2 eq { % right
      CX CY CZ ConvBox2d moveto
      CX CY CZ Height add ConvBox2d lineto
      CX CY Depth add CZ Height add ConvBox2d lineto
      CX CY Depth add CZ ConvBox2d lineto
      CX CY CZ ConvBox2d lineto
    } if
    dup
    3 eq { % left
      CX Width add CY CZ ConvBox2d moveto
      CX Width add CY Depth add CZ ConvBox2d lineto
      CX Width add CY Depth add CZ Height add ConvBox2d lineto
      CX Width add CY CZ Height add ConvBox2d lineto
      CX Width add CY CZ ConvBox2d lineto
    } if
    4 eq { % front
      CX CY Depth add CZ ConvBox2d moveto
      CX CY Depth add CZ Height add ConvBox2d lineto
      CX Width add CY Depth add CZ Height add ConvBox2d lineto
      CX Width add CY Depth add CZ ConvBox2d lineto
      CX CY Depth add CZ ConvBox2d lineto
    } if
    closepath
  } def % facette
%
/TestPlane { % on stack x y z of the plane center and # of plane
  /nZfacetteBox ED /nYfacetteBox ED /nXfacetteBox ED
  /Plane ED
  /NormeN 
    nXfacetteBox dup mul
    nYfacetteBox dup mul
    nZfacetteBox dup mul
    add add sqrt def
  NormeN 0 eq { /NormeN 1e-10 def } if
% test de visibilite
  /PSfacetteBox 
    vX nXfacetteBox mul
    vY nYfacetteBox mul add
    vZ nZfacetteBox mul add def
  condition {
    Plane facetteBox
         /cosV 
	   1 xLight nXfacetteBox mul
           yLight nYfacetteBox mul
           zLight nZfacetteBox mul
           add add
	   NormeLight NormeN mul div sub def
         Cyan Magenta Yellow K
         cosV mul 4 1 roll cosV mul 4 1 roll 
	 cosV dup mul mul 4 1 roll cosV dup mul mul 4 1 roll
         setcmykcolor fill
         0 setgray
         Plane facetteBox % drawing the segments
         stroke
       } if
} def
%
/MaillageBox { % on stack true or false for saving values
    { setColorLight  % expects 4 values on stack C M Y K 
      /Depth ED /Height ED /Width ED
      /CZ ED /CY ED /CX ED } if
%
% Normal vector of the box center
  /PlaneSet [
    [ Width 2 div CX add 
      CY 
      Height 2 div CZ add ] % normal back
    [ CX 
      Depth 2 div CY add 
      Height 2 div CZ add ] % normal right
    [ Width CX add 
      Depth 2 div CY add 
      Height 2 div CZ add ] % normal left
    [ Width 2 div CX add 
      Depth CY add 
      Height 2 div CZ add ] % normal front
  ] def
  PlaneSequence length 0 eq { % user defined?
    Alpha abs cvi 360 mod /iAlpha ED
    iAlpha 90 lt { [ 1 2 3 4 ]  
      }{ iAlpha 180 lt { [ 2 4 1 3 ]  
        }{ iAlpha 270 lt { [ 3 4 1 2 ] }{ [ 3 1 4 2] } ifelse } ifelse } ifelse 
  }{ PlaneSequence } ifelse 
  { dup 1 sub PlaneSet exch get aload pop TestPlane } forall
} def
%
%--------------------------- Paraboloid -----------------------------
/PlanCoupeParaboloid {
    /Z height store
    /V {Z sqrt} bind def
    /TableauxPoints [
      0 1 359 { 
        /U ED [ U U Z V calculate2DPoint ] % on decrit le cercle
      } for
    ] def
    newpath
    TableauxPoints 0 get aload pop moveto
    0 1 359 {
      /compteur ED
      TableauxPoints compteur get aload pop
      lineto } for
    closepath
} def
%
/facetteParaboloid{
    newpath
    U U Z V calculate2DPoint moveto
    U 1 U increment add  {%
      /U1 ED
      U1 U1 Z V calculate2DPoint lineto
    } for
    Z pas10 Z pas add pas10 add{
      /Z1 ED
      /V {Z1 sqrt} bind def
      U1 U1 Z1 V calculate2DPoint lineto
    } for
    U increment add -1 U {%
      /U2 ED
      U2 U2 Z pas add V calculate2DPoint lineto
    } for
    Z pas add pas10 sub pas10 neg Z pas10 sub {
      /Z2 ED
      /V Z2 abs sqrt def
      U U Z2 V calculate2DPoint lineto
    } for
    closepath
} def % facette
%
/MaillageParaboloid {
  % on stack true or false for saving values
    { setColorLight  % expects 7 values on stack C M Y K xL yL zL 
%      /CZ ED /CY ED /CX ED 
    } if    
    0 pas height pas sub {%
      /Z ED
      /V Z sqrt def
      0 increment 360 increment sub {%
        /U ED
% Centre de la facette
        /Ucentre U increment 2 div add def
        /Vcentre Z pas 2 div add sqrt def
% normale à la facette
        /nXfacetteParaboloid 2 Vcentre dup mul mul Ucentre cos mul radius mul def
        /nYfacetteParaboloid 2 Vcentre dup mul mul Ucentre sin mul radius mul def
        /nZfacetteParaboloid Vcentre neg radius dup mul mul def
        /NormeN {
          nXfacetteParaboloid dup mul
          nYfacetteParaboloid dup mul
          nZfacetteParaboloid dup mul
          add add sqrt} bind def
        NormeN 0 eq {/NormeN 1e-10 def} if
% test de visibilit�
       /PSfacetteParaboloid vX nXfacetteParaboloid mul
                  vY nYfacetteParaboloid mul add
                  vZ nZfacetteParaboloid mul add def
       condition {
         facetteParaboloid
         /cosV 1 xLight nXfacetteParaboloid mul
           yLight nYfacetteParaboloid mul
           zLight nZfacetteParaboloid mul
           add add
           NormeLight
           NormeN mul div sub def
         Cyan Magenta Yellow K  
         cosV mul 4 1 roll cosV mul 4 1 roll cosV dup mul mul 4 1 roll cosV dup mul mul 4 1 roll
         setcmykcolor fill
         showgrid {
           0 setgray
           facetteParaboloid
           stroke } if
       } if
     } for
    } for
} def
%
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
% u -> e_u with |e_u|=1 
/vector-unit { 1 dict begin
  dup vector-length 1 exch div 
  vector-scale
  end 
} def
%
% u v -> u+v
/vector-add { 1 dict begin
  /v exch def
  [ exch
  0 	     	% u i
  exch { 	% i u[i]
    v 		% i u[i] v
    2 index get add 	% i u[i]+v[i]
    exch 1 add	% i
  } forall
  pop
  ]
  end 
} def
%
% u v -> u-v
/vector-sub { 1 dict begin
  /v exch def
  [ exch
  0 	     	% u i
  exch {	% i u[i]
    v 		% i u[i] v
    2 index get sub 	% i u[i]+v[i]
    exch 1 add	% i
  } forall
  pop
  ]
end } def
%
% [v] c -> [c.v]
/vector-scale { 1 dict begin
  /c exch def
  [ exch
  { 		% s i u[i]
    c mul	% s i u[i] v 
  } forall
  ]
  end } def
%
%
% [u] [v] -> [u x v]
/vector-prod { %% x1 y1 z1 x2 y2 z2
6 dict begin
  aload pop 
  /zp exch def /yp exch def /xp exch def
  aload pop 
  /z exch def /y exch def /x exch def
  [ y zp mul z yp mul sub
   z xp mul x zp mul sub
   x yp mul y xp mul sub ]
end
} def
%
% [u] [v] -> u.v
/vector-mul { %% x1 y1 z1 x2 y2 z2
6 dict begin
  aload pop 
  /zp exch def /yp exch def /xp exch def
  aload pop 
  /z exch def /y exch def /x exch def
  x xp mul y yp mul add z zp mul add
end
} def
%
% [x y z ... ] -> r
% watch out for overflow
/vector-length { 1 dict begin
dup
% find maximum entry
/max 0 def
{ % max 
  abs dup max gt {
    % if abs gt max
    /max exch def
  } {
    pop
  } ifelse
} forall
max 0 ne {
  0 exch 
  {  % 0 v[i]
    max div dup mul add
  } forall
  sqrt
  max mul
} {
  pop 0
} ifelse
end } def
%
end % tx@3DPlotDict
%

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMTI9
%!PS-AdobeFont-1.0: CMTI9 003.002
%%Title: CMTI9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTI9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTI9 known{/CMTI9 findfont dup/UniqueID known{dup
/UniqueID get 5000827 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTI9 def
/FontBBox {-35 -250 1148 750 }readonly def
/UniqueID 5000827 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTI9.) readonly def
/FullName (CMTI9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 69 /E put
dup 77 /M put
dup 83 /S put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1B57C50F9043B95BDF77C
1450E422362CCD41FB4AF30F73B66A85AC8DDEAFA65B4FCF0033D034E111830C
ACB981C2AC41AC32863D02E6D9CA81F8D407DE4AB20B4CB6418B8067D694DA02
6E76FF50A7197281B7E8E700C4A8824220374DE1CA077D50A8B751391E35FAAE
E0AB0604164A16D476EDD5E33B08639DCA14796F27A20EAA52D0BD8B61065AAD
083E4AAF626C2575C56F87AAC636FDC2E5ABF623F2D916D3CF5CE8703D297151
0A664F40B144A2F3900D053B709210AB8678EF35301AEF3696CF17A5B41B588F
539243F32FD78B62A0D80B17F1028CBD7234BA7513A4809B584092B95583CF1B
664929C33846E8F59A43220F79D8BE0DA051D17D09C1E9DBA6C60BCF99BAE773
3E9439791901546793B3CDF014E6AD9AA169483DB87A6CE4104A8B25AC117504
8D6DF6052EF491D510F67D730CA315915E77290A40D3F8EB8F004114BB64C5EE
9F1E18A47A785A04D4EE3FCEA794EB3438CBCAE35242782053277EFD6B67F6AF
97D892DA958EDBFAFDDEBEAC4451EF8E00D6D0E7E60C112F74999096428AFC5F
507D0DEAC778A81F8F47FBB1FD8C22FD22DF2AD0C9BDEFF2633F180E0186A9AB
B0680E661CF083B8DC5635D7DBD69A17E6BF1E86F7C19FF7E48EAE8D35F0B698
F990DC16CAE9D6E9D1C323FDD183096BE0EF3BCE379CE5E5CB0F58E4516C01B1
55004C20A6F2BF430D59368AD4F6D398B9A27B89DBCF70BB8A36AA24496CA621
0D28748646257C95B113209FA00B4525C582A8B223C64B658DA11CA08CB64F12
8BF230A57B4DC2FD0AA8C486D7B151C9713B12ABDF174ABDF52EC8034B0858CC
6D389B503A320AE42AF3BBE33135032FE83E6B7AE0D713BA6A56230A50C22FB8
597A5F21CDF98D70423E8AF8E3CBCE4756DEB5695D3A5E7C47E6EE62F4D06BC6
C9978DEFFF773BA6CB9B92D2B2638FA3A1D92806EAF9A9A9D6DE09D81FBD8622
AA7AE1FE01A1390427D270287D4A436A544D4F568640100F94518C113CCAA34B
28791F62F1C5B6207165A847AE2A9F1E3AF8B96203DDAEC2AF8F3450CA2FFB5D
E55DA538F39D6A5F13963857E2CE6D75E510E8287D4DDFE5FF5CDCC0FF51E346
B8717B28181DC56315751FC861DE7CAFECE8E350CECE6B324879ABC8D8206ED7
51D1D299BACD2F7F6EC2F8D3836EED6CCF09C205A7A76B82FE1AAFE0833C7693
FC7E22D373C10C34BC0B57382312646763F593AA91D90F6CBDB096CAF9F52C12
CB6E75237566C5D528DB58B92D0C7E16D6BB2D097C1FE565A07076209AC4DEE2
BB6147D06D65F403B6919D65D1C3D9D0FFFC0CEA7FE0EE002AA0EFBFC120A724
CCE85B3419C44ED7216E4C714FC85F72CA933D3707D2EDC6AC02335D4770B48E
0B64716C0E1B9DC8A4DA1BCF7B47FE7B37F9630E55E9868AD41AC770C5036E78
4D8B24AF41E90CE8358F97CCC43295371B73EF7E86BD1647EAB2E493EE912F74
EBDBB5CAC34EC1044114FDFEEE2FA8E3574F4D1E3EFB38C3BCDC341A0E53044C
0A19D619CB789E8C10100E413B8057373E6D77709B8019841DF04C8B27700FA8
B21E2955C9ADD9CBCECB52727BFF0E48029D46C695028CB3A7EA779EA69C8763
2BA38F274B4217F4D5C942042ABC9E4C1627D63C0BA9B1E03E9E3C7C8CB2812F
503564C0C02A6F2041D4CD59BFD6E465CD060D655C38FC5499F06E0323A4F359
37061EA5248B3AD809D16446E67B0267A3A929FBEB0A93DFEFEA3E8D5B7C564B
95AA458F532CBA8770DD90AE6D3A0BED3BA140A4AB6261CE41967038861D947F
20BCD353B32618537EACA0F1CA5C2708D67D46B6F9B6D4F12081485AF0699628
05AE00F008AA816DB07710E06AE2DBFA830C34851E5C63A7E9E02404ADF1DCA7
2185507F0CEAF858389E4F8DC3A1283FBEC373FB4A1720BA71F993D432425C2E
D0FB5A6FBC1E1904B959838FCCD085AF1778A5E3EF29166C6660B797C8ADAFF7
1EEDE9BD371E11CEE77D70008706E0BF2B6DA250F9C6A92BF91ADB7D32CA17D9
776CE695179FC5D1686E86E2B4C3E34D2741CDA86C0F343E7CDD52AD3059A8C8
134C7DAE20076E5EE5990CC56EF8AF66131243212C40480BBFDEA97FE0558ED5
7AECD669BA1AD9A50F1C0B21D75AD5A11FF9F577153C12F9789EDDF81FB683B1
F66244F6FB2DC1FF2B3BC8CDC6990E6C4CB835E552E2AC9A7540DDCFAD1F931C
44815C59118C7EB3C4CED4DE0D45C311D69576D5E6DAE9DF8265EC6E566DDBA7
22655E765C074082F346AB496F08F4E598D6D35472629273128157FA8608DD96
0CC4A3B97B430B1DF8EA4851CD54E742AC0170215F86D4612129F2CC3874D047
F485BE77D2FF57B8899E1E667D41E519948F0E60C5247F5483D20CB108BDDDA4
27F15C14A35FDC3CEA924E051D711D8D4EE36E7735E6DB443DBBD000A4CE0635
2727EF9C1AFC95E876A46FE001EFF903D64A2C1F00D734D32FF4A6C8E3956DF5
5E676815AA165DAA9E0AF2D56EFFF32BEC9897F45E40909F2F39BAF85A354420
5E6CBBC6626B98FF1A9BCC1F76D9AB0348C8E7540E42EEF3F3351006CDBFEB01
0FED065EBE147B5E36BB659D6AA429E6BF8121F147554BC0959E6F45C6990AE4
66A74CEBDEDD67A559C3E4937F50D3B51E7DACCA53A2DB98306E7AA86D21977A
A4CB7592590C94C8479530239945471408FA1F774CAD14F58AFFB59D8CE596B0
8DDC2E8CEAC94156D5FC69D70F2F779774503F168C48594C63F3180E8C93F423
7F1F1D44CCC5E5F766D7BECC470F880611C545FB3F4C0E171A30516DBD6477C6
2C478B4E3C2AC2241C68124C4570D476B1A18E7D093C97D16999E06CC1C8C485
15AFA4836718A40733ED145DFA4B80D3FC3AA074665316786E65706DA958BB71
67A4EE35FA629FE738CEC51D4F51431BCF8B14804F2C83453566253847077644
257AFB4D3D13CE77C9CD592F6C913F5AA3064E88779966EDCA52B2D9469FE48A
C8F6E5036AC9B0671508DA664E3F24BCE551D22434DBDF58196254D7D2C7C308
1A6822F2F21BDAE029F7F776C1FA7BA9CD94CA7D919B4E7BCB9B885FD767CD9E
96CC1604B95F0A8715837D7C27BBA08663FBC0DA33C2962577451DB48A4B76F4
8A4B66E7D2A2E465789D1E6B6D5F20413D84A47E5788CFA97BE43ED05FA176B1
F535C65F8FE60C72BE326737154602688AB71A8F12622648031414AB80C46289
1EAE582B933C87122DBDF3E3F1C4F4F5175E88AD0EC90B33CFC13DA07CBE8C49
EB1E86E0DCA68AF0BE3814595A4B2A4113FC8654A032BF00DAE293B4F2CCECC6
C0E804B658720C67DC156B4785D9A15274F2BF38748FAC7936275CDF42915CBD
FB21A739B80CE81B3897539492F113D589DA8A6C7B38621C8354625DC8B40FC0
7CFF21FD2D09E41AC9E99CB18FB9C92BB735C16FDEE7A8BB75A2258E76195AD2
1A88B0D64C130BE88CB2FEE3C723A46516DCE8DC6692EE27C6D8469FF511B7EA
F1B7EBA054708112981C79CFDCDD40BC55A1778FB3FDFC0AAA7EDC425FC2938D
694802705011B724423608C7BC1E803D344C9B5BDE13005D06C3F27DE0371EA4
0F836D5C0D6C0BE2D27700B08ABD09783D329EDD00415387C97C04F89607DCAB
62463E6A37E36C3A1CD92158353D45B443428177D1AE501F1CC0B50C100166B2
98C4824CAD58B3A396D097E2850B39130E743CF3CF59259A174586B9361D8F23
6DFDDAAC5B40CBA0495A3971399A95BAAC66CE5B472669E2C31ED0F2BE60E787
503EB379D332055EBF839B25802E076B1BA8DE3EC59782335AC80D1CB950948A
5EEA00C5F5829EB5293E05B982032207D41DDA035B3CAF26802A61751B17D0E5
170C99F6A0EE0EABB1576814EC3B4317A89C7F11022A0695FA3C2B2B80A2F73F
6A3FBD3A2B8C4820E7705CCEE368CE580434F3EBD2E9DBC162CB482278531546
74355C299E321C47D1C4C6D48C5100A4B8B2A16DD422AC3365B37A79D936FB24
786E9AD00E8E2666438B096BEF243BEC5C1AE35A9612D08CF7776E458265FC58
0D67659A4D5AB175ADB10F662536C8A9447DCF5173E620320A43B2AA5D5B5C34
78265F88656D2125C6E694AE4750193B05ED2A6DB4CD5A81E48B9912E25710DF
C66A0FCB7920479DBBF739D4BC746BB03C2F1FF89288DD807E805957EFB929CB
248F64A431C995F0300C0F836EBE1678C28DEA1F45034A4057520D17A25180A8
693BB0FE3FE6308A332A7E54A674B497471E2D13756CB0B991C4A4F9F4851A9C
49DDFB13416722223559BF7BBE8F1499BC93DC8BAC757E42E25369B182811ABC
FE4F1CBA5E5BC15ACB6344EBC575C2F443A508A46ADDEBF7C34D88702FE46A8E
D96C91AEA3EB989909A2B22E86FA80721E68A1385239B4883DC065A0C08ECCB3
693B0D13CA411A78C13BEE866D8AF8A634B81283B77FF62EEF25C5D48CCB10DB
BFA10E3066C116662395A6AF0B71D23C4047EE0352F4E02CCF28F959FD4394EF
43F0761B73B8D726B69D5111CF94B720D461E0AE42C974F2EDA6F7883BCC35FD
093304225534D8043D934772B0FEEE6427D0481A6CD8BD614669B875E1DCC6E8
EC423D9A0DA290D8571E97CB6CAEF274DF823767AF4E0576588CF2ADC239FDC6
437910EC0C2F01B4DC773E73C7FDE6E37D3E784E0E5B655600FBF3FBCC1FDCB4
CF356017BE2A663DD7983A46482A4C1B42A067381D58AB1B332CAB8E5C83FC78
1F0D9DBACEAAD372991BE3074D9911CBAA95E776008644F203D6B2EEAAFCDC57
C53DE48816934BF9D70F90F4186F6268522D260512492305533C1B0FB23D4726
6ACE20B872517CA01EF5EE275CCDC3BFE45C19FF225550E4E73B15E9BEE3CF21
1594CC1773CDAF0C659F3EDC2EA43C25D00AA68DA8D39DC46A1676099496DFD7
1155BCBC439742A80EC917BDB6E7593639CF1217C0265BA3183209DDDAF50E71
FA061C8978583D93EBD97C70A890230AA7123947B197E9536F0DA91373DECFD9
BD4E1C12B086B12077EBA19BA50B786AAE9244C60020F406AFF705CF029B43E8
D70CDD5DC7A61A75858E03657264392D9CAEA8C515DD98C2CB9E84BDBC6A62D2
36CA59D774BD889D64E6C9A0E043D04744D3D807D3A1B1B25266F0D9953266DC
662424A93FFEF40F47097F48D1904A1CC00030155AA3D9B07D281E055E6D033D
745856D9465D7349797A07396AE9026EE96DB8BAAA081D64EE4D86ADD8C4D1C1
CE8EDA25CF3242047E18E4C9870320052ADF3EA543D32E6EDC93264DCC2E5A1F
458369CC5CD73DDE165D5BF594C81FC992F35DF29A57464A0C6D72D5E7A92535
3CA14943640A67B23935409206FAAA6A11F598BE24373E7BF54A2B3C34551080
1B4DB4E3135AD0B61CB1C12A5154013E11B33393A1C16D74B16BB4D8E7B893FA
E6AA0C843BA5DC50FBE07407D8B16ED2963E36D021EB433609053BD19ACA31AC
53B1360A48F71D972E669D5357C22A33A7211F3380DF41069AFC7ABCB3300D72
FA1E9D6F2291E147988003554D2DCE165B5F316A390500D0273E83453381B13A
95D6E6F3300F36155573B8FB32A1691F6A9AAFC39541BAE0A4153C9F6B181B89
43D246EFEB5A2B5F66FC60A44E2E1A6D972C53B1E930CAA18A5B58820D8D2EF6
C1E798E9B744A31FB980C77D36728AEE6E682EA668F32E0C3EC70BCADC32A8D9
A2597F1A4AB9565FEE420056E8A8B0004C006AD981E94A84CB30ED6FC9642D65
0FADC7C9950BD962E0D86543EED6DE476E29A525183E52A8C97769E2FBC4149C
53A13C54341A9F554F0178211FA1E4731BFB84C11E6B776335F1F42864C70E9F
4C3F71F7DED7FB704A05FAEF7A2186B2C9C2AE9A3BEA55EC7F3334699BCD3D70
A675D3D1EBD9958BFE62267CAC06FA97421994C17D60879D8B847B39D5379B2C
079AD7BDB6FDDC56106127147297932F788184B0BBBEA5657DC92E4D6B097F30
97149A14677113EC8929C69FC93CCE56C068C015F46029110C7DB91DFE31E06C
CBB475E860D068ED6BE3B15B5C6F6F0D1D5FE6E7E4E47392C46FAA9CE932F928
FF628944653962EBFE4EE5AF7522BACB33ED77387B0247C146B81F7A860B84D0
D372252C89556DABA34913010DBA3576A6E13E3A184CD18D53FC758DDA762338
AF195F1F261D5F10AE0E733ECB98BA2F81F7B456A75D862C69D623CBDC50BE99
E3D1ED35ED4AEBD6CE39723F459AD508863C020FEE61980A17D41BBE0A54E120
1EB69BE8C1198663596A3678F11BB8F28D7BF5F713AAF61866B6C172EAD9D25F
02289C719F2C121A09DE6D8E47001FA41002DE821E739567F5D45F5C65D2A0D2
65D011472F8AA705C7BC3E0580BF4E2E007EA98AEAF9AFD2F25FB20B08EE26E2
E8F94A39F6240409F44E85FFAC9A46A2EA23A5A5F8BB0DBE50A7A1A9A6034D32
B777C38B88F25D392E59AFEC304C13CB1407C70B7DEC884B5B7AC97440CC198A
A949ABBCBABD1442C67E1828CE582D77F616A49BA12BD006CD541F707ED05737
FEDED2D912D3C1083AA726C21C396EC6A36EB6B9219F2BE7EF62D09E487B3FD0
9748121C531F7CD54DD98622C4C945E5B04ED2FD66D20873BB42C5391627B074
7DF90B81ECC6AA0743F25247978CC09C28C4F878E29A5070E4023BCE95FE0ACC
CC01D0EE219FA8344E8F6D7D43475678DEC28FCA370A417D2192DD293B13E507
F20AEEC2B825BD73A6678698858CC4B3DFA40DC96536735CFBBC2CEB5CA6A396
C8D387BCB4D6031DD45563921409C33F3BFFE220D7A255AD2B422AC9DDFE7A13
AFFAE4D39E8F285A4877D1FD83FF8BB9BAAD29C4C4DC7CEEB139D4CC253859B7
24221EBA02F074C94543E32176588F50D0ABB9B0AB449E21E01377E96A487B39
E45385A6A12DE9067750598BD5A12DEE276612012DC4226B14B0B289C9C8EB08
49B5FBCA42865EE9ADECA117AF8B2BE60A2F825F51B3FF32DE769AF8A9F0708D
7BA0C614E8B1CAFB429B6407B3BDB582FC49D3794A0BA6932824A1FE44429731
5F1C8D2DEE93EFEE11C29B1C020196EEC515336D8FD1FBD73FA4F2B454066970
1657B1EF286BB2DE8E5ACBBF40C992F9A22255B3D842E68346CF43C568E1DC7E
389CB45E387321424D7950AD8834BA43A128309ACFB55FA8D30C0A4E13A06862
0BA93765AD3744B7F0502EFE5D457D7CA7E988968EF34E2AEF0D1C5C1252BA48
E4AFEBD828CD1DCB34738801458A8E4F9970DFDDF7973961E756ED7DAD161736
0F774F441671DB46F07E28F57A1EC5FAFA529685CC5D419FA0ADDF1030B3F21F
AF395EF405CFC8FDD30B79B80CFC1708602680E9985C38474971F5A24FD0C415
CAF1F98938F27BB1C805F0617DFB86783BE6F3AE6265DE523D2781E94B042D16
36DCBA12FAC0BA0B2CAB48F31FE24BCC5B032D3987DE21BE7E191D578E9E5644
81BC38C95513F04C8F1BB7DD82DA3909DC75CD509C0A5EF8226E0EAC4BAD4D64
FD2D6BD98699B1B147B03FB3235F4F16F367D9EF10EEEF02093C40B9C6905716
E43CBE3B6814EC7DC6358B72A2DBDB3A22F65E1B9CDDD4A639ED9FF36E021E07
F5C45A74E31E755CD1F75CD2432D2E369537D3D738D643624E43CB52A1675A2A
2501397B11A902B26BFA87E328EF3578521D4EE45BF11C9E7E56C076EC42F6A6
2EA65F60BB702FC122804D410420CB4A1195C76A6AD7E44D4E0B3A1A6C53FC6B
15B9FD882B347D47083C93E891FFE9A9FBA9F331A24401ADA372D1DF54999C22
8E7E7F3F8DCB07512ECB44D71092A3CFC7C91EA6FD0B83E9091476F178B0912B
E065E87305F8C81EBF0ADEA9D19360DEA9297C2EBDFF02BC92B7230769DF58F2
254E3B19C1CE2AC3E17E2DA671A7FA88A19938A72A95AD88922B141A5BCFA898
7CFD39CA40BE4E783D0FF5B28F89F2AF17EBB3993B5FAD8315779A3B99F178B7
FE19C5ADFC99F33D9F5E3084787308269D476B42C57BADB61B4801B413FE611B
A2A2DC9D43FBD5D530F666CBBC5F0E500666E874B31C31E23F0309C5D17C6649
9FA67A729168EC1A93397BB304A4BB7E845F76765516CD4342B75925A975E812
5CAEEB26B16A7EF94A14001E666394DB10336DEA5A0CA8DFEA463A8BE92A0870
9096536D2CD6C435FB43F70A8718374952FF45F9B1B9FBD6A08E4051693D9333
646AC3FBA5C06F4AF013AC19A24E2F07B2B51251B448E71953B5E5384F7B787D
92C09DFA3E7DAAE5E3EF6388284B6A322EF3C309B525CC3E237A761EF74A35E6
37AFE9FE29A87C2D3E974D2A607CA70C3900359010AD5247F75C53F63C852D75
B2FFFE7D84EFDF3FF4E49EC6B70D1D3ED3359FF87AB1A68CDA04AED3BBBBAAA8
426A09773BFAA38F718B161657214EFA899277D966008605D5FEBFDBA1B4C096
6B927A1371CF0C345A25CF7BBE4BC2C3059B52E57376C61D0A3D04EF48FED4D2
EE891EE3BB18736D5327410B09F5F25601E573D0517C04FBB3484ABCBF23EF36
61161A239B2E5019C05419D83CDA99EDAA0D93EC65A4BFB69ECA6E0AD6E4EF48
4F76771BDA2637CD0E990C3A4C264FA19EF3966226E73C5F1C86416FB383F523
76F30F3A51640CE8F0B4B686581AFA4EC15721FDC8D4DD740744CFAB5B95A433
408A0BC28D10684B41854B5263FA20CE4C6FBA7F378E2E66B63A105B6F6C4093
789029514B58BF370396F4A1066A3F5B9B68EA6A173B2C8F984E5FB6318FDBB5
54C342F72144992462EB195E5FB218CCB9C90952EF91F8FD1EE7B0B8B356CEB4
0DB0259218EBDC49607A6F81B2200BC675C840B60B487AA9A778FCD2353A610F
7CE95DD3BF87779268EA758FE00BDD5A5E362479D4505CE2A2855F17FD4B2D9D
C03E6120850D3A7B4935CA52B3AD7B61EFAB062B8C093091B61FBFFA4803A461
4064704E372FE794A9EA8481B224C13CB2EF6050F31367EA8FF566533564FB44
CF0F1CD6375EBB1E0A056732324F70C6A3D486D1FADFF6945834A2AFE5301231
194E661D1DA6F94628174B86B3C4D111890DA3721EEE5097051C637CD103A81A
726C77C6B23BD7F6445136BBCC26328B542E4A8F528143B3B6792ABB1D2DEA48
FC528E4C30A3289E3220FC1C35AA4FF54DE070081A5EA40EE89E42CA503E52D7
A2FCF968BF1AF79C68EB8E84EA00CB38875A262E149EF29EADD7E01866594CAD
F1818F32BEE7795CCEA2A59A1117
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR5
%!PS-AdobeFont-1.0: CMR5 003.002
%%Title: CMR5
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR5.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR5 known{/CMR5 findfont dup/UniqueID known{dup
/UniqueID get 5000788 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR5 def
/FontBBox {-10 -250 1304 750 }readonly def
/UniqueID 5000788 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR5.) readonly def
/FullName (CMR5) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DAE26BF1F487876AD1
16184ABCA7446A2352AB37C36E9C9BB67CEE105C612D36566FB459D6ACFB1DC3
7A59448A06EBA21F8824266BDD0ACF9E356251A897A920C39F1AB236EE06C039
8C4C0AE55FCED464E19AFAF548D454FCF73F6087102630AEA03E622AF2596870
1353925801642BBDC11F09963F4ADF037671B73D48CD9C209DB4D5BE7F4CB381
94887E8365D25C45D1F87EFFAE360104ABD3235E4D2F4BA163408448E814D49A
3E7C171B8F1275D49937C3255326069007B302844EBF2BC1990DDFF1A34C2770
A262ACCE874DA1E0002188D6A713C79D5E9226178EED27D6F4E4DC24ED2669B2
3873F42A48E5C1365AAFC83FAD8B849E5D7E52BFBB01B281005A9EBEB4EA2F35
B691489305BCFE5516DEFBA092F66ABCA2D739A9277AC69F74F786045E63B0F8
66D545B12B0581AEB579D5E1E2A412DB8F66276E05F131EC3B9F543E11F40FBA
8CC47071DB04A5D38A707C9F825527521CA1FC412FB54DBD72E912BA4EC8F747
306A65040671237C8FE84AB6D6157D96EDE13B3A8FBF7140F1A9DA55B666953B
C7FA638353F278D07066AB8DDF0DFFC832F7025DF1AF9F894D52E9FA95EBBEF5
9D6B97768FEC26E845B87C6ACF5395C75B894B5A1F50B248BA33943C5AD6CC2A
8D9AC65C08B3206E7F5E5913CD0D54C9FF741A4D92B628F85E43F52082397891
66E6F922E0BFA2E45F0072217011D4B8EB40893F151E4E2E92ECE5862C467D4E
3833311B08340AE1C0C692095AFB739E9B9A4F56BFA0F0B2AB8455A7470C22C2
0C2EC285026195CB73EE2A713ABBDE4945AFEB92630BF852DD4845FB4C9A8C8A
0C8C971F29440B4A786108D0DA1AEFDBE03568B6B2F3953B4D07A5B7D6FF564F
6CC0D8C08CA459D556154A45133BD7AF70C7D8F474DE66E64FA112D776478A83
B282EA4E941CE2FD6D8F7B68D129CE0093AAF7C1D345C3D65BE74EE9391C9B89
2D4D31764F1BA81CB12CE46D15A6BF941C9F0EACB4A2DECC8F2F6B85FFF490D4
ED7BB6C7CDED10F03F68282B2ED20809F95840A904020C98299E17C46243D9EF
05B5B8173BB2E8CBAB3AA9B8207A9EFE6366C91A7674DBCD9FAF12A2EF4B5117
5687F3DF1244F5439ECD8AB0587F492E990DD7B516C664AFAB76CE71084FDD70
E7F5A38BD46926615659488D3548C5066C06E443016DD40275CFF3105573117E
369C8C34E48BEE832D93F0ADA7674FC6F5A64183DB2B70FF166E02E044B7063A
41D2F396A9158A26D3953F12982ACD1D7593F474DB98ECFD00EAF57FAAF17C7E
C1E4775B37FCBCD6DB1B5BC6209162E57E21A6AF427043562D9854B430A0BAED
20D31A9AC334C87875E53E0B956D33111955459DCD98D54E1BCC61BA58CDB41E
03009979C0A541FA9F69B55D3F3750515E5F268A7B55254B8A44CA732F2B9242
18F34C029665B31EB68331B0147607645983340D15E322E3D0532E6376D40FA2
1041F7988EB9F56D83946757786737D8BB4A996EA7933E79BE61B4EA1115AA4C
286B7AAFE80AB7C619329AD5FA772A6279FE85FA6B623138FAE1C6AE3FA45AB0
95D8020D2EE2979E8A87D7E7C5DA2E6B701FEB4923F401F892D83A4928807152
96CB664018AF24E829E582FA8B4F0E07387BAC53530AB3AADF74404EB2F311E6
C6A70F960FA962E52A30CCC6E15097F9B7BF011626DAD38EDF78745B60C0818B
34663683577D897B1B6AEB240F3A2AA29F1F1800FE0A5C205B35C6A6438259FF
CCEC942AD2D7C3CFE01F956B795C0349DD5380D0140D3BB54FD99EEE5171DAF5
4FA360A740589A1F8AB4FBC275CC06FF89A8350F4982F87E747501A74B7C81A0
0F40FBA9D2875022DC3D417FD623D89FB6A0C0F1B930ACC2117C6CE94AAE5844
0B5C9DAD579B7DDB73F2B26B05E1AAE30AF69937722E8360987AC0BDBE305B5B
DDBEF5A6C03BE1743C518E6B7B58A85AC961B8755BF37688E37DE0632BBE06E0
53FAFAFBE52EAF276365A0484A1A682C9B9486CDCFBFBC4F4A1D6BF71378F014
56DDF9B15A5AE0276827ACBD9AB04D685F52A62BD3DA33BDC2A262B756B58C26
4F3B552841B81CA60C951F400551166C72B8D357D8122685FE97D14AC22AB6FD
2EE4CC429D580AD7B8D12A9C601FEE5D25C98BCBCF96C87FCFBF28419BEEFFA8
7A4FC7B6E5FD377EBD5E743C3FDBB7554A1FB9663B648B15C4119CA952A8263B
278E5845AB929942E1A0FC4CC413F36134884EAF3704865C1478D6988880EB54
C5C5C1BDD7CB0548342B9C7B6F94DD6341C5744A9A3C4A866F620BB70575EABD
AAA42E3B6E23AA029080B299294AF2E9388520367E964A3A66A84628D75F1BEB
C7A58C92EF7335F30BD0A26D072A986635318E0473CE3CD5B4F1BBFF6E781938
EE4E3C11AC27A1BE0C3B55586A4565E4B967ED2EE4674121A46DA1C32C5D278A
44BEB43CCA246B730D337918AAA394728814C726DA4F9C40AC6EE877365976EE
A53276A818CF25E995CAA34039339C55DDDE74B3C11742786C1E9FA5C432EAC4
E184F35560EA31D687D005843B02F9252C2A16F9E4C31C18D0D45B7D5F63D589
3C1FE3D33C912B9CD79DBCCF9FD8223FDC18D55762F0DB2DB241625B91DB17F6
206120D6300D317E82F3DDE6D2D0825547C08BE7E6FF8FB54D4DFEF2F4E475F7
F3838B4ADBE49F8C41409D85085DB5A030858AAEEA5AB9CD2D1172C8D0EE31AE
507D8048E123AEAB05979C872ADBA4833D36626166BBB2A2CEF2F3E641DB429C
AB15C97D7180E8E6AC0D871E20678516ABAA4D616B51C132F41E5661858B8C2C
ECEE4A65A2B0FF310DFB531B213196D2E2AB015963246F44E22E603E741BBFF0
16DBFC284906983A8C15278A36F5379F46C152304DADC8D90C313961E5F58180
EEEC5A15131E5C48AD27F80B77EB0370482D528735FBA3E6C0548BB66CC222F7
CCE87194F565B9EF7F32E656E6964501CE32462FFA6B87087EBAF45D454CFBA9
ACA808C4397F3852158F1C0AE44772253ABEF6D278F726A03A9CBC4330EC80D0
117F9131C5974445B81093C1D6E093C669CD285D1BFE864D53E5F140D40BE4CC
2689C42C50C4137DE564374B2130609785D8F519E0083DD24A44DE24A68E4071
4A2122AB8AB9649660D1C96DC58F37F88623528078BFDA3BA3085D527ED4CAF6
25BA663A61AEC4938CA78C49623FE0EED33DA2D08CC78F86A807E791BC9CFCFE
8FBFA55EC2259B64C31F6EBC45D2DF9B47EE09AA54011D40F55B6F12F49F2266
EDDB09D44C521EC9568CA7E62283C483A436417B65B4FCBC7EA32AC6EB4E7B30
080816F29F06D6B09E5506D3149C5D758BA85D820357D4955B0C1FFB383E10DA
4D61774D3B23C84A339C7348ECA6078080FF8B436B2261091DBBDC02583E366A
622ED9F95D2A85BDBA48DCE8BE45628A4ADFD5A48869800D9B54F530F43A8F53
F765F5D5C44A9399FC1B9CEFA343966118DD11CB102423D46BA0F096795AF0D1
BA33F089AD80A104DE7FDF8A6E7D935E6713963FE3C57CC673BCDD423DF3DCE0
C57EADCA2AE4DBB30166C2CF1F7113DF96A27D4BBB23ABECC5A4795F1290F4F5
5293B5870F892C9A32C776AAD06D78D0514F047373879CFC5AF9D624DCE5BC8F
7CEA5055064050AAB2F24A1C792B2609FFDADC6AB8D0F31A12403CF3436A1E1E
E24BA5F92587925C4D6795A3FB163245FBF054BB1B0FF01FD63DBF7C192D0F31
33A17E7764699B669A3ACCF7C36849EEDA395E7F55174023A79904A766F21D58
3DDB7B4C2808DE7FFB8717658084E70DBE046A13BBF1F9BB97B3AB527D68DE8E
924DE65486C3B883CD65A95901B0DE57821CB6C6AE37644E02F5CB0163617113
C91D2C649A0BA10736F3709BD504F22DA8831A09BD0B2D6790A498F2FBC2F642
7845796E606ECAB2356238AAF40323D71B236CBD1E3E43BD5443F304D52F3CC0
28DB5D33A732695AA09C0449C53C656704D820217AC035DF45F59AE445946481
E5BFBE5D4EC0A42B5662FBEB9FF6ECFFB5E8517312F56C91A01824E401E7203E
258C3BA073C1B2532B8312F5AE29E37F5EA71C52F171593B1370D4ED5D7341CD
567390ED5B75D612D5873BAC518587525A591164E8D36D2BD89F792BD9EE6ACE
99FB72B23CB2445F12B8A6A0876EE711166C9E34897D370174C17A2495D58B4D
3DA19DBB1AF2E09C72FA42AA3D8047D05AC4F6A27F3EBF32ADD2AD2FF26EAE05
A9AB34C9287EE00E8EC29C6603036D365AE08E00D1C7C410EA2551696954EC92
92080C8FA5C9E67698BD7B895C82ED29391E015F83E0DA145384E223319CBA74
19494F070649E03CE9FF905619C6CB40F562DA49C1EDD2CA221DD7D3DAFA8279
AB50DE1C059CB8D5C9FA8137DA711B9D30F236526AA389B2F79F3D5BA6ED9534
8852BF4448DC1B72E361A6A2B94CF865BC9C3401D995529E2A36DE755EE001FE
C67B184AE8241D08AF88D626BD2D8AA12EE791AC4253D4761A21917C7F2F5AEC
795CD14B33F59DD7080C7654DEFFFA669F50FB1AC8C0F2E60201673A78D03DFD
DE0CB142F0F616C4051772BDB837CB4CE87A0C8D61E0FC7F90517EA0F5F6B1B4
D57143CC0AE7CA9521C1536962867D6318DF1C9CE6476CEB9ADB21655D379B26
7A0EAEC2D28430C14D38764C493BA4C06EF4BE6780131F2FEC066C4866E0B258
51C48BEF77011A0B5763CB3D69A50BDD50C2D7EFBBF18BF42544B1AC196377FB
4826BACB3C16DB805D38C34F9E92AA9AB5F9A9B317D8BF32AF8A758017269914
DE3B748625D319E571187E1BFED9CCBE11ABC18C0C6123D24D2C7303DE998847
0F6F644748ED225135CC3B957EDE8567AF3EE47F5E942EA9293F7BF74260D1D5
A6F5E56705E12C8379DED158E66DF54349F0504EF584C6D05C44CDD8B720809E
3DC36FF60BF55FDF1CA8C968E68346CF43C568E0B3175CB7D55343DE21CF9730
C9DF918360036E4204CD024A67E764D3CC7677E5B229C1B909ECD1B9042134BB
DD8E47FDBF63F212D401A797EF60011F52EAAFB88E3E70E007BF19826E40FE4A
73B57D52FAB33A737B1341381EB2ED307E0B83B45D6911E04BE623DA82DD6BDB
2DA096827E6A498A8D503668E45926525789D43D1BD5B896B487C0CE04FC9DAA
CD9078D0C8A0639E27F0DCD82C552A7FABA42BFFEAD66CEBBD4D2E4B4A1B40A7
B6FD119D37FA26C14C29A70E2EDB3253A1AAAC2650009CA3B97B430B1A05F2C6
F2120C8981683D0976BC42FE98AB2D33014B983CE1E2F1E1AC4A524249C3CF13
4B36652F96FCBD3660ACFC2F9778B729AFE2CE1BCF473DC5A846FCC3ACBE455E
2C37853F5204085ABF3BEE50C28D99312A078CE2F6F4C1D2D3017F0E5BB5B614
102BE45CAF8108407EA970111B5A97CA8C7A64C70D52D28D2EDCD27879B1003A
6D168CD054E87C063744CDE097887CDF268D89180AF8BB4F170804AE5DA779B2
1941775FC32FA189038D6050EC0E400BBED364E0CCD8DA571E902DAD812988E2
4BF761F472EBEB411388FEB6F901777D090400F695D823C758882CC008D889E1
02678FF81B252C33C89E3B04157C889D4F0F86D432F0B3DD7811BCF01C2FC041
0D4B1DD9CB6F2433F9B34E7E8ED8BB1FA4F9F7CEB5354A8305C372C2EDEAFE5B
4AE23CEF34AC457961B15CEA084E31B3741CF2EC317DF484736EDD688737C380
6D868BDC02D1E63A52D21C8E7C1FD1BD8717612FC247293CC91E0EEA08D5F805
70217761CFCA0F9C13996DE0F045F28DB67378221722416236E4DC00194E9C45
A3839F4BB53E226919C2CD13A44E4F67334454DB7E133B2D308925CC2E275293
F81AFEC4DCF49230F22EFA19F48CAB7E09FA727CC2E11E5A5CCF57307506D5E7
6DD1D26BFD3DF97E73C2DC019B0A75B9D6386469ACF1A00A5AAB55F99BA1DE49
9883DC4FB0E8AD9421B105E050519976705F7BC889FB3B6C2921D2E198FEA294
E192DB3738EBEBF6485075728A0E16ABD53A25BB0795A21B65AFB6ABD7EAA3F7
1DAE1BA012651B4BA0ABE02F3CCCEB9E92979F17A3338A376C57A1F13E3C90C7
9DE8ADE421329A57369CCC2BA622840B79C0DF098EA42B810C596DE85F51EB9E
C8F6FAA598C73F359FD7CB1D337E3B083833389846A99C87885A7537D35772DC
A7EE51E8EEECF4E4F38AA04C3F4C447080386A41F1461599739D73C58CD02D65
0899177F7D707AE793B4C915C590AFD6E6810700BC0C3D14B67E03129A4215E4
953B88C7A9FF1AF4B6DA293E1DF2EF5667D408AD3F2DFDBA46EF95A1D8E1CA29
FBFA01A4B965D1101CA6C0C2BF4670E94776753FF52C2751AE41872EBE3DC66D
EE58BFD3BF8F543802C7614F64E7A9CC4474DAB5F4C59F8085FD523C91F0FCE2
0CAEE1B9613064F9C9CE9556C841563A43660E0E71EE761F0448C41589AD0312
958167F62FB166655800150F9E81A558949071F01BB11C9ACFB2ACA4F332D2AC
598AD5ABD3D5EB17AFA97456C0DE4D3D872750F548C357FF34919A3EDCFF9658
F3DBF53BB3D0A204E84702DF6FCF5022E753CA92323ABEDC81071ED44C306A7B
C10D15F905672783BFCDF28D97EE156E293046C09595159C735A266ADAACB887
7026C404951C27B88CC3EC1A6F15F016D55AE6B5DD739914DBD6861098977064
762AE2867697967117DD7E3CDFC24D046F1D83856D49224191CBAE95C2E7B9DA
4DC5ACB06B9F637312C1378941EF6B9D966E84DA69E66C43EDC0564D4A9B201E
5CCD830900AC4D4EEDBBA4AD14ACBADA20179AE138CF35D6F830801D7F9D1F3A
B48B6C2EA3B77E7EE42DC0A26C7FDA6EB64DF4136FC3AE0FADAB84CD30392E44
49DD3F7DFAB77AC2E3A8D16C9BC002AA17A9C1E9166A21648AE2AD7F9DB250DD
2F3F480844C93059796E89238B0DD470329C2AEC9F178B83D421063BCC18CC35
2C562DAE86EBE6529D19066FAB70C8E73B260C71924B0B3DD652AE37DC2ADCD7
A3E3E1936FDD259A3F32D669B6CD82D73436212D6CCBE436578139AE07BA8C5F
07A8D2158C8F21007FC0B96E2B3588466A6FAB4F70363E994AC4FDC2CAB3A478
9C98DE079DF219648A6219EC7040A8FA91BE9D9451BEA89906677866F50B6FAB
E8FC00E826B115CD65FAF738492A919CCB657186BA12260C2816C44A632285CC
25CA1D797DB0D901EECA675FFA1182AD6D48A8A96402D07A288CCC02F8A7CE0A
39084DA379C5FD08743060851BD02A3C9CC298FFA0AEAC5F5E1928C46A6EBB42
7D2AF9D32BD0117A8CD7B453C66FF39163092568B5A26F210900D466EA5CE01F
14BC1F57BB0D3186BEE9BA1A5648887CAC06E23057199A31781C4C37B1A07C32
B8AE8A40F5C481C8D2854AE5C2C3C746C4A2B48189A373A438F512642A55F2B2
3CCD2D5A06A1859B50C1C3352B1B5B56E652F00EE79060842A33A8CBD002E777
3CF6C051A6D5F02E35480569E9D00493C494F9FB977E665AAE4468E6DBBCC950
33876A21B75095CF391E09E814D7A03EAA19BA0D7A560610CC36EC3A9CA39CD1
4A359FBC14B07975379B68949C9FC2DFAF037C56C13802A7F66C809549EF2FC5
25EF3F517F06F90EEDFA6F8A3E5F1F3531A5415F3191B8FA7B0F28950A20A1E0
6E354480D09729E3A2D6796DB81825DADFA4580FDC7813B7989B18020C3AB1A2
87E948890C25563CB26A068ABABD94F3D42213218F2ACBB2F5B317311474B222
BE1844548554B37C97284940D5B7AF9E4CBD884D4994A76CC1ABF8E6AB0676A4
0A8130F05B0ABAC088FE4F9FB536924A55451C8772B29087B8E5E649DA3B449B
4A055214DF69D0218549440B3665E4D20C5A8660B3E0C3ABBA3426E7820E1A94
5D273A6ACB263765D340333B5CD8D1282FD5B0F5BD4D40DA12A5CF44075F33F9
BCC0B4C20EADE30D0ABB3562C00540200F10840375F983A6164552AE036D3093
A5356EDCF93C32DA144B43073308EBC75FCF69553358597EBA96149759D262DF
CD5671D9666C708D60B7AF987EEBB36F9EF27997C256BBEA31710649E75089FF
284FE9441A327129E5F6E9364CBB2CA20F417FCD6682C95A0A69C760A1C7C80B
9FECACB06D839936A5C38FF717026025787349524C635FD7B729B457251C7129
689AABC24AE22C90AA37B13791AB7AAFF29D6DBC991842EA880FCCEB0BB04266
44308F00754CC0CBA9CC0A97E74FE428BC04B2A7A92847B0D1CD9FB54DC33514
F4C499697AB9EEEE6AF1AE86A443C8678D7B97D26AF3345016DB96B378D70C76
171BF4C398670CACDE8725D9E0110842B6514DF91A51B54006A327D5C8EF3B8D
9CB65D21F3AABB8C0875D3274A09BB492CBD3103EA18C598A758D1859CB780AF
10E80B3F16E6DE90992BD7AED054E12407CCE01C4E738C4A70B48545C4AE0CE7
38CE458533BB509DA48925CA08904DA3B781A278B512E16241DDC32705E4042E
C8F1E4C5DA658892E92B60
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSAM10
%!PS-AdobeFont-1.0: MSAM10 003.002
%%Title: MSAM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSAM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSAM10 known{/MSAM10 findfont dup/UniqueID known{dup
/UniqueID get 5031981 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSAM10 def
/FontBBox {8 -463 1331 1003 }readonly def
/UniqueID 5031981 def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSAM10.) readonly def
/FullName (MSAM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 4 /squaresolid put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE2340939CE40EE9186A0DCC3D3
D661293EC5BB40766B73935EB54125526067D631E1E3D1D6569AB3546CB257C3
4C12CA4AE98C3F99898F1448AC0B416B8E5C3EEF3D74B5FD6A1BE3C23B160E78
79A9E0AC4FC82364F946003C1B2E0EF3CEA944727E7502B65BA1331D36C159E2
1D107580F28A32E04CB876822CEF478BF4464CE4F7AE824FC786E099A1BE2A3C
7D2BFE2A748AB092AEBC2021DBFD5C40E912BC5856F3EF8615147350E75D2BF9
E428D7948E2128053FDB1F90CA9C7D6581E25A6645879F50577FE7F0B32B873F
13F97C524E19F1CFE3883C0DE1DF80FB61111978B0C2D028A99A712D3DC27D8F
C83C4EC335F0DB9912DD2AF009FAA56C5BD5855BA92851629EF6C47E6AC303A6
1A231558746ED8A78C76E476ED71246A2E15C51F465AB21A22ACACB03014B06F
201876D3C6F49E2D38D8C4FE8011F7BB148FC3227E0BFA51C0F9AAD64F0C6095
77B3D875476B666F9FB9A46763C49272FC504CC0E817A1533409D293D6D62CC8
DFDA666BC9DC70C4510BFB0DD2BC94B33D457EACFD754761B696163DB4C547B5
FF8994977A7C9910AF486487CE0320FA1E705BAF4B14FB937229D80F58D01E6E
9D9716EA3EDA84840B5D6BDE216A25814ABC4DE4C6818266C33CD4C3DA4F23BF
DAE6ABDC6D64E7EC7DE918DDB0B05D8413D32D99D15FE112C1D393D21806E0C9
7CE0F0977AA36617B8DD50937C5B0B5698947B0A71A167072FE1B3AD6F274D97
484926DF52CE7D9D2A4928A188E1F867C298E6DB475C0CBE09F0523D8BC6FE24
E1CED78178EE1E9D66A906B72505339E62499C0E4B6B5A2D596C4F8F4312F582
9413DC88D6EDFEAAE0C86BEE44CBDDD79BC02C844B80324B1FE3512E73C213BF
ECD22E7E13F98AB56E4D693B1D6045045E2F01DCC2AA1F70A4699B7D718A743F
D749133029EAD1870DF0B00EDEEDFD33642A88EB10DDF4CBBF8A7D8F7781179F
A91CF398747D52769A054CDACAEDC330FB79ECC96CF43C29515F5895D3A8C1E6
828F776844C88090405F868A872EF54467B72825B001B46F6496817A9B928BEC
ED212D4368368778F2D1B66D005F2D6E3DF4AB9B9791AF2CECCA3AE524781A41
5052FD21CB81D934F0F12CF8C8FFC656BAFBE897C5E86A21D3F42A38F7916693
ADD1DBF48F534DA16099FFCF3E3DBCB254BF49D8F72FAC2F9548477F9AFA414E
65A29F24FA16A9E0955A9A6CCC47198E6332ECD1A791F2E36E6656852179A94C
E3CF4477A9A6CF507B8184ECA5C0304FA15ABD8B0C379EAC19B9D16A630D96DB
A6DA819C2E481AE4870BCAB5963C0F9D837C97E207F7ED58B776799586B9F755
B705AC31C09C3F74AFBCDACF092B05F9E2B072C1B17EE6347523D3D5E1D404AC
636C33DD94121C3711C3D05F48E12DF8489F894E4913263176E81927BF5E3A94
99D124F64D00BCC288F03FD14F89E6352083333EC6C2044E2F81C477DD4CA9A9
55135915C27654B09BC9099FA966AD440417945879399B39C7BF20385456878F
9AAE7343912927476C2C88A445C03E3B77381F3F9A82FEECADCCF8C307144775
144279EB14E0F0443F8200C0FABD54A075EDCB83EAB07A7CAF6EAB17C6CDB239
077DC62173A54E93BE2911F4A45F72B80DD9C41B301B292EFA78D361AD74BD7D
2E94D44A2D79BB7B89708E094A21CCB28D80E0FCA707D742CC02BB81FE4B0E06
4A5E93DF0414BAC27ADDB044A0D444692973994CD028E1C62F1FFA4776554914
2D55B0F81C06A2633A4AE42AD00422A619E339F2E6F0C6FC74F70552974509A0
812F1007FD7055E9ABB8CB39F799F847993DB9593A76C388F9BC883D4A0DE2CD
BFD0F7F2A5F1C50791EB4363104B49088E6EA2C5E61EF256A9FF232357D62D78
0C876D200E4136F7B0570A3B0988F3E23443081591DDB861745B4F6F0FF7D854
8F558F995A283B346E266DB6FFB54E0761046152A864F710113B6BF12967D022
2947517E1CE2079849CF8EB01BB2B96EEC2575AAAD1AA1E019D7E72BCFDF2979
8E2A6EE0C1525389C16411E5DBD416467B9900F07223117A77E0B4C3B0D49A96
C2E3A61AF9C9B1CEB80AC6357FC0CA446FF87BA0CCCD81924F6209198BD6E1A6
9EECEF233B17CC4E9F0654024F7E857EAB409F4B9B9ADE4090F2B715443A80EA
130369A193A32A4DA3730F13E3C9E717CCC9E74611D787277B73EFCE14FCC3B8
6B11AD88F42705F65E9C747B472F379ECDCB7F8F9C3FEA64402972623EA0998F
255892C43CEFD7ED08957C495AAACDA59E9398B43788DF27F7433F72377C8F88
F54F5E3A5564244827EBF92227B94F4FE896FEC6519769AAD567E618DFF61B7D
B93EE0FFA2EA58BE1FDAA0025259789FDB31A1019661C18080567EB5C6306596
F97F039E3C9ABF9E40B4725A96F8170B49B73B68E308786FE99B0C005DE01894
7CC93C196E1F830570D51F0AD29BF27CCE45AD7D3B4332C9D50F1E9C2D04E033
1E197DB9BE1D44566F738CD26A13B8EBC8FD49E999D35F042E8A24F025414F14
D9D11ED702250F1295722F68A022196A0E38B9ADDDBA997283ABAA62898EF32B
C765387E238CA3475ED5C6EF2803CE32B5A90A8287C70386F46B84C332E8C00F
85A8CC2DE78D433A325B7862AD4D93B3EE2CABC4B688833BF263E26879AF213C
934FAFEBE8D804E2BC8433B81ED5DA99F08C2C11B93019D3D9C1C952F20C68A7
E141DEA2CB983DAC5A2B9426A98262FEB13C420EAA315C890F0B907BEA099C1A
10B0AB255AF99694C722166DCDA72FD58CFBA3328FC5EF83A52A750C5E613E74
A8572CB8B78ABDAC27B798E727E3E5AF9451416493FE3F4E95157B4ABDF3A910
64369E34A2B40176A5E0E30F472E33A41B8C7BA4CB1BFB9173783909161370AA
EA40C83C60AAE242358688CE13193C9DDC3544A959A1E6A16FCC4BFAA65A63C7
5AEF208FC201F88DD047B5E6EFBD4BB256F973269BA1B06CCFC186D48BCCB4F6
A0F512B1D6541417BB6045045CBE72B72AA2549C345B1BB466335226A0E76A10
9645C25A0FB4CD8455C7C10C0F4E7E9914D2010BA1C95C6BAE4E62C8B6A8BDB4
92281B366208ABD9C010B3660C5E150D63D6927255CF9081C0898E9B206FAB57
B306669AB87AF405C537CA7D3411DBC41C53EEFD8071C094486158E97BAFE90E
BA29BEB83BA60776D33BF9CAF9C7FEB66D4B93DA27E499B006D243FF59CB33F6
AFC65D10B74CC522BF4AD45E3451B395AD5029B148A1C9B710D5CF02B65F9189
0822C0A33C4D07F2DEFDD5B4F6E063891F0456F1BCA4540F9DCD3B0F9F39696A
52336AFCF0A33A029AEEB448CE120B9D939487EC8274AD4E1D5F5AF4C14EC910
680C5E312735DFA3A5B1835370A76DFA63A05379021A64EE55E25AD5218398A3
6DD66D1B474A2E7C6E236E0E4A9BD0E4F7AD1807C6478225C58327BFE1822000
26713D01CAD6951F456504D79867D523605ECD78F2D5DA05994BA4812BF65E7E
34ACB732150ECB3D212D03387C71677F617D76A9A42C708C89D61614F280A5FB
0BFA84A17CF9DF333C9E13DEE82A5ADC9D2E588338D247889ECFB090CC63CF9B
8D92B1CB784B65BE80E3B57998F9ABEE702E07BC127D272C67B0A97734E405C1
FAA87E6B9DDB8ECAD2B9DCD56D687DFF71BDF29BBDA0A0812695F81C5EBB83F8
0A810D6560F28D7CA1F89A11F253E1B3B4EBAF511454E4BF2C46A333BC186558
8D73374455A32DE993526063AE70EAA647454ECC62BFC5A53357F2955E4A8A02
E20AA64AB6511CEFC5A32874C8F2BC2424C6B85BAE80191216A22D93BF2813EA
18A1A961543D7C58C4F4B263D76AD6C61270F2A77468B3E59BA9D861E5AA6CE1
B7A9C4C2A13E80C4052283DF3529210B3F6E90C2EFF205866865E7E96F34513B
05A45939728619E02FF1410C0D220F6D615718893E7370A0B91675BCF681B2D9
56112D9D37ECB819017472DCD38FE4724834869F82985A69E33BF862DB420DEB
AA1CDF83099114501C037873E86E0D33FC954E12D40038FBDC78E7159B738516
A078AA386D9424B8D4913B7848D8439D2ACAFB7C81C9AB192D77F316D299D11B
24F67141B1E0FDB564B70FE68070BE6BC00F22C11A1291BA6401C722487BFE19
D7869DA874C9059677DBEF958B7AA06EB924A17B3EFE9014493EA1FA8C4C67B2
B5DC483ACFAAE88F2DFF9FAAA7825854671ECFD522540C9F6C3817C11D3B63CA
8ECF710EAC4F27506B67B972633D0821BD15F4511F305A5677F2919DEBF7DE88
4F60E36360A7856B6B6A8A866832534279AF45B4232877F45C92ABDFE0910F7C
F86825A1B6012FF93479BDC9639C01CF2C783356B33127AEC7039D40529EE54A
756D8B7524E069DA60A38AFE592B8B228ABE22B7BC9CD9B23277FBB567B1377C
77E21AE6F55ADF4F8864F4260562F0384165444385D5A8C5966EBF191900B898
85240634EBE8A5DA382E0EE3583B1B5D102B6EBFAD60AB9C335919EFBAA55A6E
36CE4887299E395EB5766080FC0B6F93B1247F28842FB817084C9C090616AA72
25F4ED6996D36CD9675009C615BA26BD4904F3130991023E4116A7E6BCB26C10
7106241DE039BA7F26E137040BAF587AE03A476526F025C70F16EF23474C0EEB
6E27D8562C7C733CF470EA198494A505A8F871E8EBA31D4F0D9F0AEB9D0EF63B
738B582F7BD73DEFD5D83707BBC7854B6FC7FA6E2636F0B68C4858B247F70C4D
F602764B9465975E9AF28C2046EAD743CC350E747D6524B9CD7F325946B9287B
F7D46E4342A71B0409B2BF5FA4D340DD549F6A5B05D2784EC5A248560F4E214B
C5304217B3AF8451C190FE1C312527746E45DE39D8D43CBEED9A19FFE143CA61
3B65344C26E189D790A0211556C609F107C78F55CA120F3449A697D1305DAD2C
D3EAB88E2CBDC022A4E036E232237C1C16ECFA62D6CF8EA3B6610B58C75EEEE9
676201206E4A8B8C7CF5EF409F2C0544DAAC926497B1FBCDEA07DF042ED870D3
9D74709FDB8CD2CAC4726655371EDDAE78A5D9E0811ED4DCE8C23DAE1ED44D06
F4DF09BD9A00C1DE178E766E05CD3CA64301C592BC01EA4F6D1973586547B170
A3338C60FA1148DC5F3F7B7DB5EAC870239BD137CC85AD54380379F5C30B0754
D0A0FD8DDDC7CE725B58F37DE7DF077916C912F2808D0E4CA32808D0439A148E
3B1E18B9C88C8B4DF23FF5C53B2881D7C23D1C239F08137BBD8FEA326E7CD1BC
C80027A40463BD58758F4402D3DCDFED46C2E3C405E1B1E8DD0062E1272AB5C8
91953946FBB4B9EB0A74D0F7F4FAAD798571EEDBF0CD4C92A6916909297F27B7
5135990685B849E8244D2EE73D5C7BEF1D3042CA8353210EB4293A2B2F1BCCEA
7FF2AA91F52D343BFBF5E91F2381AE5B6803C46605D471B7BD122153E87D872D
EBF37727370BB683A194C4C4DE13F54AECB116BEB3E0750E10AF272E0C015641
0F9264A21BA79821B29D8CB78746C314E6893765AB9BB7BB1730D758F687E615
D2AEED695331E99591AFA000AA540ABD36ACA911E91E20912AB819A80D5183A4
CB88E08E0E9911612639C05043942AC8EA0072E9CB7154C415C0FB37DFE3F01E
638D5052C87A8359DD979C44B730F06019191C5BED15E6E79FAF312ED8EB0B02
3E712A0F6C89A6F7C122A561F133FB4D2A98EE09B11ADEA53702C92C210334E6
8D5F3E1BCC0E81CE178ED749B00FF4089C1AC412DC5F6696C9D8B9D2EB24B35C
3C1F8F63EA348A95622AF76CDD5C4DFE06A8C7534A55FAF937777E864C98062C
CEAA3ECB5E518C75FEAA240910646EF782303BF34FBF8162C8650D5A6F0EADB4
FAD9AED7994003F74E09A3CFD8900A33160CD1D49AA1C7BB5E42A2B0AB5A9D20
A5AEE02435D84A2622ED87454A2867E112A9AC72653A7865E2DDB9C236384228
94DE4A396FA798ED1F370AE5247E0E703D4D4225ACC1EF410631555D7DBC814F
F84353CD407284FBEA1D371CA578165B888D771ABEF7C3ADE33DF899E55FB0C6
A99A97A474739D07FF17DDBA267EC6C0A6154094D6E7354FEEF9723F23CA6E86
D8467D66FC5DEA43D700C9712BCDBCB15EDB628F4B840A76D761CC213376A0CF
3F137F399AF2F349C1D7FC9EE28CE88F416F1069D6907C3E917AECDD245A1BBF
4375A03755C145042232F87BD3F097746E41A70FAE7761AB26D1FDBABBFB56FE
D8C80879557D3849CBFC7D25D84D137ADBB5FD4F6FEF8CC9D54824EC85DDF553
FC992F823952FC7591D08F035BDAFC9317F144C94E828F09E29A02F0D6639DF5
08D32902957CF0BE88694AA031FA8BCA9E73D48A60FBEF090FEFF955FEF964DA
F53A9B58D2732F986DD20814A1C11963E4FF24011CB93D616CF4A6DEA6ACC5B5
354626A142D85BFC4F03DBC32F26253B97414C9CFDF3C3EBDD68FE0B7908AF88
1961CDBB6A94155524361C0B95E42AF0DC1542752B2129938BCD020CA19D64E1
0EB5DE254B638D700EF4BA620D924D65E95A329AC2657D2CCA597A4FEF7F1347
05419CFB59A93578682671B9A2910BBAF099C877288C19A4EBEBCB3C64415248
C00D0295332B6388384F27779F0B0A2D05A9F3BBCB3C1F587EAE05AE4D2C5319
478E8D848ED75B368FF45ED8B2D572AAE502493D2A3660F8400E1AAF9B27AB35
99FA7E39E250E91A67101F20FAE8BFC13A07FD2F7FD3A45002C02AD891458739
10D221602C35139358B1F23E0DDEADDF0AC07B1689EE95DB17A3B6888D9BEB65
C7A9BA2CD903B2F8348489A57F5A7191D1627A2C76A856C9E178B17A40293F98
E9CACD819DBAFBD0FFEC6EF5BAA6D8AFF764786470A5B02860DA35A5B3A2BBE7
45E6E4882CCF3A980B0C35F6C170D7269F7263FBBBF4051A51437A218711AA18
A408F16E7C9FD7D61AC4E859A91CA4B18D5BC3B0F6EF0287298B75C11FBD9FA4
1BF203A988C21BC2C550839E432350ECB4471F8553F7B4E42128DCA6B1239DAF
6C9D4A8B8AB7FA8AB013EC3060F02D6DB609F59E0BDE4D05891811A41F7E47EE
7166D88DDCFF5BFE1AB84D873C38009A857DB436100CACD8DEB98548A2FD3770
B44D6194717757468A9C84238E5B83AD19921E31485ACC168C25DA73D95767E2
27EDA7FBEC3FA6C8C58DED3649994CC965F81327D8547181CE06A73A6D696552
6A6EB8009B1C40A46791E8DD0AD66E125F61CA6810BB4B74E266703F9DE0E322
41D93C72DF010EE7DF3B7AF46CAAA9463E68D5C8B792D3197C4EED52CD16D5E4
493C1F8944901537C4E6AC73E5D6621CBD177B50CFD7F86E786D6E6EC176F6C1
3D7E9346C2859A185793A764E960F236A1798FF5E3A740ADDEF422FDA93FE058
53A9989A0A7252337DDCE50B6A040E49421069081644A51C80D37BF73CB30254
BC1D8A551F71FFE93F068070448334307A87526A86A3A7D53AEABC3506E78DD1
849BFF403701D6059D6CC2CCFCBAC8BEBF440B8D3152C63908C6882E56EAAF71
2984E440F40B5F355DAC74EB02738BCB094E40A55A48A26BA9970D09EF48EDB9
C0C6BA95EC2A5E98325594AC418DFF541515964C77B8D2C8E953703063F17F36
D042EFFB97936DA27FC3601DDD601709B71382EC67BB58C8D07254A6BBF7FFF4
EADB3B735D143E4654A5F06ECF67F0305606CD0619022A5DE90E2E58DD79C8E6
05F0CC17918DF52A858BC442594669827B3F6435993DDAF84BAB036E6146853B
EE469B081200810521522008CC7E3A396A8EE1FB14C976112B9DE60C281DC528
69148DBAC1EA4812B8F9C8854B7FC03D43F47C6F522C225B67573891636ABDE2
3319EA7DCFD8E88682C130E0EF728A401986C50D3DEF377CAEF216A5A0DEB8ED
C0BB83249CF414967A020E5B8B0F4C985C1D242C1D066E165BF330F4D3A0A807
DA8C72ECC5BE7BD4241CB4AF9E7DBE74C7DAB52EF2E3DC5AC531F8B5061C0CBC
620D7CCAA0E331EB7AB0AF62C71B8B7879B21FDC78BAB3C944BCDCD6A65B67F3
692DAEF4DEF28B5FC78F9B26E111583C71D31F7D8FF558416B79718F7C53E34C
5057880AB32CF15942D364A4E16C5BF382CC68A690BF42586C7D5DF306BD03A5
AB4E8AC7F70BCD0AEE3C4CCE6E1793589423B942DBBCFF3CD0CCA2ECFB00F9F0
98AE65B317C6D0B0C4604B614685B523515EC158884E26A6EE6CFA5EEA25F6D5
47FD647E044206E1567BD589C6D37033A588A77C2963BBB0094D7548BD0A4FEB
6C2A94DCC5EDA5EE5281207597AEC31B363640D8A3D1AF3BF4DF95EA544F4F78
48B1397CF782683EE76A15AE0A5B86A60C9E5C077DA4594E9CD62CB3BB1AE0D0
ADC2B18C7B8C10FEBCB0901B7344D343AC5B13DDDF62E0D2C62329A19C700457
4F1D3AEF396AC0DE08E400F3DBA346E0D9D8A235F8278E0B7CA284D2D531A139
484D8E124CE3A67BFB77BFB9FDCE085732E3ABD6AF50450AA98A1CD755B1B15F
D6898D56A1A04CBA8CA9F6EFF55C304AE62A71EA684359261D379C99518D766E
D931DC2594192696E87FE03408E9B2D9063FBD8466562C6DEA47CB3C10123321
DA0CC671D35D8B57758689C8B9176D49054F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/UniqueID 5031982 def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 42 /notsubseteql put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA853
B843CABA76BDE9582090299F423519EE3AF8F83AE7F7828B314B6E36E9127419
F274E9FBF5622C5E48D7E9565826BE29C911612FD17FFF0DF5C4CFAF099524F3
62A1886858F28F08D31AC2F5F386D64B425BA17916CF75EDBF62B7B5BE82F91F
378FC68FD76F0A5EDF31BA9D30CB4ECEF6EE4F8770F4589BFF9B98EF66FD657E
1E194E5056F040C99604A8CBEF831E495AE4729EF0253CE3714931846369270F
F0B11C226BEF445F92CF7DFD59E59B4CA9FCBBFF917BD0B7B2E1818D489EB427
98BA149ADB67B7827BF231823723C9789489F0D02FB7D539528900264611F3A2
63F895A9394AC48E64DA0D7E571CD8248693216EFFBBFA86536B22585157E5A7
DFA25BDC016DAC82256F51E34250CE303B4BCE41CC22122795A5B63D6C475AB8
3A71C9D01DD08AB48D325EF2631BB3728F512D1AA4A45EDA6139482F8F2113E6
9739FE03E3EB7B40E49C35CABEE2B4091D2CC00FA2DC221F4D0C58DBD3F68F56
1A7300CEF0F8296A98C852BFA573E07486AA22CB33520F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY6
%!PS-AdobeFont-1.0: CMSY6 003.002
%%Title: CMSY6
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY6.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY6 known{/CMSY6 findfont dup/UniqueID known{dup
/UniqueID get 5096647 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY6 def
/FontBBox {-4 -948 1329 786 }readonly def
/UniqueID 5096647 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY6.) readonly def
/FullName (CMSY6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 3 /asteriskmath put
dup 50 /element put
dup 56 /universal put
dup 84 /T put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D6AE353EAB9DBA0D
4335868937E3A2D0F9C8A4FBEAE138AE56EF84665582DDEF7B546714518D224A
F91D19409EC600924626D79F58E272E3657E631C06412F9D42732B6AE0A93D81
E2B13A81C76CC37FCA6DB35A1C6A572EFFEC7E1581C57B1D22EAE9C407771F40
71D002A06A6AC249FCB7605C902A76EB298B05E39D543A63332A91B8A1ACE05B
F902540FEC1024680B8D5857E4931D00781747C87ADCC45430B5462EA480BE50
D07C5C9EA0D8D6447324434CF0D637BB13037B6E1C48F191C52CF2B9511690B5
405280D5C825BD376EF12429837CD44BEA223DC8E199D8F85856C0FD551471CA
B30481FAE99B71FAA56B639F549F449F2CA6F5450AADEAD4C09595A7A8530D12
B23E012978225E112D23BD1D48DB097994A9D5EC707216D2BF5DF8B69E66ADBF
DBDA4737737F51EB7A38A4207BB46456A8117067748659D654B1D14849F14920
E57462ECFF602A181700A346C1E95131C6F1C66132915FFD999FD4105AFFE7D6
7DA46DFCC4FE53265B14D7326F5A44A3E97902CCB106AE99ED6434AA9EEE7E6F
60B8034EF80DF885FC63DFACB0AD1C00BE56F79B1AD41B065C59A35073B450F3
7E6BC7B90C9D9337F9636943ED701398E6886947E126F1E12D74C5E4B5CF06EA
E60F9B121B9B15E6752B127CCB9C26017A84BE6DD918AFE46DBF27BC06E66AD9
830BF2D6CA9E24A0199DD3E732405F3210C97C9BD21545B5E4DC10E17C1A2C71
851ED2B272055831A6F95864137C218E555B054BE3616820FE671E5BC08E7A48
D683ACDB91E05F469C0C8919D71027E179F4911E878F8D13F999C63C4EC2C21D
ADE1A11979B539C4C5746AA157A4EB4A7A153BC5D966197A7FF6A2DA3FDB161A
EF43C2D906C617868617E72163D5B0BC29C36A60867C120A02E08264231FD46C
1D3B62622A05129188D818E2AE83FB2770DF1D466CA38A49D15F9056BB7AB8BF
D7DEB2E3B3A8157B59D138787B21CE3B3A456E230CFEC1374AC66B7DBBE788FD
5182DA23264093CEF60D5BB0073AEDB68A61ECF1C69669244A1FA0CBA44DB83F
352AEE6012082B8A3FD62F4497B1BE0E4FF77FF94BF221212D63BC1E35B9758F
2D7F8FA002751DC0380AB954331E9AABA6C122F8F3D7E69CE8A6B359184F0531
6B158ACF34C64C32F4671D430820B36C9A9397E9C877D734B17C3BBD8A88CE2B
9F96D7AC5B8D55415E942D6C05392D03DAE53449F8FBE2225C91F228704BE9A1
ECC568FB2E90C73F2F7AFA62859C35F0FB26756DE719BEA5A3EB81A6481507F1
813CD1680EBFCF612FD9D3AA4B90688521446FABD5C54CAFE7B879F24B54449D
2B30738B137B5E212B34BC5384BC2216A5D13F761D6E13A043DB2AABC0276705
5C80CA394A8179D60DCA4651CE8B0A477165FF48A31BEC6B7C0852C9D72E11BE
FEC5E4B984DFDE90218C105999E070FC83F1716D13389B5EEAE3F26C82FE9A7D
3C67A98027D15DAD791348A21DD922C71145D287C7EA83B225377744BBB0082C
22FD44E1B0DF60956DB9C4790F4E2F81C477DD4CA9F4BBB4287914EBBB4F6E36
976C9E573496A2311E5C7677FBC4BB755B8BF925F291DE0442FBB8921402A487
ECF23EC556C3FD66158727B10B74C778FA91EC16629F6E949624D265FA6FDF1F
772E965A2C30C80AEEDC4A1867AE3D6D116BCE0F96D1A0C5138F294CC7C2AD72
8BE152B314E26422FA2DDDFA89A054CEFC6607D932FACB035FC9FD9959C4A468
CAC0F4DD41DFB83297EFFE36C352CA0A6B1485BF8433522BBBCCF9C73FB7334D
1CFC92348F91C4D0EAD90B22BAC6B27D21CDF5AE65C056BDE3B30424F76C8EFE
D7CDBC854B13EAEE0485CC348AC52F5345B7545B4FFC60B6E7CEF8D32354B233
8DF503A03F5201EC012AA67157F4A47B902D269A060A5B8E10A37CA7CAAFD417
1A13EED9533BD4A6E8845D7D236CB254D40930C273EA4372E0B13912B2CE9261
275D51D202D461FD69AE352E95F72D61683267D4951BB602A0BACEAFF9516F3A
C30EFFF3ACC08AD374A730287B148FE8E168089D239E1084E0F7D83CB9815031
5428874FA4640E1C216514AA16C74BD2B9A95EFD7B6B0C575A5D5B3AD1086CE7
E8EEE33490CDCF2E3FBAEDC984FE53D033987580E75E74E455E44496E186349A
DE4B5125F69BF79936565986B3D91E6A25CE6E1C4527FE22580A39805A91BF6B
90EFC8AD31FBA71FCC90EA04875B5A7ED05BA2FFD1C04774E1ECE84B4105ABBA
798C339FB61ABF75C6FD3F24BC775A7FDBDD87BACCB9A86B4D928917CA62C0B8
56343CAE0051A1172E7F234001A5FAA947CAF382FBF23E57F1144425713423E4
4FC1AE1D096D10D6FECAA6A9186B0D519F51D06CC976A65A37E9219492E6218A
FE9F99700C0D0D18BC48632268DA0F0CC24BE660E30645E7F63B0AD49CCA26EA
CEDE4DED685DBD38F5C4BB6AD6CDFEBED1B14A456C27C448C91CBF6337FB3632
7B9A565874F9849FC5E22C5A0437AF29E2B7FA405CF6B7AFEF66AE7449E89746
66ED2D4C15A36C45C0F64E6F185B808FC788984C230B4BA63204B38C309F2DE2
2937A92C184077F5252C9D6171EC6378273C32B61CF65E4DC124B321A4049294
BB6CDD064D4E07605DA5FFB7B3B0A55A09D26C8624F03D8C197885BFF0A20B77
257637447F628A4A642F6F92019F9ECA5B2DBCEDA63C05E5258C9DF131EDD1B2
B4B04E7A5441035163BC2769B79C89ECFDF071E3517C59A45C9E97800724E1F5
FDF504E2798FA9074A37B210B1C24DCC0B78263E2297ECA31D5C258BDD92D2DD
8C53DD3B3BC3835E5AF52311EF0AACD6DCD159C45743B1AE7EE5A0111DCC9193
441FB81F945D219DFF26BF50D80606DD3392CE941242CBAEA45077FBE6AD78E3
0DF4FA54CC33CAC27A337FF307F14E60D1FA48FB8368E307441D6811676CFD38
094A558CBF0B92503014BB169E345C27C74543CDA9E8134F85AA0DCE45EAF612
1AB1D86FFB5E13CBDE8E0F68B19E30D0D9F5F0A3EF2A84AEE4D7F1F63A045297
3F5C3080F313B32066E0C209C2708636C33A6531F1A483F3AFDFEA62305EF41E
C55594660133146B24184070B87C22EE5B80D66C409076D733245FD100E936D4
E844D8A15CF45C0CD6AB04F3B5FCB0BC7B1517BAF21CED4D6CCC3F19D21BABC5
FFA9768D77A41BC3F5C4595D868F2FCA88D6E41558FA5A70FB562E4EB22651A3
886F0ED1B46BFFF297A28ED67BAA28A1302BC866AA7A73418BADE0870872CE0A
305A5E46BE0CF6B5794539B8509F1E2DB4E40124D72201589BC4B55ABA2F5C40
E167175C7F7378203C949B8967E8CCC40F44A2D1D555A4273733874265542C0A
3C47FF7144C4DB276320150FD5CF453A505BD3BC1E98738A1CBE175574037D47
8EF9F80622F57DF4DAB8FB13004ED1DBBFB4664F8D7ADCCBD529B22235740EB1
216799B2D8CEC7CC4D16D8273B6AEEA427D480AA6E3C463F46763864856713DB
05307CE674714CAC8351410627B8D1087155F3788E744158F3428A767CDC9769
CFBE28A30D635D7C4FC44E43E7F13128A867389FD66CFAE939AE2745055BE71A
AA7A7817E24D38773771C77328F4A755C872AA977C062A3BF7EBCD6DEBC7746E
70346293A661684D3988A5D0B29860E6789FA8911E0C0749ADCB9A6B053B0E31
3D490B9A2982CFC167001648FDF96D040BEFDB75A4EB90E2974927BF38F10E78
17FFB9DF2A65CF56C1F63544662CEA0E88A5141F990DF6B5DA79CEB5B4744083
C4697EB37422BF120332AB934D292CE8A3624E2C8FE6862C2211254558459BAB
D8F1D8C76C604098701163703FAED0BB298396C86A0427106C007A7CDBB0AC8E
35F39B240F8D9D43C1BCECAB622C02E721A323383973B61DB81115E3552E4260
9F252F18E01C1EA2B0A1DED4BA50A5822D10AC7ABD664C460A4022BA910804E2
2094A3AE0F2AE375FB22CBD35CE9C2542C240A79BC6A79F1135E58985837E1CC
1E5D6666BC5D61FE6EF590316F9D1E80C42B9A7B6106D8B7F575447AACBB2660
2C96D7F024FFE3292611E82CFE62D95646B92CEF6F03EEFCB3F6950A22B0997E
52C38B55B77C2EE7A4D047F27ADEC6BF0BC639589FD0D1E0A47C948AB5BADA43
9846CBB5B1CE53E96622B59133303AA0F559A481E50382A2A38C98C1A56D9AD1
1668FDDBB1FE8068DCE68E5DA13C2D9918D1FEC7F69A6DDD3A29E31A57B7BDDA
EAC616202162DCC7B9DC52AF821A9C1D2D7F860A2F294904A55499432C7098CA
BF79B1B0A1527B99A4C57673AF54297BA822AF200FFBDEC475158AD6ECB55F87
555012ACFBDD0EA527CB5793CA7CACE2FD956F30D7A8AC7F6A98979BE4BD744F
BB84A87668E3DE62A814B92D3139981200D5ADA86C5D733CF5107DF6CB5C999F
F6F63ABEBC9694F0F67EC632BA8C58E715D92FD6BDD056F29753BCC3E54B0A7E
63EC33F7A29740EF0D8351B5897B126FB6C33E9A33CC83DAB91691690B8B9598
FD3F397FAD45555CF5FB9CD80879A0CAC1CD8E8D536F05134B21FA4065452DE4
BC8F63C82A3C34A01D00F4BB254F2AD7F6171EFFF6D7BE1213C9456AB383C568
BEC17694C545B98E8AD734D0522FEC92EB3182DDDAC54740AD352E7645D08B4D
CB4DA9B381D36C920C77869619855B4CF730E590B0405CD25884D6DB4D49F1E3
D79EC4D0489514359CABED492BD751104091A661A510F268EC681F818780F304
D960A15E583F354DD574767B860C57CC9CCA991E710576C626EA909C6677057A
C409AEE846B4D5C0535F849F33470FA395CCF5C05CBB9A1FB62CF656F7A2AA42
34730F786153A9856C337112F6A555A70EFA76404E2B88DA2DB91E8A2BC5A05C
CC339DCA364A87738B60497CB790EF16875CBC506695DC7D70C6ACCDB2A00555
3877A013482D55281C83BB630CB3EFB0657E5490176CF23420B97265B22B4CFE
1DF9E0B294F064F5160540EF3A452641C82E347A96514E4063A7FF16832736A8
6F21F6881E269CA09FB66DF37CAE7FF46D6B9AE42B6396EBF9A7A06453A81EBD
808B047421B0F88F62B3FF217542FBDA872D03A476FBC7C0D658C03AF70ABB40
03F1A3027E0FE186A22AD461835877ECF843C0E8B8340306092FBC5E91783A48
E010EBD29F114BC273BDC53D2C94275F8956A74561813AA6C2D896CB3F6E13E3
30F6C230C00917A40EC6F4689B65BEE32F5722BB1D1147585AB3B3D2D5EB8273
CBE30D1C6CA1BCC4BEA9B87A014E7ED3CE53D13ACC8D426267CD3BFB8497E1DC
C51CEB14F9CFB4D4BC9D6EA5A49DC3871DE59C89F855F079299F45D363F78634
493829329E3F370D117DEAA18E7A6989C515667C2229779B9A5494DF0B4109E7
71D79D379FA7B408A4675FA3DE17ED0ED632F9A443527CDA8E960411AD4070EE
173ABBFAF9101BE92BE59707F98419503A85AC58B949E8595D66D7B13B8FD4EF
11B28FCB5955C5F147BD7FA141AE0CA2ABCB1CAF82FE22D3281852205087CF45
549F4D5B47F52AF50E8F6FA0AEC0F95FD0B1EBDCF965BC8A924CE0F4598AC546
C15CEE4EDE7E6DD0E5FEC3A531B944CEA406DBEE21C4CF3384A79D0D5CD51BD8
AA5B8B1FC987AEB57E86D3C6FDFADF998A6D6043449FA5B88BB2DCBF2945A513
AD7ECD01B39BE46A577437E1774C3FEA176287C51ACCA15909E987B5AC2CA664
709AA5605EA89A8DCE6B4014CFA781E822E8B05F377BD0187D5EAA0585A98E2D
6726C471578295D824D1FBFE89F04A67F1A360D799CDF92C1218F29C24DE22CB
C6B625D044404C22C89C433715BD77D0BF171030BA84E292B7A81E2FD99D4E67
BA702C2EFA11D4461D833E74E97C9E295C6D170DB6BD73D615D03E678B0296C0
F8BF99321767684127625942B4C3241BD0608460C81D97FA658BC179917B5065
74A4D1F729CEB1D51C82F9C90F0C712917AC482D413ED7CAAFD545508652DACC
1A03842E354F734C5FCEC8C7BEA4C69B066DBC83BFAA473D0A632DA2CEDF20B7
6C7C83B4AE2AF7E05AA2C081BB6870AE38848F3870DD62C7D56EF1CCDD4BA3B0
32C61ABE629BBC464BBAB06AA0202772C16D82427ABAB4830ACEA267B0109A81
BA5D832731D1E9C9F0552BEF7A9B7AAA73760C6A09B910009BA9D93F1A56298B
A43A32D43CAA3988643DE373FF47C176CE92D7931601F0034E6CC303876498AC
026BB32D2F656A3541815697CBA2B6D527B69816161B2E13171E073D7CD85435
3D32708391F63D592B71D98805CD19978C2BAF780CB124372EEA0A3DAB537683
DC74F9E9EF98843F170FB086AEFD526CB81A7CC88046C52E1E56EB40F6F5C75A
FE9D5ADE49E82078858072F68BCD02487EBAF4E3F7F309628C1FDCD4B01F7D00
E1AE0A7CD3455953FFC77EEDCC5B5ECB1FA583064EC17132A3C12C0153C4B87D
AA57FF73AD33C22C81C545F0593DC7EF438FF7A5F76A04E52848E00CF2C8CB06
F295B1CD3BDB1D9E4EDD765D3753EA8DB76DAACAD75CEAC866FC4CA41501200F
F12998E8DA573786AA9A7232287A6D19A12536026BA4423EF0B6D81D38BDCD9D
2BEF15BCF32824F8EE802B461F52BD926A5BEB2E6CB31AF83E98E849D4339FFF
95419941B12D2F3B76CCD34D6B78B91BDFA5DB4D4879501DF3E514A5EA8F1713
E96330C5B4F1B7BA42D42F05E229FC303AE00E954A81F9BD43016F5930A0C490
6C753157E4355F6ED3C5D1963779EB27402522B5E9D459206B3A06E594DF198B
785F96B96E13045594EB42EF4A8BFE0DFCB4C5A2DA9594431FBE72A5AE18991A
36FEB5FD9E8B238B3A095939B6ECAF5644BCE7DFFD8EA3E723F66B305F142B71
B26F34E0538E4B58C4B5984883C6B08F3D1F596B56578FFB0EDFFE3F95E3B6AB
63CEFA183A5A49F07F0F7559994F56D7305139D06AC8DF9466E715D90AECB1E2
C35E3CD3F387579B3C9CA6F5BD741A7A5D7B63FC0130AF374124DC8C6AFA4FAC
E40BD5923FE889E87126FB22C1AC4FFBD351F884D70803BBE1BD0D40D3CDA0DA
F6984C373D3174358BC41C8DD4A215283ECCBC24F345FE65E316F24940198A6C
3B5483129706AEB60D6C0CCE0DF9C130593475C72A92662A323EA5B689E5AD0F
C949536875C37AA2517281A36A1C1D5650AC96E0CC00C03266E279B54232A1E6
E6697196A4270E1DC794D8DBDF0690372AE19121B85FFD357E965228C66BBE6B
D2E55533F7A1BF30B2EABBAC98CE35C619556CF9F0A522E8EFE4BE3EC61FDFE4
E364608963C928AA8B302B1636DE15C83711C8FA060C5BBB1BCB8E02215A4F4D
560DBC4A235F6F07EFD20ABAFEDE0795AA3932556D6AE3F6EB8FD0C1C509FAA2
55CCC2703661C9F48233B429F020E01C1F3B8090D331C3B925DD5D1CF9D19F95
6B192C593225B5186109D3E6636E87BA6F24EFEACD1F06A29DB1D1F4DE0D0253
87641AA4A1113755D0DDA6EE4234CD9AF550DF63A46FC6F698E623BBF6F05278
858904B415033C1A33B7770D99247815E2A8F1216EB42EF9742EEB4E1D90EC3E
F2C0661DFDD996CE1FD66F946B9D4FFADF86861CF8EDCD570CB400D181697747
83F38B92B1803874C24AF99C66E5F966B0E72B725FFBC6172341596D8AE51C3C
4676A65E4D32F499FB1ED170554DA7AFD79DE5953988516A8B2B123FA207BC49
D80645DFB16A79549BD5E41606D80424DBFD6F5BA1DF0EC271C596EBB4FD0B84
DC5EEC45C3FF598241368442A3FB06B460C7D46678069011FFAA3072402D4DD2
3DA6139A548FA99A68AC61134087071ED8B4A37A0A8A1A3B48A2A8CCAA351D75
1828BA7DD5B7758A43F98F4D449ECB58B20B26C40B35AC82623961CD892B5DE3
777908625E1A91DDE62DEBB2EE5EA3CAD7E089F421DF613D976660D547CCB02B
3C6CCF2F577C568ED74466961DF3B0939277731760E6CA8A496B50489AFDF559
CE627D143D52526323CAC273BFD754EFD5F279C96E7AC2F5EACC1C542DE2231C
3D0ACE7755A7AFEBB374E4807E8038FA1EAE518A7376807A32DE5FD55344F9F1
3342D6A1C34CABD7222EB2729EAB1941237687CB5CB2DCAB2D3E81731B26E397
704536C5FA39A4AC96298241BD976D01773218CBC7E73827519EB19DC4DC5B54
B4D3F1C441CD6688C404F6BDCAB1B0E56BD97D7AD07639E358720E2F61BC41F8
859A3A3ABBC189CDCECD66EA5953ED9347A599F6E305BD511D4F363FA36EC6BF
49CEF2458F987C017C0DB1BF27A6F70801FB6AC15F46BC393874AE9316E1EBEF
D3D4566C41E5635E353E6B08ADE7F4A66517B75ABEEE309594E5221085C60D95
DFA6B1D26E11A5C95622357D12B65ACA22605F360E3AE00E7907B842D4CB079D
B9E5C55C263333D7AECE4A31ED63312FCA1BDCB890F2F8FD374E3B04F2FAA7D5
EC55584C9B2EBFF56A589615651515A3D1A19E22D1038EE1066D03B94BA8813C
4E50B4ED4C895F1FB9B61AF146BFD5BAA50E77ED3009440AE9518DF67FA53A89
9573038FB52A41C95F3B5EFFBA5C6DC12CA2DB0F833329DE81E22546CAE17ED3
9CE3664F59C123C4394EA84AEB1D6EB39A405280B3212E1E0DE4DEF7E91E27C9
362E12B0D6A91977F1738083B5A305EC33C719A374D4A8DC8AF3743F85790F0E
9E1991A1BE3C960F5AB5FFA07DA291754C8DB10C1A0661279BCE4F47C3FDE870
9F6E2F9422270A0AB023998A638121B6317FB8E40ED7FF889A252641A33F1359
AF538069E361366F248224C1B5AA963096C30B7F629E90FC1667376EE2F21C6F
D8CC3EE7A0D8EADA928FBAE0FFF413F17DAABB200B700593A892BAAA0D79B9B0
5772EC77A931A1DE07D137FCE18F7CB1A78211086349641C43EA355EECE8B2E4
4DD1581C8BFE49B3158AD0382A4356118C3C5A89502C81797AF1FF0C4EB4B0B2
BA2B13E4A2BA75B3CF407A202838275B12524523B693B4888D346FD3D618A80D
73203C54B08541DD167B54B29E5E52CB811842259F32BC4BDD5399A9BFCF095D
573A3CCE0FECE49FE859A13616816BC26C0AD16157B877E057662AB696A5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMEX9
%!PS-AdobeFont-1.0: CMEX9 003.002
%%Title: CMEX9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMEX9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMEX9 known{/CMEX9 findfont dup/UniqueID known{dup
/UniqueID get 5092765 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMEX9 def
/FontBBox {-25 -2958 1495 772 }readonly def
/UniqueID 5092765 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMEX9.) readonly def
/FullName (CMEX9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /parenleftbig put
dup 1 /parenrightbig put
dup 88 /summationdisplay put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB69434BD2F5E56C8FF46EC332DB0
76984939803A4D2E4F7065326BC983B6DC4219499435B304C1AE83C8A14C4085
131D1CB66E24EF3AECA881EB3CAFBD7CC6E70F905DF2FF583BF11F2E5A674AF9
11C625E782E1503243619CCD6B1222599F709EC8E7657B1053FEE4D83E29B295
494CE2255E9D555D71DACD865C95E1A3ACC8D19A468D316142A854F452DE76EC
B45C35C92BCCA844FD24BF5D5A43BED6C829FAC12BEC9C216414BA7783DB2747
0B114774A6508C9D617C38A99EB5DCC26758D9D55A563F8240143878C5C49256
AD489CE0A01657DE0051A2E845EFA4EB61043270B4A8E5E0676E90149CAB94D5
AAA65B9198DF0EC8439A194D5CC14FB65FF3BC2D67707BAA7B23484DA100F9DA
DB0610AF3AD273DB18B69EC987D6D9A0BF699BBBEA34A0AF1AE401429DA0C85B
AE89B1AB922D16074CE2208BA2C3F88AE84F7BD87F4F23EE64789BB62814BFD3
946734BDD1586BBD77254160BDA350FCC2C30B7F6B6AE44B928191DD564693B1
29D840BF729843DA6A707EA375F7541D398527AA15017B3B625000ADAE91FCD5
B749C01D15B2A8C60E3E4D97D5C454974BFB02CC706122041709F96659FA31D7
C27D613F0B45ED42ECEA2090986FD97A3AD736C9310B7FBBB8B6FDF7052B9941
A609E7F7EBC0B652B6FAC06337ACC5A1D1260454F16F5EC6C967D5B7402600FB
546B55667896C188F50BDDA2E195EC55C0A7B48D6A025845BCBB4B567BB19946
69191A766E28660A8DC4A15C8022948207DDE6E7451DDDED8376E52631E4F0D6
B947E227F99E03605688E5E28EDFF6E8033E25FBE8F6A86D5A26B2937FF48C14
BD9AC06DEB234FD1669C8F3EE9B8BF3E17139E08C308A3BB0ED0AAC81291D8E4
2C1134A3314BCC0D93D513E3EC0D91C45C05ACD19994AB285B896334721B8C42
420BF74A5CFE7CBD243D3DDB163362132A0285C280277B4C60D9BFC3D40944A3
943697BD335C27F16ED870DABE54DDDA4BB5C3868DA4CC1C0DDCB50826700ED9
9DF963A75151C5BCDEEDCAF2576E0E21288D194E540B422BC03B62CFD137E732
D0660236BEA09052A292CDC218E48181DEE1BEC6548C828AF0FBCCF10BDCD4F8
B71AAD95C5CF688815B9BF856FCDBBF769FD395885A88F4A13FC7B9440BDE7D1
90324ECFF82AD30375BF19834A5CDCE28FFEC0FEFE45ABF372FA5C6F03D972C7
AB3BC52C7E1C1783D6F80155B3A5BD54F19E6B3FF7155A6DD083438D0EA7AE2F
F5BD3F1C0A13438F4C42B3379D2868D688C14DF6202B5006BE89F09FEBC4EE0A
CCC50B10D3F9E56CE282FBA763D6F46CD62A860CA0744267D336833173C93951
87995BAD6E789CBABD53DBAD179F29DBFE73E9E28FB75ABC0C3014A72D9C3CE0
A80412E418D69741397C867907C795A20D45306EDCF032DA7A4A248C8FFA0189
2552A041D06D13826860886B2FFC1361EEADCD6BE3710CD640E881B2811E81A7
45BE7BF836AFDBC85E5AE36274D19BB1A12083A35BC231D6C1D98F8470ECDF8D
8AFF93893D5C0557152DB776FA755663D4E1A7659DD7D7206305378297175CE0
444B24650996FFAAEF4A23052AA4E77553F992DF1D6819C195B0B962F5571346
7CC036EE1D527B68965DC2EED66818821AD02BDB5A27B3129C43986C3928E391
BA170B1B161818BB2E2529024B721839DB116A174DCE89F92FAF4DC83033434F
C96D97A6202D48E7FADD753825159E50FD051D7D268C5807225D52D161569EE7
F94A99E78DB76DF5860227F5B6ECB1FA255E162C3D2AF6D96099CF3286E96DE5
31D324EB92FBDCE0FAFC586FECDA5D9376D40C9B1A43BF1D52D3D54BA06745AB
58E755921509C3335F72DBB2366726C4CB688000C1D6BCE706A3DE168DD0D5B7
45BF139E205273B248F5C4E3844D4CD211E6208A2BBDBCD88AA8DABCE4FD0594
151AAB58FAF716298DDFFA7A97C02AC060A114FDB3A0FA6EF7B8F1CD8606BE46
8B7DAC1E72788C555BF9B5701865B263725AF314DB471239363AA8437EF51206
2181B31E56C30103126582F77EFC23CD8F37DE389C16333F6C4F78699D187746
EF94B8A9BF312AC2ECE4F23F9A7AA0487D09CBA71C11241155AFDA73BC914425
4943E10468A243ECDBC5E70A06A00529EC2DF656F21EC7522BF41EF0F8BF7D35
E0E76D6589E77900943C06AE933DBE3668099BA91C38C19E945BDDBFA4FA5C49
ECDC4F183CB9189609F753DBE5D5B1AD7FA8BB9E28E3BF72DE2C604D88F43552
ED0C3D02277BEDAB0DB5B7A9CCABC8932006E8D44300E748C149C08D41F86608
F980E68813988906B7A4C5436CA1C10E54EF608945632E82B22021193A51342F
5530D708792FCE9BEEB224D03DEA481107BAFAFEA271D16C3E8B89A481933D27
03A044FB481748F2C7CCDD0562AC53F9AC2A9423FB0C7DDDE764022EEC181FC1
1EEED102ED0F29A61D17004FACE1A1CBDB8994E2AC2F88DA74B173C45362EBBA
597EA55D327886FCAB9221CE187D9589BB795BAA03F931CBF86DE3E8668CE8E0
F8FD3B098CFE2ABA2099BFF8DA83E54E9996D2DC42E7D9416DC2D7FCBA3A0DDC
B8CF9B37F7EB7AAAA6AD85297B042900688BEDB470E6E38CE0929AD5176A6C7F
059174C1123F3AFB6FE77E4CBA0394C9A305FBC8FC817BFA6F97D530C77AFBEA
29CA42B9551906D7187398AFDABD2EE9B06243E95BB467EC8E0D895474C9C455
1CEE93868A6412C4BEFF0BD0272BA95DDCC0369AF8160EC2FE1C60F5E535D25F
B0632C01BF40867E507E7BDD03BCC3BC21337FA3B974244E5D4591437FDFB185
78F0176F5DEA5803EAE72E013AA7FFE07C40EB971DD7937DFE111BBC33F4F8D4
5504AA54C414D94A9FA908B7B5356B913CA1AC0E71BD21E3CE550226FC5ED00A
86C05BAB4571AF93066C4F4612CC3C51BEA3F241EAE68A79284DB837F5B1904E
B642AA64A984EFB35F870912ED178F53DBAEA4A0E6E116256930BF507C01DE54
8BB70AE4F99C5639BE4F065C51C95D3C97512E6C7E2E796E90CC540B09DF02A5
CCD2694E35C075BA264B1C1C83CBDAFCA48807A008B1873273AA1028923AABF6
6660CE500CF174183CB593014D8A272EBCF3A09133603CFFEF43A6FF059BCE52
5BF232A5E067BADBAE7D90A56392F6B5922443B8A14DE64434A0018E21C1CC89
CD5D85A03022B4D80FC1C3C8740140DD6793C65319FC3E906C7CB714DB22068C
A66714E765A17F446CBDC8DBEFFD8A8E284DBAA179C9DD9BD9FD0A1DCEE171D9
D5E47F8246FBBBDEEA159301B189724C21E5318D1B73BADDEBD21FCB6E8DBCBA
4872FB568BEEFFC852FC84255B5014DB80589DC29AF1EDA5A57309FA19167514
967F9F9D5DE56CA3E66A3D937C041E83C29AC39C357667715A824ABC7A39F398
60C43B9ABB86F0CB56F9CDC50B6CADBA7938D020CDD81D1B59430611632E2368
E7483D596A272D1D99B5CDF4BA2B66C9F50625ACFF60905652C251B724FF8C68
D45C0174D12B87E95E7D480DADA7EF001F12A1B3528ADEFC3052E7CBAE406533
32CE0D5F96B7A2DF24ED4B5C6FB220E751257161A0F095017D90E95F1DCB6B5B
BF0413399B722A309C1155A0A9F2903CBB7F192149DB130BC24E5C41056FC750
1E83C4E6EE02EA45465598DCF7C4892D00F14A954A4AA6C2E616D39F09BDEA3D
27F0BABE6CC9D417A17D3EB2C138A842F1E53B30F58F05C9C77F3A0CD8B3ED6E
5F67D05F551E95D9D1133D33C9F8CF57839C998E204A1FD39F24EAA20FB6B3D4
9FF31D4D1826745AD4D3E95EEF71DD2D4E6300C42BA9316F1560E2D9A094007E
79C04433D225BFDFDEA8F2E6D42C456B722F80EF4223ABB38991344ED1C78CBD
830400A52BD0F2253E20A30122A842971BE77794DA8CC6290EAFEC44E3273E10
54A6A2AE4E8F8072FF4A37265CC0C1FC4F773190B439DC006D769F3089928C4B
DFD6A6012A39A0C8E997599EA3F4A73FF32C011819711BC6FBC4B6260A02DC29
7348188F3B7EF0BDEBB8EAFF7347A3023C478F446CE904FC25AA2DDA51D976DB
584A2ACD393B9E9C601AF9DA9629DE5C003F742AFE6D414A9BF1377D823B465C
CCCD4A7D7D108A9D639C6BBC15844D9CF1AB8B8B2260AE601E7E9F7394E212B2
693B47C8AB94612A779255A9FD9685585B0D1A7FB8B7E586197426517B122055
CF9A5207EEF696E1B881E64754AFDF0C60838783E6BD49D470FD0553649DB0FF
7B8CC86CF80D05B0701580E75D874515C4C8A7823CE924E9E7ADF1C97085A6CE
24EE43E7969701EE5D3E5F07F59492A9A946F300DD83F9FBA4B8CDE73C12C563
0691D30B57F253DB008E4595AE2D472376E88E30246642031DFF3132F971D172
19F4B6C6F87303ABE5E1B4CF1AE504D1E4B5BF5C86E232B42304840A9BB34E73
BA98A3186A01B72D98C92032180DCBD3A8715016557108B939293E23697D81C3
FEBC37582B7F7AA541C220DD5D93E555AC54D7D277AD6DE29158CE8B89E29C67
A305FD1F200B5ED02588CC1E0CCC93F9C8CED113066C401E1FCB4EDFB49C9224
0FDD03519559B710C046DF2FD60DFE4029FD9505867321D98507F0523E93739A
81A9E72430D30D0585977DD323CE222D408E4E2DDA7FBFD91A1EE1F75B530C6C
A5F6ABA3BB9B6CF94C29837A4186EA933C7BA60AEA9CF1F7F632F5F561A4CB79
CA533B32069D8A8D2DBD8089F295FB7E0631ACF087B7E777BF77EC394DEE5BE3
B69A27B122339829F3593ED92F42FF2721840133DD96450BD9DBBCF984B3383B
DF60B5C6603EA17DD5A3D0BBA5C61E1A7737E5F7719E2CAF59EEB87293BBC72C
0BE5F5A97CF28FD8CE19177B37E8C223549F926B6A979F89C06FEBFE86178B82
44F429C3C3C1F6506CED46DE0774ED12D7BF94756D38A8B1801B086CE71FBD37
8C17A639A05280033FB5A7B8770A953C0CCB14B386D336C1CAE1CAFEEECCAA1C
936164553CFA7ADC9E540353BC77C57AF8F96CD0FB7C41D5265011C86FD66BA7
993FE45C8BD006B9BF0CFCD721A80368A1C4DD30EE15EE526D6F511DD5B42A75
9C53639E5CD73845FCA08B21A3EF803C0DD4DC61598CC3446AE68FD548B9F5E3
94B6A56EF1D7BDDAED84F8213EB7DCC84E699BD985ED8E5CFF2C729C02A925D8
B7906366BD4520AF1B56A6D16D5B8D1A9B9AA1EDD2CCD597BF963F42611D48E8
D2B4F733DAF0336890511388ADFC1A8801D25944E95BB859DC761B72B9E99A53
584DB945DEB895BE8B6CD42F39D9568CCE9F89781614437088584A57EF884C63
12FBD3E7874C42F97E8E2DEE2130ABF60DD60A3D84224AF5F6BC06F1DE598843
C9016FCA08B9A343FC5638A5F849C84B248C3BD487895F602268D3E6F5EE8AFD
0016BEAFE2901B570E75465A86AA357D15EF02EE39D18AA90D784DD117CC911D
47BCCD7B6221F4A0741BDCF8BF30EBA66596F2164C5C9B9BB1E013C9F92D0E26
A8C82CE7E6EEB0870BB2A6D09BF336CC2AC4B35D740403A60C31984F11B0D4E9
8A8B95DCF96A7BC07C1FF7510EA6B709A2FAF612CDF75B71C1E471ECF2650192
4643D9FCCDB1FDEC4FD158AE04768C099C7CC1FA1F693F884E04522E179C9E63
778D704419A3EA4217A85AD8E70B6BF53F87430E511C3FBDEC1909CB52912EFC
3E645F84680F4750762BC29CDEE4D355E3F2DA698F474D585E4068CE0BA9C253
89E76F438987B389480A7CB39CBD601D9A2A5640EE3894A345548F18269D275B
D43F757712E746E7EA971055FC27159818DB2E464628E362EEA21A9C5250AD98
58DB14F128F2C1394D38F5D12417141DF703A471BE813269CDB23E3F8AAE820C
65A72B14E8663ED16AE4BB7B979545FA7A3EA413E6435E0BAC5F16EDA64F5AC4
5B3B4188BACE769342E1B5405A3D87A3E8D337E8C6BB74C0FBAE053BFBC86746
3ACA563C0B70FE33B38C5F5C0D704B90D8A081F5A21ECDFE0C800CCFE29086AC
1AFD3E9F3A37C62656182F8FA82BDC9B6D818FBC9377271CB5F4F60E2AA1422B
4A52A35434D55740380F28026DFC190C9FB8F2D60A87E9D6C2FB65E3B745EBED
917DCC5CD77BEEA69D2C9698A0A2BB3FDCA2C338B1D4FD47B06FE48A1B643DCB
AEFEE774A7636F7D29FDB77B8DFC56FB7769521857ACE49C2A46A19EE83FA941
F1F79A39384D9C0C69F3AB2E22B142FAD9F6EC6F4D9FDE36E12BD766206EDAD7
91BBC76CC9F6EBD6668BB435501709CBE1CF23C32C5C2A877B57445EB3B879D2
FC850D78BCB7E116C1155981F8B1B7225FB495E0927B42DE27F16AA7DF593762
67A6AD250B378667E70198B04B040132AEB3747E89F9F2A213AC9D008558D32A
23DA61B5AB7D18DF90C68BF29FF638630D5E69872C3B7D905182BA65661CF042
EBD958B8648F5B650425B86336F3F57ADC4C3A02CAAC08E87DB5EBF6DE8C6E40
CEE8B7138105873B76925E5F08EB999C4A24E1F3EBEFD79B17D31BC0E2D12C4C
52708F03EA1F6859B3F91B885F76E6EE97D3A813F2635231F9C93D642EBBF666
EDE5B814BC413C5B85E31DB99EC2A1D6861801C7ADA21BFE167441B26E1E2BDC
6BBE9A438B41B5E3A7006637708163CF0E95AA0C47C15DDA87893AC37C3130E4
81F084FA674E69515E490C819676C2E4FB666A4125C7677FEB8C32299E6751AE
0ED2F1CB6AEDC00E0F8D8EEDC6C735A5CB813F1DCC95BD568030E63AD7DC317C
6F61B99A39C65B93D0828817A1079F40909A01A2F11A01FA256D2C57F7A28BFF
82D4E3E4CE220F270536A6424468A2A55C567AF75363C7BBE849BA0547D3867F
34A50839A7061287272464F0C5CA47C965A265E044A366CA620896AD19EE956A
8049A30C2B93FA109424AD69F8C369379C5B6DC1C695DB16E43912308DE3E3F3
18F592F0C2559951F9B1ED4D9B66D0F691BE22D45361D74A216C4D91B72AC393
28A28481B8377D8A20E2DCBB87FEAAA6C47861D12AB22FE1DE62CC65798D5614
58AFBBDE546B5712A69F199C1D84CC20281C24246CFBE9B2DAF3A9DCDBA4E5D1
BA82CB7082E3F560522D4947B51182431BBC02250648D7D2B771FFE8B272F269
14D4A76B275B1DB785C374A227624FC944DD8E80A0316EFAC25B7CB975195EC8
B248452D9D09C2B304FB2F5D416BB6387C2B0EB06223AD089BB9BF21B6079B1F
22DFF38A0E248B9733CF97D23214A30167C32E63803515168556062D710FE258
C6E3AD9D3DCB888950940F7E91F5B5D25C03B5A25AD033C8443DA01914A20EA8
F2E6CAFA15F6E10D5645DB2EEF7D627BB5DA85DA1DD2009CBFF9D2DD159FF95C
211360B517EFA263CFD0D2368C13381D3BBF877CA98DC6ACCA103B099DC2F3FA
B7A6C1A01CEA32F205716B83CCCFD20C8ED17A3D778B36C1F28C88B7151637D8
ACA1CD904829034DE2B388CCBE8789A647604825949FAB2921C78C670DD741AE
E988968EF346E13CE3021D1A0DABB13746EE4D782630708F40346358D1E71DCE
A3889ADAED210ACA14904C4F06EF1F86542C5ABF455201647355CD7AE4106036
F1B7EE78A25934E8D077D323F961A71FA3CCCDF5A2C468B48D08BE2763346935
0AE028DB5DC32E84F6D20CDCC34837AE20D6FBE559C10A65DD5ACF4BD1AF9BD0
2D5280D6763618A3803F4777CB8D89F7F96B93EC116373B47C98A95D9C332C38
4DD9CBC706C928A414FA1FCC656C3D91023125015202411418DBAEAE0472AE86
C7CEF889388A03B9BADC361256A312AC34F3A4D860D8913EC169F62D3F454A67
DCD2AA7A2527B1C5D97A19D241E20B4613D932FB941F118FFD512FB3560FFA1E
35F8249D0A8F141A95222394672B524A6D6D924CFC4511B349AD4057B028B02B
908576B216B5E155F63D569BB7854505E08C6291443032286DC2FF0837C5BFF5
94436401691DE24F260A3FAA5DD28CC2DB8FE5D901F60BD5CEBD8083A72598FD
5D092F0DFE6DA5CC49E7C6D5C678D71648BAD7AB5702950E178CF393A176D0AB
56264BCA7504A6E66D7F9F5779EB071A12D8551768DB40D26CC4C5CC4EA2F027
4B16A80AA4D3C80AE757AACCC0C4422DE67E27076549BE801ADA61B11F5EC2A7
6E8494C0C0FCB959BAE43964CC328A25871953E354D324A48BC5E5554A73554F
F1D2C2D59F1E0B70762A90E559D72AD6D057774EB0F53CBDA3E8FCFD98A93695
6999AED6871B73B99FD113700D718E02F7F5528453A1D72A204E21292F3CD093
D6B2CD340836E50EC28163B0509DDADF15C6438F49D4AD5AC9D38AE0E3DF63DF
72644C36BEEFE5740FE90FE9A484A1109FE124FF6084B8448A83D6E719002409
C29E4B66C44E8CD46B11B91AFB9B9FCDE4E0DD1EB86EB5579E2E531467BAC0BF
36714F9EAADF14BE855E5976A16075CE1A9AFBB6A4BEE7AD60D9A92BEB5B7123
9C03778B689235F41DADE99D9601AFC999547D463B3F992A7991B2511970819F
FA8E90BCA951064DBD9A7ADC8796D597D5F4D60DB0CF2FDC7A1A25C7497E7C7A
A0A97F623B6691E24DE996357E879289D7A8D70053D76780593C266E0BE2295B
70001BEE082E1F76982BE259C6A85A6E32DD1634E8A1AC40650F2054A5ADA35B
ED6501FB315F62F0DA89E1846192D9F087DE9BEE1853ACEA6B1F5C78F47FB0ED
B8BA77
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI5
%!PS-AdobeFont-1.0: CMMI5 003.002
%%Title: CMMI5
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI5.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI5 known{/CMMI5 findfont dup/UniqueID known{dup
/UniqueID get 5087380 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI5 def
/FontBBox {37 -250 1349 750 }readonly def
/UniqueID 5087380 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI5.) readonly def
/FullName (CMMI5) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 105 /i put
dup 106 /j put
dup 109 /m put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFB9CDB3B91E19AA95
B6070999687CD39CE05B0501BC0F19F4FCE5E19BCAB1989C541A47F00C4947E1
FD7D566D95445A20A22834570ECFD7F17970BBB274C172956BD6458D36A306AA
51AA40FA84AB99AB3D1C47256A2DC605467A7F2C77963B2D31C2CD1971FF9627
23D5B9CE163D84AD3071314F555A564CC82CFB80B05E31708542DAC587837E6A
8708B83AA4527ED523623419123FB743F544A691FF62C172E6FC42F1EA9D96F2
023DE87858FDA38BF3FD9E2AAC5F05FEBD28A5DE1E97FB1B03F6D7BCF64ACBD5
20083E062A50A1B86CD28E5DA789361A19511275636562527DA0CB8A62C0CF8D
8A46EA3505E7C597428C86B3B05FFFCDA0492897AC6C6F689ECDF468F49463DC
F193DE83E34D73E48D23ED37CC1BAC6D1CF6BFF1C6A0165B21B844326B418575
18E1D044C1864B27AF65AB4A031C767FB91D2CFAA1729386A7C1621D859572FC
B604B35455D870D5A757DB7BF44D9D079F4F70FC669A96A0A1080F3297B6353C
6161E0E815C054EB6709752A8C104D177FDB4962B988270E9538E944E2FF6717
6389DBFE95B71E95EC57335EEF4F3E8E7B041690F54039D546937028BD0E8740
A9F8719E08AD387878420EBF7D8D1807B6A594E98E27BE8C6314BACE9CEC94C7
D57CB34AA7DFD06477D62C981D9D686255817A22E3F49DDD47B28FE7CEBCDA0B
30515EE8EC56542A3E3E68B990E5BE8FD65B953A0EEE2B066FEA586C75E4978F
0A0357C0C37397AA22B9EC8D9081B44C71CDE7991903DD5E071B87D081A57064
A143042086EEBF8640F36E61D8A0052C726C25F1B3CCCC6A58868E00C30D5CD2
034835FBF999CCCCE1CA0ADCE3A4EE4A36475FF6D00E1D7A8ED65CB0213FCC76
AB7DA81B9A97FEF3A51754A48C76E80198A2475DB6047623FCBF2CDC827229A5
C1DD7E79197C29CFF591EAE9547A1B21D381FA04D80E87F41C9A00A71B5424CC
D7550DFE38CC7BF2B11B810FF09DDC48046BEAF8EDE7CBF8847DA0BD5FAC93DE
09EA6AE97B193E9A31F1174C337C72F4CE28CD59ACDE969712C57701EF3C48E1
38C650DA766470DBA252DD9FA657F7738D31A864E26A89C0618EB611B36B321D
C48CD0F10C4157E210657C6CEA4BE0DA047F414C16F18B8A49E4E783164A83F5
E59040752152EC549ABC2F840ED955F90188E8F91E4F4533CB5F42478029B90D
76A996EB3D99BDF9E1B3019AFC030536449C04275DD78343702CC302461DDAE0
9CE2AAB36414A34066ED793CA7313767AA897AFFF6676E1AD5D4E3CB3C3A66B8
C5E91C170C41B7233D544D8EC3FB6E7E6EBF4E1CFBE49E3F00732256EB2495AA
9D206A20E902CFC57ECA3CD1DF324C834C75DE927C473650E4FFB299509557C5
9313ED07F343B6B4FD9F3DBDA9B3242756575AF54DEAA7C6DB9F1B9E1128989B
312A505411EE636BEBE0823610CFCC7D347185E09CC8A1A78CAF7F20C9668C91
0DAC60D889D17BFF3B7AD694F587ADCBD4E48F36DFA34FE98CB2E8A17929A683
0B66E005FAC311AAFA9814DC9CB2DE3059E0966106CFDDB18035EB255906F843
C8473B5E66E8FB4582FB72BDA4F4EE7A8F3A178F02EF1264C0692D7CBA2B1906
DC27331F86B6D88D3233FD74CA88D7041B4A2025A7024F467B64222ACAA24DBE
112C83886821994044EE5800F1F81F7F58ACEB07D15E22D38EBEA6F5C4F7896C
BA2EC301F8FD150832966A0C46EB35ED3EFD0192351AFD1FB9C394454BB1FB79
2BB86FFF5B846F412C1D28C560C00B1FE876684EC864EA6F88E7B095CBAB2B26
29EB6928961BC58633B7D5A5746996C3DAA6FCBBD2D42D59C1273B786511AF00
B60B0E04C7365E4AAC4AC20288ABDBF0A704B6F7CA2D9FC65CE4AF36A5CC463F
F97844B79F772F1E0C6F4A6DCD7AAEEF16A4ED9CAB55E692586C5C9DE8701A3B
111D15F99AD44A3F375E7C4A531020E9AD5CD77212BAF0F9516B7E865F5F5042
50524EE6502209FA562C94AEA4555F868C9FF68368EC6C2E52253E0C882132CD
DDBB83AF15DF29B2DCF516A004DB97AA9487EC2CB1B772E8C84DB1B82841CE64
D4D10FDAB7E162E079FCBB9D4670AB4D2F9128E48183A3884EB8C74DEF7F0E70
A587A300CE834A739244A237936A78D31617E4F8D298EEF7A783BC573BF464E2
9FD1F0592DBA4400AC25327DEC2F28F8EE0CBD17F012E9E15FFA98CF1F1F9265
C2E4B8F3ACEC102196B4F9F973D747979E38DA36558D6CEFF3538CA7E1427352
CFCFA0DDE3C02A42FA39CEA5DEEEC5F3F7FE7C1B1AD98D51446772195F08FBBC
D8CF46DFAF7D78A43B70F9B660406BC43FBD32374C022C3A58CB24CC43ADBD80
4E7AD6C418FE43DE31176B9128496C331085DBF6FA883042168C0FAFAA9DC403
7ABBACC2B18922C4458B49FCF241C0399E969937A2779184DEC8AD5AC3266E40
3E81D9B9AC5A06F9DE81785668B2CCB9BAA20F89120C9EB9A5F4CDADE6F67C61
C5E89C6014F4772FC208723146587687F8E14F4E63F2FC952D2F9143275F168D
B51AE0A66333D957C9D5D7253A2362C30A0219219BCBC770D9FCBAF0F7F45FBF
E85CAFD899BBC1EDDC416ACD9A7F83711BDEE28A683900E672453F4527F44816
1F284A4C488DE221333EC9249D1C70C3FA41F37924B813A3C54BE3206349D955
8FBC6AA9115F9061C9674958D40EA2426CBCA704E0AB35190F473C72086A2B2E
DCD7E6C1CA9BD9D7C0C2879E414EA6C61923A60FDDB53957680DD30951CD3B0A
6B743B1E7952601F61D4413C3A7BDA4CC1C65DA9D453704A1333512560B2EF09
C2D6D34B5AD4AFECB4A07A7DE5122ECEAF0CACFCF48E78F440071570E3F171D9
96E2C6169DDC77A3B9A61D5188428B035F8128BA909C26B448B6C95FEB52707F
AE0687C3987F75F1BF90A7F61D0C492C49457B59271BCE48F3FEE78E12D3271A
F5A91389DF2ED566990BEA84AB699B3651B2E81975620CEB607E2882F7D29ED3
A4279439107AF9AEBEE47CE85DE5CE9595A96A118ACF1EB1E935E2251E0E7F1E
D675E5D89D501C9CC98EB274B6B00B718D3EC50EFA7E170F2DEA2A2D2C8B5760
E85A1AD504660A93140BBAC19A48B456B3FA48E05776CE9DC05426520692922C
4AE3FBFBBBA2C4EA2B92663E8D316B9D5E733E0F2FA092F24AFC98B5D69063E9
8AC28D6EF97D3674C04176197050E49709D7558F7A32843A2278160DFAF9CEA3
9A0A8907B19379083365EF866E2272A9ED2B662614C57F81DDB145E9D460A572
C573296761CF028B0CC562B5C73B1933F0F78935DB0771D1780C698A874290CF
4F3D2D0C000B9A4077156A0B15F6FA23CF70586D3E341796ED8BD13BE5CE69DA
D169579BE16C6BB5D74224F380490855229FA64A762AC6BBD0D06ECC13E57E56
FCE574D51744431CBC8A369698B3F9BE35B7C1BFC59FCF08C04E3554703230F1
2ED2DC4459A256FCA63A759407CFC0B4D8950852BD11D9D631DD0B1EA09178EC
B5C85FE885F3E048355859AE345B73EA0C9FF89DDC31A7839C86CE36FB7C9C65
33257339FE7DE8F9826AAD599B41B8AF40F47BEA4399B65B7E114FAF14B9347E
4627B501AE9905A4EF4483551D8D5B5F291CCC25506E38A5DA92E127FECFAFBB
F6BE02A63DC1B5090A11CE8700402A53B9DB788ABD4910DCB8F1D0C9FAD68668
0045C5EF2F0F5205F4A4CC2DCF43479DF053E2DCBAD3AD3EE779129E7CF4DE95
34D03F05FBC72CC02C5E1BF394AC39530D93C70739799B7E2FC84D99EF7E636B
900185158DA3427B30E7EBA29CE9657D3103060934EB58A514F6CC06CA0EF378
2447416AD37A066B63F2BBD53B06BAC2C915AD28CAD86AB1725BDCBC12D0368B
0F0DB1885ADA0B4214F59DFD86F15210763091E3E5E7925A39F7C58DEA801563
198D8146DCEEB18EDE7EFEBC5610208CDF7D42B23E15AA911BDE63C0EBB78D9A
DA13B882064E1861DA9B4688A242559ABB1BA404A516A4C7357D18E4C7AC7D41
878E2D8682B032DCAC20FC72BC0D18F9783E9094F59D3A35A977CAE583B5E517
4E8A8C991E5311533BFD4FD0B9B7DC8F129705509D194DA9F18135E7B87DDADD
D06929F6D65C8AB18895447C4E542CAC2FA8DA064681418E49807CE61DB77720
4D7538917F5D113CFABEB51A0E633DA5ADE4D3A09462D2E4C11125A31C3ABCB8
D2905C09E4E91D11B92F405696A4F1996282F44F34A19748121C0E86C3DB2CF9
30073205E35702C191BCC6005822AFAE9EB440CC7739C51D391807AA5FC768E3
928AE0860D52535397395FC31BAD93D8887146E6BAC26891DF852FC5E277C3CC
45A9784386BE5A1926AF84E7F3BF380A5ADF32D73CA695FF1B78215F2D2349D2
B1C3AEB04DB8B11A611682E7F4FEDF08716A801D84D47FCBB5FD4E9AF027635A
74E8C12F7AC159840DD60728DF43615BBCDF8EF80B1D761D34ACCD561F5AA2B3
15BC21A4856032E4F9005F93F7FB3CA7613C32E67D74796C5C819457378FD94B
89E45341CC2B774F16C035079A741B0D2D54B43FDCF69DBC30DE45BB3695AEB9
CDA1C7EDEDBDEAE0079C5FF03BC855E5F5235CDD99A915CFC78373A4604E8E66
3426FE7AD92B8FA0FB0CFCD773434B5C624CF3DA9F77315F0C58D42CE9180BB5
2D2B7DA554300CD38C592CE35966B1EA45638CF064AAB4CCDB2CF3ACE7A816B8
360F2F5D7EF9A36DFF363B87541744CF36ACA31F9B17872C96B8214740C7C0F0
0E251B4B3306C443487F71ED324B4896231B91F909CF28AEB3409DE1094E6483
E851326B4CE4E56DF03A929913926A8D4C52C7DF7A6F7EA62BD9343AAABE9BA5
403678ADBD2C125B5DAA08EC695F6448373355FF5B91A4FF16596A5D172BB3FF
7CF9AF0B6A744A2451C7399E969E6E5A9784B9195A497B43304111165973EE28
3EDA3949E5D891E1EA363F8A8EF4ACDC82CD14BB931480409A5EBEED54CF8284
55FD70C98822BD9A31523A3C6A6F26B0216C07B6D63D3CFFAD15A1B83BE55D9B
4008654433D80F11754E4B4B09FB22569164A8DE5669629E07ED1ECBFE365287
690C6F21274ED9DE2156D06AEA66A323450B29E4AA42CCC9C9261DD499FD33E4
A974570C690D2C0A1367A7487D57427C01203D2939E89A1F18A4ADE84313A2DA
B12EE671E3B42F44F6B32E12F4F2E51479FA3420A3A13087D9BA76BB1756AFBE
C4654792600D79BF52A32EC8E02587753351AE7F192D08B7EA9314FE4CEA31BD
8646E59F96765073ED1E3788C8DC7C0AA2892CA25E5641B338F5F207D37B2757
C7FE8E52649C38062566E420F8F0A6B83043F758DE906CF91413718028C9675F
5E0F7D09633361EE152116C675BC3A90D807D3A19B848DD34BE3BEF950287C7F
021E231262ED6A134208AE2FCB90B7436614D8BD33226D8D519F8F3F494ACBCE
32527307BA114CF02BC765387DF54BC1E231CE3F51D09F7A9178FE80A62D8371
533508ACF5C454CC72400B444D177A36B9A096489CA2761F1CF1F7C788A9F7BD
334A5C24AE6A648EDC740E36B28D6752EEDB64ACAD640CDD66CB98448C7CE7B9
8EA7CEF9E2A80EB270A22ECE1EAD0FA85EF5E0C83AF23F0B4E4669AB41A6B427
3928CA4421E216A4346FDCAE5D1349809C97D059A2CB6BEBED01CE0BA1754863
100D49634FB84A06CEE283104046A90396245601756BC39A63460C2660F54589
5A690DDE53BFEEEB398355E0FCBCFE9CFC664195CFE5BC9C4905700FB9FECB7C
6E644861E81E0C0581130D253D861801958F04A543EF20C99B52E246139B8D7F
B7C78E1E658701FFDAE6ACD2A7E79FD434B1CE834DC7F98D16048A2964EBCEF4
BDACEA4E6FB6EAB3A270FDA758BE633995D1A39EE148ADF8A169173F877089E9
1A560D068ED72051FE7FE1D6C3BAC81EF265950598475B84AF1486CFC55D5903
3BE1479996B48A6E9ED904C66700DF63029ECD9BF1794BA67A7C0A005B00DF52
8A6A0374F4E65CEBC1CFDDFCE3EE53B57D78203D72A0FD5F9699277126B4A5E0
70B9CF50FB9A46D0685B563CDAA61EE9903F0079B22ECC56F0BDA3F1930FC6E4
637DF29BA68C83DE60EC2AAADF31CB46F337126706EEFFA0E8DDC29E5488C2C3
E89CE98157CF908EB04C55ADC7FE853E152E0D963915F5104834A9F73E0EFFF0
BA20972EDA0F691CBFFF3B0D379B0FC55B77E4891B7B8372F5F79662E610AC3A
7A02E99A18D5E87E519C45CB8CA3AFB38A74AC99214C1A182437C15F57963CA1
60709AE4D7A9527518FC6EB1ACB5220932C53F8C1A0DEA53B1716A105922A90F
10E116FDEBCB7491DA52872EA22B8280595120AF86B49759E5D61FF3B39D310A
68685F464915FD4B9A19F7F797BE424748C94F4636B2AA06C07C4A4CBC634CF3
04E5B400E7E4F0419B112DDFAA0C4758560F83D80A525C09B67B5906D65FAF7F
6E5D42E5D0AA0EAB4C189E34CD1AF532F27AFF45FB1B954B3DCBCF75EE60A9F5
018F023784C394FFB581FBCFF4DAD820EC8C64F08360B26A89657FD7F50AFDEE
FE8179573A3CF350FB4D216AD4BBF496AD7A9191941040560854A5A22F2DD997
0B6DD21DD3EA8EB09C49CBEC6CDCEEB0BBB1B88271093BDE64DDA024D67F098D
6C1998506DDFF7907AF00E4A13A0E7C93046411CF6B38DB4AC2A8A0B67A027E7
96725D60A0A50B983A1541C18EC1999A99D7AEE5688407D62BAD5B13725AD3CD
0243D3EF4FDD9E409795D8022D4063BA844909C67ACF82AA9CED304D5F84A9BD
1EA3C7F5D2A7BF70766158BFA2BF63B3078593F3EEEDD0B6083B6858AB0E3925
8588CCB7BBA9438DBD430AD29F127063AF4B9F05EE48507ED3CA9D232187D3F3
ECF6B44F723CA243C91BFA6CBAC2D055A7DE56C0038114145FAA7D6D35070A07
5B65B916EBDF3A8A76849653DFAE3CAF9561D85CCEC1974DCDECC6592040CC64
5745DFBA8D9BADBD4EE85AE9662F32185133FF9A7E44D66410BDE8B1BB1873F5
DEC1D8341D039537358F7EC07365A462A58013C7072979A427CDC52AFFFCE7E5
4D922702976973206C0EE5806C33706C59C7361AD626D6CE7D73B3F566F01F27
AA275388FCE7FD284B031E6E262C2511B3FB2D6B93E53332C2ECF4BF165C03C3
1E16D2FD363B562B17AF600E4EFFAE42CACA979C6CBD4B624732090878288562
D28DA255FF658D7B2BF12E71C704E590188B62B57234540987FAAA373A4E6266
1D72C99948D78EE0BA5F56079E2B75EF5612495DB6ECBE036E13DCC1B79D14C9
5F085D1CBCF29D52C7CCB0AAE0CBC720E909CF719DE6804AB3A2164CC5D2621F
DED2AD5EDC14F9CCECA26EFB9D9803197435588CB476680F7FAE7B8634DB18F3
061C5289F14D2E2136783C42F2AB2ED12973BC60AFBA29150C76C118E72CB788
E61E561574114577F8D14ABC37C23445297753EB71A3C330F984885006154BA3
E1A07EAA256B8E5F5EB5139762EB0F4A641B648B0D781DB48A55B5D15489BAE4
7835562F4B0158AA1C2FD39A76A40238DAC16668DEC357DA709888966E72E933
1F68EA16A3221BE420EBD5CD48F491BEAEFC0E9A77A1670363452518416CB3FF
BAD590D0A3E461EAD5BEBE6EE7B2A42697CFFEB22C6BF46BBD3EA9155A30AA89
7FD1F319335E45B9E6977E4D6AE67993F7BD617356C8476B612AC5F8103603CE
A940D6978F7FB59FF1123D8C3C49A4D94B1EBA8D4CFE205EB0352BD1CB601CDC
9581B8ED3B44B090C731EBB86157498AC7037239F9FFA8261CA99CBF3D382D49
F0117EBF3D9A4DEFC8E6FF39C3F4022F8E1AE5C8B8A9DDBC74642AB0267EBB3B
DACC6B7C00AB6BC3EFF9588CAAD1E91DE71B0B7CC7787D549409481AC250F039
9CCEB878D275E2E346171058EC303E62B84EA810FCEBB2916BE110C37AE06BE7
70561CD930E8AE76E353293F9F839797A135916197A48D453611484DA293AAA3
39402546DB208EFC3CE2DA145B6B40DA1DF5E911DD91EC9F234AE3452CEB3D20
4B6D79703CA2EA91AC3B5951B557D62C7728D6E3F13BE05939C2A6F9F170560C
0AB39BFD238A0859BA570499CAAA419F561C1C0BCB99679553C2535B4FDDE702
D31E2527083154CA648611692A2D022AA1E2C6D5FA580B6E77C2EEB26C6A643E
7C1D168DF865B4775BE5F71D4603C1BAB86B4BBE77B855707A6B4A6C3D5C74C5
2D718A2D86B0C9E91D82C2AEB7166DDE523F70B48D37C52368A01241FCE8B63A
EDEEC917A3C5481118EBD4082FF15FD4D2BE60F57D29418B6B3C5F03D5EA9470
34BF163C67D62FE7359ED7D6632610F0C415EF01B721C7EA2AA27E04BC1184F7
D29B33736C033F3AB2351BAD214D3153A8B56AC1F060222DD0D1599235993179
C9E51D5A3BE628FAEFF08B77361E9F6D6198FA4DFBDBF06C5DE00368064FAB44
711DBD96DC7CC8C8FA6CD5FE6B4BF17DAE96A4D95CFCD30044F7B79BD7ACE218
D20F9B839FD8312F5B3279E3F455D0E8B50DC78A81C618B47F60FA4A056B50B8
139EEDB33C9EC23ED264397A13DE60B53013DE72A50D97CBD671AF4CE2A0F249
E67FEB8BE31C148D70C94F7F4300FA7EBB917B909F92A311E13CAC560CAB2A1F
3919C1CC50F56167030DB5F6C2078C0B62F21975EFE8ADFD1F9ABF923974134D
899CE5265AB1A1C1AC2BC5249CA9710684EA7C3C1FF63A4368A570F229E73F88
47A19307C701FFE0CF51B86D6C4A13B6EB6AFDA9DD47B618E357CC4EFCBBAC57
246B5313271B95FE357BF67271039042066FAE1A169891C0E5E87F6567EB5A13
32DFBF0CD2F48DD68A03A41E14AA3E6CC32FB3E9857BE07C4E2859A66FEA11FD
894171E07AC1813DB1992DC20BBABCCA8AFBA6A3C407FEB6E00A8262FF276B32
BC840C7B0FD7B46F9217748BFC85147D256337E533DC1E58EAA390C0D969AC0F
49BFD92127B1034EE43A16C67BC83C7F5FFA55F9C385AB5CDDFAAA68BD4C8576
1B8C01B012FAD4C3CE3A38025E669093C4CDCAF4AB82EB72CFCCA0EA4785A665
1BD34CD0E0A2361EC278B1F1B76B40829E40CB3FBD04DE1E73E688D697DDB366
466468E557CC5BB564FA54DFDEAF4E81442C96031A3A8954D3A1E1BD5E38DD97
4858B2C219E9889C842C6D9991F69286AC14D0E93399525FC74012325094D39B
95158A2846590C278C572D8559F2A5DB38C335778D4016D417F09627FD9FAC6B
954893D4F01EB82B8A3B51440846B0E32CAE26F6DFCD2C685821269D7E207C99
4062F9E542F8D730B5F2E649CA631A6D13BFEE92AA4B438BBCD3F00DE4C31873
F3F05081C7804311
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusRomNo9L-ReguItal
%!PS-AdobeFont-1.0: NimbusRomNo9L-ReguItal 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular Italic) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -15.5 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-ReguItal def
/PaintType 0 def
/WMode 0 def
/FontBBox {-169 -270 1010 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E134D4CB5ABCED39AC635
DA001E9934C198A7F9B9ED0028A85E9AE00421DFD8EAA3BB3B4B4CE45D209303
237BD51809FE4D880900B1EEB236ACA87B9FF6EBE6B994A60AF5D67CCC42BD56
77295C346EB4C62BDC1EF22EE07DAAD928DFB73455F091F32408ED6430B97417
683AF27A03718A156E3F6E7B6E4F2E8177503CD82DDBF4557A3CCFF4C858AE7A
F7EFED6CC521A28342436B953E4650B5792BE85EA2F989EB6D986905A61FA38B
96E1BBC830B74469150FB0B598A794FD80D10870084A877273A9502C3456E5EF
74350E6E3BE5863E8BA185EB59FB87B36566AF71200B6ED389D1287D4E925E33
B2383ED05D87D48586E698FBC5D562ED9D8A09EC3EAA1B1F300224AF20C23F26
A2EADC74562571DA84B3914D1D80B127C6FF4706C7046BBB372A0013E0AB94F0
C27946583871D272BF4F20FA84E89D745DE7BBA885CC09BA72E0F530ED4EF7D1
864B3C67007ED98800284235372F0A70C912E21E851AFBF812165B8DF912CD1A
013E271F0B347967876C68AE4C4107EF8AD1F170916210034C66394A9D971B68
FBFC1131E37FC178EB97C1B2A0F573ADD9D7C0BF944E6529734DF8A7EF54485B
A3375CC30E9E328943733CBD352BC15B06C85BFB4A96994291C72A0EAE84FB01
0F1B24D0125FB8C16D60561DF8BB7AA7DDFE9549AFB70C1E89424214609FDE41
9A142892E30F02754FD234CEB3C59A2A04C06BAB7AE40E8FDEC50559B8347684
391C750987802D5452C47C1E0B5F222DE9A0EEAFEE19D796FF375A1E1EF0AEED
1BCAC4F485FCAEE18AEC585D1A9D80F41871DDA45FEF1EAE82C5893118987BEB
4D9E345C27C7419FE65E4853B40537D822E34FF1E0BD2819D21EF607981259E8
9F1040A2D708D7463858AA5381759AC49DF4DDDEB209A278FE60BD2508ACA0F4
6A249A05B652E4C7BF1B676943CDC463B74ADC3562B5449058319D356A78873B
8570054C243ADAB55F9E821F4FA132097E79C071F090158F1A416249FF97AAD4
38E87189F2F62E9A32F38644E7CA8CDEFF0EC29AEFC1E93F0E88DC65E5A61C12
3B34537F9884A1B726C5FE8FBD210694BA937FC0B4B89A875F63D9207F3BA64C
D90AEA953E8D0691D4337780450F8F00300E2B091DBE029CECB93447111807A8
57DC545E04287CE32B65CD176281C69B74B2EEB53E75B02B5B3C8409D32BEA2B
29BD1A08E9B95F964FF6314E71234E41EA7F65D44137C8A4E66A1177A2269AE2
037ABE5C9E7302EBE72B7927487B8A16E97D36491038F5B4891F92369E9379CE
45F6CBE7E3178917EF83A17E3E6F30AB83C9D7B714F88844A10F1BB7CF6F78C3
FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D91805A94EF9D879BB2E5DF71
88DC7DDF4D7C827324AC42ECC89A0DF5B059DF6AFF2341463990EEBC4C789CC0
0B753618A374051DF4097191C6BBC815C3DB9563DF09A73861FA00291890482B
8DE3E3117875E5A51128AB74393AB3183B6CFFE1D0E2948B24D2A7E6AC236C5F
FA28489391031EF6DC2E9040E85D23934575F8F1683FFB8FC5DCBACDCBA80A34
D2BF741863A5FD83FD017A8FFBA4B184C678F7CDE37F190F4088886C722D4E2D
D52B5848B220B04AABD14C5092F60F1C32338EC8AB3867E917C98CE630833A36
F018B6309FF10E4D05B4096A313C46219AA16E13EDCCF90A4BB9A2119D0DF478
4054908CCF7590D5D6DAE9A8100E3C391C67DAEF6A6F1018DB60D5F833010CC1
08B716D5DA6701D2862D912B670A8E4BFF4C49067AD2D7F9612D29109FB09BAB
E1DE6A9F210B590563EA94F930201C81EE6EC69D7605F00B0BFC2C4B09EA94CF
640490CED76EF0D526B603733BF65B6D8554C69B9ADC83C448104FD0B5864216
0A7D86E7856C3ADD18D7DA6FD97BC72FD3F5FC7E5C795770EAF773C115E23707
AC3FDD50C30744A3A5202E15B5147F7CCCA088DBA59F52CF17D98915612F94FF
63DBCC574ED27DB3D48A5339BB8847D44CBBE90F77DAB2B59F434E7DD55E090C
19DBACE16C868C47775398B976F2F91D5395836B07736DD240BC32A9FE7625E3
55B77ABDF2E0E214D41D83E498795F8BE8801FDE4C95CEDFF5D386645653C245
915B3941E7C20440AB545B1CE90912B35C76F2E7FC0A2EEF1BA975A11380705B
FFBC47E7BF437817218C9995C4E568E2642A5BC273B9948109C910643D33A802
E319E0282B73100A584F921442B593F34D11238DDB91C5781ACC44CDBA949D5F
D17F095744FDE2F911AC9EEAE94F2C9C72CC978E88EEA0CA70F49B5179739168
84B791DB372CC117521CBCBE5A6AE683A71B601AB6A2B5D3DBA4786072F77720
ACE22C9983B434CD778C286374763CB3967E130CE848C798AA7786282E1FAE27
8E6048CB88A25FC81B91DDCE0CA3E5B551096DD5762189E8BB9F4B4F931C20D0
02682757152A2BE256F305BAA5862FA099A3CE1C65F9E73D8672EA9ED6E47A98
B072785A54A02936B9275C732DACE2E77C4A1B03B3EBFF84387DC0AE486AA36D
8488531530D56D84CDD7491AFA377F635046FD949655AA0C5C81C5B2EBCFEFF3
D395A4829AAB9F0E670B898F3CCC0E8DDF6804521735FACCBC38EDA3AF421735
DB1BBFB28AB7234EBE2C43628A3D9D3358681616CD26B2197F4575D447A18640
0B7226BBE3D97ABC50991617DC85CA1FCFFEAE4937631CAE2D2E61CCC0992B66
DAF18050863F8CCBBE80A9D81EEF29C584E536D03950716D3542EA683DF15336
D07A978929C2935679F20F3CC7B99D7065DFB6676B471C3601842262432A6F23
C6338C480F41CBC33ABDA5F63C161204499458CB8F7D43CE4E6A558CA8DF4DE3
686D46DF132FAEE038CC3911FAA1730B2082F4319DED5C9AF1B051CD655C5D27
660FAC8D8DDF092F66253B787FC15DEC1D474270A623747DC04696BF34D1749E
1F76AF55AFCBA13C9722AE3DAAA3DD0D863BC8A63DE41400FCF0530E683A96AE
299E8EA34B70BD9B4BB55D7129D12793CC7A3BCF95418758C6ECC63492962B68
5F0A10AA1BF14D6805E032CFB08D6DB1EDF26F9A59A24C096740E28ED3860273
858FBC0B31DC0839FBAF2536B164AB7FDF31ACF2F36FB627EA12748990BCD2B7
D35A7FEDBD4DA7DD96187F2B87053B88CC5B2D67A06AADE5ACAC15E77F755F0C
83504E5E4C97A552AD75C3BD8DF2B3B20D53B37A1F70382D34B6F87BD279836F
59BBC7F025D9C77CCEA53684DF66D84CD994420434CEAECA384099C4D3974AEB
E4FB1D133F7FC52880D99BE732868A342ED36C218E8EBA78D7F01C426C5A77A5
5797A9B0B3B7A7E6E1AF91AC5E994A095D9EE5FB336746BBA506603279BFA914
9DB8756E55BA2372E3B035D28F3590BECBC508D4ED0FFC97731F1B39A4924822
B5265773A5E86A17A418571326B7A7A5FE7216BCE081EF42F0846374B50FF9FE
6F9040E36AA71D4111CB414AF4C3A1FF1DA06BDDB0E94DCD2FB69D65D8D970C3
C755E6F464E23802978EDA03B7F86166C6E95B3D63FF2D022DAFAF5278CB4CB6
92DEB484A8B9100A31AD1DF7CE7CEDF45D8D76686F1C924FFD9E94B76F6EB9D8
9B157A3F26BEA914CDD3A3F1A8787931F61A705F34B65A7D17B8BE932708DA3B
D897156E72985C4E6BD2E7C6A96DC29BDE6488B109278BCECF4B659DBABB4AC2
0EB75E7EF41A4D53FC844FB1DAA67F3D01C234385631BAE78B35812C6ED4166B
FDA12BC262DE9CDFC614D7DC1BC569109BBC85DA61A20205E725588F3CBF1873
60F7F1D3AC695AE6FF5C3622431044875525EC9A458EEC4C3B81ACD1BC5BB43C
61558711C7EBF8A6D3A542E3F22215AB69D56185285152073AD9D6CB75DD2AF0
9CEC920D8F7684D5C549ED3CE6D281921EAC2413D191648F14818983D6557280
3AD9A3E1E1F3F31887FA1F7AE3572C23DA3CE65F159EA17B4E7ABDFCF5E3E5D5
24857997393E4E694221C4C80DFD7C8DA77C5DCDE4E273CF67FE745BE39A7484
70815BFED29954268307C39C2AC3C5C14DB3B6E7B851B482274A80F61E37511D
A1F11DA8B760CEF4BB210F00F0654EF57065B09977A242A13363E138777FF1CA
8846EF2348489AF31F8996366CAEA646FD6545A8E39744C2315DF9F8AF246032
FE4ADAED9479CFA47729A1D585BF8FCA4DBC5BD694C60B1DC71A1EA209E8EE91
74F9B05C151F8A35695A30907E4D187D6AACC908540C9F6C3E38C90E8C614D6B
61E916B27ACC0CA71540529063271E551FBD7EC0651F5220E0CCD834D3F5E91B
81D01A1C9AD4F6A82EEEB0AD5DCFB314438FFC9037E4A559874735F5B89D9CF1
84427AD3B8C910A2BCD070F63CACCCF3534671718B305BE74DC0A0B3E1029E57
BBCBE87BEA939F3D0E7F751A6AF5821F6869298BA6F053CFF6EADB89DF281568
D3370B182B54D7A695E58BB2FA73B13EEC2DCE792C3685EAFD5542E9D61A646B
CED00316377840EEC68747915A3A5E7246DFA10483B09CA310083CC6AF9DC188
856921504764FD4038BA75602EBBDE8EE1EFC998E63FA1B446B692DEB484A8B9
100A31AD1DF7CE7CEDF45D8D748FAC508CB4BDC8DB58FF54C825E7A07327ECDB
2E83D7B3ECD980DC8CB9A9D9491DF42A8678BEB35D37283345C985E9FA2045FD
193E6EF5F8491B730E6F3508CB7B0E9545795A6E62188B643BE9FFFFF69BF0E7
C30D0D2491AB13FCB507AB79FD0421C5C06B9D593024A69E2A091C9B89611F16
78E6FA2F0747FA56525237216EC47A239DFD8824F52EB30D25A9940FCC74C459
82F5581E8F42C1DDCEDAC02652AD32B78F7531B73FCCC786726D6158E2843ADE
D51609D064176ADC20CB1B93ED1013818E5121FABE4DCE1B5AE35D7122F1E69C
D896F8E6E8FEB1113E961339770A3620A6D2192C861556064A55FC2CE634031B
2D1759C1C25268616CE1B019C7207B0558CBEFB9CF25E8D97B854F2A292EEF9E
0C7247962F244E4B3EA74280B7101D384B1B4375C33F113A910DF8505ACECB3D
6C984B2E9C22A3685A0FE78DE49DBB54D96CD87A596B43E8895C093727714BF6
D9384C1BE758E4C3D3C365C16FC00921A7CE45B8775A98923E074BFAA870210E
86D30EDBFA8FD311F967A7C611A0ED542B8B3F2DD29D112EBFCDE72B7ED046E9
49330D4B81790C477EA32D271C16D9DEA9F4F2BB1B51A1053F96BD81D5653BB8
F2E403EFEB2E3BD728621B9FDCFDE691BC840C1A6A54A6805B7F680B56CED7F1
984220443B8450A57361F56A9DC950870C1B2169974CE503885EE89D6126411C
1ADF283EC2047174DCEC7F172C3F45FB77524B0DDEA8C593668AE1854DBA2D65
F0ECDBF2804EA60A763BA845B95BE28FC0E42FECBA2046E87100624315A1E0B4
AC0600329C607B7DB9C830DA4714DB003C5D21197FDD0818830117D4B73BF462
45E636A74F65A73C02505B3D09BF5985F1D13C639EB1C959D84E498F0EBBC70E
5669D05A2D33E53CCA6F544C086BA19A231BE1C888B62E35E80BE7133FA9E768
6D89F3720EFFAA21E33CB5323BF714572D10D999373FB0B53D4E8FFA74C1178D
C1D61AB42B0F8EEE03679E4D3F20964776CA3EBCA966610444694EA331036E9D
658C815F1CEDF6075026F1E459ACBDA8163E949065EF51EF0CD9CECB2D86E473
9AB449BB740FC4EBA1C8499D31BBD645972644E9C5314030192EDFDFC2778F1D
8E17FE4348663C76B4E511869E1585B16DD619A90441E23711F5286150C19B13
7F25716FAAF28968EBDF1EFABE442D51BF0396D1AB863C9518624EEEC7BA253B
3DE50E40124D7330650EE9F6F5B27EA5CA86EC1B30C647105D0A4C83B6F0A89E
993A7C5A3E7C28789ED6BE2F32D8AB5876C185002F1B07CB31D89331BB3766E4
A4325FF2AB76E0B3CD1EE2E1C95FA6F4A80F6ED96D9B038B151CE7D302F36BF6
4173AA1D106CD4BD1C0DB79FFBD30BC89D58E7DD7C1B142979D80DAF96A3F351
7933574B07E9561FCDD83C1A9473DDF6254C62013FD10333512A4AE87276C8B6
2F82F71EE259411685F5F363A593AF5DA0175BA5F8F57AEA3AE6C833943F4A88
DE2D7515B5B570DCF6A033669E1D9F459EA1793927F359319269D09D1173A5D7
DEF679902FF59E3B86054DF5B3FDF838565E0EC5BD0585986D0C5D457582E9A0
B7A3EBFB0508A873C042ABD659BC2580A685B2B8A33EC0C118155DF304A72CEA
B95B86D94F90EDEAC8A3A8575CE6E1493E12959C0188CADA78E3A070954F7883
1F6379060E36504477753F43F4B706803EBF6773C5FBB86A187210F895077D98
EFABA56199C518CD5B1A8D85A7F6C917645289D280A48036B844EE5DE7316F21
E1B387F713E4E78E17AA2BD70F9403C42E75E92E4E384F94F5D71CD691FDD2B7
82E275EDBFE0CD6194902529AFCC3F1A325AA9776B33CEB0A96B2430477A7883
957E4A59BB4D268C8E961A6E25E7A787826AB3943768313353CCEF779B6200A1
047B20647CBC2F422B849CB5AA758162328979CD3ECC032BEADE20C001B5D2AE
68AD53DBF1405B0467027EC169E1E7331E965DF279D7AC1ECD0968BF84B4F203
3A85B5AD0384586BF8C8669EB2DE84B746222591ABC8CD448510F6A464DF7679
849243FEC1F75D684FACB51E0F5671C8FD2BE06FE8473A76EE32622B97711934
ADB58E14E715209DA7CEA4CEA7A3B17EC93C6F0F2642A8C5BA42185DD685AD77
CD51634BA707CD47B7C328FDC32A3C909DD219D4A25FEB3E4333229656286E3B
69EDA60B24ADF88E7005807D67178C57421D2986BCA3C2E81BB9548C7003E72B
261D9B80BE8ECB3B26CB5F05EC5FB2E029C035124C5F6B43342A87FFC083CEF6
AD9AEE61DA2B1EF7E04B6BC134BFA86E56E083590BD9139437F76C13C8D9DB6A
7CC4F6A1F130330D882665CB25BB77B1E501BB702F37F15BD37BF01AD36265B1
86029589030F45A2AE6D6970D69668E24AC83EED50AC28895F142727380DEC5C
D4696759CF5FA4B44A9D04AFCB278FB21D39FCC2EB0E0351B4CF23699CFA2682
FB89B797E330DAB3195A9529861FAEFDC91E09A720FBB33ECDC9AC85EE0E6F73
81D747DED2B68D2276925EBB18A6B3301CA9B795626FBBA60D75C7D5FD27458D
B2567204F047097E042D00503D13CFD452F04DB917468861919D0CFA2EF5A2BB
25FCD6E8D49D9666BC4C9F19DA417FB14B276FC863733222D0687E1BD4FB0526
AD44CDBB651E7C1ED23152D192DD8B5AA5615E6037EF5E539A65D68993CB5609
21A12BC79AF60C15BC3F94FC761B9F5B302EEF83A1E064B253B7010B842B7134
200666ADD776D13B50D0D9075D61A5BA3E8605409D4370AD54B43892020FE718
A675782D1D3AC832E8F4AE75E2187AC39AF8CB4F5C4315407820B4C8CA07F8DB
6FE4EABD82DE1E6223D5A383DFDF380F872D37B72E6CB9A4B6E1CA3B29D0275E
10F95567168AA785FE3341FE4637A55B3EE5C3A0967AAB17B53DD3D2B28B1AA5
AA44F0FA7E8DDAA7E098E0D8A2FB78FCAEABE62D8E1E884D444AE8375426DEB2
475FAFA68E4665E8F3683C1C96E656FBAE8DDD0A5A7CA54CB01ADCA57110FFBB
85736246F69DE0F71AA12CE94D6D4608EBE663579BA3B8BC644B417621A9C368
95AD8A1BD7130ADE7EB5CA280C1E2D334FA5048AC30830DC19C33BAC7DF31203
C005DAE5028569816D280FC0559737ED09A882AF74475DB676698CFD9496C05F
E3C728DF1A494A3F81C9D5B5AE42F44FB0118252A235453D6D8E47D35CA15C50
CD05B5C644D53FFBD3E3C03AA6DCDE62998E6BD54F3CD5A91EF2EF703BCEE9E7
745FA63C9C810E3E8A6F2D62624F8FE4885E026B5748C0D34DB7E6B1733FCD50
FD46178004C1FF0F2606AE7022A334E65B54AA8023B11FDD5D37C1B60D5582E0
3F083CF713BFEB5CA0BF16A759B1636E4B1AEC751061030E9698C3C660E0E639
B048A38D0D6B9C0C7CE81C66030F183310A2727163A723A9E71F504DA5D447AF
E8CFDBD88089FA4AF8450FB5717ED9E45A05323B272CCB6A549F132613DF0A69
47879B02E0392E5AF9F0BA9B12F0E3330146F527C20E48EAD29888A2EB484D0F
F08E19193C41FE98AE869517DB2CDA1A3919528977611EAFCB19FD2BE8D482B5
8C07C990340E07ACC0D5DCAF8143F7AFABD72A926DB9F579D62CC63E356D1B78
030B7FC3AC9F997CBD91F972D40DCE85F9EEAA7079EAE22E10453A812DDBC673
99BC61CD503F0228BAEE39F86B5B23FD14720039439951886CB9C452DC4B9440
8A5D899BBAE02B62AA890D1ED7FA33C2DEAE59D67145DD550E4A42D444AFCAAF
4B298B949BA9A72BE568BAB0A041D65CF118676BA87FDBB2085B54965B5AF8DB
CF82E5601CC587F72EE6A6177A50C649116CDB5299EC43A53EA741A3AF818A0D
6E1DD28E26476D5F337EED3CD17E0E44E61B183CF34E779867630C21A4C8B9B7
05CCEE40985C39D2158B65C57D5D69A97553EAAB952AC7EF74A0E5570C30E3E7
CD8185A6369471D15CD1D962D8E407FC35696B448FBACC84928733BD09F19C8C
BA1F4D62B15DB02E087766C4B37465605FB6890F5DE542A2FE53BC5505446D5E
B3AB983050F3DC29C6E927EF14465F4D23D87935F36D71CA52E52B316DB59143
BA70240A21B46D94388D2EB56AE412F5C91AEBFC7FCFF15F02AF0536CE88ED9A
EDB04219DD89A44B582D921C8FECB97F9998114BF92E9AD47C5631A45808F79D
9441971C363D170639F5BC669C4D53B8EFF347467D396FB9554D8D6E07B28C08
9A717C271235D4D4328F1AC5D838ABBD910E13581C566BB7231E103225190EF7
7C17209BFACF63D5D1930FE136DCB395415AA12923B0AA7D501A9133322D088C
15F6A980FC11CF3A303E36AEDD9857730E47528378697C28AF8EB440D22C71DF
4C12F50FD0D9E1B584113073D41208E4856312BF991D8001F13ED9F0C141BB57
A22564B8BE3FEF79E122253BEDB9F0B2E7E2AEC7F51FB4B86540A4DDEB5001CF
F59C4162B03312B9406D7E0ABC7C20072A62041CACA150169601AF4CCD127B3A
11300FF5E6A65F280F12C7A09F37AA69FEE698AA78AFBB5DC8948D933E812B9F
1E1FCB731DDD7122BFA028FD5DAB4B4DC52FC46276D4E76AD9736F9CD14122D1
DABB0A467FF852B0348BE7ED3617811A69254A546B6DA84C4EEB47E2FE7DE4A5
7D76C3899274E8C0DC548418668BBC03B92FF4416D86878A5AD595C7EA9D8CC4
3E1E658911F539B9773FB3DD2B06D394E6C7BAC03DDD05FF91C8E398A75DCDF6
1DD7A4C142ED8FF03FCF67050B2A54A760DB174EF3475EF3A1C2CFFBA030FBDA
2BFC803608C77C23B07F5586FA44868ABF5007D8454D584978F0DA4496F1A764
4B65C62D8080BF516A5CDC0AB13331D0E6DE5F6E30AB3A34BA286384F62DD277
0C850D049DDA10A9A7A4939FA8024858504282974F2EF4A34EF4426899164123
A06C559458D07A655844CEB38586972085A615C5808AEE175D7EA1E9AB7484AB
CADA7DA54D0AB455222C04AA092CE44A40DFA7AC7E0DA11F6B7849D87C604EFD
B38BB567E8CD83DAB168EBB5E40D3ED8514A39DA4A3571E12D0BD0EB141B7D17
A7FAACF1CDB1811C0C215430CF471AC150969AABC658B275DE0283560B9C6B95
EB28567F97AB17B4D2307FA230602A63805FA8D48F3410AE5DABDA67216FD990
8F34693FD5103767DDF66E839A0FE90858B7407F15BA1275BC56D7FA2D0FC282
B09DF89C12D696BA94CCA088D240FD04717C8F6D3E67C442E91606F1CBDC9750
425A46BEBA9042FA4AD9530E50BBBF757DDAFBF2544CE528A9B4865793585C13
AE0C94E913FE88E88DF9D54A92C8BCA88C02C0B6D15A98672D66E99E23C5C0DB
F0E957C7353CCEFFE5A07D29384DE059B1A477D985ED18895D8C914FB2BCA46E
5A53C2700D1DFF4218D68B0AC220B2DB1CE00CE5DA36EBB0D8408CC699CF35C8
E4119FEE6E3445198E30249356CDD3C9BB5E62C68289BEBCC36E48331E2F7E6B
84A38B90A802960EA438991CDD408292B47180E9F9F79B4E45883C0192AAD040
1E9916A6C251696C4A95ACA5F3AF972DD0656354D09DF8CCDF19EBA0D3C21367
C1B79D2B64DD1029B2E7BCBCA5B9B595A4F9D03BAAF9169A7FE28CE29349A3C5
C35B0DF5C1777C131BBB3F7430B17BFC4C73E728E86D15E6D7C8B37451870FD4
076D40750E6D946DDEE446286326CB2AD6D36343113087595B18734792B48AA6
4E43493FB7D4C16A6122825A32A85D05069A10D02027D4F582398882D84DB4F2
5324978928ED68D7AD996960C97FCD69DD4DABE7853EF37DF5B974E2ADDA4286
3BDB419841468FF3A9C484F68DDE5EBD3AD243498C7C54D2F3EF3C498DE956D2
0C7963E7A9E3E9C9A49CED4CB69D44321534CB9514E7A94AA714498A981229AA
C9BDCC4E91888B0D792D2897F003B7B82287AE3EDCF7920AC1C44741A535D965
E4732D891309E11ED8C5F0F7349487EB87C0AAE5BCDE3E9135A4DC52784B5B84
3BED62A9343950A712088F967BB12F936982B1FDA22B919A10BBB407C2327958
D1E28B54661F883D55690436593061B491BC0E8EFFDADF02B7C8A95BB4D3E396
1C43D2B879997F50DDFA68E130
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR9
%!PS-AdobeFont-1.0: CMR9 003.002
%%Title: CMR9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR9 known{/CMR9 findfont dup/UniqueID known{dup
/UniqueID get 5000792 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR9 def
/FontBBox {-39 -250 1036 750 }readonly def
/UniqueID 5000792 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR9.) readonly def
/FullName (CMR9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 49 /one put
dup 50 /two put
dup 58 /colon put
dup 61 /equal put
dup 94 /circumflex put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9AF72336CC4AD340
15A449513D5F74BFB9A68ABC471020464E3E6E33008238B123DEDE18557D712E
ED5223722892A4DAC477120B8C9F3FE3FD334EACD3E8AABDC3C967C61FF003B4
B10C56D6A490CE9594D57A2D431B9E5E10FE3D8832E227A7087611431ABCD029
85F4865E17E17F8CFBD2CADC97E0A8820E3ACEC873F31464466A9545E967E53C
DBDDB8478E69063FBB891566BAF88B7660A4405B16834761F041CCF7650AF955
F9E853AA9F5F4382E1FE7D0C5BB4023818A2383F91249D48CE021250EC9EEB1D
2835E18FB73026250B32A8849067D5E2258797C917F998F2D4121D96560C5FB5
B5D3471216639A8671B6DFAC5E3554EC36D9A72518525A795590C74DD70DA3A7
78BFC43E51D6F2BA52F17D4DD00D389D3983EC54912AFF73684A8A7E345537B7
E62361C04A47859DA084BC72EA53512DC54132EB2EE671793603015652EAFDE3
41C4B6B679BD60AEC5153EA0D2200CB1D097DAD770F5F31E6FC475A225995277
B867B731D5401E2D02B85BA85158C80FF7E2BBCC42B98AC867E67D25DB656072
55A0D32AB7AA483A5A9686CEA4E2B3031D90D84DB3E2DEE7706C91BA81CB8DAA
700E5F61E07D6998C9552C81B66FD10A10033D49EF3BCB0FF22ED0A3737523C9
8F851C61C4BF8A213BF6EC70C956AE48B5BD276CC0437C72BF6515B10739919A
F00F6ADD2798CB211668842349171A5AEB0664D2C44397E55A4A9EBDF54A3EF4
FBBCDAD9DAEF4B0CAEF7112FA828F2F8D9F633D37E5516AB5ECEA87342EF8DC4
3A50548490F5BC9A8A1F98AC7AEAD9D913BFA10CA86D73AEB5BACC1FEEFDCC15
B3655522CCA2C772E902FAB2A6FC153597D52763EB44AB7489FF061F7F58E8F2
AEAAF4D17F36CBFC00D3C653F335D14240C87DB4339DA9D30A5BD1F502BC9013
461B9DB2FBEEC01BB18990439A0E9CA6576BC9CF6B1A3DB9386C4A5D4AA6A5DC
CFA45FB75F22E10ECB72565DB441A194902C91427B4F676E531C661F7A2C3C85
CD534D1C89B6779B2EDC8E44667B992C20C70B663BFBF680A6CF4383EB7CA26C
4D1F06B5EF4025BBE65795F1EDB5CCB97050872D6C07BC2974F905ACDB7A765F
291365D6C8152153E7F017A25FB4476C60FD9EAF9A121633DBEAC32F62850223
D6418566AB350F90F4B35F19598478F76B63E347D4C61E203D4DB8ECB9889181
C387F4B663A502C638761D2782BB96EAC81A0108D7BD6938F67FEBB69218D115
D8E89CFABCE15C6ACC7FEB983332A51A6A73CF4E341574F366713D7FB29956D9
9BF238A87483D37E526A2EA2F101EDD34E34CB92730DCA7235AA0027189BE405
2DAB4AA021A30C28B26C50808E1E965C02F6212EC7C72F5683339425A7739380
A422E6191ED8453AF0CAAA424AE44DFA7CC5C2F6EAA8D73A5101D8E9517DBCFB
2858D0E8ECB7DC430EF23A9E4428CB7DED8D035D6050251AC101A2D0E884721E
2F21E573F948048BB8FF888911C508CC198BD750083B339500C426AFCD5634A6
AAAC1C7E91249667B231BBFC64B4317192FE07FE9DA0DDB5E517D097AAE46577
9555F29D45C67CDE9812CAD03F220B20519F2FF32DCA56A554D4296FE2D1F3FB
B209B5270E0E695EA5A0EF1144957CE045881AEB8D05D72CE57F4D34617AED67
0D3AF0472CD8D60933651626550366E300E72A9C89ACD475C2E2ED9BD44B472D
9DAFE943F8E02A6DC38E447EED964624C37C3130E48211CA279BB6A0BD59466B
42F3D89B5746F29E084E22CF58395AF0F29E55113F3A3F2F52CB3A6DF3D026D0
C81754B8E2E4A15F6943BE9D0087D5166060734FD07C4C57D7C7D90E8C9C1F35
623CEEE3ABAE75E1A18A1E3B50B7266BD2D8E812CFEB4A46B856885B185640D6
B9C22179551002B94282F57FB433B7FF157D2F0D240836B72AF4A331668AE5D4
E6B85415F4E8B9D2F9AF90FAFAA0A3866DF417CA5A31348CF9B41B8F5F4D2F97
CCF7ADE851B5E2E2F6E319AAF5792EBB9DA2C6AA8B73D889F3CDAA42932CDA7D
07A7E59183CD89520DDFC36E5D513BFD8AD0886046585F29B4D7F42CC0C27AA7
53915AB1167D292FE91957E94A57FEE2D49C20C9070ECD736BDEE0F046E60350
EA539DC298156A4E0D019E7D481FDDA6861E20678516AB80ABEC1F09B126BCB9
52E8272A06BB6DD87ACFC423B4A4FC9A3DC8DCAEBB807C5F748F1FF8B17B8B88
F426206BF1B7B7D239D26BC3CF0776C467A98CFBBCA5FB6145D5900137ED19DC
D002F10704AA680EC753C22E29AAB15712EF22AF73D80820A1EEE953463D4EA3
81FAF99518D4FD0F862A324FC44C4B9542A92C5B60CC983CC8F647CE5BDB4D6D
B92B380E0E5F7208A9CD91FA9A469548162C761C1BA05AC9D60B766764D821B6
B4E17F56CE455F06EA1EE2D38FE47581746C4C5FBA63AEE2B58E877D1A8FA83A
31C972D53B64E92EEEA147426A92CFBF76FC614119C6E9C6476FD6A069C803BF
E949FBE50B5AB1F1463F9747E8D353F7BBD991C4F90F920BC9407D8E24720293
846D052214E60390C3CB926D38C83AF697425D80C2B4FC4706615B905516B733
46ACA325CEA68FB21B2D17CF0B68BA4DF249368625CF83441EDBF2B86C957C1E
44CD722BD2537CE84FBA07EC7AE15C840041B9F7F3040072E6084CD55B301C08
A64A53BD4D3DC30DCAC6C152F316ABC59B8EE978793EBD568849DCC2A75A495A
BC83470D503F8E389F54B4A4A31624E83C601B43AC1E52CB811FAA7CA6B644A5
1AE0BFD4FC774C9C9DFC2769ABFA9C83F900BE2DD4010416053A1D4874E6ECF4
D86E44B4CAB15D53E5630C144B0C15B58DAAD785BA298B1893D1B09BA5D40344
6678FD2D17FF6674433C976D6DAC659175CED26139967C9B2B9CFFD78FC2570A
E5142141C2888DBF2DC8503F9137CE7CB21A1EBC2D65BF33FCEFBC85C9CB736E
24E8595CE934AB032CC70BD6A3B0F3BDBFBBE185512FDB7BE3D4A6620478453E
75D044BF770B44C9741E31985E6DAF5A318D7BED12B02A4BCFE60D25EF12843D
EFC9BAE2A3F2EFAD66D7858E83EB46BB09D2FF8AE9C43844A7001C86ED97AF51
C511E3A89A1BE349FF5215D1A57843EF51456B9838133846F19BE79AAA5C1AB0
5F400E5E8E7B0BF96EFCA3B8F0894BE589F2C9FB6C97BD16D38F0A237CD4F034
099C41F85C7E2C7BEC8E02C4F327306A53B4B48B26A8926670CEEF96F6DF2281
7C2DAD99EF8B81BBB777227C2475AE7400DC393D9C0445E925DB1E955950F7AE
53E9AC4306794239346A419F7B5DF4168382EF5956B81F83BD4BB7635B3BCC84
7D84D05AEDC02D14675D777CD19B08124001A4F4EA96990D96000C082A12F00F
7FEF793A7FA69D56D3A38D012168C5458B667190AFE80E02C816CAFF0A71953C
D80B085CD286027E2FDBB05452AA762FD7C813B2E19A79C74190E04E746C4933
CE1E300CAF5DD53B08110509BDA404EF07FA1BC5224BF1205DE8E0C3276A13DD
866675103B960C5F36644F96B4FAC16F5D6E91F74629B318FCCC8E8CB13EB76B
B0B7B90718D913A52A04732EA3667674994A325A7973C601A7DDD50F658E0826
ACB8E53D4914B0274AED98D7BC3B2B7F9D48A7ECC2F8ABEE05CF2C4F2B90360B
B7DF779EAF3E103D1D83EDBE32DDA873768D8C37DC10A5354A94B4153049AD64
FF3E0BB51AB91D7C0B4134D8731CD0270DAAF19BED9EAD800A14B65B68EEE89B
40DD624111670DDC7C030DEFE0D1B96420E249332445C155BA96231C88E70643
D526BDF3CA1E05FEE72CE2B881CFC01ED780C10E89F0828AD55FE29043BC56E8
2750A6DD15AADD54492F6092618F4CC6A31766B17FC60766D18C307EFC9BB787
39047DAD6B38419EFBA46B4E2C932F97451FE78AD75FA90DE409FC6DD46585D2
1941F5ED47A8FBAEF5A917A240959E8D9F9917DEA3247D9CAE6BF7A88DB4C4A4
F9F5A6DCE542420A032FF3392FE0F3357B51F884D6181583A554F75B1DF192E9
253CC828FF06B0D992D5316435980B044BB191508C7C45CD90F797F88856424B
14A5707459C50EDCF3E3D8D1667AAA83015405354CE744C66D9A5728F29E0085
6DBF740717FA0799E3BCC4ED7841588B496A5E549B953A7FD288B4A045DB611E
E3B2F35963FF18ACCB1C968BEEA2CBF52B3999AAF89A05320BB2E97F52CFE06B
9F10E3A79865A3059A957F97972D80ADF678A36E2B586C101FC6AFA4D137C13E
EE7102C9B8EF78CB057F8B7476F146E8FF5C897FD5503DD198128CFF7B5FB339
FAD0AF0EA967F77B07B367A4AC9F668F8BED99B98E87FAC750EE045602D76C3F
289FC9D97694C96AAC0AD1BD3FA94DF2CBCEA24B40F47B9B59E54EECEE7AC4C3
A3F5D19160E4C1EA830D57FBE10D8D46AC5CA0260F22FAA45236F0F542BEA9C5
5A88F878F68B36114E0573900C65E305462B22A3429A17C7A567694414DDDA46
5F30542B8FD4F00F6C295B2E8D3A986B953D96822DB2ECD48E8BB1763434E652
152EF3717F5E7FA10FF0B01D9F64E22C5DBD7254629658887BACEC0ABDE972EE
67299FB84A05B3EFE22B6976DB4CCA384232DDAE38C31623A4E39EA2E82C1EA3
BBB68F1A7DBF405DEC37CB7203A895C36A44BD2D63F45B3888AF91D37B510A59
3C921BB44DA620892AD87B665F69F6FA510B071ECC403CB2BE2F54B3969C9E88
713244BC97C1466DA8216DA7600C221E7E7EF5C789D2E12B36422023A03E11BF
2790FD6062FE6BF62F5010A92F0A104B76E255A0975E04F6F20F760881BDA7F5
D834D1D328B6EC19AA7D5E5678A84C74C82553DBE8BB5765E84F5A8789032143
6020940B4B8D45FC3433D356E28C25F42D0C19F911213D85951B2B00D01B77BB
A4C72E964F9D95422BEDE582A05CD52E03D28A996E6CC8FCD910CBAB728073F9
F9FAEED5470FFA55930447C5BA816F826F983D53EC9941EC8364B3060FD74C95
26D4F5CA753B574FD2FA4D1D333785241D8741B79E628BC852FDC35478C5ED9A
C1BE88C5EE7302816E65C12B58EA16FEDD4672EB3E24B6EDAD5DCE263BA8A970
350B651E5A9F3C281D85BC3F44EADD0D93402E36489BA5185E7D388974B0B700
70575188BB610CCA20F081E2CBDA13DCC6F72567962ADB342E02C1E763B673C5
F7384E24C6E1730A3A790D690A2103AEF88E0C1D4480DC9B25E5C8C9E1919C95
F83320179B4C7C4A26D559BFB24D7D596FB73758C9990C451E77FCDDD17763B8
9C30A9534E3CB6680D3D419D4B70B0B0A0D160FCCDE169714E373F65B7144CC2
DB9A44E041211E1517D3148E65A2486CBE5E74E625261CCF65392FB4F3091473
F9E8DF327D59A58558E5C9F7190DB577D5DC658F5E36258291C708B3D224653D
064BB6079F91293FC733710893AD1C96169B30CBFE4E9D52E7EFAE4AFEE68FEF
1AFD5E7E9DFCE8DE332B0FDC0514F9B3090AC85BBFB527FD8034DD33E9576325
A8769AE09AF1BA792447DDD932B98FC9486B39E0B04DDB3EFB7A30DA0940B33E
E27490E0E841E87B1C90E5248A91742ABEDC10F43A8AF0F9C5B4A4930B1AADAF
01874B9AC3B8D0DBECCDA6CD7E96471FAA15CB7F8A599C5746327CE392224C3C
40BD60AF97BCA6FF6FCAB2FEA114D7300B89E91C3BC92D5B3E2C83BB37992D8C
72F661EFD0AA034C738C019DFB79BF40651A1A34BC1EB9F5AAF58F8B3DA32645
24AFF8636486F08BC21533B5FF7391B0679A78DFDCB03DAF6BB7475A1D51DAC1
EE4BE9B986655D1FDB6936445EF99B58B303FE79F11275EEA96A9F6808EA8775
D873D1052FAC93769789C700F20EB2ED6D15676F6E563A769CA9298E463FC311
83281483B1C953370D196727A6A0E66D32D9480AB1B6DCA77868C1A2D5DB6483
5F31EB6B18EEFEF1CDC31533E69B0AFC6B30FC9912DC89BAAEEADC30BE14F448
1A6B70D36A5D9B01799BEEA686066114910842D022EB464A9A1E8F0A5628BA69
AA9A1925CCADD44703BC67A89F3B48E4680726DC4360274185CF3C8AB747A8FC
4B928AD62B092EFE48B01E33ED756DB696171FDB775396BBA138E056F71EDAE3
7A1E4CC272B8418114B0E81DE0BC43DB3C133167344488820A92DF10FFA26FB9
65FCA2C87D302E956DE6B4FE145145440C83DB43A68F8B29A592B127BDF49063
B7F11E155CD4CAE305525BEA56B7C412A6260426407BD892A3F2B444AC3421E6
FB6E6425EB5C3053C5644666B80405530FA0012B54557327C98E0F4F064099A6
4ACAAFC1870359C1B6FBE7606BB8A26026AE20C212210449905E628AF1B20490
8CE908B7EF3E3DB551C85AEB0F7FEB6A8D215B97998E5DD9C7CCFB2A9402B8B6
1770D4023777D4B45A73F471355353412C51D4CE71FAD1E0AFBD87B5F86307F3
10D0B94F1194EFFB64AD5DA54A4200490F609CA8B912E149F8217ABB1E9EBB3B
C4470E7365CF5E1E761AA1945044B225BD53D142F6588C50E0644740F7DD55E4
8F73201E5354A8BC78339211AFC4935F44701FBA043AAC4BA4698E9D7700029A
C79F992F62627C91EB855F64C4B251718FDA71EDAF082A0C7B00550949D617A0
7071FB14F05620CCF2180941341D8E60FC88823438FD728A4042AFA8B853107F
852F631518B61B234565291B5D5B89DA818DEE3AE3B68A2869DFA63255CC882C
3B16BBA08FCE3632E57FF7A07F857A1F0FDCADAB39D77960BD827CCC8661A997
648BF5BEBC0FD2286C2A112A8DEB9CCB6330A049170D5D68EEEEA011D3EF3EBD
855236B9380087CBBB6BE24191F728B7EAC5B50F7A547AA0989B7C7D3437DBCE
1669341264E290646F2C8C5A3ACAAC7CB63DC692FAAE13E9B40E8BD39FE16A0C
1660CE66872D061056C04DDDC265C024BEF8B7E3C3AEE76FE5C9702002C28BE0
B180295EE00E567FA2E5CD1638226D24A7C732E1BD8103B476EF5702768689C7
D4FCD47F2AB94A2B1FBAE6ABF87B09E7713C773FB65CA83F7318035B332B9F99
24A2C8897527021321D003AAD7C273E4BFA2710B9BB26C2CFD3D9A5D7ED1096C
552D50028AE2476FCD6D12A5D0A897521313ED1A3A8456A70C16EAA50A3E6733
6DC89FEC56AB54A579EF264377A103939D5EE00A90B4F2206D0023AF9491FBE0
800C6540FC945199E20E945F46CEEA2E885F6800B9DF042BCEF4291A4B1A62C8
6A7ACFF872B25FA3AE69E0093F3D0FF13A3313430C06F1AF94D500431566F659
E8C859A5F80F5BD2E85C8E32603D3745628E8FE6FBC50FA68F9C3811A2BEFEA4
5852CAE2AE5AAD3230ED050593BAD0A9581EB7B327C6916B8FC348F4C23E6FA2
00FA28AAACCB3091C1D83F7BB88672A53A2EA3B8C7C24374E400C57F0F01019F
E52D5C47F389D4C9AF126F4080F9AB8D1C8F470932BBECCEC72A9796F6E965A4
82057DDB43D68298A00880D4C2E2496F26F015FD83C5549215753459310339B7
6B2961EEEE74DA31FEC8E2BDDA42D4080A32372AC372524BDDA580EF6634ACE3
128C69D04D890DCA337212B109585C665AA83EFE47D5BABC2627A86EAD11BF7D
744176652C7F9497785A7A06A994ED8414BBE8B26E74D48CB83FA24AAFBDD507
84A90195EA3D77BCE8C2BEDDD1DC52E8164DF15D65B916EBDF3A8A76849653DF
AE3CAF9561AF3B705F75B9E5DFD6758DB65A2FD54683759912E0D0035CFBCD86
5D239CDECAAD9AE5D95377E0D3F61C2AB7EC99ED28D2B4A7B6004A566B43CECF
7E35419EBC2A47CC76393F4778DA801EA75B4C1FC38062AA77CC4EF0E6CB0C81
9A797C01F89BB58A957D3DAE33E4256B1F5A7D66C8989C512DA066D6DC771548
F2DA3B490834E7B4CECD9293A5DD581A3171DF4725B4AAE22A971E9E5544B2F5
19FB38556651C330566E255934EAE678FBD1B46D08D75394C5C2E9F820D2B1C9
B1598BAEF7CE0226917D674ED1819DA9EE1F6F67A0D65D35E3D0EF63274B611B
2F762EE335051B39B658BB0BD12DFC322AA7F265E65664191F1C11943BB76D70
D356FE5D145C73670D19CD80329D8AE47B8A922B0D8AAB4E42DE1B24F8DD0858
7F66DBDA32D5E8EAF654E12C2E333311F4DDF888CE31BF96302C60195FA1EC25
BE4D8011E948916F6829FDF3DD6C73C55A1E990A07F8B008FCFEF55C2C479FE7
C84BFA04443334F2AD889E4A3E230D0A9A6DE4E123C3FEBF42BD06F669C0CA21
87337E87C6ED736F2DB092C2BEAD2EC5F7AFBB55198C5C02204EA9DCD89EA75A
119F2282B0FD2150D8E88F7B3CC74903532BDE804C125D97F7149F4C3F33DCAC
5FED08DC51869E34C2490AF71BB6460BABFBADD0AFABEA8C80E083D70FB44C63
EAACAD82CB34C3725DA52A528B5F2D4216D751DD41D840427BD445817C308A3C
BCF0FCFC54C977481778614D372B043761D928D66FCB9D760D30908EECDF403B
CD3BC892094A5128E251260C8CEE481B4289A675DFE39DF546A3BFF3244C9073
3BA17E45256B973F431065DD2EC6BC689D4B4F105C8F95567F4AFAE64D32EC3E
B4B6A2A82F34478E7C279D48E8716D9C1F1736E0BFB09AEC8B7C4992683244ED
5A447102924DB6ABD954BFF51D758526655FA1A05A37C9CCB86751E5E5425BCA
9FB60CB4C8DF3A640E4A8594A046803BA4E509E24B79BE0F631C4878708061DF
D587261FB75FED518F62D40390A7C2E5682DA716B05A65B59B17E090FCC1137C
613AC61B6452571F9A33E04B6677C7E031912478F16B0E889127D5F0571E7392
8B5C8331F31E58AF3A560C46F0F9A0A0E9FA210EE25F0974A252291322ACF12E
E7FE8A738607329268F440366892C857A51A8D59DE97F8A01E890DA500847934
3AA76233947EA65F1B8A550DBC58BD7F145B7364AF5AC3F11EF27F1C85D2D2F8
6B2B420E9D7325DEB5AD1FDEF45CDE0864135B202DBF7983071104BEC1B29A1C
2AE7948C26408408F057DEF4526FBEEE7FBD26C61B2B0ECD5C73ADBDA46E862A
AEBB04D578FAD4737F1FCEF8C0A06538CED27AAFE197A9967C89826CCBE77A44
72AAE7BA1CCAD90A57AB912B6D9C211717CEBF488BE1802D61128023A737F147
60FC23ACF398BA074C1C31950A393F4F1720D25160F42D9892372CCED4FF79C7
9EC2E13B44602369AB74EF77341BF52055354F690980035348B6E61315044629
3F3A2B353C3C9A8AA0BDFEBF16ED33449F74C1407FB4E20EC3AB0A784A1D4450
8D578234BDC461D8F78E6D002A0798629E582CF001309841CAA6444E7445CE86
724470B9BBAD88635DD650F404BA14C3E9D3D5937698573BFAC64F18074762A4
4DE0154738DE06702FE57DB32CAD8A01491FB5D42029B507B793D871BA48F4B1
118179748A756824C3452EA74965A151E8422151F968167AFDD04F1A8C8CE31F
77E4F40F92F5FAEE0CB960C2EA94060D73444B05F671C32D5CF0F76B97CE1162
3A135F73EAF38A5E8B7E03679EF111847EA10A7FD8B824A77B98368C4AFFAF05
5EE87405271527266C495BA2911D14BCCD8F5C7D8D2C4CD24EF21ED49EEB200B
BBC5CA508A4D8FE87DA796C3B95E98BD530B52836BD4F85C700CEF3410E70C50
D8E043DCA87360281ED1AC2F481C81A5ADFE21C4EEE5743A2987E7E3D7E62AB8
CF53B590BC223BC5CE1B3A911B864695634ADB05FECF3A123A32C59ED9FC4D4B
E8DA38C5783ADA09DC1B9F273DE16E6406FFFD8D75F65BB9EE9F0739630CA3AF
44EAAC3063B0283D76A952E46FBE9F87083BADAA263424BFA6FD28936949E7AE
E9C0396AA8E4C852DBE87E16243BAE7E3479C30177CDFCBADFA18FD3A0927C0E
7E21CCFC4F95F92BDFBDA1DBFDE0E874B428EDDCAEEDE77A8C8405BE7E205E6F
8B7ACC64C540113CA0F5BBDEDAE58E030F1660DF9F7AC1D6DB92F2C0584F2E19
DCF008F2F691F1997B3F057FE05D4A2E577C11F59F098B78BDF5C0B4A6C3DF66
17FB7E54D9B02B488D41F547E0211BCD3913DE5739BFCF391F27EE66C113D36C
F60214F573866286A35F75C7E96C8CF907B811698EEC22FEA34847556B703727
D0BECB0250E88073D2DC5994C45D48011F63EB32EB064959EB7B93345473C4A5
AA2A1DB14FE0D20468D932919662032428E4DAE0169CAFF6B4297736116B1820
E482CF9501C5389F10EC1CD9DC23987665974109603771E32F2B258F3549B427
FFC71B8E0592914AFCEC59B2818673E89542965FDE42B070F4CF5E8D1BEE3376
B43617E18E85658A1BB7A4F258A019D5867A25716D63959E3CAEA71651A3FF50
E694C59DBA98C198E7BE8F75987B6C2072106CA708280E0FE630096BD4AD3CD7
190F46747D49779D45A932AC3E997FA20547BF36A0FC86B189437FE47EA7DB61
99D5263462C1EE09B7239DD0AB046E3575E5E89B64E156B8F01F6AE33851AA9B
C11FD2FB5E78D099A46913BFEAF9923844CB8F667473B15243529738A30A7003
717E7D46E5F3A37C2A10B287FA08960D9C88270174D70C5F70D6A0C9184272D6
9D0D8AD5DB1F4B4770178DFAF0A0829375589E0710519F3B42BA89685E5B6473
80618793A6F10851FFC62E887FE4987391A679D4A19ED225259B145E426F7A7D
A969DC8BD36D5940F4EEC7EA247FDCA2873DB4E7F245FF2207AA70A135229606
15182941AA3ACEE34EDBB008794CAF072C520070772C3C915134518929356C5D
CC96E20D14A4905CC3B13B69A1BE59F0AEC898BF598EEB0A7BF432FEE25B8EB8
084617E9B84E4C4A457AF096C2048946172F0A88406F4D1E07415DBD83BD58C9
6AFC88E7B06CFA049419CA831E814103B08D4319D19FE118D2FD1C4C0475C4C3
82428D8FF18C1EE1F705A880577F9666C11D10DAFCDBBEEF0508A1D1684F5CC4
CD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR6
%!PS-AdobeFont-1.0: CMR6 003.002
%%Title: CMR6
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR6.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR6 known{/CMR6 findfont dup/UniqueID known{dup
/UniqueID get 5000789 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR6 def
/FontBBox {-20 -250 1193 750 }readonly def
/UniqueID 5000789 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR6.) readonly def
/FullName (CMR6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 43 /plus put
dup 49 /one put
dup 50 /two put
dup 61 /equal put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DAE339BA29C1C6F656
1DEF13780383DAE38A868377CC7D396B2A05F341AEE0F8BD0A0191F51AD11A4D
2E927B848A1EF2BA15CFBE57A51E3AF07598275195C9613041F71C1AF39E61F9
EFD5F6512FBDA76E29DE6B508F62F5CF9F73F5288DF1C7B0B82C92D3B6358BAD
EC3CA20BDE55DAA7CC58004AA86B6CBF8C410D8287E88BF20588A39309C2B703
CED322F030AA6069869064486CA651DA054FF3F5E56534CA358B0829A6B954D8
9103436E6B06DAD1658BD4A95AB41343B01F5866FC87C4EDFC71F1477C98F8E1
1DCF27EF743FF90BF918AB8C4E5AC35841E2F745480E5EDE1C1DEAFAD8D0018D
2C1F1CFCAD9F6609859DEDFD1648A6CD23D8ABB80747F94899F17C8F3E6CA55A
E176F19CDFDAA0D7C920B3A72051A4745560AC81978C92459EEE5AFE85AB247A
32981139CBE352B248F4BE5F73503A084A3E91F05328EE521D9669E44E202584
5407E7846F9FEE3D54EA18FFB144BF2D6803BF65AE402034B3CDBB40DD24217A
3CE0E95E2717CACD603A958187C42B3558AA38D6B6390EEEDD396F96E6041FCF
6F8888221AFA87EAD79F46E0E32CAED91E6C8500879AB6E580C581E8C8CE9B68
2BB5EFE2604E8DCB2432D39D75EE556969F1B2FBDF6A4BC72D106AA7CF22C268
464027898B311613E06E1584707F262F71D9F49D2149306A88E02BC60BBD6BDB
EF41D90F19197BA9AEF32B5E63D5B9FF41B5602F9F786E76621DA54D574981AB
87A72081EA05D6C6BA940EFEBD0904EA4E77BBCE17E20B42E1722617E0F6EF32
F1ACDE9D758594E9C81049CCC10605A27C2A06872FBA9F159CB155609B496ADA
4886F478E44029B5E620DE8319E257697E93E1CDFD27D560E2E4D34507020E2C
D9FF06BFA14E056D81DF701FAC3ACE4BE6C098AE116E079F0044391EC1661F6E
7A93B9320BD7F91E8FD2E8EB3F5CAE997D5CDD35107A1D35302260D1499B8B65
39625B7925F97D917B66BAFEEA992873F07220714F192839948CEA080BDB9A03
77B9DD032273DDB5629CB28B5D8797EDEFDBC601823E038384C90C79012A7D96
8F27784DA15BACE21501C26E3AFA5DCCE81B52B0ABAF71A35D33103EA86F2415
A39A830D559C5C6CA7423945BD3DFA942B20A06D7A8D8671F9831DBB52907AB4
4E54776D29C6085CD9970B6DD21DD3EA8EB09C49CBEC6CDCEEB0BBB1B8827109
3BDE64DDA024D67F098D6C1998506DDFF7907ABAADA1C39C759C850E0C6F8E89
A392D1C9329ACFFA92D361218D75E115F70A47C53B73B356D703E9C499AAD098
AA9C8119EE9E9708A9EA3049E976FA19AD04210D5F6092C7903FD155113F3A3F
269B746560F70970AC9F8D09956E0E84DACE4112C4E7C7F6B3F0B63D26EFF95E
2B2E9699D16BC8AFC4AD9113AA3A974C9E82E877288CF71E9169D2DCC61AAAA6
C536E5604EF0716F6487292BBB677518504B52C63822BED3BD5FD14EB41EE6A8
AD4B6CF90D39F98E12A765B645CBA3E8552FB9A986390212CE119E7C3DD675AC
17BD006144BEC534DA2A860188619F17589008409C5A309CB83FBA70F6446B6E
2B56991B6A03B1DE10C621591CEE45BECA27C54BC8B4F1754A9E8F660812710E
117850E1BB6FD89BB13F8CE391C43DA89EA67E9C3E7A4697790EA26B0E4E2E80
DCA508873A7AFFC11B8C02EF86C2316E8D8B6BCEA37F81A3A87546705F070C3B
9D4D28C366CEBC1EE485B8E2357DBE46E86C87B9939DADA60888AA9F1B92FECC
CC1C198DDB594BB70A8FE690ECAC21A414BAC89BF019F34D2A130F485EAE35B7
2A10C67EA3A48A4D9734759CC93AD85C6A570500AE5AC9973FC76EFA06BF5DDC
26E20E28D16B50957EE01AF2653F8D860817967AA5A9BF9BF7ABCDA710E9F34F
4F0EBCC32B3C9C2971F6225D2DAA6A451366B83F32B2ACB83E746D365B2DE38D
C1AB7447FE7B37F9630E410E5D8F0ECE74DF46C538947B3A167AD9F3E4A7EB3D
60F5425AE75AC3A27D39311DA35696C3DC7282AF1532E7AECE63D13DDA0296A2
01487185FDF1875AEF55A36C17D6A8DD329279D229259463A2F05CB7A874374B
E2320E1F6CFECB9C1CE62FF468C29751ACD9754AF1EABE8E7696C2888914416E
235B6766F20FFBEFF285277B639A51EA2F2E30D207BC891B00F0436008F980E0
9EEE7FB375BB069B9E0BA11DA951A99D8E60B4F920A0495C247FA7DE904765AB
DB5C3B2D634757E43EDD6FAA4DB3C67F82D6853E1170F0B2D8CE496DD4E72B0D
28277BEF172F1402959F64527F9B640619F04416DDB9D05FB2ACD019CB9C119E
E544D24EA6DAC5C69785394EA50E6EC9AAA9E14B904EAF29A733C6D7942B63F4
85729686742F26DEF78DF0DA1CA7CEFBB684F4CAD99021A3B3D1FE03B9C5A4B1
BD04CAC89BB91B11952A2B17A61789BEE0C54B46C03FE9A1AE73D17CF94BA30A
237C29D414C3BCE8E3E2DDF83C0BD59DCB66C4D2C3DE73DA8378F3C6C8035D28
7464399857E57651A53E9C4AA68DFCA91B2376CF98AC5290FDB9BDAD9EF1604E
9B0A70EDDA1E564B6D2456E7BC722454ACA8C4950FDD44B6EB9AD01169A9F845
B06A0DDB7897C847A5B1F42258AECF3807AE936C8F52C3A7A0A85D68160AE442
FE81543DA6702D76AB6E8701F80DFC1D87C961E350D0E52AB2A298B9E5908600
7E14D2A87309043CBF13F69AEAAB1BC239DEA88EB5176624F6046664B1D2691F
FBB2071D3706F97DCCA355A6DCC4D09FD35DC078FBAAF672FFDECEC61050A120
10B5A96629041303FD01ACCC7686165DED6AA712FF8E5E85DE33C4E7D877C49C
6C469A90410BAF60BE65ECD91CDC2EE7AC0CA8BA7B53865F26092BFCAA0BCA77
B80DC51DAD09C93C8DD8E43502B4B68F3D5918C3492196292447732BA90F5AB4
9F5E1D634ADE1CCAAD028DE5EBA9535F6FC5908DBD2D643E0A7E059C8C386FDC
E72659C0033F535C0D7F6B98D0335552D0BF3C6E302B672A5EAADFCEF81912E3
8F54E6FB7EC2B325125159713D0AC50DEE3673B9B148643727E94C80971A2E73
5E1E13237BE69C84FC039DCE02ECE2668AFD047F21A61BB94A9F498C9FE5CDEA
B274B40728B6F6CA9B6C15BAAF92F465B0D7311B46545CBA90D874839443CCB9
3110F052EB247B24B45A3D2FA6FBC7EB2A4BEC2A5892914B3C5EA3F4F9B9DCBF
6F932D95700E045B49E4B1F2C9D2A42CF39CA2F5A2654E6E8E6E92473D28AACD
5E35C6705EA728F704F5996D286BED433F976AB7E018621A577AED7C0AC0A84E
A032FE1869F603E6F20386E3A190A30A21EA886249ECF8CDDE2C33D73BA8647A
3DCA7A8DD9E8EC8D9A415D126BA38B6771C489DFC419303EE9C1B83FBFB3A0B8
97D64F30E4BCBEC24DF603FF3BF541E00D5804B6B6543D3D2B661CC551D497A9
9DFFF535AF424B2F3150BB39AAE8CDB306AAD37767BA10BADB031DC2FAB16955
EE78342CCC0E8B5976BF98F215461A8C6F63EBE6E2F1A1104662DDE53388CB51
8B44F3534853B8095F3B746A2459C2EF800FB1EF7F235EBAA9731E3AB3BE4369
1D3636E3ADD5BDF0C34FA80E90D8A1DDE770943FD196E0A7C5F1FAF6970B34C6
4673AACA6B2B5C12B9608521AE736C1F4B97209B063D991300ED5AF3D7F27E76
68E0B858FD8BFF86581E2B9548C691E3E5D9EC4D39C9715CDE86C7D22223CCEB
8A38C776A30AF14912390A7546DBECECD7A687D4F08646E57A12C80DCA022B7A
33399761A50B8E0ABEFA1163EDEC3DFB5DA3248792EEEDD894872D4E6814B4C3
548BAFCDE0CABBCDB97EC6D1BA47F2E77CC1389BF19D73661749AC33F46A618E
A665A85776545BF9662F2179D7BFD604FA8EF4700591AF3AEC647E27B24B76F3
133F9198DC15C1AED830E737909E43EB91C334C44BA35810007A3888E33F5DA5
B3B2C35481C648AFE630CC3E08F77744E401B2934E407D1EC17ECE737606B076
F8DE8EF3344F57495EF49D11580D6FB28AE0B1422521B320843B13467501CAE2
3DB93D7BB779F73B6AA30050DA74BDBC3F8DBB30F32EAFD07734A151BB2BAED5
C9B1F790059339B64BB4146470F30928C9A49AE88906BD6FDB7431A4B50809CE
0F67ABA01CDCC2320B0B097187B9299E3D80CDD7BB5DD5BFA7B28D924C5633C5
45A23CCEE097C41C3759C1FA8DBA0DD95034BCA89BD23FAC18C70093F40FF2F8
0FAC5DD4835F2DFD40540E9A9E9FD951A8AF2CB766597DE00147B163BACFB7E6
EFDA4DED594F1C746D8B46A1145E0E4058F5917B3F21E9BEBDE745EE72CDCA64
FB31EF7A2E55265F32559480E2B6726D3DE26FFC97EB4E3160F117E890C4B2E5
8DF310E6A728ABA85540F571C024F8DD58E1D7827FE97CED5EB31547EBC36415
02B8C0E10B7E37D816F01D56A364B8552CBFAAA95BC4BDDCFDE91CE0EF005B4B
7AB56FFB47A093AEDF0DE1EA48FC8103CA3CA1470864D2693E360006D05668A8
AA422CCCED20DCEEBEA5CE0DA1EFB00FB93E922B18124FA11A88D0F6E0F719DA
57603DD5DA42E1C56C2FD9E5415AA199D4F334C151C1157E75C107FBBFCEB706
5F4EA47A29B54ED8CAEB8DDA2F53D2A703B95487619780A52DA1270011648A28
AA64338E04AA5B92C1EDF3D8DA34FA6D227A0325EA6F22E9B38B6338C657BB21
CD4C582DC04010330F62923F817E4EDC6E5C0E6500F2A975A8A95BAA30C4A134
BB31B5AC45A2E7F6E9CDFC810D41344C4F606049445F8E93D74271C1E29DF7CB
5459593BA28AECF64D903D3E4D77CF5C04B06DE44A41EE4D9FC769854503AC85
69E4A5106E84016DE3D59865D4AB30BD6C9E45C45DCB5408421CC50CD6179C85
34E55CC70FBD8FEFE9F1D5160664981716E3BC7F24B6F54E0323D9BC4B692971
24419EE62D8B0BA726E2B4294A9A76F328B8101DA29E78BD5C4AC383350FE196
4D42DB1653637D19530124858950C22F1E9CF5BC07D46B7A58CDE19CC88DCD2E
7FE4EEFD8AA6047E919823C8CAB2EF5274F45E861E6508CC11A8AA90AED2403A
B2BF1315C2157B3B50A3685205D93E40906EEE9DE5985405974BCE0B84BB37DB
080A45C5237B269B93C0A7CF294A18B45464A41F604C494CBEF829A381155CFD
71CEEA54CC39EEDB6DF58A9896246B09F95DC6BC40BA6916AAB5ED3D24F66154
3662F8978FC63DA9280FF7ADB09EA5BA79D3B66E0C88BEC1EDD78DA93839073A
A4D7B0E627000C4ABA76C47CCFEE92E319315333A5584A951E34C55412049C4A
A5569FE65A006F77B416E0530AB6A8E7AD6C72340AD4CE25937158FABB2153EA
281E1D840206F5DA38E00815E9081F81DAB9FAA8F4DAB305867AC84735DB4F52
A36129929BD2084A8EA37BB6889695204BF7290B68D5E722540BF8A276F8BB6D
451D582EE59D2FF03F6B97DDE05FA00C3D375D2D0AAC8FE298F85CC067B15481
48D70B6A0354C705715B891915FE8EA45244677B9FCE81E72D66177E309F3F83
F744B9EA9E55C3B30DEC6E5E03B3988FD526A82A5E8E1DC79127FC62B2FA7949
B3AD3148868DE22BD4B5708E32CEAAE6ADEED1F463EAB9692411E18F8D6BF391
126B2700B4CF3B59D02E3F8795130C96285A63FCD1E0F647ACB1D35E9C58BD01
1DD06BABA00CA4343BEBEDBE677E053E9732B33A7495DF51782A07DA07F5646C
770C957AD915CC70BA8E08BE7A1F4E6BA5BB9C603E38F6FB0A2578471C4D02F4
283069856D926B9076EC73AA39CEB0A061AFF1575C7093FDAC9F89C3DC06EA45
06F3C2A3BC9FF21128B10CB758DF0F099B459A5264A8C24C098110D2BA1A8532
8FAE146A91BA7D033F591AB1A94B8A6FE0FFB610F698D216D58B4EF6C87B1524
8037CBB7E23D8550A620341C6625A1A2ECE7CEE2598D66277F857231A36155E3
984F147783E9B93975AC38A29F2FBCF704C8A04AD84C3E04A12D2321FA56811A
5B6744813CCC187968C5C26BB8D3E6615A912FA5369C01CCF8C0DB790593B190
1A90CFB5339B8771F325C5FC448D36C7312B11A15A8635BAB59CF3CAD176131E
026F6E141B2619EF7F3048750CC9291397F141591EEC8B612D6656DD34DB54D6
DBDD303CED74BE76664E7DC86FCFEEF2001C9DBA56418FB61F589566A47AF36E
C94671C5E8939AF9F4D53C0DE7142B7B63C86AAFA65877EBBB48C64589AFB2CB
1280AC099FC48058855CBDEB6C2D2A0D092267996591DC3B5EC8252984E9B27D
2E9EDE8CD8303F0905DBFCAE497DE1B755B924452CDE11CF4F20893DD6FF7251
427F520FE00580DAF1703FD968E0F8ECCDE618E1EA5820EE6CFED97C78864EF6
26FAFEEE194A268F24249D44829AA360D731C34DC285501E966A959180718F72
6330E4CC060588A2F65AE64A720DCAA818D49D4440F5D0B6C1F6C3A107E12445
F1BED2D3FCBB87A9597F01C7332AA79143564056219BF87D4B907A04F77621AD
054935E883B2B137D3D1C4BC792E8335CA08B6D83227F35736C41312A0BB077A
60FC6488C5E02FD51A10AC113D4EF70038C649C1677B2204A77F2ECBE9B3C341
F4126BECBCA61E3F3801F9188A3775924A62D30FB096B440286FA655EBA00A74
9A4162904BEA07CE68EE76018346DEEE20839C9A2FF71179B58E1D4AB30856B5
F5D97295A097174467010B15D733AAC5813CAA633746B430B1AAF9F997FDAAFD
436844D1A56B8E25A89D2CC4BA6EE7ABD167818FD4F6C747E07B262C99EE2C35
323F0B471586CA50F54C6381B052B15B0C58C19DEA82C0CA29F00400B727419B
2379979CDCBFA966AD513FA903160C571C3BF1BA239540B11EF2371A3880837C
6D6CA2F374280CFA1586427AE975A2AEC34244874E4D441DBAC6CD1828841C91
069AA87FAE849C5DC7C9EC1B9876E59F3CCDF8BB23D939F5348D7486934BFB02
CC5A22541ED352616830A510DE7732E5D8F7E785BBD31C2BC9D348CE5632654D
2C1740F89D57FB2AA1FD8FA3304EA03F757BB8F498ED98E48485722E78D97B12
A05F3A28438084D1CF90AC4C3FFCD7B3365941C45E1E02CB13CA1E99F7FA1D00
1C9D489D5C95F019AB4CE89FA3B6604473DBD2CE8E278969E0A0FCBCE68C23F6
9381882443D3FC16966555FC222F3FC4B1207522201AB7A15A7A6F22CDC9D392
360BF4C95DAD35770E0AC7E5EFF015F2C74ED7391F40EC94B8D1C163B5DEE5B3
911A20C2625AD3B24BD94D2A42405E655DA47D3F94F882CA2F479437B4E0BE71
8AFA4482C6FB270F8D05B4599A01403DAAA90C01DF3AA7C2BC7E66AB6AA833AD
FB6E5EE13E45CC7CE7E200FBFE639F9CFFF5D08512C02764997FD28368969BFB
0876F236EF6189BE73AD827332DF1B2EADEAC0ED3B939CE5BC3CEC78975FC636
44FCBC2CCF4396AC7343EC62E0E4F3DFFA2B880BF31D93ADFE201BE9CCEC8BA5
0B9B919E05B851E0909968DA259EECC6AA0743F25247978CC09C28C4F878E29A
5070E4023BCE95FE0ACCCC01D0EE219FA8344E8F6D7D4347563BF8AC030B9097
41F24D4BC9494915A82EE9FD37FBB6A46BF077B728FB569B1258CEA5F51F36BE
4F4D0F890D782E44748CA3FE8C8A515998371D9C7D2311F192B4B7E7C68FC6EE
3F7136714C282A2570FE591F247A08319CE9EF1E43274E4E57166E31A2ECA506
85350DA31AA4C33C9687F5210BA225EA1007C444FBFA2126769767E47A967884
9F68589E4BAA9ED32A7A466DE35554C132810C68ABDAE536D9D884352F28EA02
8A555D2CE11F30598F44A65E2D86B43ECCBDEED9E4E5B5B7DCDA20EAA09D9FF7
422FC91F2201431A9E8FC624FF44D26C0100183D77BC7E6B1A6CFBD3FA8BABC1
AE4CB0FD382E26BE0A83169B46D91429DCB746A0326243E212F802AF6A56C709
6E70C6C7CDA243F0BDAA8832B2533A7133035259FD4BF7ABD4F214ED51BAC2E1
7957997FFB4B643294EA147956179DDF4B547965B7FAD4A2C945BB5AD34E9EA6
8E8D0F03FC275EF35E355903931EFFE22AD407ADE0D5E3A1BFB73F80E1FD4498
4EF2FFCFD32426347DF4575E995DF7A85F48CF5F459A5DB240D3E0D977F15E90
E8CF5587D57B1CD53C19D9F5F97DFE60DE288CC9F2884BE6631E2F7BF2F30B01
DAF0750B1CBAA805921D4EB14B5ED71344E54FDA43CFC4A5152E84C56BCCAFE9
F96EB1B83B81454F680D199B0C04DFA27A56DC1EBEFECE6BBA2E6D40A9E8C83E
6700DED3A8F62A7FB3887F8D26721C93A98830DB6D00738F68C771B6F0F27F15
CE2330A3DAE5FF6BA6BF90C7B9F2A4C486FA21D7D86A392919BD343BF26C8B07
0290559D32B14C9229B1FD8647270B7E6AB69EBFD3283A2E5B68AA476C98030E
179FB09D14D12D884534C22E43D5FB2C69BF2387F81E45EB45615A40B00B873D
24745A97E5F1908881633343D14FF4BD82F96C190E0670AB994356ECDB71E21E
8F2C2440EF97455684883D05FE465A99C13279507AF1E51850404FF0DBFA702A
FDDA99C24F3CCB78EB9B26DBD16930A335B93C745F48AAD37DD9ACB2688E481A
3FBA0BF4D8B3AFD0A002622F9FA6A7642DD8119D7833629FBC8C780254EDBD89
A9DC008E790FAD4D674E7B77B8BC36D7FFC9D5F1F5CA83F78EE0CB3A29AF4D7C
C34E6D04293CF4DBA0DDF229BED30D888E8DC2D1326B8C47F03E64CCAD4FB42A
6A6B60526B6A8BA81963835856522AB4206EE0A9BB409489DCDF1E5A3F9608B7
0F5B824E1B84442AB654D3007E00643FF590900C929F29CD3E6AF6AE8B0A2799
25FCA913967A1CA150220DC5AEE8D6896917
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI6
%!PS-AdobeFont-1.0: CMMI6 003.002
%%Title: CMMI6
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI6.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI6 known{/CMMI6 findfont dup/UniqueID known{dup
/UniqueID get 5087381 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI6 def
/FontBBox {11 -250 1241 750 }readonly def
/UniqueID 5087381 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI6.) readonly def
/FullName (CMMI6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 114 /r put
dup 115 /s put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFB83E8A2A6085DA11
61B1632328B94B21D3CBF2E7752D441A2C9A03F6681FDAB37C4B67D5857720F7
0C4BCEE266586738012A2237A85FCD0425DA7E8E8632543F5BD5D50F9DBAAE69
9E053AECA6027559DE42F7291EB381D866F1293107553809861D43508C6F2341
5E4FCC431AF4A9B3660386AE63E877DCF5E513D0D5702B98D58B34897FEE163A
75CD6F5A2196F91CE5060CA5E72F9C5F79D18F242EEE58135BFAB02D5CA430B6
D1B9A376849751A45E52577B1810C4F0C7F6C8196071D5B08FDB731C5384CCBF
03B460347E0CAC959E4A12620B6C2ED62E06A241D1637F418B5599A7FF3C1390
7AF66A00F7C31B4EDF249C56C268EC9D546CD0489DA51B734C8292CE7B3D9E30
71448C85ACC64FA99B2DEA91AA4CBCBBB9DE20833700AF96395DEEDA3FEB7D6E
D6E3BE4A62CBFA18BD0471C14F3A2FD025C88E8166A9830C5B5B94624A3D6482
D1A1D83805D0EDAC1C79EA858A523D9FA3356DF42BC01886E77F6AA6B04E4E3F
AD107D861FC626F0A439BC3F125D48649E5101BF79C71507FDACACBBB4C4335B
C41A5C15ADF1DF69E1D68C3EB9BE30BDD5385F81D26EC8F2F206C1C7032B9EB7
0392BBCA23B4693686AF8D2E1ACB2FBEE81D75667CD1DDB906BC5B675660ABA4
E63429F16623F20B6A040E4942107CCA26CF6C1F52DEED9EC7EB15BE4F18F2E3
9ABDEEAAEA9AC41E9F20C37C54B33F609F5835AE5A1EC9D674DC50FAFF6D3511
2198195590F62B3B8A6FC8C3431BB8895A2F910F0361062DE32CDA9A7F41E761
B09BD8545CAA2D7124B5688B54705AA52E4716E36C0303FEAD38E0510B3CB496
6C30B115C37E02043D47B4ED796C671E30360800EC13F0F0FF3E0DBF5A642396
EB0F39A9DAF0974678EA1D041F08BD73867065DA91B044EF2AB15FAA6546031E
189936C1FD302BCFBE55EAF369DBA4895DD0996BF7292762551A86C8A3604E9A
8AD29E38BF6FD40172051EBE7C694249F3378ED0139D37EEA3ADB66F3A80A1D9
9C3655F054CACE93BA4AD42DC78A03F42455ED1BD5C122F234F21ACEB8FEFF9E
3BFE0DB2DA6D368478299ED63912A234ADB1DCCF1E519AD20772B71F8522B5DB
24E9658BDC1333D76F07F63D81F7A51D12C445ABF698092A24E5E5C36A52206C
0C41F7DCA529BB0A4D146DB6B4B341459FC17FFA357CA5F93DBCF30B61374613
4846D619423BCAC59B7EB40C14C70ABD985754A0094C98350D01FE9FA371B0F4
38884690DC7700C49236EF68BD6E806E8937AD8B77648F552C0C907007465A76
1475BDD3FBE1CF69C706E703226471C249A3448F81C240ADBE4B5474216D0235
6B0816BB6935A2704E851E20C002F85B653BB0700915B358DDC168ED3FAE3D91
8280A5CA5C2708D622B03DC47A70E5FFCAD5A7C8D9AD563857BBEF92A3BDB588
8B5B55CC9B960F20CA4AEB598DA8488004DEDBC9671488011E836D9D8B6251BF
256D08E6F1808E9D498449DF1F18E48B310D561D4DD3146C2BA64D960E66447F
6DA8B07194E3BFAF662C00737BB7222B55A5CC206A1C46F252ACF93D2063BABE
2BAB874C01AEC438D3F86AE37C9D7FCE4077F5B5785E12C1E0B685134CE2E8A2
2E4DCDDAED2D53D13014E428FAAE22447763D4693E82600F850CA4A49E1ADC5D
C8DFC16E97B9F6164095CF7F31373B591F815621F45DFF77BFBF89EF60C9F50F
0C2FBBA4EA9602E197B9447FAB6AB57B19B1C801DAB66BF7D263F6572B9EEF88
E06744C1FE197B8EAA71E1EB67716B7CAB30C859A2D1B2DB95ECED02B83FBA32
E62F97EE4403FADEC936CC8DAA161F7B509B2723BA2B735572A80D7D087E6395
6A9D34D5963E3C6E37F307C66D1CE551D2F055BFCC7360FBE93ACAFDE2B1A849
37FD373F62BB23C1A2E3DF61C9452A8C995B03D44D6210A968C6293B4A3BE662
C7B0B59E6EF6D53FD293B2C290436B0C448E7D15A63533DE321643E53C85EF8B
060C434E46A736EA617EA00D185323460E77B95C49070B035194A2E7693C3B15
104ED7F56FCADABE49F27F9A576B354C574B5BAFFFC57FE9AF02FBD87B8874A1
24C53826659BEB1EC50446AC26EF3A95877ED3D81D33A8BC1BF7473FB9C11ABA
0F27B38EEBDF77D3D3EA63AE6022DB0D4F1125DF274B86EF0A4A263E108D6044
7A885F5E87362293A53F457CBA6C911D23653DA7CE4BB7D4FF4481AB97C0DD81
C13515F0E3BF8A7E8DE2CE69B25BA9C185D9BF31A65DD290B0D4FDF40B61E2D9
AF92BC6468B3F5AB5D5B88710C489ACC69198D697055B39AB3DE8B3733825C5E
6E763E2698574381A01352A7042A36EA96D17DD2EEEAFF04ABF7BF7D877B0FC7
B6BA51BA994D431F472B6EC4B4C327399576470A1773BCBAC61CDBF0F95DA6A5
0BE5239B7E9CD39E1E4D27EF6695D1FB56D4CA2C2370509547D6D01273CBE6E0
66A696C35D2D0282CB8C85D7B1C51453A0AD0BC80E1D183D11AA78879643D9D9
A3D0B2BD8EE3EDF29483CC5871426232A20CB058EEBDAAED85378B163425C270
B0F7BB46B7D1B89CF84E6A06791195FB17F11F34A2548FE424DE10E376B39A2F
DD9B0BA2F2FDF3ED4AACBD0D60E67C0749D6DCBDE6E79041398DF3FC8D9B6CFC
693B870683CC425C52705902DFD324E157C9829F25B14A057AA92AFA17F156FB
0BA949698EAA0657B03D9538288D887959EF24A427EE7EDE47F304A1A6A715FA
2966273831B5B3A9C11021C153E67A73FA606FE3233C3DB217404C6AED6A4C59
DD4C2A98B31AF5604D8DE8354448B4CEC66022E756B0056CD32E9B002ADC712C
0545C2C16D9457E271D98A4ED7DDE01BBD1856F5C3DA28794D2C7951FE2FE6D9
18643CEEC41CA4A3464D3D3A102653CD6EAADA59CDD44918523B8811C2ECCABA
AC0D188F5E07B37AFD56006B10B32EDD179F4DA693EEBF4DF5425D996585F21C
8780A4D23D24FB0618C12DE65CAD42A0138E28A100257978EDCAD168C55C6F07
78A067F0299890356C2A184820A554FB07448395ECE36C45211757552E288ED3
7DFE46CB92EB2070442AFC85864A45000C4854D728096AD3D4C552EFC26DB6B9
C340358451B50AF9F1B35C2E32D495DE85B5848D78940270DEFC07A14D960730
878B5B55916FB40FD805116C9C2AC8C6D4645DA67A978F1C6FE705EC188DBF7B
FE7AD6769F2EEC4A9B05306D5BCD6EC3A240D6A29ED07D1D82E697DC8CC391AA
015DB6BCD1DA5C9A5A7BE3C5936681215E859E9837027D108A54F42AB24E38C2
4A7D8CF3264AE049D4B1AF48BBC564BCC88AF19D37DD81CCC431D0C554DF29A6
94ABDF8126EE4FE1DFB78559B9BF36FAFEC9791049C865694F9E2FFB7A308FEB
EF0195FAA6BFE7A081B65C5125623903828372F117EE17E588B2FA26DC9AE37D
9A6F0043C019624D3D87AFDB4B90C46AEA78919CEF5D7ACEE316F30EA0229742
55E02E0E2533CAD78CE9BD6E0260A695D776ABA229D89CF9BEA92CE0397821A8
830A557021B3B90CE0B07A4B34C24337FA3FA4A3728B6E013BA01071CA7FA667
6FFB4BA3A28B5D5614ACD4E80E00938C2589CC6CF885A260AF7589240BF8987B
20A19FDAC73FAEEDD93EBCB3D46F735214164AFAF1A7828FE96E2BF7CE1EA46E
FC1FC4527A0ADF2B81CA51E3D96F3E786511AF00FDDD9764CD3178362CF9DEE5
F05D100EC21A301F40FEFC3EF05AFEC140A9466AE68FCFD6CAC1A143BAF2B7BF
D0DF808F0CF87FE2399CD9D2DD424227CA7D4073ED002CD555FBE8057A797B60
313D18ECDD779FA7289D4E7BF82D95A7535CE3F0F4164AF239AC666653736654
C13E436B526EC5A1DC97E1D85C4EB563C7061AE1E81F0B38BC45B17C15FDB0DA
E5F6332721A925D4DD5A97BFF3E3F11D4F4F43BAE4E73A294D314527397F03CE
AFD12DDF9D07DAD8D6C8EFAFC2F52E20FBF62026810C0C31A1EF71FBD612654D
C68B7A24112F0ABDD20EFF3DADBE447AF9CE568F873ACE72B63283CB26B89BED
4B3315F26084453B1EB0877065A76E7B704B27F93DBEB365574A78E92FDB4B82
D6ED91A1728F571FC9CAB636A6E81D0C1C4F5E3F6F4574B6EED48BB61EFDDC80
1831E2AB9327B37881F0CA5D5265575F210BF4BCD8653B4193F74E3FF65028F9
2968B8127C68CA2919DDF529EC882EE99901146CA629A07B4DC59E7868DBE083
6E546C5769655EF6628FE2EA78AC891D130108192053D5056A7BD06C09592AF9
6310B3586A2609DB94CB0079550358F5547B9FBB2B77917A327EFE3F972C7263
54076627B4DD74638C3105FB25DA246484799D5326EE80503F18672B893289CB
1FFF8D3F662FB33E93025D86803551A8A1DE363D1534BFA3EF968871B19FB189
DAD841C177E2AC98B6B69A78048221C5EBBBB86511939D3A9963B3BF021185AB
0B26CA7D0A779DC2F7693C7E48286BD60EE46615E31B93FB0E6992AE20C792A4
72AD6FFAD6682D0F606807D7AE63A6280B5967FAB889DCDF0F76347CE302FAED
A59E1B1AB785D9D0ED695A0D05DD3DF0EF0B275AFCF9EC7031E1357E99A3DB85
B4D137567875F7580E2BEC96B08C97ECB40876000B610E0BFE81E7884C9BBAE6
6BE9C2C612475396BC10EC7FFBD1118A7971FE1971DFD0CB677ECA65DD837B5E
C7D36FE9F20A15A941F1E77C11093C902DF5B7639580B9C0E4AAD13518E1901C
1162FA095F301848770C6C618E371A0AC3463D0D94221EFCC0884B21300194B5
97E03BCD5C4878CEBF352EDD1D2173B56C9B6A08BF3F33419DF226E1633CC5CA
A88A57AA85E21657569916E9B4B79E51B5535A57B2D6FA3EED1D0AA32DC0165B
12F8F5A681040B456D8DF175AD6053A2954F327F4EB4CD453A056FB1701242C2
59755058640C62632C764E002CE928E6B908BB137C28630A3CDBC7C34CF2B643
FFAFF20E345A86F31756C78A8EE2B9B1C5DAB2C863B29A44190770FD90BC6AED
0C25942BBD6A370C21650947B49AC8EB6825BE65DEFAFDDA32007754DFE0273F
B995B8986E505F95E58A3F8873545DDA6F3FFAADE992F3FF7B2DAB76D663280E
CF2BA18BC8871A7C361AA3600B192948CB918FEB0F2900AF2BCF169576828325
449CBF0C7AEDC299FCBB061F491469B9ED1D56771A03F9F202550E17FDB15B51
4772B2F06E6AABA4027D13E8730999532DB2475630D2F8EB98242E36F5B45A94
2D8083014B63A806BB9A01906143482C614B5CFBE8C5354A3F2438B2160F6DC0
81AFCEB201EC67F66DC5808C907A3C6CB664F444D24095D9A11D4978A7B57037
87C67552FD59F5713D0FE03462F9A1A323BB3EFF0AAD61B1792CB109CA9AE4D4
D7F7FBD3FB91258DCFFB4634669FA13E03C0AF699165311CBF37D24378022787
87D1320ECF878F859149B2F994E700A32CB7253297AC58753E4583A08A1F83D5
CBFF10F2D26D71CDB20E1C69A666E9C4D23BB0E6BF1097FBBB204EB736E61FF0
C3FDE1986938F8099694B9F998B3C735770FF21F73B1A6B750498BFD21184F11
5E6AF0F1FBB08EAD436C4AADE1E6B815F5E58988C113B4B2335A340798BFB201
40586D0BCD6AF5A08CE9AA042910197F47D98CBB4411A6D435A46F46B3964F85
032D7F8D880732276A8FD24DA772F642F06C9F3EB4C9090AE4A3AAE67D8768A1
7B2A57E15B7FC626450372F40E3EE28D8D997CCC8CC89C644461D1110740407E
F6D884A0503E05AF830994AD0CEEA924D935749F6EE9F2DD65A58ECD59229918
A303C90E19E9C411FAF24AD5E9B786178F8182692CDD508A4755123B4A594AF1
A8E7287456C1CE2CA485CF4CF9DEE5238AA7328DA204816F98B7EF49EDB30875
3CF8C48E0465BFFA8F2A1CFB6A8F165B63CC80F54C669D02BFD9A0EA0FDE2B40
D69F0101AE4D2C10185AB10953019FE7D373BF40C2F6D4E36693F118866D1267
12BA7987ED4313E8635DA02A4FC1F7815105F8EDFE8004A8801CC1AFA8D123FD
1768A6C39E838BD489C6BEFFD3BDF650DF48D5F8D99DD5A2E8AD235F2CAE8BC9
C13AE9B214CF3FBFAC7BDFA54CB6E675273330608BD35600775FFB2A96FF648E
DF55A78B43CF54CABC0DA8D574CC5C5C62E9D658EC62035EA5028767749E48D5
658212BD39C7E76ED0C6F3E0A1D138A0DB8BE574987AF1E43070F1F12C560009
F48993FAC935EB56A5793BA13C28293601D268B4880F9BC33D553FF3B6A7900D
37900BD3B4B558C84BBAB09B4BC2B14D32E49596DA090E586E28D560903B9744
7D014EF2A6AC4F711A025DBBC841F1C1C93BA1F8327DFE33C803A0993050D590
C7AE262261DB7D04B9DD91F89927161A69E14BB2A48D29578410E312A4793101
B6CD65B298988AB798F45B76E1F58BE24DB207C7E07014E17525B436D41FDB28
D1072CBEB526E17C72DDA00ECDD06394940DEE8BD02CD3C81BFD12BE0568A459
0F53010A0655942C932905FEE87183CE357887E2ED286DC1E89F2F401CDDDFA9
B418F218D4115043892882C09F2E3749D4671E75AB1AD01C78F59FE3F54276D2
A91512C21C68180CCC0E147E834002D7799FF393842CE88BEA714672E1952C9F
7CEF2FD0115B0E292079909A7775769341A7888CE6063537ACFF225B4F396972
41BF46C599D278906F3BCFF81DF941BF5888DE8A53CB0A2D71610CDCDCC1760A
7844F89FCBB892AEA853CF5D967648995559EFE852C95D2EFDA2CF063500F88D
2C83B615618831267BD8F5438DC53C6433CE7347E9C55E103B450EBED6229219
20E979C00B0B9D86345FC3A8EA2B049B7E148A7AA1C859AFE93381DA74CA578F
8FAAB28175D5B57F6A74F9869B2F530009E953913C6925D0045CB2E817A17742
3C5B7574E9BF3BA7B769C161C2496EA2D346B4E19E434120FE92A0ED3F4A9ACC
A8BFE55F04D17DF035D01FC0B06182D8C27B6D32F36551B9AA56D61FB6A34254
D0DF918C6716D8D05B973C8BAD5AD52C06EF3C6503D4E0F7F791511C79AE74E4
4B707612149D583C5D96E534CB45F1E7CA5B23642B1BDBC881FD8E4F66CCEE96
7CC0509B5CFB0B3596682A81E682DAF6AE58F605FD7A1F414F62572298AD8491
B76D0A23B4AC731FB8E7682F506B5CC02F7029827FFD866EF4DBF56E07E7743A
D42CE65B38EBDEA193CE5B172E87DC88452C3DE192E363EB9DBEC4EC65F53002
BE9E94180F73B53CE1E8EE9333DC86DF5FB2561FA1F9B2511962CBEFACA739CC
38A286651CEFBF451FF6568CFFBA8AA68555181147C1CDBA18C4F5C77BA8548D
2B1BA37E05EAF7F69879C3ECBD02783028CB1A8649842EB71023F89CEB36CEEF
A9B04E9ECB0577536B88ECE7C1D81B0D6D5A478F8E92DF83D194759437088D7B
E93C6AFD0CC6D568E60E2F1265A6613F97A6C4068C8EEBA70F6CC4E88A80F65D
EA7B498395390A74BA57221B86611D3EE5DC4632F139CA8A15E5B9D2DC97088D
7CC65197CD93F4803BE4246394F40EDC2CB4904BC273C597F13C8DC680245A3F
F1AF2D7BCE5D69E9CFC81E5E9F46927C5F55C719AFDB2CB1AF2E4D55B0E3ACA8
6BBBCF253CCFF8F02B8542F296CED0EB8A06A88549DC959E22C3D6C48F310452
22B32C44B046A61A4F7F8AED613DCD3C464DB2280D56E517CFD16DC32C83EACC
D3E936D2F3A883B265444D818393E30EE3AA59E6FA73DDC421F5A0FC8442F89D
CCE98189ECADC080F1973E14012C2B87F6A8289D7E1E24B79433A73BE771A305
ACFE83195EFA1EAC827EDBDDA678979C87FAA5768355728EF195A9456C7098D0
9D501CC27070F27AA426B145218C9315AFEE5B4BB37010E988DF32E2D7CBB3F9
F236403EC9325531A6CF39B45B12328C9EDCC6AF76A0DF223531C12CDEC349D2
325D6FAAC3C41E378245A0E017C3352B9CB7F2A1E4AA3D9A44E39D5BCD4C4FB8
7316BC327ABA5D5F5FF14BFAABD822D9433F0FC61DD06BF1493BFD06A184A94E
7EC0C67DAF6DD7825A6CBD56048BE3943949B1CC8EACE2424FE4A69CB97F313B
D84E9C59411BBFE163267D4BE932D830CC8E42E2CFEE0EB76A036B6D9FFACF7A
F3C0EF69030754FB5C0DB9755DD7292B4C730C54C0F76DBA3E6C934A72101EED
2901A35F0E97C666A0F038A9C215D92BED63C96741F3ABD5F9F2C4B444B6919F
E7C44D0F515535CA4864DE403210E35DE285BDCA6D19C77582D4C1390006F9DE
CBEA7B882AF38F42B1571EF3731FCD943CD830226A248408018582EDFEF29E9A
04669AFE475D7024E86F51F136F36FF82EC005C37D0878A06C8A1A0E2801FBA2
7F360C9B5ECEFDFB060714B514D154B576C81EC27B169B0AB3D41E899F898BD2
9371E320316B60D463461226ABAF2D69496F57C21467F262DA49DB32C982347B
F6C037AA9FC9F825FE6D72CA54E030EBF0EED41436820063C3F94609EDB78B7E
9F5A86E1C6E71FBEF5BC4DEF1CA39E9EFB0BBFD5ED5A4F0A11A947C815F9C18C
37C4EF184D386B85AB81B6DDDDFB0D2967B2D0A1C508412C57B386F942783430
AB1E89933D44C5E6F4FF6C3BF0CC3C27B62D3B250DC6CEF57F12138C1897C493
6E9F5589963D3F3B4D6588385A0576EFE708F952F519283A82E3B86F6F66D024
2B70DED466BEA5292F527E00DA15E961982B4CA87E048CA648B1C091759D338B
D41B66BCAA9E7A346F2A3DFB43372BA78D748104DC4C6104FA64D625557041A4
E7009010C431E2D5BD2671E4FB2E3B469C54457FFED3230864FD89044AD0F383
5159C7DC38580C676582F9D70A1B839AEA4AEA3C03F06225FBC8160BF775954C
79EE5A0E750F59E26ABFB3C48B4A57954FC7F95CAFAADD3A1C45059039EC2C8F
DA72B7ED115CAC00D1B5E7C44A300A9186E9ADBCB59540F294B9F2D5C53FC550
8354D014AEB9D243FF45D5FCBFF1CE20396A1FED98AE11BFAE589D74B5A10751
2EA61D3387AC14779AEA68803CD34DA8D6CE114E06980BAC6353A2CD596FF217
0412F09DF2F7B6967A660C9A9B87BFC3C7C6223BDE70CF915AA39BA670F68C28
96B85D22D4039D569DCAD268C5E7733B494F0F06B9BE8303FC887DA2230093DA
06BD012958BDA2438C0215F3543166AB7EF67944E2EC0947D7133A868570CADA
AA0596BD27F8212D2F16655C8ECF3283A04A8330657B6A37C1D83380CB1BE47E
B9D5D3D56D467E475757FEF96070A9BE8E1B0A2BD806E1DB41FA6CCBB97ED9EA
5A7C76F9DBB5FC361693D3D8A597C8DEF6BD7C4CC62DBC83304D5657713E6A96
9F506146A134B72B40E3A03CE149025C55514BFD9C3255881F51D9E3A4761EBD
1AFC49394ECFFCAEE83A0270AF386EC655FC1CF0B942A413C7DF42A3FDF24740
14DCFDB71FA18D8DC391A108FD1E3B50549E2CD231C749E7B9F3D0F14E0EB47C
8617EA463E3C10A82903B92B0263A79DC94872B665172FD094D332D5AC51FA02
60C0EA3C8595258E98BFACD3DF442D2666F2E08DDC3B43F298EED3B7F2F47070
110A3752C499793C007B89828C0F75D56FCA463B826BBA0CBF26A4BAF175F452
5A0A4504A6C13B79958BBF80B2C61F9AB1F1F1A1CC01790F397A5A594E8A1B27
ADB6096878D0AF98E7564D04A0302168B1948808C13B51CE47B771699A8982E1
957E09F588A9D74B7213A58D71212720D16BC3A2A20667174F2D616BD15947A4
A9AF40B44414326F0E6D35CA218311DA1EFA1990FD788FA5DEF21D16E34EE7A8
A76FF245F8632C65B4C2DEB7FDA4670B857052AE46761B17A52DEDA9D45B8D56
00A0FEF136209DA22681E4809A41F97E5AB1A28D0B38BED50A17BFA6DCC62225
AFCC323C82B509F62E867549B00D06919523B30031164B721A27B4676C3770F8
C0A1A297AC07FBAFD0D8F788B28A442EB7FDA3839B2DB7C5EC8534FFFC0D2560
6A54D7317AB9DCCEFDCCAB25726D32FF67E81CC824B934EFFD505B3FED4582E9
DF0125ADA27F661A1F7279B6D2DFF5E4F19A4D0E8AE880D081FBE2288C202915
D70E89E84E0C86DD7550442AE3E0F802AE4B0365F7CCA4BB6AEEE525FD536373
2C434F0AAF5CDF526533B6F8C31A824BE2A1CAAC359DB8329F7203E49AAB36DC
EB8D35126E798FF862D5674BAFDFD7E04E14A58394149C543D265D252092AE1D
77F28B1C4C49D2044F8FCD48DF1411937E6C447FF25DEB62A5A0EA4388102507
58F786D6342E44E8ED01110B939214A68A02532E98196A359A70DB46B2024928
04E0C47427E9A9A3DF21083810562F15E056497C6B74035C4C92C5C76BB61CC3
BABD3E1AB72CA6F4737515C366064755D13733EA5664C45DD34DC3C9A1CA705F
1F9C021643C725AE7BD71F24AE3028DB61E40A731E984FF2CFD2CC7B6794A268
F4201E4A80F0E9C9124C6B39CBE10397A5CCADFF268D98B28AF78C2E7619CFEE
E3F54FCAC317A5E97769A99A0C7306F30E53DB2146F325383F52101BDEFD090D
2F0AC0EC724F41CD5C458CF2346B749F171F96A2CC7F3C13AF43BFB2C065B5A7
9073EBD93A18574FB58FD8D014BDD15A136F1BC56BF74412771EC4D0084A872E
62355CEFFCFDF7697776B36E556A109F9DDB88B41E692F98799B232E58F4BF67
1D04740C03244E924673A9ED98191704741A6C9845338FD9A61FE68A6EC14933
4B2ADFDEAD2021F5332875A62005B3C85CD935A2717BBFF5989B5182EF092775
42B7C0DDAA7919B19E95D8DBBB65722D3741114301D268707ED5A5846990123B
DAE7665C5A1909F6ECC07916D1311826C04B4010C6C24BDC55D8A60564C93521
F88C54A01F62D08A42CC65B2EC7AEEFC1B6A0E749F595E1C125F92BAD4BE757C
FC79302CCD1F28F02DBD37AF33B34F2EC82C7A50E5375E6A63FF24FC104864DB
0E452D5BEC576F1869AFF87FA42269A954C18F52C14DC2158B5028227519FE99
88F796F7EB88C83990EB7319D3E2064089D31CC496590552F4D3DA94ADD4F9A5
F73A486155DA8BEF4578144FB8D1A92925D6B4EA37730723F328E55840233895
319B76C0BA5656A5637F16EFBE33A5509942D32D5C71A9FBE4FCF142948D67A4
30CF5EF467F7E4AEB114E3EEC89D48EC6B664B3A9D9F96644B23842F72C93434
1753AE7338792F039BB28262AB1124F2D5AF1BAF65BD97118085017D46432DD2
C9C2E5B6D273B99281CD46BF487F3F9D2F39B100C5E3D6085129C2111911B83D
9433333DB15B9F1E60037414D931CCC832F39B485DF290BC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI9
%!PS-AdobeFont-1.0: CMMI9 003.002
%%Title: CMMI9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI9 known{/CMMI9 findfont dup/UniqueID known{dup
/UniqueID get 5087384 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI9 def
/FontBBox {-29 -250 1075 750 }readonly def
/UniqueID 5087384 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI9.) readonly def
/FullName (CMMI9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
dup 13 /gamma put
dup 18 /theta put
dup 27 /sigma put
dup 58 /period put
dup 59 /comma put
dup 60 /less put
dup 62 /greater put
dup 79 /O put
dup 85 /U put
dup 97 /a put
dup 98 /b put
dup 100 /d put
dup 107 /k put
dup 108 /l put
dup 110 /n put
dup 112 /p put
dup 115 /s put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBD07FC5A8862A8DB
7E2B90C16137614CDAFB584A32E50C0935109679E31306B8BDD29F1756946A67
7A7C2D9BA6FAB9B20A424AA0E6F4BA64C2801C2FB5A1156CBEED0ACB95F697B8
BC2A6E6AA7EB1F9FD8E3C9B1A16697EE1F0E7400421A7765AB218FC837A49365
82DC6B2C877A7DA84A81E6126EE96DB25C17A207D3020A045DCDAA064360DFFC
E3CD50E21ED239D2A6450D04F879A26443ADEB6A20ACC504989876476C7D1A74
91564FEA1F4CC2C8C8FDF666DB537F315AE1886C73CB5B00E67E7B398A6C018E
540EAEE98BB8136C4F044EDD63C33431D2CF9740F051DF365A4045D9D8782112
7BB5D494D9235BA98CF2F30CB119F5A904C32AD04C960C43FC1F5FD8DA7D90D8
93AFB59F3FF4F796481AE2A7548F948FECFC6C127C4D3F159B08F206AE8C296D
EE470DB2F879EA79475E029D22D7A8535C09A18689DB0609CC233E5199C02756
972CC9C94D9FCE264DEE5D75C8D651E4E2D1189AD9588CB815722BB5EE3C379A
6F31C2E6AE1AE4CCEB29766190AFA20EA937114978752189F1A9F42B39483149
796FCFA123BA9CCD1D9BE28289660BCAE16C40B5B504058D55CFCBFB4F4E3D94
DDBF39F157E63946534DA81C018B1C01B9F10DDB55E0A5C2B3985ED1977C039B
D6755EA42CD09E27751E159C30B93F376DBE61CD3AED34BA36A768F232EB3B80
E3E6B77C4A48D408217818E398B83D995AB6BC871F20991DF57313D6EB0C793D
0F28088EBDB7F38DAF7E01AAB3476EC24D7BB38A9889A7D3038D930FF4289B83
F54A7BE1E2D98A3822098D2E4D067A0D400C20C0B2B4BBD74C13ED1B827490F9
ECF48F8C3994C1C5AAC9CF783BFA4F307528F51EAB55F961808A42ED53F00C97
72A432EAEDCFCFB622389BDA707B6ACC9433B065CF29EBFE93AD14B8ECD5F47F
F073F11822C49B8BE924CDFA6348C3A75E9BB9BF3F31C41716B34794B28CDAC9
4DB8B087E180A9B3B17680F73D9C12C8D86A922C948093629F5D7F542ED882A1
692F4F6696865E53E3E2DD43B2D5E8C989CFAA5CA5C4C5999045E170BDE9921C
BACD6F2863F5553EAB2BA2D4A9034729EC0C4201DE90DA89B0A27C5A5C974109
4E37BFB3F46B3A506169FB0C68E1CAFC844419A8D261A1FD86A3BB78E33D5FB1
CFC687A5975987CE45155E5FDFAF0CC5FD5568CB1C26212F92E88255F0549F59
41B33125946DE43436BEC00804063FBF03EC796E3361B1C852EC3038D107F80A
9198968265D5488B26D7670B22C2D75EDFFD1B7B4AAFA36DFD94640C9D0E2D20
5BCA18683EFB91834A3939AB8EB60E2F09655BE003582634C52770DA9668C292
2E02929D812EE2B0CC65F020064AD5BDAC5F5693B30508F40ED8E20E87149BD5
8DD41AFF83FD1944804017DC5A04512E593549FFFAE501131CE2FDB65EFD0B8B
33809CBAEE411B3941C241550B9C30DD28088708F1C0CC3125CBEDCD985EAD28
03313741F67DB5744A87B381147D5BA70AE1145C27F794854628D87D6C1ECCA1
749E3465B950175D3C3F40E344297BD92D3190041A4392033A79BEAEAABB8DBE
CC14E39612F43721CFAE6F79074429221CA588AA2501DE520A464DE157A03AFE
3C082FAE7628FC0C57FFC61D0330AE6332D20FDBB09BF36848FE05E782D6379F
64F9C82C45402481B0A35989027F9756BF5A79DA2D96E10F39167ADB4305578F
90B509B6891338FA1D67DCFD61804AA6621526B2EE4769589A2646581712AC05
DA6E98D16494F07D612743058F54FEE516BD89A8EC3E03F9D7F905175D3412C8
F7329077FD6EB25213F3CAC94BA0C3363B759401B6EF7548C7D709F3241D030D
4EB46A1AE81863C412BDDAEA6084C37143A4C5E41BC646315B1CD09F934186CF
49D1D8239E363A435307030BD79536B50B723A39DD763DB539F24A10DDA12BD4
E467339D2D6DB177D6FC539FA77D2DE4118EBAC161E928749F7C753ADEF86117
58619F1155C563DF2E11ACA8347908B98113AED58FCD0394150EEC94B7F986EE
88BF7171D208D8F1774B1DD478F0C2958AE372D257E7EDF0F6B5D6059CC4D5D3
B00FCBD2E9CBE79235B9A5A3E943CC27AABB58728C95C7DBD4F4A1F8A4DA99AE
7377B0CC0BFBD454794398AE0D5F7281771FFE87B25A819F36E692286A42D776
01794A43CA9BB30FB8FFDAAF014F909A369E34C2F6C75B7D4EB9DB0580E33F46
19654443AFF8384B95600B86FF8E41FEFD032355626D60C7507C058EF832DF41
194B48A36F11082D1DCF4723E21401E0C7447AABFAB4639B26E3D2730E348F55
53EBFF39CDD03E06E2FA5FB379603C879EDB7E1A10F89695C9C47DEEE52BE0A3
F446F187AB9D7E93E6F9387F21129034F36DF40605D28FD526AF82CA9D232BE4
412567F06B38ECCD496EF40A7B243E46C9FEBA4F1BF4B1ECA029C5EC239353D6
C0B100BF7E7DB33BD1277DE104F15AA19F37340A777741AD1AD693BC76DA48CC
C6F83CD84591ECFEE375979972B0FAC4C10B625E4BFB261B9FFFA83C31DA0108
4FFB6377466E9739E0EB64424BD9FC7239C7DD834EC6788A0F97FE714AF92831
E1BA36A8A9E24739F1DC82DC26CC3CE28C210AA7C569B19E1784D663A0CA4E81
AFF43E86D6F5F63778847700072CEB77A4EB946DC1F23DBC00BCE773203F76DF
00F0B085F31420672974DDC642D885E95BA6BBE43E1CA8ABF464D9881CDECC7A
E98E31B9754C9B72A8BD5CF6D4D214DBC3BA7A0CDF6635953F5AC1E7639C4A91
C7AECE4C75CA3389C348F656FC2CC96C84C85A926237B6504DB51937C9CFCDAC
B75C31ED570D180757884E27757783DB2D5F35ECC48C496CDA342D49AA947BF8
2FDAD2F19DFE8CD1C76A8FA08F33681F3E12E229D7DAB45BE3A3F258B5ED4980
F15340CF20D965252843E026803E8AEE736EC41CCA82167401977AB719AA2F50
0B791EEAA82027B3C712D2EB9D14BF8F94FBDE2227609BCAC41EC08DE2BAC023
28352F913F7DF08D4E1C66E83F764578B22B4EB7191E852B91ADCCB1BCFDB1F4
E63DFD152E86FA9DE9BC8908130EFDE29CC4401339C05B5B9764CF8EFF14951A
C6C13AF979546996BF22F2B96D3D585B90CD27DADEC78914DA48432C6ACBDD42
20EF583FD41F2F6D6D10C3DF7DD077304B5940BB0462656E306CBD91EB9B756B
7014B1884A36201EC582FC9345C386043DD2818FC301EF78791C1D7854F8FACE
5DE9801DE9F59D5B4271E003AB897B2EF49501589D681D59CFFD9B03F722EEF4
74ABD29997515DA3591496B62666744EA76DCA45504F8075C0652D6779DBEAE4
90430C2945FBD60AD53B51DDBEFC7ED703C418B4B244C8FFA5A3C1B7600C5A55
3EBDB93C16AC191C3A28EB2279BD3F0D67C826BC6A73D3C0AD02262368AB4621
98A1605F2887BC5880E1AF2780330E0FD01D7CAACBB0F008A42C427F38236066
54799594E515B289044BAC4DADF8B3686B4372C5110201221FDA923F131E07E7
93C44BAD406838BA4D1C277EF74098B8C0EDC41EEDD58C195D7DFF5FEDBF96FC
19CEBC6C3006DD2CBF76916B4298BB915663C2F61AFD7747E03A03BD7280197A
9DA590E3D081C6F53DBF94E8D6FDDDD910A70AB18A0F6D48A590FFAB314D6CFD
E3FB20C1F3C91063F00726A2C13A3D48323F9854839405E5A29D66A43E6E2B84
A8B3765F1D817071D4D6FF42BC785C2D11AB2B9452F141696CE19C6AFB9777DB
107D6E22D8CC6C26440BC48248AD8805C4329D46BF433741CB519B21663392DA
5DC7FC9BF37E5BC396BFADD7263D09F6B4D69594AB386B7BDFCF3BACB97A0E08
22013E716E642592A20136CF9CFD61D4E515D80E06A4CB4FC9D9B916C93CEA95
B83B98C48CF36C1D02291D4F5C0419338D64E33C90C90EDD2BA3B96D70FAFE0D
403A060CFF448D3E28A9B1E3916018465E86095BAAB4706CF7ED350D7C554789
D7F4FE5F180767DE8739259E68CF142040BE1E2E8C6152DE3417C1FAEA7584B6
20781DC4A9796431EE713DAC4E713C839D7A4FDC8AB6BFEFFE767AFD8B67FDA6
943AD387E5D3BCB09039ADB64ECC2BE2620C6EC269E708DD06C311F450099E33
AF46AEC644222E7DC4DBB9371EE12CFBC4F9B27AB46AD1DA96CE006E1DF8291F
A550A93026CBFFC1087B134EC6EA76F5E109CDA58FF47338A0039A786A575F70
B8A03A4F9C8D07A4C856C77D9BCC8E3EAA740172D0C2D0A15BA35C9E5717D7FA
2691774DDE730BB9D7C70D7AE103DB8D35F3728470C76EBA0E670634E1A0BA84
2FA102BAD7271DF2680D86A4CA6FC353869987700E5E3FD778165456033D624F
E9B3E80EBF431ACC934AA0357E824B8AD73E222B510DE8445C55C07C8E5DE46D
E478F832BDDECAF2EBB11941DCF84CCD887043FAED9AA90D12BC8CA9A0C8D94F
8D3BF1F80B14B6CAE6BB1C6AA405AA64BB94D5A82CFEA548BA070796A02F9642
87326D066101435AB9EB40BA9EA9E61B363F5F5E3B924369796E8B78DE3414A4
2B79C6A13ECB2F34E6299658D07D2B3DEF3D4383CE009A927F0EF5C196652842
D96B857AB5E905201E7E8BA21A5EBED1FC6863BA9A1A6E5390407F75055E2EEC
512FBDB3E82CEA13663F1A1944DA072C765D8CED06AB461470C5723BDC1271D4
4D1D049D3EB131743F1EC9A6ADDAA038ACA2C41D139DC6A84EC3C61AC7F1E559
6155CC2F49171F6E07CF56D721D9728E87FC7DCBCAC46455A3694C765FE807E9
9CBC2D304AF37E0F28CCB22F239541B53A4D24D09C662559267467EA487BD33A
0BEFD4899B581D20582930703A868655C31BE935364CA6A95FBCB22CB714C040
9718824DFE97929D0482430726CCB5A5307957DD2432A9B6271E849148DEB76B
FAA290FF6D0B18DC5B76407852E81C105EC6CFAB0F620C6DC9DA555A33C167B1
430A8BC338BFC7D75B7099CC906AD923FA107C74D3FBB719D77A4E5A685FF9D8
56424EE4AA074434B809D894ED50F6A60A035C5223EA25DD8983B9B34210DABE
718D7B2BEB293FF1B63CFB1CBDAFC69552963D90F5E3FF533A3FDBB626E9FAA3
F3C119E5E01C7BFF832A033C3515BF049E29558B1DAD652F2888E339E67D15AE
95F9BD14E3253DFE9072B24C0E7E85025B71096AF51C86AECB2921126A43156B
EC812B32B1164BD9B2B947D503C015616DBF2024F5C8CB3236C1DCA653D661FE
6B1C19A22D272A176B7F1B7F9E67AF40DB0EFD4940E58B2A050249CA4E55CAF7
6ACFD84FB46FEF952D18552B3972D79D808B4C263B8C7E1BB647A2D03E102867
630D5C3F2C917F765A4F6FB8106BA6A9D0093E27A4CB6049C2371287D94B5111
6E7020776EBD744C6C920464BBBC0AC206033E8240017F8CCB112596ECD7CAFA
89950CF43FD87ACA750C03A778A37FBCE9C82C2F5ABB135BB02DA8E8C0D24475
3BEA9D79372D0022FF1ABD378C151417DBC69FE5C9CA38D23A3900E34BF924A2
90777ACDC37930B67DD44A2E76DDBD9B89598D5F626BFD325A978D277265DA47
38CFAF16E7FF1946E15F41CA73F7B4B02E5AE8FC4C37B115BC567E4EEEFEFC34
EC8974B1465AE57759EDDA28DD38A9210871D35D331AE1BE6097C3EC21C770C9
B25D040B2ECCC3AEB1EA1BF99E0C2C0F192C13BB9152CFCF75332E03F9CEC376
9B8C285A35F53655BE38713E09AE34BA2DA9C06FA42A6FD2D00CBF2AFD2BADB9
1571629C65DA38A431710CF5B01FCA68E8B8569922FBC3F9B64A5509B6F677AF
1B97E91FFFEB6308AB68AC58F9BA43DB5E764021E75B56170EB44C2C0A7DB86C
62B8982256D3621EBE3DB3994DBF5C5A14CF34B4AF3BD5697F8E3203085DE9D5
84B0598169760B925463E93DC87CE70AF4C2DF0F4287D2F2069847BCCF7A37A2
AD451D5ACE4DBCCB2E14D5DF38B226952E7446BF87BEC736EF3D5AE793304618
D66D3299AB9F9CA1D13F134FAEDF36750046E27706C7CBD8E0877BB6276E5196
BC2A355D109C0253644918E1CC11B717DE6FBDA201E769812752888CD66268F6
4ACF4A9449378F9F9923D584BA1B51F33663BE7A306887BC14A37E3C5A4654E6
531D6EB63DE3946BD8BA95CFB037991174F36D61D842071E6625605CAA350A24
FE551025D10871FE0E2599A63900C8520EF4911C53A03897C8BEE152451708E2
43FCF4E700C583A5E8DBCC03BF9CAB864DBD19E1760945DEA0EC0BA38BEA8256
D3A8D4F70F6685A99C6BD2BA8B412A26C002D76138CFCC7DF6802931E5D97BA6
0151F6A4C572235B4196B22B7B2D14B32886DF0D2CA8A277ABAAC53B63F64CE4
E4C088192AAB674497E8AF81961359C389B51F4A257373D907C615030BFBEF53
DBD99058FD06E352450B658478C10454AC8FC0232B70D5CB916981978053E358
99D322A07294748BA427FFD1E45C909171017B52B7C742FD77A8560852D819DD
8DD53211A14D7B2FD11E42941722FD3985D627FDAF87EB57326A0D290B5077D1
8A4230BEB40523A8565F95E0D44F036A571DB698EDD9D94FEC9512369E5E5E73
A3CA5C142617944F4F99C0697ED088ACAC007FCE06E5A6EDE7D0E03A3399DCE5
362271BC31533866BA79FD1FB3F608B22CCD4111FFB1BA35D920A23AD157C6B3
C3DAE11069D5E46DEDA7158C6478D8B8C0D9DC237CDF0CC6633911673C43FB79
E4F9B7F27495201E5ADE66255BC2CBE9D9F237DECB62A19D62CB41A1C92432D2
07F0629E913A71B3F1AAF8B8C5AC66D3C8605A48F8913E39C859E163DB1DBC8F
0ACFEE80A40B6172032E95A76B752B873FB4DF23CF3A655AF1A1B88C8DC156C6
190DE72973950565454C0A188A33395FD3D529A88F2B578356DE8EBBC12F04C4
5B899F667D9E6F3A4EC6DD8DE71FD4C2E2B6D56823EE4E0526679D71FF1B868D
F261489F06F97B010CCBE640E2F57BA3DC3332B329F7958394BA9777D833AB50
005E8E9232547104065ACE33396772B0E0BD66D2C6CC54DEDD071E444D8C95F8
6F88B31E20FDB80F77C83151B7E25BD3736B4F9BDC52EE78C41E9475E5A6D94C
D348AB42F5E36B4F167D29EBDFBD43B03F77EB296B06A36880FF17D412E77EA9
F2E7C25FD05E16BEC6732681EA21AC3FF6893B93FC09316A370CDDB86D9E6087
F6042C3F9ECD742778389170F5F041329782FB9F9702F7533E51F355F71825AE
2BF4F8FE50D413AC9A20C41B42537FDBE8DDC5A5C793D3760C1EE13716068752
F0AF10812250BEDFB4D7133FD58F4587BACD572505C84A7D3802D27443175FE0
0D89C3398B55176D8642AFBAB5CBCDFD6220C8488564B4306D74A58CD2921AAD
73CF803C754DAC2F30A5324886E273064FA51781D5BC596BFEDDCE3982EA1AA2
62CA7BAA1B16C6EBB99B2AAC4E6C9CEFB3D10F19987045C4918DB239E6E63D79
5F44B9D097118D081153AFF96E5EB39CBFBB99A3BE30909F614869031358EB98
F07A97EA78AE50375941B2474DB46AF3305F2B208D45921F93743A6CB8AC584F
6BEBE25ECAADD5A789EF60C9F54446687E7B030DA3E5243189F02BA46BFD28B7
DC14822E136AC7E40CE20458DDBF356488045C95907363864CD6943643BF0109
EE027A3091C11EA392EA91320EBFEA3B857370AD8EB86D73F035A476F7058222
E8CDE78CA1AA9EA69A8AA6EBFF3E67324C567B914134DE042D6F8F18A9373107
536E8D90189917D343F5299024239E2EC1D2D177D82E97F8A614D2BBB0E55396
D3BAA9869A0C70147753E076B7B3627AC4BF0EC971310C9E947E11D1311B45DE
5BF7E34E78760F8A25C609012CBFC8AEF7E7DF68B41BDCE88DE54162B260CB91
C49ED99825BC8E9C0DE9599E8F9F8AE662449D3B57B509FE3AE55865902C743B
3754A3A2F61C5FEC5DD89072F6A6708A2EE664643888AC42C394A630FB950DF5
FD1CFDF3B43BF9A1BC3C352DABC09D118824D248AB38F8CB3A21EFCCF0455BD4
6BFEEF92859123FB7D62E428A3895B80C096228469FB3E983597014E579E37C8
51923603F3A1833A671B833526CA6A78100075BA2BCC5AD4392DE94C1CB660D9
6FF05F1D5596F3830EA44F6C4AFB39B3932DB7AA7069DDAAEE2714FD629E136D
4B44981841C10A5F2197C38481E06CCD3E67169D93C6B9397E570A2621A4D978
1A9BC2B0F1CCA6A445A75C922B9685AAB480ED79BB17E7D618A46380A3BE640D
995DA9294C16BE6C4AEA5466AB54A8E28E0C3A40CB3440B73AEB802233510B3D
C2888577EE8A076DA9364B0E79A5998789C4AECF5D82A7E42D8A97AA97A3579F
06C3153A5EE15C21E01AB42E07AAF1E0B953C0F1E4581BDF774A43492ED31702
F23E4E52624EDC7F24A805974A7F36A1DC7866394ED6A29B09045EF81A8835CC
8D111FFEEF3B9EEF5FEAA2FCA778B05A8CA9051B0A70C0E85D20DB44F2362B48
7B3FDC647818054FD7AE3B01481F9923A35A32EF6692C0301AF7EF992220D8B6
514B6CD9DC64DE1112D931771170FF027FAD27EEC809831CC365BBE5A92ED2F4
30ACDD50C76B83A4DB4F44711407376953504E5901FF23ACB34A497CDCDCAD58
5BEE409A19BDD6940630FDB13D61B03E3739557B9390B11216A7FDB9A12A5D37
E8954079B710A601775AC3A192E00B446E0FD6D9EA344868114458C3E09CD7CE
7BFF2A6D0E18A9F9DD7A37DBD008C341678605127DA27E36F45F6CECB5991204
244913F275EEC15EB9CB4C32BF9B0EF73EBA64CF66AD867722BB0A3D16ABC308
10B1238790973647AD4AE080C58820971A9D3D3983086BC9CB317E0A94792030
07461957AAB9BB90FC62BDCA814B592BC89AAD2C21356FE263EF596A135D48B5
F0010C9C89D42AC5D02F766240F743E799CB0FA2EB0B35A8E7882EB4A5D74621
4282E8FC8DDB078E27327A9A2847EA101A762BF30C27280DB9C5D5D8470ADDD6
A38331FFD16D49C3D27BB116895242B089ADDAA0B53DED5E0CB3B4DF28B81275
D02272F4055DC4D4BCE5BED0888AFB0B0679FA338F5E45FBC095F474FEF2F4CD
D1B9BF3651B8BD89005C47701A6A19BB16D44423BC25677DA0F308C8B1539A40
1B460B79C2409F77DCDAA40D4B457BAB54ADED366BD57798F04C67849781E594
FA5B99BB6F337977A3D8D3E57354EEE11D97CB0FE807FD2113453A9B37A8BF74
EE4FB708153FA4A8C6DF35A9BE880B8E044E466207B444A1BCF650287E4DBC02
BAE6286341D23F5CA930E6BE8B91864DE93166A33ECDE0191C38ACEABB3B4832
C948328F36F526A12663656379F0AF52F888CBBB6C5D9445677157A5DB5C5699
C12DF195B9397057D3AD58CE732D610498823A8A1D1DDD206F632B3F714FBA54
71484EDDB5FF1EA443684A937C2DDE729E783205B6267AB55C3FAE12A571F7BB
1B3176F0C67A14A0F11FED202A96B6BDEC4ADCDEC621E4E600A8E2666B1B0106
5C52B579DF890BA8AA6BE53BD3E1AC26C80674546AF3EDE43B3579C7C629A041
F0AC2B2061F61FCAB9CA2FCF5861B3589647B3195DA0752A3450740EF6A960DD
26E0B0BB87598EF504D4D9B844090E2549F4D492F1DEB09336398BC7599B2850
C187C3D28AA5A3671947CAD038208477E716B9306F21ED9CEA5210930067CF3F
09D11A879AAB95014CC858CD6777FD27830A399AAEE04392970A929C1B8B9651
E38B959343EB73B790A2EFBD284AF691462218E61D47786006F46B47BE5D8229
41D98EFD7F14106D941553ACDA61961B9DBF74809DC78EF8F2ED70C3ED727BE7
E559B63E327E250B8B7330F09A8C35862859372D95ABC7191DDCFE6E3C268A33
F75835393B48F7E9BB5F36566823D232CBA2461946C90140760B614300591F72
ED9EE06A387A5D2AB24C96628A741D4FFD32AC896872F1082C50A8E8DE48C64A
2DE79F172F3E84F6B64D72120079B3D48F77D6900E7B017EAE9A452889F47CFB
B1F864A0BD485BE675EC296CF9648088292BF08E65A2D39608C99BE9AB24901A
45821376919889A7B7CBE49E7DC808EC9DD3470C0F743A4B862073DD30D18EFC
9738F45204DCD5DF06792871A9F40B1C8D83B1C60BB6FC7E9B1AD2A38B62A3B5
27886786E81B7292AF4B49D7CFAB66AC050F78022D2ADB4FD0B22559F50F03CF
00799A38402443F6C10C48D30248C45CA8E69A6C4261E8DE8D9AD981B7412A1B
2ABAC870A07B090EC39E9BAEEE7DB29394067103969D29F762D79AB39C634647
27B9E561C256D953DE918B69D6C6ECECE424468D7BF03DEFFE4DBA5211F4008E
285D94985C6307E02225FC5207B9844176086C8902E00913D3B4B87972DE9577
765B7BAB73F326859D2CB98E284C1704EEE9D0FDB9D4B5B0C732656FB77D9CF0
85952DC51CF501C9DFFD6567CF6EC95924B0321F005D2268EE118BB7F57FE542
CC000F348BD37E713D15014D733D6DA7545C5C344F0260AC21F3394A15FA6001
D1BD7B798C97DEB7D901EE9160F2BDEB3EDD86872012B533B1A77C2F9994BD14
38D60FE2409226FC853302468B636B62E255F4CB3CF882A4C20FDF3047D8C5F8
C47FDBE2AA64588BF1B5CE7ED61E8A79322193021339A813FC4891B49EC95380
ABFDBDC893E4813B97ECCFCBAB21C1F58A92CF293FEDAE5ED50AF0ECE589C2D0
EE8409412E0D9AC9EBFEC51FF96249DB7D7628B4979151132C95C512D30B4579
3AB255C4370DB24484116CEA59F59435AFD9C11CBB2AD2E1FE3183A9BF4CE89A
EF07B9FFAE943791539F504DC089B351468DCF28AB7B19B2450E95EBB55905A6
A502566BC7BF8EB238487C5B35879C44CFC086AB4926E840BD301F3E80A325AA
F04F28C9A9712D9BA5CF67099FB3D52D78A036752F9060EA8FAE178949D384DA
36CF09F13360C3BE01B4B3AD7B14FA2577BD6A9EF9A47E4CE67AEE69EFC73CD1
EC21B7263E0D0F7566B43E5D71C346276D6111E473277F00808E5F7E08CDCEAF
516E6325D603104B0209BC8CF3174A743AF57DD615323C577B954240A6B20FA5
94A0320C91F6181D42076AD80D573F20FF557411DFD5D2C1B4A43C08468C1A7F
7BBAB9E2868E329D1F83AE72117C1AA2A03FB7EEF01AF863356AF76A361CAC45
5FFE74F32E2BC4A52829297E6908BD7EAB9478C34F4BD0344F8996C5E3CFCCBE
A69E8C3553F83CFB4B7DBDB61E2CCD8BAFB856F521204DB14F2F4D89581694F4
70B8C18CDAEFC1C90E20DD53C5B71C1FE68444B94C1D9239E29F317DBB1A1E23
2ECC81334FB8F9A3E6D10B9D5EF38E2D454F366E194038B3797DE2000407010C
08D19EF66DA5E780DC797D527958E97D492EA342C9E37D6E15775BDB882E99EC
82DE957A511A2C66268AA11C1E4AE77773ACB72FF80BAB58D13C90AB5CAEABC4
51E57DA090D3E3A4AC15199541CBCB85A3919E557CC095114CB0BA4109636117
24226C8F2B305613E6A960D277FA3E0F518BBF77AD238FD5292DD24B9DE9ABDD
1E6DDEAB4B0617A161C52BFAFF0B7D508D9FBE7654F08D93E08A3921DAB682C6
AECE6ABC0FFA7DB1AFD17BFB1B2E02FD2A069A207FB4FD379535E4581DB6A474
2311EA104978C726C8EBB63C425130B1BB88C5F9FC0957A7AF97DA2724620452
AB2B0463A2EDC61249163FEA3B6689855EDF21F4EFCEBA5EAE7F0C320AEA5AE9
1B741843866D3393A80168FAF28CBFD7422DA1416E0ADCD216EB0573716CC01A
EA84F2663FC4612BDD8FB38B02CF11286ADE0D4478AFA43FCF767D94285B3BA6
BD4C3BD025F9B8AE522B5B58F556E7F62A7C238FFF29435796E1531CE2F97E5A
DB2787E84B69C019236B6230C23B706286252B607D3116FB89CB42B31A786024
211AB367047889C91231DA1D4BE2B6F3C11755DB4918FB298720BCAEE6783143
A6870556D7A04864D35FEE7FA6B008B50EEE9EE9AE1B05CE0EF6D5EEFD63D304
767341EB555D38847AACB8E67A62FD38CB2CF39635BB466DE63C80D74CABBF0A
F7F4B78344FA814793002564AA6CE004E2709CA13D0DDD56D9E7BB8B36514F3E
FC7C78DA2277ABA41FFC57D380ECFEF5D8477C86D842E0D3A26B3703661F05F5
D75B7C65CBB7A5CD5D4F432938BFE668E0B86CCB821048CB37D7966F9A218C33
CFA516A9EC6F3481309EF02D89744385A6CFFBD96F95B41624D149841314513C
EB1ECC02619D83CD499B5444CCB473A4B1789538A08E2D524BDAA6DFFF47611D
F8507EF6A3E10F8C17A21D2630647720CDEC45C3608B87439FC45B835A423B88
3278C907AA56705A93602F93038237058CCE5796256D944FC8A6E9B3AC8CEF6F
43A3714D4ABE10633CA49E1A600A8EF7B8EE4A70EB62973001855DF1C0C5A67E
2C26DF22A02084DA4A02AFC6612F59C406F9FE6570AC010E4A66C402FE118058
A2F70D14EEC4F0808FAA215AC3AC0F6178F9DCFB2618C885C623DA29B7D18D17
811FCC213E87824D943A2030DF697DAED0A3EE3B0CB52EF50BBD3F36F143AA1F
ED299182EA592AB59E44E7C47A45300282249B72ECC34EF26DBFA51635A664C7
43A20839BB1766D8F418964931B46081C408B0074B58C470210FFF0F73E39F59
3E15BC973F5D1A08FCE7ADDBEB2F628DAEC7343ABC739DE310FCD992504B6BC2
B16CCB16657736C2079DD63E518D0A576AE622FCC972DB74ECA67D5DA83CC37D
967E95FC1D97586487998833A8A924CBCC4E2FCEB784E8142689B726ED6CEF17
4E941020A5173158D6F79F7DCCE2AA87F09476E3EBF0BE4E30453C54FC94A6A7
6AAEB8DEA6DD4B5F3110E0E0EA37DF8D06391B8450282DC16E8C1550BD87E033
EC7E123B26366D3CE2011B25C5447209
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY9
%!PS-AdobeFont-1.0: CMSY9 003.002
%%Title: CMSY9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY9 known{/CMSY9 findfont dup/UniqueID known{dup
/UniqueID get 5096650 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY9 def
/FontBBox {-29 -958 1146 777 }readonly def
/UniqueID 5096650 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY9.) readonly def
/FullName (CMSY9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 15 /bullet put
dup 18 /reflexsubset put
dup 20 /lessequal put
dup 21 /greaterequal put
dup 28 /lessmuch put
dup 33 /arrowright put
dup 50 /element put
dup 54 /negationslash put
dup 56 /universal put
dup 59 /emptyset put
dup 68 /D put
dup 75 /K put
dup 76 /L put
dup 80 /P put
dup 82 /R put
dup 84 /T put
dup 88 /X put
dup 91 /union put
dup 92 /intersection put
dup 102 /braceleft put
dup 103 /braceright put
dup 106 /bar put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A580F0834F28818EBF
F29D3B2C7C9AFD969BA6D3B7429E222AF78F6DE00CE2C8008A5966422936DC5A
DE549B458EB41026E123FE75E703E046F665B7DC78298A145548DEF8D579E008
39279A5208EAF898A357DF3FD9CE4450811F20B454D86B2947BEBB11EABFC62B
187B12458E022CDBAA6EDF4A89D79300F635D8CD973E35FA8D9B1240B3D30D72
4F30444BDF0B51ABA15A181A3196A6CDF9CD1D38D64C83E745A767446641991E
23EAE067609DC2E84B44D923CC98407812813D5AEF0EA21E560B31BD77D735BD
E35EAA564A570DD3294C703E16BB9F251D54407269C8B23DEAD063018D6EB748
4204A415AAC8384025FA922E7074FA7B8A6C31FD3761E7B2737D4D9C9992B7B6
DBD0CFDBD87D42E1A451FC5C7EFAAEC65D10D278470DDF42DFABC836CF15D042
6900E0DCDD36E7153BA186B8358E74F91A1D43D62EB0B821C0E97FE63F1586D0
98F01E8F6B6F2A435343A25CDD80D3AEB42DC8E5AE02F8837B84EE5EB508B02B
6980D2349984FE1A0D3ED12355D556BA483CA078B7921FB336EDAFC22AE05C1C
5614F5025B890009272DA8C838B81913C872A54F7E932237FB1BC2CE5D64CD04
2D320C8E2E610E9EE36EAC7C28C833F8A14048E751B61D0CEB342CBAAB34D104
311B421B8CE4D903D2E2518BA8B734E2637E2CA55426C4A87EEBCE637F8D71F1
54626C52083262A5A9A3B49142948BC1AC0B7698811AE81FC3D3B1C14E6C274E
CFD6C480514F3649D7725A0A14C82C9D537B1C5A9ADC816340B8B4E484AF55AA
905EA936A83FE2BE788D084469008F407447E0077417096333F163CE94CD3098
4B9712EE23120829AE2695EA63975492DB2615214B11C87ED0ADB776ED4BA0B1
40D09D1A617D4F57EE1A9B05C8D5F42AECB9C6AE67757DE6307B1A9C467123DA
773239976AB0EA052B23F263031ACABEC9EEC7A43ACD0DC2D7AD66664FB0D937
6A0F463A173E8B90B2596DD323D2350435D9D31B638112D70492F44769FC0C6B
40A291FE78AA598CAFC19E5AD195BE7264F0EC29305D36C7AB8F2A733797D75D
94C8F7AAFC49C13C108F514745A394F460294C6F3F44162BBFA878F773A5115F
062E934253B786DA2B9A6E8E843E06B97075BE99F21B330D6684998C5C340B72
09D69B655097354CB682D42120ABF5109E5522ABEC94D05E7211DACE8737A1A9
0BD3EC16F48798E67C7C85560D79366504BBFE5F7F5EC1B05B9F68F98149A02E
E53F321C213456D802C01871E9024F965258F71215F40EA71057C15E349F06A3
A016BF1B7E44DC4766FC92EE500EBF7C47D36B1EA34981EE6FE38FF4903466A8
C9020B91CFC731642003AAEB145EC0F13D6281B0838BB4236C220F6F467F7DCB
C79BB9CD5B6A180DD2ED7F94DA6B5CB833E62E898BE832DF601BFBC8148F9430
C8AC459F23EA2536E301C9DFD3FFBAF4D01E7853B60A69B5D012DCC0054C0BA2
1293D3B4EEDF7C5C78118138544A60FB1A500F72BA39E63EF5D97D68369850E6
9B6336DA577128DE68FEB71877360D97204B5F3C06E808BF95AA6D6013524BCC
85CBA9FD2CFEF383645E7E960E7AD471A6A3B8B8C3A0A0B8464836499309D82F
52004FCDB68997BAD9E4B5B881634FE1213283B6B19308BB67F2364F7ECD5534
467EF07CBE71989FFCBC6224417C0710EB3EF2676B9DE846E7FFB1AA6608EC9A
76C31724A19ABB2AD08CC102F5DE8E4E513F90A53F06D440A66B000CCAF6AD12
6F4B161B56FA5FAED65A24FA183B84F4B45407AA69624068EE0E3E47BBE973CA
C72137823F1D676131C8CD5070092CD73FC2A93E0480310E21CFB14C031206AB
411694AFE7B639ACF35C28705A115E98BC69C66F6C58E9E79902453798D76267
29B780AFB6B895B34CBEA51530E8300569EE4D500527BA294282FED81F730A46
6ED19AA5AD45852739882216EE937FC45D75116BBDBA6FF4B4423B398E383CCD
A7D705B8BA85076133E823300C3EFC9EB9399575F5F6BBF868265304B299AD77
B6B4EEA04C83E163E8CE2BFACA65F9DAAE3AD2B0F8DA1F986E6A12DDB2AFACD2
217E37B093F46FF3E20E587A9490401C2833F5844763FE2C528E151214E8CA95
018E1D8D47C9EB5FB4F0EA2A6D064680DEFD2C5489298F83B58EA7FA8CB019E0
671028C59C3E007DD86CD247889ECFA6AD6DA2433B02180DCE6ECF9E495D0976
D063A61B007233DED5E3F351D790F26D4011582735A69F37E7CCBB0AF254B925
B378522B748BD9BF152E2187DEA12BB168C42AD8D67D18567393B35DB2AD8403
5A7093EB59FC276525B8796FE81944F7F03349BB077110E182A61754ADECECD8
A5255DBADB523F3DC251A7D97F17DC76281CC632FAEB382A972D60A15FDDA57E
2F42AA338D889B47F6A3C1FADAFA8D11D63EF8D0C8C0FCE61FBD8AD34EB8DB3B
722BD86CE5B1268F704ACE82A39466DC2D96C9849B9422567FA5E728B17FAF61
59A77E9B3289DB807DF54D076139E3DFE176C3131FA4540C1542AE5AD6200FCD
B92D5DAA77DD4D3022049B6EA2A037FE96E0CEBB1608C663F1373246FA74D70A
BAE7BD37F3AC23E003204FA8270B4514DE1FDC5401B69CBC98A67A5CAB5505F2
87C242B6ECC86E88EEF44B9C79DA5F88CFADAE8B4CF437A7CBD5E0C01A9BC479
E92EA48C808820C567E74D62ED7597FCEC53DE9A0B3EBB9A3FB50AEACAB82BF9
2AA56D029357AAE016582592972ED01C0ADE565E87607F17BCF4983E3321F606
ED664B9516D404B277C2C1B0F873D469D64A9744D9C1897125FD471E71BE060B
A3A617DC8D812E184664BD83EC74EEB5197611380F2D859E1A61A14404493D04
B5537C04541E557CB5039905F37E72B762EBD2321633E12C38C409338AD5AAD3
1A507BB2B8F5235F0614D0CEC2BE44CAD504C9B2CD3E45437A493A33B9BF8A1C
3FE66B1E673449A54E8E3C3470688E94EE4404C888583F7C96B43A592D586D25
8AC1F206EE5FBF3AFF7EDF9BA91EEC6BABD573D455E0AD6802E7E23A662D4F12
FDDA00EA054CD331DF86C099C4BE8AB4EAF5D8EC1BFEFCF50302BE61E6FF26D8
1E88C544570E8D6F7D875466C70AA91D6CCD4DF4BBA34FC67191D1692D3FB76A
66F114152956A5E38345E7495BEB1A389B7D0A59624ABA784F77C1BF7728E556
F9D97D71858D61624C22C6914A3A995BD75922A2C37EF2CA91F923A4561CD3D5
2DCEACD9C3A65A9FAFFFA4822E79D6D89D6366DA6362DB16FF061840582DA35D
E4EE8308040C2DA5F298944EED470D6E4E1FF58DFDDA96C20C85E2DF2652E12B
2EFB8F890D301E8CE777678FA786E552A62A60DFC369AF4BDC069F5457FC86F5
1FB1A38A2222EEE86FE1AC9A8227663AE33217C1F381115CCD04D2F381A27E97
36D356DC64615AD63E1952B37AD4F967317D76A6DEF039CE8446AA634086BFB7
7B0B34F595B61ACEB346F51ED10ADDB7B852B5B2BCFE416D0435A7CAA4C9D9A6
152D9AD938F39E9756AC752F1604D884992BAD768C720C45479F5AD8E53A4832
1B44D6109DE4460A662DA6081465E2BE02ACBEB52259E046767DA24E1416FF44
D5AA1D303CC4249510D703CC6CD0FD7DDB078A91089FD86ACE1721F875F019B9
82D7C5B2530567F2306F47DE90EADDCD12AA1C693B1982827DC36A74C86474B7
0A8A2E084CA403AF654E2F8488806B943E38ABF544ECD45FECDC441DD970B180
FF3FFF1A50D5E22216B240A527F95DA1E43770A3867F225DD2A8AF01A965E06E
A063997C4CDC0B16B52F9B9C8B0DBA94F88F26A7A01E596DCF8F33DA3DA5B02D
2ACF771F25A1372F521A80B93DB0337886FCAC0A2E8FAE0D7E1E0C31EB43AE3D
B4C2020F322A9857A9EADFA7782CA70DE7421B9A83DE1873EED8D096701370B7
7EC33B9C104E9CC16DF8C80ED24D1F91677E355DF037621ABBB75E09ACDBEB82
30F1AFB82FAEC4D9E2DA93303F72C1078679EDDA35ABF2AB38DFF091AEB273CC
5A7B29C0164977160CA75F62BC20474C7C1F127AE7E4DE865FBCEF852698AB80
B61340CAB6F86017FEF570104E46B6FB3320E78D387CC58DF1C4FAD8570C0126
B6F54AB5BCD47904A9255366AC9C88576456D3CF605822269CC65979EC3CC740
AE3D09257BA3AC7A364A7F5EECA3E658AA20B53423553C416D98FD8100D80A30
A1B19F029B7473070D7C60CDE51BBEEFD2B45B1C82F4FE32A5BB6BB5BC32BBB8
F600ABE893B83B806A5435AE2B40E5CEA9068C6ABBCE73C9B3533520439F28F5
E171DB1DD90B2EC04A1F36767B2B97D4EC0FBF217D4E80ADA5383BADCD7E066F
5F4B23738A14F19AC7D765119AAC9AB6CD0A8AD4EAF8955CB9F5BDB0156CACFF
236D24E8A12AEBA549FAA9D7053D10AB7094B5D9B86FC7375E245EA8D7FC64B9
859A1A37C006E0449AA8DB8B89730348C71C7E014A2EF8D871AAA856407C33C9
392720173DA60850938D0537564455C3957631AC8F8C0B3B29BF6163828796E6
0944C3000B990715188203B32BC4E3FCDF173A4A9C78753AB7D76BB9A4C2DA4E
3EC638753D6FF6356EBB07D0A9E8D3F50EA5451FB6C836B9E5EBB8F1331C8CA0
B0CD271AF316502CBE87F652B5ACCD43176AAA32C6530C69E77E3C85DA496F3C
06980ACA739DECB5D986622AD81F204579218660EA791774C2D11878DE23F858
BBC4ABC7EBA01B7FEBB32BC914FEA8E5720731FD43F8A5CC53954D13455827EE
9C7BADAE8322E77EE7413D6C86E6D378FF8044F50F529E765A1CAC29E8B1D91E
CD40F70F2D4890E0FD04502933212D5AB176DB143831958605C1667B8841E770
CB4D513DF0C3182C23CA653A7A714B2A8DE29D6B203F5A9481E0CF3FF073FC6F
476B0B205136DA43650A940035A970584DD7D06B7CDA8E960186158B75FE3917
9B1D0FFE45EE1606C875DF635B80F5A9E5B67A6ED748F52A53A710A45AC20BCF
FC96755E685A3B0712D5E09D860986C61C631A8D2A505C57D57C1D4AE78C552C
DC5C9EE15B82A4C3020331B78FDEFDE53974C391F375E8118EB7B2D23DFA3F15
389043EB6F33842C82B896073760197B13D3DAC172D77779DF517AE31BAC43BF
5BD6F75B59AAA59C7EB81B776FADB720282DC06BBC9C33AF5AC0BC59F6A0044E
3898A4B5868EF32BC4F980DD863E8EDF6DE3E753A7B3E39F8E8BCB3D3BF14EDE
3395E73BD07440FCE88FB28A96878E823C1E5519650F2054EC2CF733EB8AEB0D
510E5659A3179C3FA8E31EED621BE0EA648D76C370C3CBD8043BE206F28699D7
5871DA483AA5D3580CD55902C85DB9EF5CF5D3191738FE64DB42410F5AB8ACFC
CE07E524BECA5633B082F4793002A4A7215AD1BA31159A30D72AC60EDD0B2BAF
73C9934C85C5372B47BCD3ECEE463CADC05CE8352EC1399ABE2465AA53E5965E
79400336B1F5D1401EE2DA5807F9701D1086DE505F6AD4E64DD4F3E5E90CD64D
FDD25E6FA03B679597CFB8C5C1F03641CEB7B9B40787E70BC6B063621382E3D5
1287365426E44A2EA208C26155CDF782F404CA7B3C6D379103EF4A51CA3F1343
22B04A0B55CE5A7633175838B9E50480E9B80446CD3B541362E7A10BB3C58A42
88C0FF580B4A0296073F5B6505E4FCCA5D4BA2F7E8D59BB04EC9ED4E664BC2BB
8754777594DB26DA0985663D321CCD13FB261BE8A771470DDDA783493E452A87
D0AD01AFF8EDCB7BB159F1408FBCC52F126C46234CE6BEF241B49472102598D6
91FF2DCBA2CD0E6658A61DB3591EA02E4DF202954B655C5A3C34B14CB60CF9C9
2A6683AB282DFD79B33FF3A6AA524582F174F11A5568159083496B242ACD2770
0ACE8473D363AC11250E5DCDCD3CB2281B71FCEB8AAC1367D0714796AF3BF01E
80BD4B05A0A45E6CFA6C672850B9DF113F5EB15923ED885A0E4488D4914B62A2
FAFB6A63F8AF0CF0DA498E1BA68C4150B6E59CBA80BD17026FA09920006D2075
BC6F1010D0A10648A20D8ABF8137BFCD6A5DB3606F6B3CA51E8A4645D32E5966
6DFF7537F65DA4268A86BCA5791C21F5FA9F4C2F1F6C1AFC4D4BADFA63609C4F
5F5158608E6FFD9C5BF00646C3AAB983DDA5E37A9C2EA81796B161A06201FB6F
8EACE87008EE7A008BFBA69AAC04D73A8C0447FADA0249D8861ED405537E23E7
BE68C4349FD64A14E3A53D6C6484E704BE4AD5FA0269F56D3B752A070D9872FD
A5CEE543B413F13CC4CFABCE885BA4533EA0969FDADC14DE6846B330552CFD60
A75BC8C9DDA76102E48DB6B81975A1F3FBE182CEF410841CC6164AFA0CE51FD6
8E8E6F0971277052E21126909B5EE51508306B886E945C11DFFE1C91BD0D79E4
554CC7D6A774C9B98610A1E49C3326D62F157CA9D89B56699F32DBB9D49C716D
CBDEC052133F8E18E8F3D7A59008398AF3E4E1192CFFE4D0B7D2ECC8DE2ABC1D
4DF7F2EA5EC0DD756CB2FF9F95FF10E506463D3037BABD221C08506FA603DE1C
DC45A5998921C4023E501DBA494C1F41C0955A761AC3D5B13A88EC4F0BF40756
BAE8645EA76027B8AF74726521DC129B9AED4BAE67A511EA56EE9D0D8D30C7F6
FA8BB890375A263A0BC4E9CBBBB8F8F8613A43B10E964F8CBD6BAA2B0BAA70C4
4CFAF6EBF4882B610AE13689823D37B046FD26DA85BD96B896CBDAB6662573D0
2CB87D45A86A016146513441BF7A748F1E9C2AC7172460EA628BFB22F9797905
F6DF6749F13C7F234A2CE4829D41E0F53EF3C5F52165297AAC4B5AF4747A9F53
60370B4C0110DBB42C25308F489A856B6664371FC2126BAF4710790021255653
CACDE1B9ED6AF5C696C3D8BEA4698DD9045B3004A5C4C03EA994A5445C9D4EB9
865266850047E28F2D82A08617E9283FE637CFAE4F7F261CC2D616A8C746EF23
7360553A6B434201944C04B1522533C61F615A20BA3678AF8D4BAD1FB548D82C
72D41699FB96EF40ABBABDEE633F05B4445BFC4E6E661DCBC8EC473BD2BBAF7F
75F7FC86CC7B1F3A2343EDEDF6B5F7E98A0BC4443E21611F4D807FE7F597A37A
A4DAF8A8E6D04FEFB320E0E25C61E156A72A3E4A69EDA04B0E3B72B69FC19E63
AA33A682663A8F37F4FFC1533CCA2A80DAA675DD723A7E13D9DAE3BB0F5F3E07
99BAB9B9BCFB29B73FC76EFA02F4F632690651DAAEC2B3688B636F0FCB156047
F8EF7239716BE5D3DB2FD1DAEEC11DC2D65CFBEDC1C950CA737A04FCCCA509C4
7E47664E160322366F70CCC641B9B49192AB839E0AC609AB2FDD3783095293C3
11C56740FB50D23AE9FEAF66DB13F35367B562F15161AA270EE44713881B2387
7889FD10198AD4D750390811714DAE7A8DC6F5770224E93408F8CCD4F8712A9B
3C583C983D98CCA7FF9DDDEF8AFA292781B1D7089336CA631413EA0728353E8B
3650EDED7ABB6E5DB5B85014A3A9C4C76EBB664A5B3E0F3CB2ECFBB6294F5C4F
69EA3AC8C071B122B129A28E04FE989DA9670EB6246806A516517DDBC52DC001
4C027D51EF1F98506F21E63D57FEF267B913F1ED4770D892239222F3A9035C35
FFA38D1AF3ED9A8C02235D7422695D30A2F801389DADF34CDC489EEB38089B6B
026D884EE1C24FE5785C383B988FFFEB5459A1644CA44D353503AE117E87F956
393DEF6C47D4E1C5B1A33835C9B8E1B98809DFEE43C4D6DBEF1C2B1ADE4B8F13
3B5D224C25927433D5738B0FE019CB88B1F373E4AC2BDB5BD86887FCFC55DA94
E610926C5F6FE954E0D7B1D35B1E1D04A56EF39F058F7945E5E28E5D55D65251
15766372E6F0277D8600B8F007005FB62AD3C3AE43403CEB8CEDE1268161B9A0
3DDFFA68654EC7DF5F7070232519BFC2C9C4031CF24EAF36298E46CFC0018ABB
573A78C271861565CA746D4F1667F2CC880FBCDAE2DFCF164BB944C5F227B5BB
96526768BA33610DA9AFCC96BB51D59C946E05361A8B2CBC0F420209A2ED5CD0
1ACC7E1D0401A7FCD4D30B20DAAA10AA02B9A6E6EEEC07FD93D19F9C0A62F656
94328781509A5C4F020EF1D81AA3D7E7FF5CF266C34948AFDF91CEA5FD433B46
0F57BF6F0A58B150095AE69DF2B4F2D2CB257259E13F7CD347BE01D5F165A267
50778BD5D50DC855AD6700DB46C84B3CF54BAAB62AC43A3765E25B73FD1A9E54
BA48050F82C8259E762B94752F4BBCD1C6FACB59977813C238788F637235BE1A
ADABC28E2069639FA92B766ABB0059E8D079EDEBA5E4721C0B068A30815055C7
16B0974FCE7D352FBDE6EB1E0CC8F842EF5F146D57D0287D62D1A34793E173D0
32F5B807D7FB46F8517795ED6B0B70583CA833A591C067AF12E2929C741C8A25
6C944BBE27C67630FFFC449253111FAA690D4DE107CCC21DCE943E8B785DF3D7
82CC5EA81803D7396E927E4925532684A4BA480BD8BFA2EF6A803DEFBF6C8FD7
7EB3AB82A045EC6C811BDD830B2CC75BD5D56C8CEE1E25A833B742AE2CF5CD00
26EBDF5F76FF8377DBE6E4E4EEA0AE1A8EA447C60343DEBE3E904FF1F6CAB70A
0A5A1A72EA11EA272C5C8B83FF8F16ED7860E2AEC71F28FEC10FF237E38BC8E1
0C889418B427B94C60721B38442B82B0C7994F08E46D6D51A6825F239CCA29D1
F154B5013E91DDBFD5F146F1456D35FD156F2F1FE17CF2B6CFFE425CBC32982D
41DCFE5E81447E71BA2D27EACF4E9E7B6E6FB8B36B060465D765C85A765DFBB9
6F978D34A9FE54933DB863625E1B9D93A246F9AD449E44C5390BA39A0D65D402
2B17D929E68694148EFDF62D2F323CD00255BBA271A4EFEAC14CBA9C33DA575B
5C48541F89C3B064CE2C25F33BD322C9F71AD1F4B25C539AFD70D417882B2C6C
0313F2957406319FA6B0BC296DC3BBAEDF306CCF2727CA0B8497BE28C1B27BB9
8C33D2F97A2344A012020F6C77436BF0608981288D3D8EDA9C623D34876831E3
FC0F1306AEC35BE49D9F4F69093BE2FD94225994054E30DA71DA3CB6B8E770BF
F7319638A4A0089965A1762451B84B2C3E420633E704348B1946D2D5E39796E2
10146215664B382951750F4CDFE856A9DE44BA1232A872ED5192834323C2E7BF
B3EC224008226CEE94D32F30B02A400CEED117D06C9FC8434BD303B22C690247
FF4702661EAB9E4DD6DB3D7718223BED6F3ED359A17C3573AC3D900C4E6FC094
758F8BB614B747AAB746A0EECA971F256ADD651B3147AB97192FF8184B1024F6
F85C1C9A0A27BA37FB5438FB30D3362311E656DC995E6E2033E6CC7056E7B08A
FDE667E66691E45F066B5155E6FC02B16ACB4F54A6EC8BB803C1B1BB7D24A26C
E8DADE9B5296897B13E7C77B63662AC01F136B3D7CBDABBF67B6426B774B85CB
52D89A4A9D282CCF7C9660A1EFCF5CA92D7C4690B48F51B268BC004D28C39F80
8B19ADCFFF66A5AA526654DBDE49DF671B61ACD5AF2E7C68C5D0BD7A0ADC0B54
DC9D8212E538ED9C49442D05766F686F87CC6986DCF54BE76ECFB3EDDA62080C
F1FF3B8D789E54E92E75E482916486F94E71EE57658A70015065C4A58DCBA2A6
A08D3BBCC088BD84725F4074885E79DE50F2409BA51E5663E6A3BCDD87E23361
8E8373863727C71CEAF397EC61A674D6DA1F3E1D31CFDD5A01AB44F12E3F563E
CD23C6FB116E9ADA68671E8A1F8BA34D4DD46333190A7C6D55EA5EFE2504ED77
D5B2C6EA2D6094C157523972C46E136C83275EC8EE9E895ADD7FA60BD8B036D2
49E6D9C710A21777E22B966F9BCB9DE7541C696B5373A40386AC277B2A0603DE
CBDC27E7EA93D298DAF9035C2D60CB2DB898B7F8E76A613E9161C98B2742C76F
5E99128D6CC9C54E4C275D3AB4033771C97F7C446DF0222BE3BC8F7C5D1BE107
D3276B604F0A43224530743411CEBB9C620A12BA04D7AAD47D9771AE3CF8EFF9
5D3D8266D68B0A7A84503EEE1B68280AD6B08DB596BDD4E543C8E9110EC5E6EF
909264294123C8919A0A5134F486EF618AF4A27E20E42D840B59D1C255EB619D
2462792715A191E702E1DD470F40A3E91301863DA4F8056FD630D1B582DF0216
4102FED583AEDC4940EC960DA8A4815ABD359FA340389ACD92AE2C154D2B8076
45F5E82E566ED0D0F690294642BFD57F3644A6FFA96EA8984110E4D316AC4AD3
035355398FA929A7CDE9CF7C60C0B09EFB6709C0245273117C45B55F8E7564C0
C4529DA5F9FC3211EF18790F0292AE95C67B05DCB79BF86028FA503F99B4B527
28853564B17FF09A4641543E31B357C2515203A995E833A043729945FED08110
7419B7F3B483F29B76CC156B790AA50CA3B446400A7B817691AC25915348BF86
DA00AEBF4FBCA318BE99030E80A486CA6FC3517DE8686E01A1039B72A267A22F
9D32901F9DB1C2BDA0560A5404C50581657117967E456C5891A0045627ACFE8C
5D7AE50252A3CA0F9D0DC594BD9F124A868E791AC5885E8C61C0B712041A1ABD
61D2EAAF3AAEECB7982DE7775363F7A1DE130551ABF081DAF69DF7AE9093043A
ACE04CA9D20A9581CC5BF1DA15194C6E79128C3C2A698E4F95DAE5921DD40F71
CD537D27B415318911AEBED1C630C4785CBB7B1A7D15F7162F5237C97CA5E603
A95A6EF6EDCC0D843A5C6E72187F40BC29114BBF4890C9DA57DF9CEC2215A8DF
4E8575ADFB959B3633781129BDEA55A40D3378D563881AE14D4EA71C764A507B
8B7C93FF5D46E6148488274F2B8F92743C101F13E48329A31DBDB3A16DD6DFB9
E8A96BC59353910F6849B93FEBCFC3C2DF7E5ADE044BFF891D1FEB83F8329866
FFE29F55B7F9FD0AF6A85091106BF64B7E51F110CD28AA5161143C9A06EED72A
73C0530C79D89485B14372852DE41D191DCDC5833F3BACA6EC39B898BF546F58
C2C8351B688C8273897FFAF6D5E3862EBB590FEDBC8E82937026AB024B867F0F
236890C0D443F0F1702F91F02D9E28271F006F128AB19340521C9FECC9EEFE3E
A1065F464EA9C6D6313C0B1B8CF3218B9E920868B32C5735C92939C225DB0EA0
33A8022425C69188F5EB3C89B4F2F9AE952936F658D3A4D64BBE285185227FBF
DA6C0F9DE4A4EB4EC1B4C448C6C52DA8D41E0418D600B3EC2FDE7E59F907B8FE
5C10A501CEB6B3C4748F5423ADD67C1691B4910CA06CFF53D5A51076A1E147F3
1060AC88A53D72F3084AE6511D33956323BA88F5FACE97BE54976C582A2A74A2
920BCB68BE4A7F9D533316275EE39EC4C471FF640F741DFE9319E58A107F2E77
F5869BBBEF7F75C05DC191B4B750F5A8754059A97DAD095DAD0C56C80E0865D2
84D4E5E6415DD6BB7D7FC0A24C3E56F33EBC22BF8598F3399E95DF89FEB452D8
EF9F40BC5860EA8D3FB31CF8A1AAF1FD7CD00366ADAD8769DE4118BAECD115F1
494E93D08DF404083CCBCB38FBF9CBB3A804F888CBBF7762056D0B76ABE4E350
552C9DCAACBBDE8C69ED7F226EBF50086E5C541E88F75306611B435DD2C5FBB6
9B498663BC9BC88EAFC6AC7C186404E133DF030239A96FF03C582C1DE5DD8BAF
D453211980620C51021685BAA066630974B10332A1F43D1EAE1EA9CAB8056FB3
E14120624DF8C417782435704BB13F9ED526869A33CAA432ED5096734450285D
CAB8F71B9293467048AE35D970D0CBF2328503B77FAC03FBDA6503A298629917
6EBCB03768EFBFB932D481A2439A6EAC984A40D96F12533590DFEF88357D652B
52D3B2EF67FB6AFC681713C13AD4D693EDC47393A6998C29E5D02DBE003F979C
5C330BB7DEF6529B7B65224116E95E9E17B0C770C762C827D6D60130B22C3EA4
38C9114C2DB9E9F8366385FA1DC91FBC2BC4468DD59599477E2EF2B1CB397EB4
B9FB67E9B2D49DEB790D6B21079B36ED7B9F4395DA5BE07AF5EF5D4565B18834
9F84F7EA6CA79C8661E75F8840D3C0A0E45E40C46DD1806E6DBDF89D00418867
E4AD857E810A4A3383EA058AFA5BC7C19E6C33B17EFA8B199DE92934DA873CA6
F2C79EFA2050F801D1C2C9735E9BDD2DEF93B69BBA895D731C7B7828A9A0C22C
87358EBC3FF38E92021217D666CAD2C192D07DAC0FA234FBD718590EC5045B9B
5D235B7FFB928941A9C6A337BAF604A4DA92AA877A6C7BDD36FE373C0FEB34EE
5CF8626D35ED1A3DA9D11BEE6792CCEEED1D2175F841318BD898BC1423F6C849
94ED90535A3A802DFA5B87F9EB033EEF07F518B2FCB5CCC22FE0C3578C392498
9CDFC3EB67AA5C45E1EB70BFEA21E6DA7AB582E765646885AD8955FBC699FC84
7FB3473E344E239A38C607DFED24B7F64DCA763ECD5869DF67A8ED25E4506D0B
2586D036819259D0927D2D996960334B5F93C21D357426C2E9ECD1079A4D8586
C68CA166E8759F951D07ED0C5A767608E4C446879EC127CECB8F9079AED0AE01
3106AEC95ECE265853FCD22E18BD5FE39D0F6C7BF8BBECF1CDBC4E06DEF99B7E
B1EB90FDE1C962F69ED752A6D3DDD09FB14773D2735E8A84F9F6F2803C9564D7
8347EDF0FABD6C46BE1B622639F0F3E15E625F45B37CACE9D75476AD1BA2E5D9
2BFEA26A527D757FDE8DD7A282F38C075624FD880270C156104B7C1813ECB039
5958D378C2C287675D7315852972E58A50157BF8F9A8931AD740EC7FCA150FE7
D128AE464869752DEB36498767501BDC2BAFAD5EB22DB0C07A41FE92A75A72C8
B06BE020C262FDA470B581FBFBADD7BE77D9FDCEAAE4C85575F5E6DCF42F563A
E20AB121B957DD0A66544B8937FED56D8422CC51E1FFA4AD47DDE3C2A8394E0D
7B5D4B171C4E1CCA8FDA0F709F94FD79025DC01A155A0452976D461149DA8123
D0D056FEFF419713735FA47174630CAAAA6C160051E2B3BCE559259E3683224C
95EF4402B9012F27AE3D469E1740EEEF490F49ED88B56657A239B68D034273D1
39561621E192AEE683D857806959CEC14B0ADB0E5CF490BAD7539803477049C3
582E635AF4EA5925F9FB1FB68B61FDD19E21919F05FA82D713E65452C35BA04E
38807F5512FFB4E2AA1C60DB4C3815C852492DACA7EF027B40E7143D54FE10A3
1A396B54BE00CA1D530447DE7393EA584D74F026E62B7662BDCB0B92305594D6
1F41F01D64C36E7FC9BF48724678376890B55138A8A40D647DAA9AA3A09B7A7F
5B5593E56ADE24BE042D5EACE48A6CB851B9B0EED0BCD285C2DA38208DAB3BBC
92FF3F8CD01DE6867689A90AA4C8223C1BFEE8E4D48B65C808765320ABC887AA
28A24764DAC3A4F8E1CF234F939174D25283852A864EEF064CBD264DCE437A38
DA73E528B12914377CEA9A924FD70C860412B57E6F3333A929ADDA7B05DF5CCE
F4FF9BDD8FD1B5F7438AA1C1A13E80383A8274BD6DC72167753586C697B414EF
285C1010C6F5B3140E9057C477D433F4D1F8FC8B175D53F395EF8704FC5251AE
C3CE28DEA3EC1130B5C1C16BB23B8CB62C5B9C3D862C70B7AE68660EE9A20B19
D3BBE3B7BE8F881AFA17B95BA0A2E9124F591F4E73526C44BD3319C40CFEA9FF
A3F4C2EB2ED306288C63A2AFB77615399F269D9315A6C0CC8B9584CA03779C2E
1E2C05992EA67A48C5E1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusRomNo9L-Regu
%!PS-AdobeFont-1.0: NimbusRomNo9L-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E152A40E590419249F2E4
C36159F8E54B532468E36965A38646781AB0B7F6A3E851FD10CAA49ADFC1E546
2FD2EC6150DC6E19523050F6148348A561AD8D2E2721EFF8A570CB33460A745B
926C889304C09753C2D78FB0CA95DC6DE5B8C524752C83601E7E9F73DF660674
F05AD83A166DA9BE89F22FEABD4B2665960F6FB5BC32928E1230C212E5D69CEE
0B3311A1738A11747AE263106916D8E95F25B25B4BC6AFB03B79ABB95DDA518B
41A49458111D2A1433C043627EF9460D324FFE22935F4F6DA88B8B91AE95B34E
08408A34EC8EAC3F65B6AE3E3E2524867EE9D29068F81E4372F4470BEEB4D6BE
EE4DF956BECC0CB77F8490117B22B2FB75C938ED0A5E208D88BC38B2AB8B9CFB
F1D53084B6F43DF336481ECA0AA2D5317BC83FC0E1D4DB01D0B7707EEF217E94
A7F985102DED27D8E8B009F7EF6DB91B91E78BFAE7BD688E10B3DC9AC77CDEE8
47AA4DC8EC78241E593D26EC7A60696151A2AE5325D736E99E01BDCBDE69579F
92EEEC224B6757EEDC64A75455BB665DF42A0E4CE7B99BF3E7D66F8FFC8C13F9
D7A1FF7A9D5FF7AC43396779F11C9B008C33A2043D48B61B88B03104B1425F09
675B559CA4302C001EE80D2B739CC0FD1023BF4F1FF9C01E892E59CCA7C26011
B8E0B6D29CC29FC72792FDA5E7D5D88EF98F9DBA960C96534C399C54865EAB86
0FA2E0D6C7C44B553EAC1574D55E7970744D4792FFFBDCE6FB4365BDBC2965BB
2E9EDAD9E0EBF0B620DB415AD98297F5AE83D9C710436657E74D26E83957C745
89834337035A7501803947F6880B70E56A3A404C62D57B849D28804CBE0F5884
435A0E12DCC9BA414ABB732BFBAE237001F557DEA5E972BA0838A3C7C9EB75AA
4A050DA0A529BDFFBF9011C360564FD17A02C18860AF6B86EFD4E2C125686C9A
5E114E95C71FC89A5DE9C589BFE5AC0480CFF716345265D2435EDAE67CFC4801
5BC08E7A48D683ACDB91E05F469C0C8919D73A5D07A1CCB173E30E76680ACB09
02A40A3E11916198BD69F1A26E88330F50692D0D5917E99E7A01B327413E24AA
E98EA484E45897E6AE4D6997B6E8BBF61C9406E916D56985CB2BD297E8ACFC6E
CF2D2281AD84696B7C6CB584BD85CC20BA14ADD3BC3E25DB91124C0ACF22E902
3CFBF04CC40DE331991E9075D22AB5EE0E849B340050E6C417C664A782D05549
DB2EF572F193B1C12B4635C2B358747046DE5858EC32B3B2E79D42750657977F
ACDD2EE5A7C9320D907438DBA63AA05ED410FC7000F53549091BE71BE45DA4AB
A315F95B724A60F17C70833E889CFE7EA206A7ABC4393CB6EF47BE3700BA5638
6831391809EF8384AEA8C22735E8062A9F9101ADD125A321FB65399CBCD9C9E6
0F46FBF271B2B1EC80832CC054BAB5CA80D4561DA0A380D56D5CB3D90AE89A19
48CD824EB1E7AC6127A6DBA3E8EA40F00ADD89749D77EC0EEBE26FD6EA5D8CCE
F7239681B3D94898236AE92FF3912E0AFE84B6C7E08134C158B640B4AECAB5F2
A90028E67D33DF31B461A2846F83D90979BB22618E2A17C5D159FB59D5177E12
EDF1320F596E7A4C379329ADB367F92BF2869A9A97398E0C20F5F017CA9DB7BA
B3BAB72B87A7B6BF4FEBD03132F9075C271F2054078396DF8403DC91461325F6
12CF1421F3099CCD799C2C099492C4F071336D985C0C360B2F5A5877FD00B6F9
2E5911DDDFB31D17A60124EE8DA6CBDA94196D7ED42804610E4F730DAF2F2D5A
B767C320C62543E26534314FACAE006BA2064623902C8AC479EEEBB609E8C3E4
1516CE412CB410BD026231E22A9CD0F664D769E4E45CBB75B7341F06D8E37285
BEAA9AB71AABE3CBFE5A348681AA246047CA29CA6B442FEADE254C7582D32D3C
71B5E645C82E92F057EB5F859BEE23DAA95C575EDAAF9896D6C10980A09DB34E
084C8A754E31B618C6991BAA856CB86877044E10C2F189B284E3195A2DB6B910
2574E2461D2FAE65B7321C0093A2A34996C0B77123503E9EDC623DD02C44FB76
3C550840BDF969582D226510EBF89944E59684EB2E2C463E69702266FBCF8D1D
4C0BE400495E227B9CB21C8086F328782CA7294DCF3ECDC1A62714143A4C1B98
E5DE1DD554FBA60571188A58F0354A6B9EF580689B78A0C8515CA05A35832616
7E0A90F68F3C306AB60AAB20872FB167673F41E8E87FF0111F579CBD0DA68B56
3E35D2EBF9F28B104082E36187373EFC7A33F62D3FE4A390B63DF7AFE49961F4
61F60FC22BA5E56E162DCA06BB92B6784884E693A6FBD71CA8EC3A02D7040920
276A065374FFD037E05D5CA5A876F164C0D3EE7AA28F7FBA63B665CA594A4AED
F97353E84178CC13DD87BE8CA181B6DC65C72C512A8651F4BF672493739E6ECB
E9850679C209DBFD96E72458EC8813C0E60E562EC0FE00D9FA073B4409F76D51
A3CF5FD031669F2C1B4D84943CC2883C985AF53D6413E9C429FF6A4451E6CEFC
0011A1768768D62E369DB231C5452EF0633D73C071CE25010CBABAE66FC5EF30
2D3DD8E7E9C34E86B1E5EAAEAF4878EF4F34ED4190C6CF455E70942C9F1841AD
2789D310A7D0078A2C7F72F447B79B56CEF076F862747EF4C65E28D88040FECE
5AD4930800B080388EB9917A08F07A79E8943A542D2FAB07A3CDE9ADBE676554
E490A12A31E96265A27153225C016DEFAC153207B79B87015A90D7ADCAD3DD0F
D12DDBC962AD84C41928C2AB56AC6B8982016EACAE2DE72BB995E19933CBAD88
0CFF39D1558AFA51A6FD2B37A5A2A141AE8FC1C6DC11538DD052B2D4C1F8E158
528E4D43485B8EC351812AE0F9BEB91AA774B3174D266F4912C7F4C74C9148A4
56405A6BDEDF5A05CA7FEEEF9AB34EE9962A91108EC93B1EB47FB8D258B4AD90
E783177665F923C14E20486DD4E6A6371094C269702109B3AFBB3B069AFFBD08
D3E39B474FF720FFAE83C9E5F2AE35C299EC97CEC47312358EE206CDB0264E6F
E50D327F1EBBA3392B6B3D1C56D8301AF7209ADD55FEBE2CF59F4B25A81BFE49
589779ABC6471A36BFA728B0E6F223CEA5C7CF611EE32B2425551E7F03D504F2
7BF98F90DBC75FB32BA54AA1B3BE277E804C6BA17F299172AC3A4A3FC7DD2BB0
FC92F90C932DAE6267B6769E220FE3D432DB422E10FEA808F4A6A5B49B42DEAD
15A6EADF5564363AEE238D66A94B5DCC9E1D79921F64D3F02D8E0939A0575338
8097A7D6F5DA7AFF9D13B5284D5A41DB446CF77E1B7ADE41A21E532C662F11D4
D8413E0010F4D0B09C50CCAC0C564DE2483270D3C6373A9D5A1C68E826D72AE8
8756684F7136BCA499CA96BCE84A69C8C9F386D2A3CF3054345EE5B0C3B87747
DE12E66488B1D88BC91FFF704C2B1CE3B846C6E1CAEF0B91C99F9EA3E2D05563
C0F7F71D77DE7B4D89F5A4A17DD3E12BF8023AE63E5758FF302C10135A4A0EA2
F185ACD311E1BA537E64BEB7A59BF9C7B2D91090989CAEA19974C7ADF3591D22
5FB7B5F8ED8660E767A3BC27B94F0C08F74447EF2E73F72AB27C838A1EE98403
3C16A3CFEB9E338EF0D7B0FA721D7D11990750232B646E39A66E89087CCEF846
74972C820FACA78A9D173CB0DA52276EE252344EE302CFB40784639C35BD97A3
35C7336E49A1AD47F88E64B14102548AA33E45BC2757A125DBB3A2F26001F79B
D11779E4F1B71C7CD860252ACFC5659C3F26D849FE1A648EC838D41D58EEEF3B
0455ADFBF4978B5A3FB15D26AEC3CBA4C93BC979AD0C9185231B21B6CCA5A472
E5AE21DDE0EE377C8B1F40A8020E0C31623F54C192264BB885F1074598CDC2B2
C1EB058B45BE336D69DB86CC255A7A513C8705E5CABDCB58777D3EB06764FF13
B34B86F06426701E16A819EEFAEAC7E06C9CD499F43D24E8A1AFE40E6933244B
839FA71A9FCF98F4F9501DCF69FCDE2B5104AB0EF3B88CD94B16BD7E1714C6C8
1DC887F5D06809E85F1B4DE6FC0B0215E25017434D65499F029D2AA21FAC0A8D
D65809D672AE8111EA56F627EC8A046F067EAE15CDD011119EA28A3A8FD3DB4A
A171CE55BDF2DDEC151893F3AAAA5335FE86246F4E02372C09780A2703376556
6FA25CA83E4821E28BDA2DC69154AE8F923AFBB3DF0EDCEE55C349CA3FC67782
4837D7B6871A1A1AE6BA6B44F8E7F5204636FD3B42A7D0CE3A43E800448438A3
2854611C8F28D918F58498E0716885F3BE4700253BC14B6D888BE6D6EBADE61E
E02936485BFC4D91535B51E3E8A909519CC6A77FE63F815D1719C407870422A7
88376D38EE77897BE33AFECD711EAC3B5B2820F473A00A19C7B9364D228E2BDB
2362ECE7C67E43BD132D1D5070D16F74851DFB70C11E7D2B38CF15043DF153B0
95883AFC159C3E3BCC2DD7F3624CD94DACF40D6790E98271289F082BF762ED2E
A0F00B8870DABAC3F6BB897AEEC6587535045C0ADD7604E96304DE3BFEB798E0
EEC9AAF6E17FCC7E1E789A98CAA198EEBE1EBE7966A6E849A6D4B8224C70EE20
DDAF7FD77CB534E74F590AC18F55EAF42B6D05A62BFE5DBD73A7339DEE670AD4
F65F13F2A6FF13CFAB286B149298ACF4B2AAE41F05B4B3161D3FA8402EA51C9A
B784C23C7DF74D34E0605936FD59B8FDE421BA5F0409713AABEDFB9151163740
B30857EC5CD2FB4E082F61B6460E26878C0F200B28E43F47C36E5544A1FC515E
BAB1515A4CCE0A21281D5F6222D69985FE10FF3490B7ABDC12CD6DD4E5E6BCA8
64F83907A3D6948032B16B0FC43E933086CE90C76991E9440832523D026CF41B
95CF028C078CBB337CD2DFFF7AF3061783031EF22638E2D05705FA22B75784C2
22D8232F332E7DAF2C1434CDA3DEBDD58B80EB0E55709059B14878F5ABD07785
F78D79AA45F961871BFF2446D6AD6C2364C82E28AF55A4B864B822E4BAA46A20
06D05159B171C9034E2902E2075E4568DCC39FEA98A63EE771FA86C424AFA310
36CF63963449B77B313FDCBFCD14EDF201D830BE920416DB03580FEDC3E27F10
E4A8501874BCEA002D2EF2893FAD08BF5BC9E0C486A0A43757F6AE29273EE850
8443345F1669CC593C7BC84889CD1A588B6532B8F266DAEC03D1B5EB155884C3
0E61E179918A6F4BFDAC3E01A37DA1E458F5BDECB74E06D6C8D1121830718F50
F0A5FEA87F838389B6EAA560D866FE829E65B28B454D4167112E4187BBD549CA
783A601DF1BB925D7995378B5A3F48C646536E36941A16775C18C72C87AB3572
6B2BAE3B660D3C1C3FD8083FE4AB9F43FFC960BAAD11B7060B802ED3599951F9
1CC47490B961ED2A1BEE0F3F5F649DD6E635381E9AB7F51135AFF881A649B02A
30FBB0FC0EE1ECB3335952F9076C2AFBE1F11712E2B13C8F71F05B694C7382FF
DE8C5BB3FF454B2C31CB7BA76413412F7046CE9105D53E26ADABB48FAEB2D268
2FA119D72F24F7BC44E71C1C08E252E05E49679E6C7AC81F42E9372DE5AF63C0
71BE326992058FC36C23CC0E87EC9BDD6E05AB2263D02BD3DAEA01CB260400EA
4C9250BDFFEA47AA88871A5DB1B309254E644882F9B783B885AE1050E5D336B6
1E7F371E0B79A5BD5B4C39DA12D4AA8E6BC3927D9FE66B9534B2977D39D0F733
043FFB8755B0C5FEF82EE241981B2BFC9710AB5D721483791B16AEDF904C7D35
31E5A7C532AFB667C699DEEAD1CABC24B526ECDC0ADBC6883D041246999CC806
5ADB2F601B0049FFE860BBE381F1337D7ADDDBC7FD985C1C6F97DE415782E85D
775E44AA566DD528C7B25FF4BE5874B78292FF9BD80DEE36E3FECAA576D1BF80
F5FD8E7B961873B5C24B1B36E33A2C5297448577D98307B9068C04BB7886A08D
4DAF42EB1D530572B98D841A968C8DE9FABA50C10EAA581E6AB0DE87BDB8437F
B2BACC6D518A723B09C01DC47D2CA3D7E500C9BE47338665F1538F2B28B46084
26BA9BA96C0BDEA66BFA08FE93FBF82A7DCB44F89EC0FF5A08BE8155EA8E652E
3F2499D13473998174589743434DDB8E0BDFDA6CACF7CAED4A35EA76A6831DEB
F2F646B261993DCB326A5937322FE5164F64D41A12E9B6FE6653B07843CC267E
E2442FF234D8E326871276B9BC84D99285AD770F5E87B0F864EACC0F71D1FAD3
0B15C38D9D8217BAB427D2B3258ECB7817720ADD9E18FD2CCFE8BDD8A29A4913
F440E3EBB41BC6D5E3D3027544568CDFFB3D85E655DD3EBEE6EF04DEDC1E3E58
36305E8331A6DD5575409067295FF6345939F378CA63501693078311A786495A
AAC92BC052C475A3463DD4F391029E02FE363C31913C418CC2FE04F216E2009F
FE57F65727C2AC8878E485FC7A31FE3B6E6F6AC781EF3A9FAC5FDB2388375710
98CA51B1CB2B4FAC8EA519C1CD9E89522155B8896E40891CCBA47781406486FC
3F5F650CC2040D0AC69535B7A672FC28C041327C80A492D386C94EAF7AE1C7ED
7A63FD9D28F7FE58767F83761D2B1F0627E4776C602468441FD76B9EFA767E39
69D556CF28DB7F16EA0FB550FD889CE594F5006F9417D29C7CEB696D6A828C4C
AB067E6F73266EC5E90AAEB52A52D2A93734EAF136B68D9F5BA5444750A1EDDA
2034A6E5CFAF53CA7B210D7316421F8793DA2B009C8D902ACD8AE03A7875239B
F65B841617AD96537727C020EAF2048B26C2E1A4EE95D0F9608E5C7B842D10AE
95CBAAB2029DDE46FCA8B4EFEC2A7347993F0AF62704F47A9C2AA783417A2F0F
53E5FEDB788CE7B998F8503F7DB814778010480DBBBE8080F3F748B6680F749C
0887E3D4C95287BBEC30E82D09CC03B298388F708FE34A435F1BE2FB015B00D1
CF81ED5CA7AD610FC241F76002E2889920CD9300B3CEA3EA3C5F80D1127EBE0D
4A9A919E4C01EB497A41E694EF11C1AA8F2C9A9F6B4520B57841165A6AB2B13C
3A54EF497515094CE7AA4B99BF6A9FA7A70C4C0C20C03D9442F9749403E1BC51
77F6F00466C528C0388FAED2CA53155EC31014D136FB96E44C95DE0C9EFE0C92
32665F5E893D8500CB57D81CFEDF35FCD51D6CF5DC1E2B1CED5D9B69ABB37468
777711B7AEDBC570A39F1135C4E922FA51D2E2A1B36B02C66505DE3B94DC0D5E
6F7F3C437BA65A60AD292FB9B9B447C8F5885809E739BCE03A6A054047B7A914
DA623F611374FBB32CA8ABAF862CFA80259F623646D8005ABF69620C1D5FE90A
0016D500C9A961BA44F2B0A5FC7CCAC95D93BD7A2C0C64684F583F56C127E366
6DF8476D5A8A6CC0A5B142055CC4086C4DDC5626F8096F0ED00AADFCEE0044B1
52259DE905753D58A74E6059199C4E3EFC3101D7CDE5C87014196EF241654B81
CF0C6959C077BFF8C37BE87C22665B1D4AF52095EBD8D121D9D13C2CCB6A549F
13261B56B73546912402BBAA2BEEBED4C9E0CBE8E6894AD20C707186FAAC5017
A993D91DABC296025CDCABCBCB1EEAB6E9391DC9205D9299F13A726E93DCBB41
37FD7FA04ED0BB5E2C52CB2FB56894582E416C0BCC5DF1EF5339B11194F5534F
F880ABDAC871BF530D9F03B9E1C9D474C4F98C83B6699A9E250D13CFA954525D
6CB736AE3E8080852652F007EC162D7F3BDCAC5FED08DC518E239928D5D31B08
8F7C1E44D171D013D490A0EE6A8D86426BF0AE1EF7FD23C8AF7BC0ADE591EBEA
C608D29313286289EF7A13CE20C001C4FD8DDC8DEB238A2554A4EE568FBDD02A
5D564D59B23FDF9AD9CECB2D86E4739222E8EEF51516CE412CB410BD02E89458
7BD1E9104974479B5E78D3661C1ED935B4C516B2B7DD4B8C7DBE9B8A3B800505
8E77AD08CA6AD080B91B1EC4D4709F5C56A0CDBF7485735A615DB3D79A1AB86F
D36F1727EC357CB93B510709B1DEDEA81E467AC2EAC758CCEEC7913D6E66E123
2676C3DAB81FD672F7B98AD7CC3E04877F10F7C8C0EC1AE7B389C92FC5064818
CF1B965DF52EDCA3C65FBBA6B2EF44B8B41BC7E2C78D6DE2F6067219784B5B33
CDCF2CDF421EEAA59473B07B9B4A09D666702156F1845D9C1DE53B2B81671CAF
9051E029263DC79B6F9ABCCC50871AD6607A91673A3DF629745DDA66B59D8350
A953868081340699F3A13CA6652BBB167AE05900AEABF358E1DD2B9F701776BD
F258C428002A84080D212FB05CD10B58A492BC9159657F71AE260B461B87A59B
DEFF10137C710809A09C13D56E1DC93E87BACC631477970AE18CF7A24A0B76CD
AEFE9AFA49B7DFD03EB01D1B2806EBA4D2DF543959A3A04AF25F0A82F1114AC0
9880F80827DBBE528FFED552AA5A7DBE1AAD4FCBD9DB2E1289308A60706034F6
BCC873F208C47E59D475EC124595086E8E5D42C8077C376D91726C1297991B5D
00B3AE213382136291D57736A44519944954659FA59574B6D3D2E0BC3A301ECC
0343EFCC53825100A7E882375E9D41592E959A23D2F5042AC17B5E3CBB8796B8
F0DEE7E345FB05E188CFC7D2D95B2873017D93729B904721F909DEC478856F75
DD490CA7DB4F04179CEF927D66729CF0483F529BBD9A3A98C5081C2199D23D32
EC14593FA02C8718249509DDBC633C4B633EE8CD0B2F9045587CF2BB421F68C0
26458DF297F41009282B3368048A90C977F10B2AC297EB79BAE96904B52D7CD0
B18903DC560BCECFD951BF6DD21F4867CFAEFF3A0E9E2AE6DDD699E03F73C4F2
F7AA77E3BB3A7EC1693D1E4DB5E9C603F8200020F9939B29A917A7E9EC13328A
E910097257175219588EE8A56F8DD8A61AEB3D61336432ED6A48412A0A61082C
0DBB200404B2B98C35588AF20445BD47BCBB15F8B62C2D83A99403154072BCA5
FDA95DD7DB57E76759C03D4DB23C528D552FE691F201441952F6A0DD11A893FB
6ED6B7E1CC941BF29C212EE36750E901232656D4135DCDB5CC259D74245A085C
7AB48AD6144BE2483F23E5D381CD5D4C53552B3F699CD0F2A26B72AD2A8B2A89
C686B3865790916B751FDCADBD834E3C641B22597223BD939D3C5BED5199C717
C8C05CC48AD62E125FC003D7BFAF8D4C8964DB820841B614C43F5ACD91269701
21B0F16C9796DD4C5A69890997C8243C404AF7E10F76CCFFABDA5B472F8DC845
1CDF5508519B9BD8611BCC208C0B49E1C5FB11EEEDDDE9D936AC98AAD46A53D7
0E0F5FA401C74F92E3BEDEEF564DC43CD6481EBB93AC304692A09E0570916D8B
34339F94CBD92159C8A72D539DF5604A94EEEF5FA24A04F6B19B5C686FB67382
0631A6A0F0589975823965AA4DAFB78B76FEFEC428A12D4FF92E26AEC5005E81
BF78DA7CDAF57D502947689DCAAC17040818C40CFB490F2E8C1E6EF080FB63A2
64A29DE8CFC49BBD886A069E0C6CBA79F97D607160E4C9F3C88808939F901636
37C43C7523E235E3F84E87D4635CA74C39F925D7879E57A2475EC0E5CFF8895D
A3392E49B6EFCF627D57CB22DC5AE6C3CF1F8031F3051CF6DED7660C6C18E482
FA30A2C54404D1EAE09A8D3DFE74FB27B6C7739793746D8A123D0F2AC09C2687
8619663C9B54CB392FC402CBD81E0308986556371D3BEEB27A88C1F27E1ACEEB
211824F08E7AD622D51136C9E3BDD746201487CDF839D3EC31BA62A39A8FA088
071409D3EA4EE9AD01EA619C5BF069677A6FF1623A161713216AF97844DF3A61
B0572821BBE055765DAB0DAC8449427E9AEA9AED275C26835080FD2AC78DE88B
F65298A8EB4181F163B49B153EFFB246B66F0E152FAEFB69742E84D61FA82B0D
AF0954456C6920F88B8658196BF1DF9B36FE935AC77FA46448A91AC86EEA71C9
55179E0A91C7BAA817024F381A74A00B7C0EC0C271BBA188628D7F6EAE88A6E8
414C086722866D3E96F7DC19809F5CD0957DC99FE70188D9C230A4E2500F1773
0DBCDF5D44ABBEF0C94A4A3F7AC375ABCE6A6BB0307271BDCD16282F1E9E66AD
9E7C3CCFD385D690D2B5BAA460C5AE95A916F54291575AFCED2500302A380E5E
F5098DF5FEEB8E8FDD05B5CC6F48C0E59C006E0832266609281D86AB13005DF1
32253C51B9E6E27EE3079844A803FBD05A8E58BE7225981770457B80D8C456AA
9D56270FBBCD33079E6F3DFA36F8217CE08E012AB15E312B74259F19F9A26A6A
3E1ACEB66B5628A87949CD0D4D13B5219C96B281EB163881E636414C426E3704
0E25ABEDC0515098A29A60E56573151A3247AF7F899203C9C7FF8999C3A063B6
D902E00BCB187746ABCCC8577CADD6B79685057549557AEEDFC350C3A7592B97
0268131BF51A80E040276C323F64CD6AC20B83BD4941936102A546FE253D89FF
CFF154C640CD4E06A1687499545CBD209FE5AFB9395D300DDCFF6D5E667EF859
CE4F53AE101F1C87B388910CD84652FDBD9979FD51C8355CD7E903DA3B3F7511
0F5FB3A4F452BB1EB3476551DCEBA72E11FDA4C818B0A3812B714D9025814369
FE71C393F4457E3381FE06E03BA9F1BC28D527BFB50F1A7BFA38347190ABFEA5
BD633181D694F8A1F7EA92932FD6EA76A5DEA0A2A6935CE12185CB355AAED83E
D30E2ED1D235E6525F836BB3A857073B88476273D10DA44A7CD2DA1F403FD769
267586592927BB429D9534039326416647BA9408400496D5E85EA99AA922FAA5
3D9D03C54706B5EEC95BAB09E12CC3CEF548C0A57A7B5D550DA8CC268451E209
C587CE15528ADEA1C281BCA87ADE950015F2EACCA7936DD4FA946EAA6D968D61
A9623047C78751D88AF0E5CF883272EC6A4B3A8E735D338B3AC345298B468427
3A9D8DD6B3C77910DA984BF444AC5EABF98A38A3AD070B8DEE5D8ED323EDED1E
4702BEE543B37F765DC94C5BE7AF77190533EF0D91985BE5E6E43EE754496BDC
E04249C5070C1F1F18F1B07C41F2C77DD7DC3CAC44D3FA407F3F7745E5D2FDCB
45E44AD52362A3CE8542D134427B252A40CCEB55901109D3792767248AB4B75A
99364497A4CBB182A598D9EDBEC20FF1523393DE0120466201308D5F9B10796E
2D499121B38173D34B9C1339EC273E1711E06F358368D8257FDAEA09462A43F2
9E2C3DE425B3402318FF03F1C546BCDA0B6BA093175F3008EEF5550059D75E50
3B5BDBE9B8E19C68C1CED155381E3D87D7096772AD8DDB449B7679DEC87E89FC
8D49C303F1A8560933BE87092ABA3FE86958B49BD48911885622FB01E6B2D046
341B020507D9BDA76C441BAB22CDBFCCAC0AE947A503B41682FF108234D1283D
028D65E5B41FF2BB3C693E0D9486D3CA5C68777E9F98F86FC783CB91F7A615C0
236966E7AF2CB7A03FF963263BB767DFB1E92A0B73F8324F667612C6D45939C9
425C911B3187813727CB8AFB3431A9C936B9E05BE1C1E7AF90ECD2A3E0234F0C
50CFCDED88A13F041C3A4A51E314E76259720293AF236A5501393A0C587A4F69
1C956EB9B58A07E9F614F6AEB9D28E9B8E0510876B8D6EC3B8C18737EC2FAABD
18BBD945C5511336E204EE168BD33EC0317B2D159837D41F25B8839B4FED57E9
1C36C7CA550F46873EDDD6D5EE7953337DFE3B5E2F998EB53343CE3B7669EEA5
C46D060ECC95CF217C65F52CE2AA6473E1207A15A1044464F33F5027917D3DBF
F4EE7F0A675F9C1744C4AF49BD0B312F503979F1D8A266BF6B5DBF168C02851F
CE51F5C9FD567628E5CE7D28E72B129E1ED25C4B2151F93522FD26D7D867BEB8
80FA518416A7207358BED025878AC44DB91FCF492800838104412F37179FBD37
D5C71641897A488B6010A97B434FB8B7268E4DD10F2E32F7B483EC4C1CE90495
37775C2B82CCA252F8DC48209579E037F02AB9DBD6657EF2CDFD395DA8252CCB
786D4C2830E6A1D444303AEE9B923EC3A2EE962070AA1DE8462A470C85452103
828415842A44832623960D92BC89995F7051F016B7B2742F085788D59758523E
FE85AAA9511094B7D2DB2C726B63EF3A983B84C7B062CBC6209DE85A0508D071
7C6BF11166B32D453224AA79AB32D49B25283E54F1D230AFF27A23764BDD4E2D
0B8E19B1904D5ABC4D77A21E454147EB7FAACA54F5D23062077CB9B7C99E2E03
6D763003666B9BAE238DFA7E08349F661A34CAD06A9FBA6930A1B3F10A918D3D
A11159C979895DB8751B2D789396C1E905920EE1851CD58AE61FC8D1261E78AA
E83EE082A181FA4292A46AFD8CE6AA70DA302C86C898488005AA0DDDCEC59309
A66E560B614BDAC6A2C8094D6375ADA4A54492371E559DD4A111E7E588E27224
D29972E847810D9AA1C09209777C0495116BCB7D33A77E6558BCBF352662108E
C36BDB46E5704EA4E95BC91194E2A4F9745028FEE8419E3B471927181FDF0592
44CE34C8E2F3833A49BD0C8864D21E57F453ACBE58FCF00884C57203C04E1893
4200DD53397B02197B6FA86ABDCF97ACC1B898DC798C902F9850B1E071372B6B
CF391E58BF827DCBDC8B5E091FD28AD509908ACD994DCAB1F6AA8EC52EDE61B5
4D80EA615BF622CBFC2D1CEF22898F1639376A8639A6D9F14B48628FF2D0C8A9
CBE157055A933CAA161CE5825454C9833A144F697E1407791DE270911E253704
99A3730696B60AD8836B98F8CF2EF19ED497CD01C3AEEB13D573374A7B7AB4A2
C62B23E032D96DA79BA1493ED226DCBBA5D4696B41657587CB8A56596BD73187
DC710515971B4CE4375A9A76ECA1FAC94B6139271ACFF762EBF876CBF7731A35
3F91371EF380EC5B9BA0D7E90197A1AD98B6D2D7A7679BF5B4F1551922B44A20
1A150213ABBBB0F79AF1BE139B39BC8C210F53ED2604004B7649991D77EB902B
3A975981E5C185DB2E6090B6B3B8BF991F04D6B0D0E59944D9E78DA03F85B734
9F7185944213E8BEACCD1049EE3C45894DFC3D7A99D3E78FE524DB37F9D31EB6
6F0CC2AE40C940108F811EAF282A69007BF67C03FBE9D604E1653DF36A29C8C3
A50A8D4DED1036136E71CC77B9A362B85D183B63FAEA058D331251A08F75D86D
9F7C1E986CD12B02FE9E56226E7BDECFF77F239E68419EE6ECE41E6AC2709496
D561FCF5AAD0873312846B070B77C6D79C45080C9B7B4EC0867AE2471C93412D
93033DFB7D2B2F19E5855077884128E64FE8F3F50A50BA8D036F18CFF8D23E99
FEA4AC81514A6D62077C6AB55A4741BA2CF596FD49B82188BD476B978EEFC2D2
AE5BD40B60BF0B76C97C2CAE3190D7B9804A7F49654F2B9CC5E6F2006EB0C32D
F294481B3BEE72F0D67A10232543AAFA3E7AC77E51E1E4CD774EB1E1B9EC4558
9B444FC797737012AAB970DBFD09A579A4F372CA460F99E254F7B6EBEE687699
E1E4C25AA569786B8C6BD6AADD455B5748055DC43666FFA6D2F732F072DC8EA6
8B65E68BC7AA8584379A6F7E21D717BD7F2C4537748B10A647F1CEA85D597A49
335CC40D386136332A5AA48B228CF68EE0032B1968EB88119A375D4FB6C257F4
F72F8A8BACD0154C47A7550C832B5B9EFE5D6C6C873015DF7FBD112A1C4C9BC0
470362004E0BF292352F173AC1563A7B1A8F5BD743EF557F996D06A5C2CE9A6D
24C84619E5041C903E55A27AE23D0C70DC726AFCBC56E766EB4FC2707D11EB22
30260A090EEE234606234C2E7669DD516DD5BF1F8E62D380C774580DF6912F96
DCDB4A2229DE25B36A3DBD6E746E5AB46052350D216F7DD122DB44795B8A0E1B
EF23359686E741D9C4626A625F7BFB0E8D55F3383332E19DBF11EB76AC06C7F8
C598D226227FA8C178C10D90A2F26A639CF3B662621DA82801FC5B137FFA1FF1
5EE53DE97B6341A8EBF060F63EFE2FC361E1EA453299493D312C761922242EBA
A623061C6A4784D911FB585269B20E630978C45EE6BB721C8F989103E4F6F8A2
5A31E864651CDCFEE7AC8562295C97FDF79197417B9212C86CFBBAFF119EF9DA
7B118072DAE9C7FCA9F7EA5A376A808EB33CB9E6053EEEEB320786C536C7CBB6
91860B26161029D105F12823002C072BCF0E927EF7D853D4E9C4992A68009BE7
5080B296A6C682601AB378DCE08193BF92C55183A6B338DD38ABFBADA930BCE3
AB7D190EBC8B104B45B4F95FEBC160B0436A5D2552635D4F9424F3AF64A6F05A
A3878E9026E52D2D9CBE052A4A46F797B6A09C36A90A7C770548682A1A0E540B
3911A7D277AF45825CB462C30245C9A8BD9558A213BDD76497FD980270F3927E
A35B8E19688E347F3F9356111575D04F9AAD163980745A2E1EE8BB1E2717DDAB
52753B36705655AC936D9096C5A54AC5EA84386CFD6EF69E62D04DCDEAE75915
3641F56E2FCC3EEAE09086F18014B0A68EC14DBD57696E8F23CA2ED532DA0E34
AFF2F45062F79AEBB0B61DADB95E8CDFA2FAFEC664871EB1A07B3A1FF05F189D
B905568D850360B12AA8CC7730A01122D446EB3B61C4463378FBBAC064946ED4
F83FA0D10BA3602F199DAD8F0D2BDB641ED9F940FE4ABD8530AC20BD16ECAAB6
DAE2D8907671248569054F46341A5EEA9BC538502D18ECA4CAE179C9CD6222EF
AB74C0F9F9E19393688B1DDB7F1FA389D5DB40B69F81A070E6F9F24DBA3A7726
0179470E8E848777A845F6E4F585CBE39AE5947E4F61E7EC67CF781E780A34EB
34F4684C275705CF54722827FBC24AEF08F6DD0BC6A79A2DB1FCC75C5B9E07C9
4255F8E33BE8E1BDD9B5299035A87E17B1DCFB5D6BA3E08747D5705F4494723C
126036410C4C3C275A1F76EC6B86EF4D2F0B8180E5389A54B8D9BEC9D9866F42
80AAD15DD2581B13529945B51E59E8063C5F6AB613915664DB2ED6E4125B0ACB
BC32D382BCBD4F4C4C8175E5232D6644A2A4FF3730C8D6EE7274234E1FFD2A4E
3D180A2E9602DEB646A915FA42F2F264CE7F6C1A12A016AD9CF33D44DC159F87
3DC47E51E1E4CE2CA15E98C99D2E5C078B5199A8AA5AC678091C4C8B2856559B
2EC30EDDBB288EA85EE61F6133348A263E8CA24D7B295820DD78AA19FF23F80B
188F9969CE4D13F0E2603F87794AB92226C4DA3F70140428B8B8317E4E50FD9B
7E04BFD025325A2DEC8E69751384DC7263DFB82B2B961B7A04277C8B701D81BF
0951FDC6C238657A7D1B28AAF6B344148D1C44B49B3E6398E1051D1F85618EC5
E90F9FCEC318224D07AF1DDC35BF7074ACEA54B605DA2974388499F0BB7ECD1F
EB1ADB7696B6C8FBA9A8C1BED0518A81A7554DBF0C2A226014B8B3024CE88091
E893360467788FE84E1E85CFE56E137BA47C2A14D106F554947F78CFC1203106
790E648D9A19213A88589F54603BE411166464090C441AB1D0BD751575D0A364
947AC3131CFC89F5595248620EC344A980A8194EC8957CF800356172A4386DE0
D0C45D99CCFD54CB2A83110DF63D5E2BDE2C117C324ED9094148BB33DB26E3E4
36B06A04B309E992F9B40CCF15567797367A96A03D3AC106E06F828E907A169F
8856BB81184F4256994B5005D654E490867BB83E55D5D92826E882D4FF6143BB
2CD7C18B7E7B1F728FBA54CF05BC6E9E7F49582BC527A1BE51F34592EDEC295A
57D76C2C39A36A170DAD9941A8137E90503E6314F68CBFB1715EE64149932C0A
3C27BFD51B778B35583E574D9ABE2E2757402F944E99A1A4E1B64CD190A4AF30
2097C215712F25BE18F3A4911B661540C26A3700DC3CD37A875C658C153739C4
498E177AFD2489B7256013EBBB814E4F8D56C755E7734DEF35BD22352CDF8C8D
62CC9CFC80BBAAB44C13C97DB969C07E70F4D2F559353D0134F98787BF2C79C8
64C7CC7156BB017ED70CD759D533670A449A8F4C7DB5847AB1053F4DCD137A03
39A1789E0CB2148324B7FDE5904D903EDEF44E061E741090625BA1A315F7334A
65EDF5A49015E831AAF62D772FB4DFD922AD8644FF41535A529333FCBA60DD3A
99ACDE251543C7DDCC97DF561845E473653AA8CC5462B29735A0A8003D3C3D1C
3DED3DB2314E1759251785EB7E8032784A4621AE5CA2A0EBCC7E875A648154CB
8A2F0D3205EFF03571568FE89DF77625BBBE09E9C3C09C13C9D9539DECF618CD
E701AC7A2F3B217BB974CA1920FE6447E0F3307B351E39BC81E8A5B1F1AA8E96
FF52EBBBF2349C2ECD83A8037E3291377933C29C471574122A837DF2E53FD2A4
BA0FEA97A57A391D059B993BB67F70149331181E18CD3DB2203AD6A584F0EFF0
F04573DE7D4EB65C628278BEBEF09DAC072B6A80A46260117EB7C34982C8395B
C90F2E14E64FB6EEA6390964EE0B86E7F792F2A48C3D6C924664DBD223E56DE5
A4DD514F2BED82E8FD4EEA14BB2ACA9C5E98BD38B14F7F6B1FDE87287DDB6F73
84CD1E94E9596AAD88B87B08C013CB237B187A7B5464AD3987DC3BEB21BF57C5
1971491333DCD7CF382A0128639A86DC641209369E208D65175083A4008BECA5
E3E6FE366A2B0BD5522ADDAC4883F517B5F0CD95C1A3DB033DC8770A8CA9496F
B524414492A35CF5B5BE1CF9E1820FABCC7C630FC77E762B53F5F9ADC4DC1388
48021E9FDA1C23FB9B4715B60CDD1BE2103799132A931184CC61311C63B28B78
5CB450C771FD9359ECC0A56ACAB4D8C338B25DA0C5AE1BD026CCAF74C75AF923
282CCB31E33328EAC97B85B0AE5D502D711D5CBB3A4F47906AA9A22114D3037F
18F8BB4CF9CB09D4D6A7222386936A1F0FBC0D19B0B8A9EB824981BE3E1D9B0B
F8EC732CA42911620972ABA05F77717BC8B1F742C03A9CD53536302F32BCFD0B
E410DC7BD8DE860F7638791B098F4B622A897A7DEE432C7D861BF8324F7B25AC
FEE8568C8582B84FF244B66377C218847BA5DF4C087461300376F209F6BAD9D7
7CD74613BC1EE7E903509B0C5CA007C76F613C2DBF2803C429F496D2F11CC034
09C7E3DD4D062C543338449065A4C25CB9764E62C0E58CF99B466C31E7BB25D5
5D78840ACE1E5EE3EC97715F08D3AFB48169DAF31A35578815CF4304736B4C60
876C3AD1103E5E9CD475555251B71EF7424C617C56E6C35D98DB88EF0A32192D
065FFB9EFD6978DE47833F2B3DEF79E02D78B5177D5916B00582DD6A17936EAB
DFD280F3EEE00F45773DC204806EA4B80637608C38161E9D998652704489687D
1FBB4806909C1B4904CED6336130E374258F6C7166AB10BF42021AF4A489CDA5
E58CC929C750FBF2545CE9E34A63B1A5A8828EBEADA40B2F83ADB47B0AFC3C6F
7B503C40AB8F1985EE4F0FCE0F42ABB6AD30AD7C7FA6B52509ED3F50CE6F0027
E731E26C3E3BA7D198140D3194D8E7248F7AF83157B5C682B173C9652F6454FF
090CE4CA36449CE25FA6FE288AF03458FBD746049CCE047EF2DF173B463E61C3
16BF2C55FF2EB739A50EAB271CC2ECB9BD4566DF1F2487C481BDFEE800109153
7B6A91DB7061F69397AC08625C202E3D066012C64D42BDC46D148A0D147C76D7
46B6FE6E0E20ABED36B891BD2B3533463D425350D218C8D2088E93BA42886634
B84A7D2C93FE69DB849FCC10DA48DD8EEA0009F3D23B5D11701C722A9B7DA13E
242FC1EDF6A54DA6226F3EDEDF0B7825BA9A8A1699DCF161670020F4B3363B59
669FCA3BC7363F5C05D086F80D3CEA4FE8BA7559C2AA5CC6590A717E019E1F32
747EEFCC9C9C3170C00FD84C8E3171CF7630D91DCCB8445D319CDE8072C24F6E
5EAF7F9304C867B916A3E13042CA785456953AB21442FF9B6E45306A74296BD1
86821A7ABBF2E95C2EC2F63BF4C94A4FD995CEC5F23250384301845CB01F4E58
316EB1E9D41BDB7BE6AB347B2F1C2F7D43B2D57FBBC697E95C9F4A1E1DD58F30
2B60607DB0F781E96779836DECA90B3BF6D5609002818829572ED5D14F3F1A00
B03A86AA790F67F3F4A9BC83FFB8A9B9F2B5642E9BB3242DDBDE107506A6348E
307DACC427E53CCE6123A45CD74B7642930E6A1EF55C7E2818A459CD82B4DE10
97FBA4499EEC5D4E98E238CDD1A85E0A2261D21A72DF1C5331C8A54A7A1AC26C
AA396AC74513F369A64C6457A4B855BE1972CFCAEFCE9BBC3BA6A80998566DDB
30CEC34439B1C26288631215D4D0B7D578BE3AF792FA6A07625BA11F13AAFC2D
59F599CFC564605E1E7D057E56445CFD98E84E6CDF4DFF3F373B89C67540C73D
38AB0C2652F7E0596773EE53A2ACA443010FA6CD0195D1E51F6904FF5697402A
978DB89ACEC29A748755E6DAB7178D04430060439B61042BE3078AB43EAF227D
0D8EF7ACEB2582754A9B1F98D334F925E4DB5D6C9DDAEB3C7961292AE1440E90
27F51B69BEF21B31A2D20F55666D0C13572B285C4ABE658A34DAE254D85872EF
20DFBDB27D2F4C37FE968777C2A0EA5D2EBA7B39DD46BF22F890B9DD86E487BC
71657904CADF48FFBB1C7F9A3CAA2B0AB3528A1267ED3697A42EF6AD1E49F8A6
15C5E7342EE3F1521327F32C2397C14AC2E896FBD692CB3DF5E5CD2DC730A117
6D07EF90515639DDB974E1C8B212F424D12C6D991D3DF856C75D450915C76CAA
E65F8E4D7AA85D1CE8E89810DE4E7823FFB7707BD0971571C92C16A6D52C69D6
DBE96804A8B606F44C7EF0DAF474809DC7BA733A8091D7F537E66AF56C99569D
17BFC262C5E8757CC38CC04CC939C2F64F611E3D4073AA4A21E208D4AE41AFDF
5ADAB0849C33F162EC8A10A88F7207367C4243535C87FBAEBBAF3A42E7584FF5
1DB626B4AD18C14C4F008B824FE795BAF4B01CBF099FB40E170D57FAF779D955
8A6D3C02ABB8E610800C3CB4C6F33C11763893F3819E08CE700B27120A94D7E4
2A787D30DE647E53E345958EB03DD789619909A6BEF3540C7C568404A6B0D2D6
8E4B655BFD1AF8507F85721AE9B4D41487AD6AA773E9191110209CAE2C4BE785
AD699FF13CF0249C7663BE4D70DC6BD22A13A57F504B3EEB46802961F34EA28B
D30E70410424EB72EB8403DDB58EB2B929CEC7201579AA442BA39507365AFE40
D43448AD3F71849F64E495324F92161BCE3116028FEB2F05F7D7A38572DCA27B
974AA2CDF6CBD7A1F67889419AA00EF8D55C361772EB885EC7058BDC38ABAB6A
2E739075CB3CCCEF4CDFB4FF98DEA306BE5B8C71A75F4636338AC569643B1350
C6AEFBBCA1AF540235CAD73632F8EE97A1E63460CB63899720DB8F7FBABECDF0
55E6C8F40EAA5DD3168572393200E919D7B09D9F58B11154BA0407201C080EBC
7B3D5783CC6213A19956B6A568EA6FA9A0FD485F67F12F66409BD570209A4C8F
596EFB316D66CB527A9CDEB7507BDA9DB0355C1A7B011D552AC8A829549F37E3
62FEE2F15948E4A9AB0DBCEA9113FFD6CD3832714552ABF742A139FEC897CED4
4E33C022A12FA29793F066F5628E80CC9EE6B874320107656F505E06B6C2B0FA
EF474C7005A6F341E6AB1A91FEDDF0D314BC180B51ADA361FC112DA1359ED9FE
785255390EB96F213284BF2F239EB720F232F6CAB0B9BB755351C70083A9AD85
7D8DD68A06E707B076D4C29DE60C02880D7A8C72B8EED3E62AF08FA5FBB9B3BD
1D2662D5936CC716ECA5F37EDA92280AF3C7C0AC83CB837D98326BB20D7882E0
121A128CBD910B4C317E2988D4B6DEA42E373B2D79CFDF47DE06D5E6197048FA
97FD16A5FF3D43FB34E9AD2E50B51858F45C3E05521E17453D896989B83D87F5
28EEB1C7CE8C81625212AA2F8B4CF8EB9ABA84888DA9460DDFB68000AAEF1E7E
4775D63B5111681A5BC8B90EF70D510918FC955CAA65ED4ED8058FB43CE2FE73
051D2CCE451C2C69032E6842AB2D61E5E975FF9D487872585C17344C5DB33BED
B31B75AD56E43ECA11FDE58DCB438E2846FEF3CC75FE1811BD70120D81144211
0DB4336F75EDC594F8EF0E7EBB15EE561A5818CE9E4426114DD821C7B9937B6A
D2D764C744808C370377AE0173031C9BDDC22716BE1E9E06DBFBF42308894E5B
EBD4F7B82CA86E190AFE8476F8B23D83F2A0580253CACAACB29262C2A1DA8648
3F851F38C36CB0533C0C4058942B4F58E638E9168CA3839F42ECF2B2278715FD
64FD47385E87687475A35FCCE4BA3728EE4E3D327A462130674453CB95D958AF
237BEDDC19BD07FCE15074D666E7B039F086E4FD85277967841915B6A7D5B92F
6809D337795F185D5BBA0AAAB198EFED33CCB93DBE8A1B832562BA0DC333E676
80DCFACB55DDF36379673B7F1C2FD960237ABABCA4BE1824BFC2248234B45969
A2E3951F57E05BA8B4D8297C5B48872831570D7BB929A97BA2955F9B1A8E21A4
659792F95431F902C010DCD22387938DC852B6A22847977C69F3060290C27658
39FC3441CEAF817D4713848B1F6C21654F18547189DD172C073C79D571BA70E4
70D38C6C6060DF1C49FE2BF5826FA35C4F96F4FD77B3DE5B4B771C0950D826DF
97E2487D6A110E81D628670A674A0F8FC215811335871CF796B6A5083F005AED
60AD385EFD8E946555E6D0B9B21AD47E5EBC9A2B0A5B122A3DCCA19F944A9717
D5219C4FC8EC12268DBF4409B841189405212F10547A365108FDE598A28D5C81
590E6F45925ECD1676D3160002F82963FDCFB142AEAF8B7FF587F76F7622BFB1
E5F17667AA653C8079B366DEE5B5F13D7B1398FE5F970C5FECB629FCF4C60D6F
07BAC62142896278A7FEB45FD5AAD36DF526B51F0729F597375E8D47F44CCFAC
693CFD757B4BEF40B61F12344BA5725098A008BED3C5ABBA824736B8F4792B06
C1BDB3F7E1011574D9703C91AD6015CDAABF8FF92E0E713061EBA2142620B4EB
95F42A411D26C485D75F65A3D4DFFC9EFDF5EFFDA507309FB13596B5673FBD43
22906013E9C4EBCCDD09D1B70EFB646A3821B949CEE1999C69C3F88EBBC730D4
D6D9906D0DDD6FE28C14A47CBB397DDAA6E762F06F50C4F0E761A8E16EFB0B4E
4E55F03CDB4893515CE85F3685DD479A51743EE77C6342E5F398A3C540DD7318
B3DBB0CB9684B5AA8A28E281B7B0AAB0FCDA8F029F3F9BFA9BAA13FFA8F3E322
6AAB4CAC6FFAE3D67DBC9B10FEA30250F4CB5E0954D19FF198015751C9A2BD1C
B6AF0169465B19506F1453F90D9071AD755C9E430801762A2FC3E584EF0758C8
16BB485F55F72346A612131116EC3298D2B7CE4AAFC92A990A26A868E3815B5C
D0367F2D4075720CCE6EFB2D7DA14FD7ED105AFB3EFA71B650DDB358744D03D9
61245CD4DF4C0A6222C67AAB08DA9F3C1F8B551B111410E5D1493AE8E2D4D0E4
4C0B0CDAD7DB4DF0CD9F926C0FAE7516859AD1DD501DEF7D030ED7AB3C536610
0F72F56F89170BE95247C208A9D1C7489CB4717BA51B8D1BEA9BB9F403BCE724
3D75D3D8AAAFC08DF22E491D76F294E8D3761E57117FA1594E7AF90BDE98CB15
B4BAB338EE58455A0AD2DDE0C33BF7A8DB21A0A52524E148D4095587B003C7BA
7060B670111B218D84BA8E38F0B80DD8FBD8B9564F08270B373C5EE04E020B28
1C1AFAE07009A1B67B72753D74CF806D3C9D0C476EA81DA45DBCCACFE53EC78E
EEE678609FC1054B3B78F6CEA01883B9F07F25577F9EBF3E2BE421DC7AE50CF6
B003427C1B63B3ECA58411DDAE3398AE966F7BE09E5520DF41C123B4AD0137E1
EF7350D1778C19B539BE576EE2E74E8B47BE08F20FE26680A1646A814FF89CEF
37D4BB782D0F300513B06C0AFF12D06A00AA0A62F3B0EE00D4CBE3DBE484B98A
7460F2E029746D18C746529A79D58BF59A21656D13AE14D423BEF4591C6010B3
7330F15D642664C710661443614C55B9BBB72596F2DE98867892E86BA5F42EC6
BC646CE65E5226377DC205BA90DEECF163909390624DAC41411EA4EBC11DB0C5
AE5EC0EF1F562071030ED7856022DB4C87A0646999CF9FEDB0E822D074AD52F8
2820A15B644A85D7DF102B20BEDFB25F74E3898C6949EF2215B5763479E685CF
01605F53FD15056BF1AF75F72A22BA1AD5279C3CCE2D06343283BC62E6691C9A
684A947C2015D91F439D890F5309B19290B5C3DCF3A43B137D875DBD718C2F8E
7F342615984187748363F83350589268DEBC101B449C4B19BABA351D80E209BA
596386983006E51B92F9489EAEABF9E54152FD49F8B13AACE187DBB6169EF37C
1FCE048B266E9BE7A3612F432AEC860E07E3124E34907D83710DA6BAE132ACC0
D4AE3EC57738337F308ED4EDFB9D28100BDD4001570FCCB5CA88166E012994E8
D13A4920023DAA20CF4E063E625AFA2CC79B398873ECDAE1287C0A0B0E14F6A5
81E9D8AEEC33C14D8F1C4D9308968682CA9BC9B35981F69AB42A92A12F1998BF
FE1563A377482E699E31F5115E78545E9ED50F1EE02397B4937908E9FF18330E
484AE52BA0B1496C7D204BA5A6AF833C7A51550961812901C5AA50F120584847
B48390BE71847AD942937545DB0C5E7934E22FF3D4DF3651CCA3D3C91EF5F236
8D6CFFBA4C14E41072C0F211DC4AE2AF418B6ADD311C9E422C156B4C1E4C771E
8F14F35F5C7F24193B55321DA671C2CE56AE61037BEAD7467FFD63BAB0A90660
58BD7ACAFA244BCBD25856781431CD4EFE18A6A832D5201E96CCBED81432DDEC
44BF9A16C758165BBF17BA1CA8EA9508FBBE084BA804A30AC156D4974381B37E
0558D8E691ADC68788CEBBBA77A41522D9A29D43D33CA34CB7E18A570F137C89
958F0A6163DAA181A673F4C368E6B95D09B35A35C721A3826620E12C929BDF92
E5B598EBFB6C9B9003C3E4A77224FD45C2E3943BBE04B845500C63A43FAAD2FB
08BE1C3771411F4A37E095D47E52FD7B7782FA9CC350B5620D518162435F0B9C
2E17281BE485B976B2AA119351882152317FBACFE44DCD672CEB5AF035EE0EA2
12F56B229CD9331FC77D1B497035D76E9380329AA999BA4BE3078D332E757A31
3125B6004DF7756A3DBC58EC4A7225A1025EA9B4CB3A3BC7C0CAAD2591946006
5D9BBBD24EEE677AFC8341B55A7C646734231777147C8DCA569F93D2118E1D0E
126767B0931547EAE05675B0D025BB81F1EC15524B5DDC0D361A5F467421B517
59B9A24D5C2C8ED1A1285CAC27051FC928DE7C2121FD9E2C6FE3B5915DAF102C
E4058C8347D5CE5DF95339E9D40D110C6EFDAABC4D0C5C29779E778A89413053
18FF6A19A897EA770A798E1BDD88FC852F86CF27A84C98AA1813E420C7C0BA22
0B49AA22DA0810891512DD7CC0CFEBAD2A8C064B040B79F71A992B0FDAC7350E
9218824A4DC4E4AED5A610E86737172625740953D590A62AD8AFA92480BF4F46
6F7F5792AB1DCE607BE339AC1A0B6F4F147744197A8F1C73DA80082179891ACC
C40180B31E58B7E6A7B9785301A0D74201288D8C4714B4E6EC4C252EA150D982
E7FDF5356DFD4A7A96768EC16B7A395C0C1A58EBA227B474A6B61B655A1F4C68
D8105566618A3268227F4452376DE85EE4B8E54422D5ABD83056984260769AF5
3B37CBBB4D5DDC0D361A5F467415F9AEAB2C163C9934891F5CFF3E69A0E731B0
2F35C347E476C3EC11BF819A7E57514C9DA828B67A41C4DE68231559FBFAC646
B165255157721BE3B321FCA8D77FD6FFA5346A76C620CC7661FA60A3AE931445
CDC584665B01E9FED9BB3F7BE28BB7818C543BEB05F6943D2E4D0DE3FB60D759
7891641C4AA4FF47C88F05F6692DB167CFC87059C8A3401A3E72940292E1CBAD
7B0A7A30F8EFC44D85E1CBD9BD2C0F3C4787DF31878C632D5C96B378F1D573B4
9C7C336DC938ECE6E64DC81B3B67B2608B5181A7D27B18C017341D4BA61A2639
DF0B97F110FDB1C5088CB269E21499B42CB5DA29426DFB403732AE3AAFAB8397
94839B9EB98E20B88B57CA44DA5E4D43BF09D2205E5C2631D9E0BD32D51F28E6
8FD15FE692CE2DEF38C3366042CF37AB87F2AC4B729A925BFA9F0FB991EC5639
CBF0791E7176884F94733AB302117DF413608DF566B94CAC6B40E14FAB00DC28
B1B66CA977B6A1F8E0F64E2C352E3E3DF48314FC7DF001B277E56361885157D4
680D1698BB5B865AFBCDB34FBEC25E048C243CC216053C5261A284CC9587BB78
DAC6E8EE574CA3E95BAFFD7B42BD40479668A22E459AB7DDB64673C9568BB7BC
1D4EFD36BA526A72D85575B0FDD49858E2A43349DD03D022112F76E7AED2359B
F809BE53F4D5060B4DE114DF21F3CC63DCFFCEA85BDA2C231CE9C01A76CEECF4
ED9B887F1A7F2F5941D8C2BE1FEC17EEBB01B3BDC0B3A663581A789FF08656AE
8EB043A63FFEF99A9C82A23FD71DDD7B58AC2B0DCE3DEB79BE5D66BE3F266F3F
BD5A2E17C61F60D923941814A69A309D1AA654AA5D821F727695C85D0D4C64C5
10DC546D92D0581FC15067B431EEBDE57061F964E843CD28EB722FECC21334D8
5A98FE14E1185D52208ABC65843C9BDBE3F70F496D1185CD5E6FCEFACA22B824
6A9C598C44F4F7116DA45CF0F433D72FBDAF7E9B47D69AB5DDDAE3DBCEAFEAD2
59F5B1CF3629065D8D1DFE5E81F42132624AABC0D748DFC2F2D0843305A16785
398DEDBF6ADDAE1AB2A005695E5E03829B5BF8311DDFC5024A25AC8ADACEEB77
170FA298DD01BF86D1B7DDE8B8CFBF7871E57358C52FF084368BE68385581AA6
EA3B826DB55BA347032219F293C6B489F01F703CDDD8B024EBB77A57628F86A7
9E84D38A46C64CA3B5AF9057EE49A65E377C00914784F3708C228F0EDBC59DE4
F6806894D2D54D29ECF6131EEE917D4BC09E29D641E3FEE7326E50EA372FB437
D1102DAA40D2BFD9CBF145CF3F96188755D77F76D7DFA31476FC69A665851ADB
3A5E7BBFA6E1FDE1B98780DD8D2D95DAE4B64B8E0F54EBE18BF4330D87FCEFE8
D048A573C729960E1E1AFC71662D69A799D75FF1CE7A5E50A887817A9B272FF0
45A4CB8958A5C86905B89640A1CC597230B57D6E26F51758B36DF58EFD83B22C
1F39888CD766C059E55D975C6F8A01C2FC360DB9F0FF12538169C3ACCD294DDF
A0D580551D6003AF6D5877B26DC2E5D38507486F83537E3C9CCFE8D4A51101EA
8D044F98B876E152A772F5C826EB1F05AB668BB314B703F3F57C1537832A67DC
E84EF8167F7305B6E3A89EF9E1395914145C5779F46935CB838E0A6CAE225529
376B52AA58DCEBD2D47490C05731393D74D81EB79318D61C9F0B07BEF6F5991A
80E51405A327883E81C564DC1C396A77ED60772E22A8A2C23878A15C4AF51AD9
4BA74E1CC90665DC320FF6306FBC6C59B1E78C6D540E4986F9482A7D370A5672
63EA900FBCE6DF605AF11A58BC51E25FDEDE604D8F5E0B609D63673FB95442A0
798077FB2CCB120774C0FE08EF32E9937061A693A11D41059C93CBC4D1EBEA24
570E06545911A7CD365899A71DC2C121B9CD037F1F13C174A0DA5EDA89EAF4B1
1310B165C888E1C15175CF28C20AB8496BDDECD67CC856BDDC67301C68C0958A
C8A6EC21CC16F5D6BDD13C04769E4F1364803738610CC77E049F643068C3A4E2
3C0F133241F0EFB85172543EE3DB3FDFD18DA0D7A3FAF92DED5CE5ACF7DE3CDA
B847DDDEF4D7B3863C639990E46E1BD38C0D83334374892A1722182F411A84FC
FD05B70B421F8003EDE239A53BF92D9976A50B3242AA538A35FD016B5BFAE924
3788456F60FB9CD030A1F88DBE42C54DD87F063E349FFD6717F98155F6BC3394
9EEE74853E86ABF08C5EDE73C5486C8A29FA386B8C21A474D9744C6BD3AED015
7E2FF038282AE162C4FEFF9F85BE33950F9D1CAE14C4B0441061F658BAF959A6
F19398EAE92BCB39AFB7C0C6D96938BEF38CF092BA359B76AA491F8C5FB6396A
C0DE0B61D09845E7A24C1F29FF9FA72B590B9F0FAAD50D7216FCD295589A4010
8EFEB6F08296D8379BABFD4AD49D535C2ADB0474A6CD9297E218AB825CEA2C2D
7288093D990EAF3DA54D9AA043A7E88840A1ED50EB4F35403D1D58D8B111C8C1
2142710F35783C5B9E6DA6473FA9A8691CA181CE03D1B21B2C55D7B6A3523D21
0771CE468DA2DA46AFF9E4F9E96553BE44BB0748A5FD427EA632CA82054F8405
B99DD9A3E5A8FF8E6DDABAF0AC60BE7F3F5B85B68C1108254A3DEA6D75E19E5B
91911D0E83E59DF38F5D6FF09247F5A12BFB3A0B255ADDCBB115288ADF4BC5D3
6A9DD35720C2A7E5BB5B4C11372B25EBAA693B73A2B62E1831DDC1AE26C4EF04
852EAB83FE6717638EA564155196F7B63DE146E1AC092EEEF29706CA82475FEF
130F3A413D4E54173E2CEBB25708A6F8A3D1607B956F06234775DCFCEDEB9096
EA69AD31653979296440BFFFD8342007990FB7487C75D05729596EEACF281D12
4A8620E92A26F85006E25BA750372C458C6696A625B55869194918F97AD1D3A6
8E3D6EE4EC77F4722F1D826F2F9529DBFF36B930A105572B2443F738A523391A
4CB2EFC29A56A77D9E8EC3F66F22214084E43F7FFF79DCA0C478D545137EFE77
6BAB3EF05712CEAA349B69F9CABC5442855A9F401FE5FB4B40DCAD9AFA86A530
9FB70B68E2C0A0DBE1520AA327E2812E85A178294F69AF7D4E8A82D418F6364D
899565E0C2039E787E554C213F074FD06C31F5CAB962FE81CC1B873226BCAB71
90E9F62480EABAED3F97EE07A97915936ADB4E8A79AFC06D3A2CE3AED9F7D4CE
A6FE3E62A8AE13C50021E70AEB2F90980AA4DFA5E02EA8E17299EB8AD8746AE1
366CD6FF6FC0E5D8D00A6E66BE14AC808A636120EDF27717CA956B51C3280106
D6753EF7CF730392C491A09C1643E31933EAE6704A6E83151BBF93BD302DB96F
1E0723AB563F0630928F7BE4B7A164D8D37A620EA681C25A3448887948FF0F50
4C3F0116B2875B00F333C135A7029570566C6FEB40E1E4D558B6025C6E4D4C89
02DB463064E0669F2834EAAD5F8832ED06544250CD85CB0573894E17DAD1AA67
DCE410088F06CF62D897911D4B8F4DF8E47BEEA70F184D7629AD79F1A1162091
9EEC84480049F0CE7FB279
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Medi
%!PS-AdobeFont-1.0: NimbusRomNo9L-Medi 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Medium) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Medi def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -341 1000 960} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E178732AD0E135F772215
EA7EB7EA7641D31502E1BB9661E7B0E875AEE90400138F2AAF4A8686C73EAA44
E5CAB467770A3D12E9807BAC97B24A8EFB0E276760F4F51EC7123C43BC6F8DCF
9A2F496A9172813FB461FD870763306B45670653A9780FF409B734CFA74C12CD
150B03344295918C4ED893FB620A9499404B83C71152BF2F2DBF769000D116D5
EE264C016EE3E1241018F59544CCE53E5AEC124CF6C59A4D7D7D511ECC9AFD49
6608ADDD237358D7CF8B4D1C5BD1158CDF2D6469D9BD6E6D9762ECF34D1C3C27
5F69900E0D12AF9B21F153585742E999870BEE3DFF6309CD82968EBB40D9C269
CD4306654AAB6734151132DE4194072485FD082FBB6DFCB3FDFF9E1FC88D9483
8AA64B5825293978C70C9EC095B18352BFDC34B4BE9C939384E3281BCC6B1808
A6B61EC4E47BB6AC14B105FFA7ED6AE99A1CA0B360D1A5C24E0FBB55C66F5811
A5CD0625654654651979A8C4C3612054181CD300CD42D1D9CAAA589118D6C7CD
5EA8A9A0C639D5539430D40318F4B739DA281ABF2BE2765D44F45B218BB192E1
9EFBDDF7777E8730FA7DC0651BCD5D68EB743C51D9CED55403021D45F77CAB5E
7E892B3D1F875DA86C030A2387487DBAC8795749E849EC93439C9E22EB20D11D
07DA0F09EE9356D55B8D0D8555F1B0EC98C72863B376D3436E10DE2FB1AB9453
DADA019DCB64F6D059AB3A95B28B94435004C9A8BD3FB80E2B9DE0E330D03622
3AD965B4283E6DC880A2130185CDABC053C52693CE3F50557F524D7CCA9BE05B
FF9597ADF5D1C432C00C0B0D8EC2CA8436685B4BF3E2105B89FA6CC787B77637
248796C2F43872B3BFC8011159C22EDB7149AD8932360A88A223CC638BED257E
04908032ADA750F17279F7331189C322CB5ED9B66E502945BEB1EC68B1C7BCC0
2322EFD669C229B28CE1D0CBC0005FF967D0A4383E29538AFA13D41D484D739E
487D497DEAD8F661847A5D82D77D91219ACF666E565292384728E58E1A489054
8C3E34B413A6A550C499218E7FCF43694CBEAD016119CE85515F5EDAE3CD483B
A0F32743E7A189708AF0CB6FBAB22AC8F23604FFECE038C838472CA40ADEBF08
47AB1D450E07F9D51828D25DDCA679E3FAE54634A37AE1A5A778365C5A2C8A27
64085AC775AC132CCF27CA164C4721F67B63D52E388B17122F15E5DF391674CC
B6C9EDE307D79E390068970FE0AB210337558544E8CA59BD8BAD7D2ECC69471E
2E0BFFD4778A2E21C19645790DD11C5A93C1C33BE13B6A35DA4487D9EE9B38A4
1B2049FC64E228D7319ABCDFA4A29B08A08DD8430B4EC67FA6ECA214DAD0BE07
680225415ACA2FC86CFD32CB6210B93F60CB7A2A2959DACA9F8C687C1205E017
F6EA82A4848CCD1E76777B2EF6EC7952AE77117D3E5747718836EA0566266595
AD39130B59BD9BBF3F3814342022B997F022EDD9808B2F5F49CDBF36BDC71F0C
741EFCB8072813793C66CC14721FEBD858665236BE384DA73C9960A9CE8ABE91
E3684307EE1FF44D500F186F57D22DAA956983F58DE59FD2B73B4D2E1A014846
E680CF3A27560D1D9AF2D655DB049BA9E3356197B8071D9AF5108E518517498E
CE0255C8C4126287BD22FEB768221AD5999522E137F808DCFF33D40632058319
3B6201E1F9FA19FF49A5888335A21204FB9C29B6272613C152BBE869D3E55D11
D9759587F283DC60A2707EA2306152788DB113A3E347B57978DBC344FF1C817A
7836AFD8AC4F96F2237620EFA9C42C7BC988A1D30E8B43279E75042A9C413C83
8DBAE11B315A3B6B5FC1351BEB300A84A5FFE1F4E73AB0D97814C976112B9DE6
0C2B9C13E5FF22026C6F2643128B9155F977871CC66743AE79A77B4E9F707C6A
0E129A2ED4DF0D3F43D356D35F9E885757270E9F21A5B23BC009597BDEA4E71E
716433238AC886D639207031A9A1CFA77B04FBE0579546DEB6B1D267007B178D
AB23BAC475BA70CDB2554C11C668C39AD7EF03CF8A2EFF21391DF3CCA7ED2CF5
B5C8B2F47974FBE8689B641519DD9805A5D7D9D85748FD8BDA10E6C2E084485E
E622F8D087C10CA915447802076378323B5DA1178D92CFD7E9CAF75E978BF7F0
B3A639F351534F19665BF09CA6E71DE0E7EF6E4CCC3AFAD9965A928F7C24C0BC
7D55D16AC3D839A055C36BA4FF9E626295539FC859EA7A4A30C8865D1EC80E13
9A017194ED178FADDE49A1157C7D1FE4E809078F78DACE5A54C0701E38514044
7CB399037F850497C7CE4093E2F1A817C5B8946594087D55C2495990EF32C290
CB9B92D2B26060C6893E637E055EFB165093697034EA51AC4452F6F487A43408
BC919F2D6B6BB85AED82C53E115CD32D57D0AC1341F0324E85E9E523E5DD8638
593E67E6FB269FE8A9F72055812F964F31BF4133E260320CB31E9D5A21516A13
619B0096975AA15E27722D7FF1EFFBD47455A66E2DA5DFF28E8B1DF45EA09F2C
D140E6BFD418DBE559490BBCEBA6EF56C66D97CCC38A10E0EB7EF803BC78EBA0
3DCF28A5693D88FAA5F97793A179E82B57DA82F460B73FA9B9A3EF069702BC75
D3223C5743622228EA753DE3442DB12ADD7900805960C636974355F5BA0B8FEC
C922784AAAC3AB4AD95206ECAD22C4FDBDD9B918062794D40A6FB43CCF1D69F5
5D564C400E34905D710F21BB8E6121744435A51BC1E35515B913A00461E8A75D
468E9605BB1849902D50F737DB9F4809CB5813252D270371A93BC36DFBE6021F
EAEF443FC46E7B63103DD97C84214E9F17E250B55E65D8F14AE6686EEB06A17D
1AEFDDE0979F851D7FF3A626496695665B84FED4C7C258DDEB6810BECB56CA36
39B6CEA996D6E30A247FDFCD5CACD76D29A46A7E67C4965A8EE799C31CE1A20B
034952016BE1BA65EE2F2A8E45D4E4712AE3245767C2A0985F438C4DF62CC7D5
67B4C01CAF04B6240F10ACF0F996B91ECD4ED29F87B9F2B0AE84984AF8130F0A
BC7C44086BC9088D84F77D0BA3F6A345EEB5AB7E8D1F0D615CBD7F3E302E4430
D8AF79983D5174B666CB676BECAFED14399A3C6019216E600DF46A93CC09CDC8
633CEDFED2A5F9EE021B2227DBAE9F04AD3BF5ED74076F822CB19D4538F143EE
A03DE48C4018FD271DC84C146DBA39A9B243A9D9019ABCBFAD87A17D5FDB3DA4
947D83742BF94707B46C4496291859CC06A60CC8380A42EBE06BB9BCD7C2350E
50B4617A12450A4F95CD3828027DCFC5FDAC63F4D9BD628D79BBEFA0A245760B
85588C11FA30091597B50C6485931A458B474B3C77D56D063AD44B8774F19CAB
46BEE6168EAED2B0EC9606F6300D6B10DD25BF5803765046AE4CCC911204E513
A378EF5BDBED7725AEFB4FE0505B23F0EED4CEA493555A7D35BD9676776D7705
2EC812731F43EF524E3700DEBA71AF85BFDAF1F662D385E0AA4D434F59FCC68B
1C0B41678F97FD970394FE8D21067F8F5DF8B4FC8AE2E3CF740BE6D85F8F6F06
412B6D6AAD10305D26A2A310B04AD8F1767A4F79A273703C1DD91907A984DECC
78D901F1B109A7DB42F5EBF35A2AE603DE5D3CB1572F7875CC54AECEACFD8FB2
B9A3F2E995AAD008B0A1793569F8B29561573AA857702B4FEAD295CA496C06D4
97EC2F3CEFA50E2A0C868CD9BBC5F936E537F096041EAD0AC2FDC2D3BA9B36F4
4BFC4A513FCE430FCD1630959ED4904FCE5F85B2FD8AF1D10AE1D002FE8D2F91
A9884F25F4B046D2BD09D897286EE1AE4EEF343543AA94AB29F29A950AF02865
8E6219AFB22E52F8C57F195F6E652413F527B2581AA05A5793C60D2FF6DC6C55
8739DD6BF1BF12BB9A20724A176EA462593D763D90BA0719EE731DA5EB22CC6E
A8BD93894943F8FBE2A052CBC2CA6D633A230412D292438937409FC218E9F9B4
A46CC744D9947BC5A8F0D81313CA6F5EC07B3977FDEBFBF6D5CEF96440814F44
B4992BFF58B91EAC064C64A20E51436FD2CAA2685EC8A882043D6DCA44400F2D
A38BC82E8FDFBE4FEC60F76857535D9F058AC7D025111C81CD4B3F2507585EAE
6A5254B1A9FF20CA402700E4F6522AC95BF2E373518CA54EF4B01C53DA7D90EB
63E0A07C349F6A2968A988BB1FD120DA292201550823820978DC7DE6D6616F80
D27062D5959E5909A7B7CDA7A4D49DD7091BF0AFC053E2DD0CE5060B84E05ADD
FA249B439DF518EA7B878398B10905879C569EA213FF364B9B37FC3931E1C70D
B79FFBD30BC890CAFCB101A40DC768D5535EEB54678E70AFD52D5B64D963F485
48D7DCB55736A343543747AAB7625CA8FFFB16E186C3203385E1D80995284AE9
25230A3FC756F55822EEFE030D88CD7CBE557BCE41309B76783698B1F9D21091
C1E8512ADFDE5EF1A9B5626AE3FEB4F127D06612C93517C3A23B766A8B620311
01F46245B0AEF9EF2AE5DD19945F77AB14169547EEAD422471FDD376E52ED6A5
A9C03610DCF286572B7B949A7F08458EF4EEBE5513D815C220AC4039D474655C
318523B9499AA1C29B78FB6E21EC0BE3CD856437A79048C8FC5B8E46B8F6E8CF
C2783B4313B2F735F4CFB299B69F809C87D15CFC63870790E597E38F37EE0379
B1EA8E3B8DA2348A1F8927A5C82F68C4E9D817D5B521F769690B5801F3627379
589F11E89869BE35BA96C90FC0902B167500C25370866BCB1391B4C6CDD05003
2EFF7B63DCDED18D6B7C186B694FFAD725F0C1BB1C6B1A1AB15F47B697AAAC1F
275CA17BCF7E79EF4079D701BBBF306302311950AA3EA5788239D1FDBD99B0EA
B041DBB2B7517176FEBA36B62D8F1935FB1518723CF9D8C77866A6DE13F519D0
5CFCB01A9B4119EC0D6659AFE222577D53A7B576FAE73802D858C5393E8083D1
D0D01C4C1E41D71844D2EF36E52562358AE3EBC1F6133E45440550695787E0F7
080490E8DDD1491096E9A2096D52AAD9290C4DA30B13B98BD2BA2140ECB7E63C
D7B447D4C40763B8376C78DA73409599D242B5DF7952B08A5ADA04CEC3DB2502
C4C4A91BC788FC12516BC85BC89A23C2CAE9772ABF888D966E976366613A8F19
055E787DF0962313DC2BA44796BDB5DF0FF6FD153B5BB9A392D09E79AF5106A8
18D906AA038D303835B4250A6772745D0D59C89DB79F5730A3F3862913AEDE76
85F7C1645D663EF374287FCEB15F73DFE560CF71848CD784BBFF1F61A7B893FE
564A6CBFB8A077E525640CF21194CF072DBB2641534960D5246B4461DF495DCA
C8CE84E14B437B82D1D8591F56261EFEBF59E51035F57BF70BA92D23238AF0B4
5E51945E819F047DC687DD3FE18AA19A7353A6AC4827F67FCC36058618924298
2BC8C8E18B9F260F3109B8E21CC27AD9B207D4694F3A54CD199E57BF87646D5D
E2AA6843D41B6E5AAE85B9B747A7CC96C8A88A654990FA928BC883B8E7606993
84EB8115BFB080B2E13090929978105673588C1DBFA6204EBAEBAD35AC7918A9
C6F373314BDC5623F03A48CCFAFD2392C817B8F7FA666FBE36129A36419F61E5
6963A758EBCD38F57552442400959A62CACF5B55362487180E36AC1835CD7AE4
1CDE8EB6DDF2C22733D0977F61D836C0BB1FA3D448B363C36F9830029E468F77
AFC2022271FE6205D65C1785F299C80FDAF145DD29B3B4B551C48CF2F739CB2E
C7AC3F669435F8EFAAA65AF2535FA1D1A508FBD0ADA101D63FB8D32374AA6E1C
2ED407DBF4E8397A9CFFF661ED86EC6CFDA227E0CC5910FED1BE09A22ACB76E2
F71328CE4F5641C180B6D0DE5166EC4B4F7BB248B3DC7BAD2904A97575F8B449
D572EC54B1D116397B924A6BDC58D92B51174331B8A4CF2422F0FF3C97776A9F
6A41F6291A00841CAC732A8D05094D551F641ECD4C82839995A194DEAEF3683F
E5F94E38618682C321753AD401648835E0387FE5342D17C481A4D713BA06DF5D
6F6AFF17F7CEEF7E51870F40ED8C333AC729A8D8C7B3F3072F3CFF14EDC7FAA7
CBF05E8F87F74CFB89CED1834EBA8A4703D4D84D1B7B3247221E3805DCDB1F96
A663A23312B610F59D7A86D619FE01755A1DCEF5D526CBFEA960FFE1E8B2ACFD
6F9F577EFAB77242B46D391D860F9CC900EBA7ED839EE5D36FEEB8584D6AC888
FD746FA13FE9504272E0B60D76D1150759BA604485AC9D7DECB5D9730C0C1402
E5D5D9FF830DB17FEA701D3FBD6089B0F4D818C6F1A17AA358205A1F9295A797
7A5517195D660D6E27B9A4E43C913583727A346B03F8845F475F349F348629B9
2A14075BCE3025099715E770E3C97C31282AEC88B2E06A9A1FB9F3CA291B6CB1
866CA29962477405D7CD6D3ED2E726757E7D07758EEA070BB95F0EF5022694D7
BBF7DF9FEDB9745D3C854E48BBE8B79D1D9768C87C67CA2A599F1F4BA039BBB2
6179F2A72599892A0F660510E592C567EF82459E96DAD799DAF44C46E26A3B75
0631B0E76083832E083EF17DE3C42A87CFE3215FC094C1564E2626692F1C248D
54C82E7BD9251AA341F4BD73AFCE72BB502606610206D020115CAD393A9B7D0C
03ADE959A33ADA89B3E520919C9284F510BFA74B2157ADDE421D5F51D813B577
B8741B688917B399DFA54C7F37D97D22AFA04E1FB8508297F5603D98515FAE8A
B259EB719E1F850331D50EF2E7C281DE1A0C79D30EB03988B4B040791D557DA3
1A46FD5F25FB31899FCC92FD8B51FE215E8735958614425C59301CE7FA939688
C11F16242C23E01471E9983CB925E0F0B31505C0313797A2C62016519BEF23B1
60A29C6F339F32AF7261E19E0B78B3EB858A932B26CE562FC3416DC83B98128F
CE221AB56BE701148A9A15B7F772BA91435C0258CE2084F898D7218692B3EE8A
6CF5D816CBFF431DAD39518BCD981CB46BB7CA8582DAF2809A416A7728D493F2
23C40BFB9CC1FF66EF1A1B8570E3B6D2E63191FA605B8C951B962616C7C8F267
CD42170C2D7ECC7187B2E6E33EC0AB81BA72AEC00306914FA6F20DD72A66CE3C
BFAA1E4C98B0BD07C1A140FED753FDD26C83FC50615B20D31CCA7EB216D2710A
8438A1761639E638CE9D89504763A4804CA724CAC6878F6D653FDB1177F51F9A
929BE40D89789D466211B539E35FB61FDFA5A4C7F8F2401660B6A2E1DD46CD56
E4F421D085D39FFA15066BD907E14E4B46D012715E3B92493BB6B30736D2A8A3
EBE7981B30DE0FAC3252044CCF19B01D17E43F6B9E1DDE0B17881F8B7F98A7BE
4E07B1C2B52DE9AD9F6A85820F45FDDCCEF8BE80466851CA9938A2BE374D2FCF
B80A5284F920651058D61B6F688BB313A91D803FDAE34AD5E00FB9DAA6CC5350
1AF3080E1897ABAAEB9F5B279256E8013854EB90A8F016953104BF2422B1B8B7
C195E8AFFE8911885A427ACE9890EF519FBD740A4E6663380089C3AA9B53DE5C
6AFC8EE6E2EE98764FEE0140E176F1BD23DD1EF967AA454D40FD11740175921D
E79B685971E34DBC2C9743C7F982435DAEEEE49EDD0C4DF552C4F72A6EE36BBD
F75924106BA80385D5B4D09A301A1F8F4E65DBA4F6E97C1FF0F336CDC60F4612
141B45D150892F4C5869439E421C865F5E9EE5BF378035785946EDB3EF6A4397
1A6CBB705FFAE7E017A42A6DA96D70774BFA82C7B080BC0263B2EB7BA006F1E3
4B5ED05B180AF4744E9BB90DC6A06E5A948C21D0025E3B7825FA6BCC772A6A62
E586D704800C801F8773BAEE0C062CAE747BADD8746146B8217D1F1529E9D02A
4D1A1F4410BE7699FF1A010837498A5019E23C31650A253B33EF0C81C1617632
C35897F57E639A35F8405764C677E08A5128BB600E7433F093680603F4293D1D
7D5BD040AA3AB0646304C05529DE932DCE810D3B4B6DF62EA528B388FB28EAFB
859B033D5E0F563059F9956FEC1AD70827E2DFC7BEF6FB224B8F2A6CC4D94D23
A0B709F40562D398D522DE8A77415431379DAD60418639B6871CCFD5332E1A1D
3587325005FA1B12A00F107E3B151E30796DA68833B7ADDA86A3104E480CBD2D
135A1E1774C0DA647324C9F29C66524BBF0E65C23CC0AD10C9EEF3518EAB990D
CBE7CF2A37E40DD4A3FA8E755E175293E066CE3FAD63729C278CA8F32B32BF27
B6A55D8CA31BDCBAC913924D53DFA25C354E6BCB6E5B48293675A3806BCEB2D3
32BD3AD83A15947892CBEEB132F43CA25961FC2EDFEE2C0AF752C538FC805DA3
F067D7682C6BE2B3F61E8BE4DC28A865BCFBDFC3E3E25BC8F696FF6DE384BCCF
DA6C0C93C97655121B1E4AED825F0CD87275050AE2996421398BFBB322379439
931B80F9908B96CAF6AA5BBAAFF1633ED40825C75260C7BA8A5A0847661FEE0F
6B8798FA1DFE4F5C2067E4206F8D4F3AF4B2C7D95E63DA3C2EB6F8ADEA375AA5
175ABAE6754E91CB540D475231DC759285BB0F13B3C6F6AE2F5DB222D221CF0C
B79116B118ACA56B1E59148D4C3ED2C0CA9E936B5F49D43DC9D1545A8D846D11
6FB18BA203637F6D9870E8558A80FABCD16C99C21A0A5567B63C1A8F5368BDB7
D01772CDD4EC14DE67DCD1364B0864C3F45F09194096200AE53D66B37ACC432D
E2FF32E3876FB1736F365A941D51720E5CDD8EB173615232E12A5937209B0AEC
FD1560CF0FB352EBD273E2BF1AA23DE6B2D7C5684A2E0699F9B3E1F86B88D269
7B5AD4FF8B2095858AA2F526BC031EDF371ECBA64D972E833E5B58C8B9B8BC46
048F0BF84A626D66C895A9E9C845599419A8BC8D29C72834D72934BC8D6455CB
E63652612BE29B731F64362063B30ACDB29253E52344B2739A9DA0ABFD14FFC0
4B4D4CB7FCC4DAFC11B09FA8911DA894E636B8B5D9B2843FE872BCF1DC958A4F
FA02DFDE27DDE0594ABA893A4E43F34D2703D7105D07B8C5D7EC0A7568FCDBCE
8EBD43752398093CBD222B556CD1A841AE07A1A7FBFDBD8C88EA49DD8F7223F9
961FBD758FBC42FF057E1F83D5DF0A334FAD1018ABF2CEA04AC088F7E461BE8D
ED3B1152E28352AD4F28DE13B970A09DDC6A984C0E944711C77542A66680C933
9C7F2D5A3222BB80FF68C8E444AD667F9B57D3A1A5A559C097CCCC42E2C07963
3B98C875EAE7E70781FC677F1EDFFB70E37AD5F55585502B0017A955044E9080
E31629E25DB674649DC53F5A2A0C89BB01B41EED9C02235930FB9A2C38C5D659
9206D901EBCB9470846D007A9F2BBDDD154492E4485E45B66C970FE79E8D2DDB
C5604E6F39264D995845FB5A73FCCA06F6FCDA08A86235DDBCF00BDC85887F56
EA864C059A3EC73243257170617AFEBBE2F64161960B8408BF7CE6C32DFDF17A
A34460E39EEFBFBF30F149C61F9EE36A63E6F2EA0671AAE321255A08232EFBD5
29A7E493904D64763E1BFCF668144AD8510C8A963A21E8F4FAABF5C200190E83
97506691E23FE2615372E0EA743B868E636CB4736960363AC9B67ED309B84CCB
50EC7D448F43122BB4CD0FAD62B0E43A055F48A88A8DEF7D20497A8DF6AE7D26
82B545221DD6608B0DAA04E948456B9E88FC09A69A1FA416C1A71CF7E9F735F0
19AAA3379AFF2D003EC198DCDF49410976BA86BF45182CD5488E3B999606E618
5BF6299B90251644C0D662845F6081B538AF07DD9F84FE1C82074518D746FFC8
39EBEB3BA97EE37EAF8B18C62651CC79CAE86824F23F6A0A7F7883266107EB7B
31F81CF5D61922234AF9722392DAE545CD070164351F615DF055CFE15E6519D4
28EA81A89AE8928FD7CC272EF83636D3EF77D7CED2A2C3A64A880384D9369EA3
A97EB6784DB5378F2D99CD9B5217DDC53060DB35A174B5FE2A00929BF643942C
FC8474956CA109208CB1F0863A914FDFE0D97007A2D9EC69574721A5C297681D
1FD4E2693B43B8D35C1AF04F67B6AA1341EEF7035544EB761965D0BEAAD3532C
2F8A75B6928858520EDA39A78001597941682BEEEDF87704921CCFA19F2989EA
2C56648BA251F1FC3A87D04B62F7B6D4CC6D78B85C0B107DFB0AEC38357AAEFD
5BD1B5F023E3A94C6636F932A3CE33BE517D3E6A002F69425CBA132BFA4704FC
C877F4D807A80E87480FA7C7FCBE1BB53BBF4D01C5CB24823106C5F70304AD24
9B8DBE3E6EBCDA3467E1267C2EDC20006AB5EEE4AE398E1FA52B9BD51651523A
DDCD07857E68C6E16A6EB45488B890196ACDEB9E14AECBA8B20ED2CF3FDC5CC3
61F39C73245DBCE502A019828EB6E978C0D0DD1901FB57909918D07EA767FD33
4C65A6D5AF397D8681257FAF946415CB79528CD4EAEF1D381FA4B6C81B3DFFD6
482770ADE06DE0CCD39F4F6C1F4CCA24F5C49358B08310DD32A07CB408B09277
712DB0F858D751E6F0D489BEBBCFDA1B17F46F1E896ED281C1AB1394AB3406D6
CBD0E5AF5B83889239262AF2D2BA009C25F0C7568C71846E413E504BEAA3F459
4C150F613EB71AE0C78D9FFAD6BE1E36DF5885F657994BBC21F034A926C0FA6F
8742178B954C389AC3491FBF3739141654E006EC3DBFD917CA90E91ED0D50148
1B2AF1C02B1EEA1F76FC3B4637234A12872CF5338D7480BE18F86B3CADDD0EB5
31AB1BED9E24F3A328EBAA0A9C21A6A5BDE61F1029858CAB2F2D514EC9E3369B
F229027D2D21359C3338E8E0D6382921386E882256BEFFAC733A65B6D303C717
D8C8CDC901A3932844C9B02EC2E0ACF62F1319DAF76AAFACEEF145009472F385
C7901BC68E436B3B0AAD36E5FA1E8FE0EE6A8E81E6A3BBF9C1524C164F29BA8D
28F8BB1AE6F5715FDCC38757056512214E3767961731333761183D0C720073C0
5A2F6D7CE4EF4544071361BF6E2A7E12F872FB2AC60CE1B7EAEF1DCD70EC04AE
F1174D1C97A638B4620E485A996CC84306CDD2D6B4B6705B08C9D8DE56596398
25AC78E0D45F3105FB3EF671B17292CE11210B7D55206DC7521711D1FD8A521C
04086F33051755365C634BF51BFA847DC6C11825CEAF7532AEAED393B69534D6
E2FE09FA7A6DA4F3D2CAE3F2C028C56F557D3B7703DED5666878ADF3CC242CD1
1B861CF372B735F8F7F9590878B9682CE60E17947EFEE6F0A41F734530A316F5
3C3C2DD603C5C2CDF058FE624ED84E69D50F7DA797C3A4F27AA992CDE69C2AF2
07A195DDBF801D087606230F5AB894750A1AB4297497D565208BE4D2DBFC52FB
68B7B30B0206532265ACEF278B7A96860BDD648B87D365CF7A3646476E8D55E5
4E2901485AF6545BB3F411610E46872CE5AE0B8AEB1FF511DA0432E4E6B15F9E
FCD75A17309C086F958A871699C9A847663B13C37D2D54977433AD0258EB8B18
0CB1D3458F5606381FBBFD1DC2C2C71534BF22A6D521A3FFC26DBAC540AB00D7
FF2FD101409F30894D70491F2539DECEFDA3C2A7CB78723FB40B625D7418A892
CFEBFF58AE1CD0F12C6CF98026BBBE228675A553F3A56FF81A199C0540918C4F
B443C7DE891D22C01EB907D1413F647D905576F446425F24579852564EF01DC4
AD98F15D522BD15FB90244218FF4933A7F5E2B732F3079B890C59CDE4235335C
D0E2B256B88AE676FDC3CD9831BE77B254972132E57E68A603E32448E22A58D3
AA008B2D94985A319C61569E9A79111D0E8131F155B106D862F0920651AB446D
E4B0231EFE49600B28E6DE6DD5630777328F56CEAD97662B994AC4AD00B46C36
448FE2DB35CB45276DFB339097EB4E235D5B147C74880C06A2606E3AC1E0302E
4E863FE63AEC2C74697D12EF1AC78B34E566672E71A0A5B53E6C464E7F2A98E3
E7E08AA5E529377C0CD1D0C11221AA246EA8FC5643B5EA52C15F5AEF6F3D61FE
A77636909872F9439D7C4828E32FB3BFF145BD5AFD8ABE7ABCDFE97CBE5DE328
33128F9C87BD571450A3A00C5182602B55A6E23373FB2B49D56FBEE8C3F7DABC
D7E45DA8C1B11A467FEC5069570CB758BAE3A340656A33F7F70892C88B3F789D
CEA5DCD861B9B5A15AB3767FB67FADC89C911EF9D1DC823C226B8D236BD37A82
131DC98612ECA7752E0477CC8F1A7549DB2EC18C7457EE8077D872AA1AA9954C
8C41A1A0A6DAE12910FE815C9A30BECF3619454D8FCF07BA5C7BF8FA37C5E374
72E1920D8904E727872016561711BD4A9A6FDB7F06B86095774B01B948791011
1D1E72EFF32B3B133A3125AD73E4BA42888617001ED8F81F3B6D2915E16B5614
AABA6CA585804A8A7C176EAAF7990882F149552ACBF1101C0CC34540AFE14273
B843ABE7ABEA5FC37D43B5540F8A198ED3BC4DC807409C5189C29DF8F410C6BD
C20BC853E357D674717EB856E783E58B1EFDF083A5E8E4B299607534E588FF88
BCA8611BB032EF0F402ED81971E9FC729AFC1E778A3C05770AC9615F0DA4B21E
7AC862145E3D814E7817C6B9362E1881240CC0667E2ED796A8D6BC9CE98F2B71
D986211B6D99BF01F74A6CD04E80FE8CE8FC240F3323EA950B494F8FA3A20E03
DF07E27D1884F71B7233FD3A1800E37D8C1B690230453D92663D477F64FE298B
F6347084FEAABB2AA1DB6AAB259CAC63412153E8B87D7FE4158031E69B29DFA8
44C6B2085D6A445D1F877635AD1524D88C3461B49331578ECF6BF06DC225B10C
6267D04FE4A43DA513697AC661337A35059E033BF9F86DB88FC6C7FD75111ACF
1C797A817B3F07D7BDC8867F9955A8B3E5D91FDFB51C814B18ABD2C559728C15
23E9A4F76A0AD5DFDBA69AC65A2A7A139664B93C419941CFBFCDADF56B75CC3B
42E92CE51EA8F9253E6CB743B60342DC24BE3A6A42E4C9E880311618FAB1D0CB
167BEB8857F34A849C7DD195064BCED8FC5E0B512D5045F3D5727ABF7FD2E8DF
EB2701852EC7E3213A7FD197A8CB124ED47F6AA3EA8AFA1F6FE041E6E39D8088
54296EFBE2FCBCBA4B6F5DFC20AD68A560B19B3B8CC37C73D86FD65663DA0E97
5764B0E287412C8117393C10AF1B41A265423F670F1D528AF5650261EC866827
D9446E96C2F96DB78614BDE1E770E49F91A89CD0BDC9F40236986EE8B5CE33C9
5902EE7DC7982C4C5689D6A4D4C281E581FCD2F4B77155BD5C0504F1993E6B85
7749BDAFE38B01E613385C0E0D0FEB256034C71BD7D0BD694285684FAA15056B
03A600DBC9A7316502E0E6D003689E8D5109DF9ADCAD04B73D9ED5E7B58E049C
4E905481FC5999AC3535A6BAB853CECEB50F035C4D24E4DE83FD0832FEDF09CA
04A57CE8DFCFE6253B8FB0E103DEAC81D6389F3BF0C6649012CA5D839E99F009
DE1519723FD52BB8E60406CCA1713DE9AC0EDD494087DB7F3ED2972A9FAF259A
351E11C247E7D6859027FBE45FE00933038F1B7497BC8DD0C4A8E3E707247749
792D8FC3C2F4933DA0DBA1335995707E49C99FC1042D871434F9050CD2434219
87FE4335068F11968D7B8D8CC1746426651EABB8B0DA9EDB2BD16E5C794B17C6
6E029F07BAB763735891BE49E929F3C8FC93D319363B00FF01C16CCB574D3312
DA58B4C3851499A044307DADAB8C69EC80A6A061C9F5657D4AF89755ADDCB306
5E8E2E0B981AA2CCAD8789A822D71A1F13E57CD1124F098CE983D35798A6AAF9
178491A21385175DBC3EC1C500C49818E26BCD7C6EE0F1E0B755D51918995BE3
37E5394A0CB7BF59F7F6F1442302A270F74CDC7C894A66265B458BA56E77E9D4
7E376C1391AC35F3E6B9F843341D600FF60FC9DDA11C4454A4D7CB2EFAA6F1CD
CFBDCA1D8E1B51015F7FC14A5313420245C33471DED0B8078392D419D572CFB6
BEA4D1E45E3788ED0A5D50AB05638BC102E148C7C38EFCD5D2764651AD74FF95
46BEE9B9524B258CC1ECF6126BFC8D8A92C7D46EA54D79CCCD3C1685D379289D
359518F1B3B0D1DB6A813F173B2FAC2C3A5AB41DB49BD0D2794A436EC903DE07
B5DD24CFCB3F8B023CEFDA136076561B9DF8F66B96E9AB5C4C7B70338D46D03B
AFAEA10FD5D40EA463CEF58B17E837BAB5ADBAAAEA1F064E010D4BBF3626B570
63F02988EA59C42E60C7480D3EAFF437043CC4481253FE0F6BA73DFA49A9896B
24BB3BB3E805067F997B8CF82F3B7448031B83F4D83D07F13CF622B180F3C9B7
8C2AACB6524B418C1374E4D8BDA9E177254AC6F938565CA5A4110B964DE0179D
1F5F9379BAD2B437BF5AB2E1F1226A7F3FE390001BF0F9011C55CAE9CA330004
F8206AB7DD73E366A5E85ABF673D0276707BF3D08766558D82F1D2D09DCBD241
CAD6E1C3A76A8A7C14DE2A31AAA7432D7D3BC26119E6404AC7624719FEB308DE
826D102402AE43FECE3B8B0319A451790753B8254E1DC82E6D4FD1FD4841FDA2
09A056BF06777246B137E0C6B513ACF2FCA911D07F2D0B410D905768BCB0CE4C
FC700C3BA418929E1814281EBD7EA778BA51311ED9A1760E6A455E7F6E24FA8B
2022BAD679A24620A2CAAC780E031615E88314445FC8E76655AD76064EB50348
803069233B7E735477BD94A31737778F58F4416C7489EB72880772BF0CEF5A6E
5BF8658DFBBC521D1DA490B96134EAD02DC007BEDB56D81AFD3960CCCFFB4B57
406E6926846C94D25F5760DD3F2D73D4A767B207DF735129225E289BA46DAD40
5158B48D1875A85BC4BD3E174CFB665CE85AABD00A67ED5C4C1B3331DFA06E33
2B688A05F736C1CC6613D21642FB98A4F0BAE65960CBCC253A16D18F8112E8FD
F1A3CDAE3A5B3DAF1F4598A9E64D82A836539775EA384C650CE555D1CDDF8DB3
BACC3216982BB6C5E8C2E8A459E2DCFFDCAE28693E0F5943A4428AD465EB978C
C0142DC6AA8B6A371A184DB50D7CCE10F792338F843FA8340A6EDA3B1202C97A
E9B2C1D6AA675E023B6A041FA299509DAD4096782084DD852A4DD5043ED5C022
9453F9517A1D9352D7B8E4FC4E53EBBA65C03336A0BA1BE811DC3C1B319CF61D
962EAE779FDC5884702D1F4A8909BA6855616A0F1973A2C21B7E680CC763BC76
1D997F415AD500A1152A20E7ED28397C0332703111C81F65FA63DD71359CA96E
35C49B456A923B9C509D44E9CCB3908418989BB0395B14EAE5507FDD956A3BCB
2BC11543731619DF939BD42D79E144B780A837B22F0E4B28A8329E6E74F360F0
31734D422469211E2F2EB814B9EBC03FC9958C69F35AC9E634CFB1FC02581508
5F6C5718BB6A9FC42F7D33151626ABFC98CC90B5822B5B2483A19F7881F75EE4
4CC5806A8D8BBA5B28CD83E47E46B316D40C731EE29A4CFBF9EB530D8BE68E97
8B5A1D35051893039BA9629662B285054B313F62801BBF81A37FBD9DD553F121
1163C7A3EC055673A3D80BF5FB565727302EB1E6BF43530D4D1A4D8B8514AB1C
D66066FB964C86E84D5843C3097D27E51314B41F95A324364AAB1FD6BEF51868
8F5001057C15ABE8000029A07BA8C929EC5F02A9D5B41B7009DD528CC274D121
C4CFC10DB28BE23A542A7C0F1E9741990EDB173A15726FA93E4C2205ED038C29
4BD374B43319F4EB1A1A8466F2D6ED5754DEFA1F51B077AB383DD6163999DB24
C3D70CD1C330942C0BFBD3B5FD110D4B07EE16702581277FCA907A111FA00713
57126538FE84F63B96AF680903AFC551B048B9EB383F134983166EFD56BE39FB
9955886C444F8336F388A4D75192B278C7D32913C1DC2ECA30D47C0D0BAF6646
7C135210AECC05C6F9CA539D00A3F3AC71A7013EAF0E9A7474053CB776BAE2DA
3B6CE4CD48CDF43B942660386070670910E7D8259B998C31FC06ADC0723B1A9C
035DCFCF9B3FF9B8960B7DC9A418487C2BECAA984EA9570EF247D5662C46A875
9617F90DF1771EF9E3868885583DC4FCE369ECD607A98E571C6D3E688F7D49A2
951107BB39084962F388CC7603BF59CBD3DFC008467E045511C9FC4C7C890B5A
EF416A0AEB2C3DDAB259A5792DD7C50CEFA6B80A23988E57BE1599C52E2F431C
BF0522548F777C6F46D94B134A822060279C4D73BA15C13311F701D1545CADD6
9AC2255EA3DC6A4F65A9417FADC3E1E20B858EF5C4FF2B5D8F0B7086432C0329
B78A0013659660035FC35F07D5A79B7F6FAF2DEA7DC19E781A50EE36C79F4F76
667024A8206E99021EC7E573FCEF765A76A56C0F55075F52A1C49BB9D4BD4FE7
87F0B9F801877F670E0879A9038BC8EA7BE3B05104E76E3846515CB5BD81FE63
C55EB8DD0BBCECE87B8DA65643FA49EB084A05454463BC05F214B530205B3EFE
B86103110F03E0D827FB6F0FCDAC81BFF4E1BE0758A30ACD0C23C67268E2EBC4
5735862799FBA2B9520990158DA343D068FDEF28DF86827F19D17BD103CD5AC8
9E39D4C9D11D691A83B5453778C9BE965BECF9E5B5FDCF550635D9E1FE1A6D13
A7CE21AD2E0EE3437D7B53B6864744638481119C97D0A2AA167E3B75A7CC48BF
5B7A78948095489B6E3F4A817C7A178FE148C382ED91962D7C27C23EBE559AC0
E08DAC64B93F112603E51375570515886CDD893D4B43D07147931C54A3CE8A72
130DF9FA9A3C04F2CDBE36CD1384C0B54479DA82994CCE6B729BC52112E16D2D
0DA973E78AAF9252AEC82998702B8F9721D29935E5BBEFD17048FA041670EB44
D9D1EC732DB44D052C3A7A9D374C0DD004B5985E460C7ECBDC4C1E0F10AE5994
B9118EAADF0270BA6D39C82F78F068E587B60F612982901EBAF52300828CAAE6
52181E17DFF9F317EAB2327BFD8970EA1810C358D87374B95BDE17F69DE6BFFD
6D58436905EEEDA3D170877E74B13955E2E4B8E6F4A77150567B429EDDBA70AA
19A2A6F9C1130B2253B8B68BEFE7BA09E7A85626650720A233EF547640D8F73C
BD971612B860FCDF3236581F50CAE8493ECB232AA6748D06F4A79DFC67DEDF3A
6A9E50F9DCA5EE0AC7D941756ACD6EE519B6ACBCF9AC77789390EC5DD2E92739
D0188A2E0733013E4F5BB0DC5D74BE3366206684D3DC16040793223EEEB628A2
0CFB4697DEF73C7298A1AE1F8C141B76580BC4A776DD29999390499D756A339C
DFCF97AC7DA33F1BC7F4613A885E0CD7E9C1807ADA0EE6CEDDA24E1A88C2A649
CC4651B63DAB9F2C97CD1BED9DC1628565BB9A0254216BF005248F26EF228123
13AE2B443E08314E3D22A65D3A2B47FC0FB3BB2F6F6356482B2CAE6836C0DEBB
666C72B4CEBF5BB61853E927BEC803E142A2CA4AC1E6C1193566FF24493B7CC4
D06E3420913813A0465C52AEBD9013F75362C5EF199064944C80A4FD5513BE69
D7C7BFF18D66C05C13B7D2687F17BBDEE13F75C7EF9E1F980D5D547925CD4395
5AD0B93F9203E58D1D6433E7D671313F045AE715BF9758A5EB6BAAD88550D2CB
BECDB2CCE5BE3762958DF96ACEC7E923A486A91101FB30A33BCB002E9ADC7A27
0CD3BC6F03C3F6A0C02323CF0B9D7AF455B9CECB1FE3EE381647A1BBC7957CDE
D15C68243F7E3E50C3566FD25C6265DED70DCEB74F62FA74FF99CB8E79C00436
0FCB236B33EAF0E9A42F8D49819B76789B6614043FBC1C62A816DD0DFB812323
2AC9F84BA2A37CBA65D5F458368BE361AC48C68DDEB77F6AC01E01C49186534A
35F677803A3EA933F93608BFCCF6FBFB96809B6EAD540C9A346FEBAF28D84220
6781AB909908B907FA8767E07AB026D127DB7DDD444C5915FB9E6331D554E682
92EBCF8601D6BA462C5A56B386B786DB8C4D1E234FD77369FFA52D8B4F5F9BE8
33396A6CE2B0D4656E1AC5E47FF29074FA50F21AC9E61D91AE14A7540621F7E9
1737AED6AA53CF7D913A6D76B67D0B62BE6EA80F8BC0B3A55363284409056E19
969CE9A995A8F8A80AE105A346B091C28676145464941233A882B4FD7C817ECE
2B1A01872DBBD674E8A3C31F155B5453D31ED9164F470B630C5F60ECD2A8C278
8ABEFEB888DF8D87F32A7BB52C223CFCE79602DC10C837C9AA732E262A3DB435
32F9B9409DBD5D05914DAB88BC9721CFF35ABEFEECA1FAF2397708BC9CB8C48F
92907BC309886E7A45A7E2C99B62221BB0FA68EFA7EA3CC95DF37A01F7A95A81
9FC52D5AD3C2A25F7BAF56B51115D6833A1B095789D62D918A53A1273259D193
B06B3C259A7A3AB4129C7F7B104E058FD6D20FBE9B5444FE65067247CF53B52B
B68AE9CDEBEE4A5BEAFEE771A8C3624852A32A3E7A15DFB13B1E3FAB59347BD3
AF21C4D6ABBA292E6DC779DE2766785B6939FB8F9115ABE7D0EE27C7B9ECD9DD
18A2C537FBBADB5A10A63BC2C2B23AC108144549B42BA8521A7B765AD3D939E8
7316464932230D209AB53938C818314EC252658E845D4EFC56BE8ADB6D9586F6
6044E7C6DCDC339DDE7C6A3D0CBE44F4F1E02A2A6B6CDA6AB8F9231AD4DAF8AE
41544892F415CE5BD66CEDBD2A0C818BCF4A653B8231532A0B963C2DB4B02CFC
75943272B6F94D5F378CDE8CBAB388EABD4A077CBC6B61C42FBD9F0B90231348
893373993E5FB53583BAE01FA3DB210127883F5E6C19E1F2AE38EEE21B9C78EE
4B09244E335A4EDAB172F4DCDDE0FA53F6FC0A5BC9192D6EC2FE67C385CA319C
8AF9F982FAF6B521CA8B8070EB9C697B30DD5F02981DFE9D1C0BA89987C291D1
1A8F4A3FC6DB5F91690780B4BD697224751D65E7216121512B9801741A0D76A9
CF94A15109CB88C0E3A8D552E7239A788E8D69F5F803FC20B59D1D79BB652FE4
AE076313B7FF36270C5D25AB2DAFECCF172B6CD3DE25F6D64D95FBF5DFDDE57F
A8605F0B16CEA5A2277C98DB07F2171D6F89FA9CA67C363F7E326391DA451B63
BA07456352D29377888CEC3F79566BA0D2BA1C641C0D0CDAADE7B09D79A7B3F2
2FEEBC432C1DA01E66277196CEFA7B50E866F36CAB2725EC76F99070AD3FCD95
1C5F9A65C1589ACBA3F3AB0391DB1354C71C7250E3B1AD2D0ED3AC37A80CBC91
94BC0F5946762FE01369FCE674B5E008B89FCE130CA86A5F8AF25592D49D79CF
A2CD74080709EE06D34C25743D1CCA8877FF3E725C28408091D24A435FE0B8E7
2268FA7D25A9FF1229846205A65DC47FAEDE8D9B3B89F8927A6D95D8A8478E05
5D5AA7F830844C834F4C73E4A96A7FEE1C9A447D8DEDCC63A2ACB7DEF48BCE76
8CC72F145808AFF82D4F7A28CE7122F4C25EC486CF30B671689E518FEC481190
3EB6648CE96EDA8A4DDC4BB6286432808CE85D52EF7E9C19D395DF114C71C492
DFAC204E69C9F512268F7D56B811706578B246E97431435CE8DE158B30B79CF3
B39043E5896E9CC3B1290559A503D762BB4E038223B7A6E4B3CCBA162C972AC8
785311B187F280CFD159D4D876C2104221B63C8C16A4C1637125F5B2753390A3
C130FB8FB5CACBC92B9C349051A7A2CEE312E65F8C68AE4D0C86FA55EA189CBD
4747BBBDBB3F0243E4F4DDF3CA66EA7B8DB71CC6943595678C0E6D052A59D37C
8FB2CC0EC31A85BCA1A4DBBC7DEE251F5A95A1573AEF41EB91F1506B00C7332A
642515191EFB04C982481AF5CCF9681F9DF9CF0514CC04BA8CD3054A500E0E7C
A8A36EC5C013339E11857EAD5533A2045A37AFEB188E303AA049534A23FA9CE6
363DF77056C9DB410B64D306FF82D5681D6F319850D8D91159668D1370A7B6B6
8E5737742D6C8A1D0E98D640E2A136E06B4CB1A9F2E15815712A8C5C228E33B2
93E4FDE406C47459A99753B38B7D9122539A7B9043F56D31E291322F3AD27091
6176AAB427711286C1BCD7242F37AD27DC84C2FBC4EA27C5C16A2DEB505DA944
FDC55F57F32982F2952A9B68B11D8DAA3735BF796478D344C42BA5BA179C1F5F
52A4921EFF04317C29C4F0A24768588E0192702D0FE78885CB5695543EF49BA0
4725AD990448999A926ED9B7CEDE0FF82A43D64F463091865FB8C9CAE7386131
85ABAE03E3DFA2F90CE3DFE018A88CC751068111497F8C9E4147231C864933FB
9D9192B03A578FBCD66BEB595CF3373861461747AE875D5E339CBFDC5DCD3F1B
AFFB13DF4FED1C6A67794B591E3888540AB0BF1FC7D06D2181E9B7AB5A3B34E7
1BF260294165AC38A6FCB567EFCB152D58538316F5858B6C98EBD48EB271B6B8
4F44090ED691001742F07003D3FCB47AA6D0204D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusSanL-Regu
%!PS-AdobeFont-1.0: NimbusSanL-Regu 1.05a
%%Title: NimbusSanL-Regu
%%CreationDate: Thu Mar 20 10:08:51 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-Regu
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-Regu known{/NimbusSanL-Regu findfont dup/UniqueID known{dup
/UniqueID get 5020902 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-Regu def
/FontBBox [-174 -285 1001 953 ]readonly def
/UniqueID 5020902 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CC5A3208BB6D768E7
B58CD9BC2B6B7E110693C5A88D680B7290DB121996E3B7C8AE3C23147280F8BF
D8C60B415552700FF0E44C2257B467ADD5D550F61EC34A76143393E0B34D55C0
8B64B48E5F1FD16E16B967511AE15434B7F755BDF2574191E3C3DC528B69B5BA
7DDBBD3C7878FA69ADE75011A2C0F02F5707E86FA632D1269281D3C265B31F3B
F3145052467647AFE18B9D763FAEE4BA72CB9C385568EE5BBF5854C278F1E3CC
475C6234E83ED33345268BE52F0931B58F302EDA0D5751348E7B7E53D4882FB6
9343BDAAE87E48F6E82024D8EC1FACBBA36582092CCD76553B0449A5090774EA
7242123C53B80F2E927B98DF2B36C403D1FA1E9F8439F3964DC9F89A0CAB5AE2
C907309460F097AA87BD156575D6C73EDB2B40C015E67734397ED14395C43394
7A0201C6B0F652B035FD7BB82ED236D0F7C20048AFD83A56925C7A2898B46270
B440913E4714FD89697B3E59F5BDD5A2AACF6630257957ABE1A63502A3081B6E
307A534A9E238F986D4C866AFBAB7A0B1B5A6E99AA0A56DC1FD7E8A39CC45147
259AC7033A0C58192CA82FB12E09F309F75690043646193AD92D2368F345771F
01CFD21236BA52F74E36CF4B94259CDBA2EF1D61AD93A2B942A9896B0819D20C
59E440851CB99E89C887FC62FD9E7F88F54E5BC157D81A5FBC70699820C51BC6
27D7755B195C0BAD8225A6F3EAE0A5A674E8AF6B11BCC69DCF5FB89D8BE0E2E5
FE7E2588F93F583E4E2F6ED5457E90B902B02F51D54B9F0BA54291E687F4A7A2
08CA5FCE0C9F3B954247312EDA3C532D3DCDFDCB56FFE03B36DB7D549D4203C6
7DA8772A2F732A15DE675D3212C28DC755E3D0156A777BF514112ABBE4372ACB
97D7834813E1850F90CEE543B4C09BE1E93742EA98B8CACC09FCC4D2595EECD4
46C942EEA60211FA7DBC11CE869D55BF0C7EC6AA747EB2AE2CB3CC2DBEC936C9
540CE2E08291323B36F6549CDB97BBF9F0DA429CA9C863B629410885540DA6C4
9AAADB30C39051C993CB547BCD573D6448DC09BF7FF2D1B108ABEC2AAEE4060D
182ABDB3100AC627E5C883E8F42D90D699C8028D4123472F211C8FBB744D7E3D
C626ED03D8517D69E1ACD26BE4F83FAE31122294816736827D138E4F4CAB1681
236C1654E01231EA7F08AD0E73BBE1BE19A7AD6DA63AE0C7F5A360A53BB35268
CC90125C7545D9D59F5127F0AD964AA66DF020F639832FAF9C2CCA82C01120BA
6469960C350D3AF786666EC14158728E0BA2DD8A639C28E0A7EA8BBF608FD7DF
79C7B5DDEA05C8C3D6FC70177D1A9EA9AD056F0CE31AB535A22FF7EB33748071
6B28CA5465E87196191BE975E7C827B443B92E15342609FB93598571C63AE16F
CB7CCF15B8921F38FDB6F24403EBD6D6BB66AB49962AD578E93B235E6180B4FD
4920794B3F976477A04AD21728815D3185C74C8A1DF224DD3EE5110C18BF691A
987AEFB1DA55E4EF631C48E3B2431BF959A66D710C206B8AE5E988B7929BEFDB
CAA93FCD07341EAB622A755FF5608562153DD6A09E462ADBE677E6F550F93921
299E8A99B0B72E990A1D84831236FB6E9D0A187FD36BFA9D85C9CB0414FA7B15
EC02E8C08C8A4F71226A952C5164E68A44344BC4E6810FAD9BFD3532A9A515AC
5D6B5F8B5A1402C2C4DC011B043066ED02AF0030ED0D0769FFA19112C97076BF
F950438DC37B172FADA65DBF0C00EBA9A358B189F80CAB3A55341E4AB7C1A7BE
4066E1E941A608D1ABEE882F8B8E7E3B735838A7FE08025B5CA3639451BFACB4
AC69B3D95585EF78B1D0F72CE3FE6E475E5D061105933646FF7EA81B5026C7E1
EF4FDDFF62E82B16CBE3D401AAFA43872E4318B5DD3FFA3829D1901194DA0D8E
044A65401A7354A7986F49C5A0C4D34F5073EA1EC7BD55CE9295AE76F09A53A2
C536A9B27AF6D7165530550BFFCCA0B9F9F4F6F48DBE6863CB533FF32A5A3A5B
45E4D77DEDA2C3D32301ADBCFAAA055A4A032CA6EE62D04B060453F94317D02D
74E2C5E09BDDDF3C1D6F6884A5D19AE93D67F52670BB3F47680B76A496FE37B3
4D462E79BDFB28B4401DD4CF50A92E6EEA7D38726F2A1891340BF1DA9F49EDA5
13D1CEF48B82A7C1BB82D52922DBF4C40C70EABC75384D3ADABDD441EA5EB5A1
FB8672C93391EA1B94B9F6A175C23BA379CA78EF180A8735FE346921EA3A8BE3
B681B60C3DC06E6F6EE438B70F364B68B8A1C5C467134F77E3A886527318BF3C
52E6A856A4DCCE229797E00370564A13714635D584AC2B67D8ADCF36807A9DB4
2F37725E919EB8B8B37BC83FEDE5F3BE6A296B83949892103BDE83A7C9A11EF4
BCC470825801201C132F1811D97BC96C36B7DFF3BD741E3FF0F73EA60E753349
5A955209117909433B22029ECC7E145615C080B2C2E07F57E8BD5D23814746BF
0ADC030290B016C537E91A165CA6D3538F3D745C9514B8EA32C2F322737FBDE1
BE19CF8161ACCBACF68BB3D32003B14DA6365E63DEAAB5FE3805C22047057F78
85CFC38A25DA78172E6A805A230765818830A20C3EE5CBFC09D6D7B8743AF445
683C6D487B9FC36E69B32230D2A510495CC45A312852266543760E2EC8EC027B
A5A003809B696B70BF8F272D4699DF087027EC2EC8DF034C58D9A13359952E64
82C75AEC00751BAA0083EC54091A7E46E3F2ADACDB66D339BDBAA77D5512FF96
31FE82F03BF91C8F2B06D00B1CB5158AC5667F8941D3436CA10A2C30C030EFC5
2777E56DD79242271DDD88B8C9400FCC195C3ECDBEBE066E9B37D70EB627552A
13A59CA8F577CEEC7D5A1FF6B1E2D48E81F56E044B37BC6D86BF99DBC5AEDC55
73FFC0AA12C132A972A4ED7D9F701C4C942C489220CE54194253932A4CDEEA11
BD6233ED5B2611D87CA5CACE2753F1F19A3D6A668149B983FEDD407E9C70AC1B
775414D4E010E77F7F9EF46D8854E8D69035A983BFB76751DD48048508B859C1
B096E9A4BF2BF5F5528EE862B92E718274E550C9B3876415767A0A437E1761F6
3D8C1831C47C6C2D5A59A52E5DCFC3AF86ED7E8EAA2D845B234EB51EB6B64070
47F1867A60C8A7C77821C282B9C53C4721E3E2A9C165D39C743F96D80E7F2FE9
2B58B7FF1651F1D1D1990FF38060DF33D775B4EF5EB096004DB15DF1F48B0841
8A7F2B6283676C5E79ACBD3BF3D45BC30CB21AC527D8F2CCA7789BBFCF5EF39C
AE7FFD61CBD06BB76D6CEABDE57956350C209387C8F1D6BF9DA90B9B3674C94F
232CE7C5CCAF46038CE53FD1B5AC6264A083857B973E7F1A032A029C0088253E
B817A0BC3BCB9EBB339F3864D8CF6D02930135957C488371FA7934399BFE89DF
65557064F9271E10B4C4847758EE99BF58700FFCD6E0700AC8A5B0BF381E546D
AE8BBA567328CB240D4945E9233124AA4A6FB2A166D0153791212AAA2856FB99
8776CA3C99C5439A0662335A67A464B81E338BABDDDA757C7D1C535AF25DBB3A
83BB8ECB412F4006FA658E920D9B673E2FC566A5E8035D67EF9C283FDF43EAC9
4FD948FD32A290ED1BE3D706AAEE5D2D9167FB1C89CC4CAB7EB556531F26A9B6
8F299D6E490B6BB99126B2926F2F189265752DED3AE76273941B24528F1B86EB
D6C45A154DB799A9C8E2E05BCDDB6DFE0F875B563D66812DE87517D5F5A44819
24BFE2D053A0D206D1188F8298D0B0E0287BEF81F352B5B8E1872E4B03A3A438
DADA688C2A2050F1DB05FB4E305A2D85A3A9F92E79079884AB7E59ED22D14DDD
2920B94C71DB5F374B076CAACAF6E754FC89BE0003EA40B7D353B524D01C80B4
357BC7E33629872D74C9ADC658325B830E2F7D080CA96008ECD9986AD5D94E4B
7E043FD413E5F5DE04FB0F82C3119172C11ACA3493A727DB6CC6FBBB7CF1F25C
B05DDAEDC03E33E1553BE9D86BE442DDDD81E42423C97EF56ED679EE3076E34F
B270197D5A9BCD6D3DF31199EE853A684467C7A3DA4BC2D1067ECAE8058E1021
F58077F3B25056F97A92990CE9877485DED9FA5E757A4BD710750AE5E3B09514
83D8B2209695FE300F1D22FDBC364503F4F6464249A722B8E6B6432DDA808DAE
6CBA55481EB4D7FC2DAD6F918EEF0470879F2F2985F0BACE9E6237EB1C7D4E61
02581064FD8AF5E2E5D318672729F6451C8CBBF16CF19505EC2F70747C522538
665CBDD973A14C4B1AA8E14D170410F5EEB1306F74FAC7A6246E021930887E6E
7E15B4C55616E5CFD877C6F4B5C9B2B1F9A5D2E9FF84B8FAEEE43FC6F497D3D2
7E001D461B54C721985E5405EBEB2B3E66BC4632BC0A24CF65EC8CF8BBC1E093
EBFA8509764472ACD76BB831E87938DE60DB8D9B09E7CD78F9F5D7200518E25A
E6EA2183FD3A0B5FE3EB526F8E9CD016383B8900582E48B48156D4BAF42DC5BB
1EC67FB1AFD2E652BB7F18D8218464EEC4C85507A2C481FF7D42200C840295A2
AAA3641172331C5716B1393747785E53F67E7DDA9DC666672C88AAD5582FC89E
0621E9E9AE54CFDA161B965254B4355184773CD2DC55314BD8AF1CEA63F6D256
CC935741A9D68283AD1679E3F896AB2B3EBDCA4CE1B99AFFB994B92DAC6264D0
63311CF6CD46E43E35EF97CD506845BAFFC3722B0CC9A1A4E4B216DFE1F6DC79
AC958F0D80486B55B7C71AB9B41D3102B61F9FDC74D06658067A8D625B71D8B5
98E7E3E6B5B249374930EF875C67DA7195503F496635A04B004E419317126124
03B57C50E71676A8611B46A329CE10EC7A9BB746BE0D4CA139C7ADE88BF6D1E1
9F88F13CCFE9D85D7AF78060B754FE6BB185A9C70B97DC9A85AE94FD8DDAFA82
C8ABCA210BE1FB309B0DB6AD25BA839A627F26F526DE58FD9E4C456D6E963ED9
07C70B085BDDFC046334CFFDD5EDA548B8C187D0F26606F91150DB7DC5883231
98B318471C22E0E655DAB0DB58F757C7AB1BE37CE6C32C82C2016158434A189A
CE0F0E307E7434A92836556CCD005B5115F4D1FD128A48CE3D05DFE409A9581B
DE19EE473AB0D637E6D8FBE38645945FFB8189B637DBE76FC1504D9735B8B0C6
A6F44AA20A40C2307531BECDD042450095D1469A59AD5A49CCB86BF08A5F29CD
DD1B144AB3052690907A48861723EFD5D677721580A761B58A17B8CE5B72D441
88593BECB7D4EA3B76F4656FC7FBFB5D702371A8983C51D15164BF49C20D1B10
F41E8D145FB208B1E0F42DFCEC5F686CE5EB0825EFEBBD68CCA1AB82334582FC
D949CE463C7584322A57DFEA4C3012B9D38615FDE53FFA9711FFB607370A4550
817EE98D036D2DA17E044889C4A3B6C7B70C6171B825533159F3E2335A2CF789
0BBFF57837BBE25EF63F2517F2C9056A1B6C1C2527DF0D0A66F1D7D592DB8715
6EBC03FE1112079E3FAEE2088B5E4302740F7AFDAF79526449F903CA9E5271B8
4318E26C5A57C07FB3C3A1D3DC976CC1EF8D2F524FDDFCA18E8974024841A6FB
46CF60E8A608E8950E3359900A92CF0D56EC924DE64FE9658A4C0FBBEF0F8463
E26D2282BA01AD8CD0A77F6EC8A97CABD42A3BEB37A26FFD609C5DFDDE6030A2
7DCC221CB3BB725137A172C42C0716730C03046C92694FA5882BA9FF735EFF42
63031C88BD9F4603520053B8DD287A066861879A3B1253E70E40610A274C5AA1
FB982E7974B7F6757CD1FCCDD011BAB250AA60FF0CD52FA52D2EEEE685A28A11
5306B6109BFC822D1F1711C06469C6F617A51BD7A709F813C5AB4ADA09FF2F94
A4A9FEF8DAA80BFC80B4A675786E98F529F50EEA527F0B1F3254CE6C0B1C43C1
11B8F09D12320A40E79E0FB7C037E1F0600B3B227C84BD49ED9B2B8337524793
CE885801DE9A9804FCCE2BB423702AF207133A58D9013CB91611E42834553EA6
7AA27F5658BD07B26C0540B92DD02508B43C6F09066C8D8FDD5CA8274277E8A3
96B5561AC8E80B768293390E44AFA54144A88158CF23F51486D9AB634E8C7B80
EA8221BC53316FD5C232AE3C4BAB482C16F36D1866A89278AB665693D4EBE8F9
8FA219996EF62F4A364B92F527288CDF80DF0F5C7925B61C2F95B1F65E4F7C4F
8892FFD79E1FAA6236A4E4CC606CE16FEF59F24ABB056EC076F3778D58E6DC79
40319D5E09091A96889EA6D412B281AD4BF5E2E0A2D388A00B612254F0A83BCB
25F93DAC2DAA1A8FA95D48EA349600C629A606FADDC2D169821E4C9BFFDCE30F
F14DC9492DBEBA3347CC2362880449FC3EB1DC6E31B293ACCB48F2F1778BC36C
B38E61683433C8BCAD5E8A1FBAC70E4D08BF267422D7EB0001DBB4D511B70F1E
F4532A0C6DA9C8E45CCDB6320D45B130F97B84B7089395DED367865B962D9949
06A2091B4E017C62A118CB69C7B6161033ADC385FA4F7DC5CD5FF68EA930835B
86C2E75A2C64BB32559BCBC1131EB6B5DABC7DCF7308B722EA8E09B157C8435D
BCFB6572F9225F8B578D342C762A8B082EA9190D3EF5389B14CE372B65009C7F
CA7481D69FBA4891B8CFE5C606711ACD734B640D5C4B40990A08B1F745D54B63
180453D655C8BFF063D032DEFC8AF8BA2ACC6FD0FBFFCE0E9C80E5745ACF3800
A357D92BD13DCB7C5967846DD7485506D80684927A42C41839ED7E1C735E2CBE
78CB800B48B2CD57E4C0536B6D2A254FFD7C34D4CF27D23105389B2FAD5ACA70
A25BB5527EE27A08971E20D116C82835FC4D42A0FDCA73FB9865AB46D380E5AB
B13F62B1D8B4DF5FBD3BD4812CFFE663F9D47C205D4D6BF20B6B094526BB17E0
2B90FBD5426A0014FACD37425A3F0C66B6F8D1C50195B4C989AC3C2404917CE6
8896266ECD37DD94FB0344A36B47492ECA837CC95128DCC4F3BC418E3B998921
2224EB664DC95378EB2EE4EAB2C0BD4B84EB6B9F509991DA66BF2B0E74C1A135
B260839C24F497BC9AD2EDCFD30BF91C44BB04717D10D95AB94941EB58FFA401
56CCC3FE54A53F2726BB1757B6F07234F7432692F71F9D2A1221FCAC88C2E0AC
E4C311BCC4CBE43B427BF0980FEF5D1D80554D21C2B16223782F64929DEF2326
81B62F709FACD597F50EF31592F59A26D9BE83C1D178E6F2AC2DA83127E5781F
155DDEE88831C74FFB76B4263ADD31B1A54AB3F709D1ED968A26B08BA22DB081
4C4B79772CC1285B121F26E2C55CE38C8B3A86DFAAA726810A71E63567153E08
B32936B57226D871C48E0BED1C77C14F8DA09CC3A0FE2984A0F284E3ADE24917
8F408A1EBE598BE1FD4F4E730306ABDBF088DD483B4837C51E1366AD4165D331
9C7EC344F71BCAC7E68938EEED81A1601D7B62A4F0FB10469E4BEFDF9B3187D6
61C6F257F35E4F0D5EF8C123A6BD6E4EF28F4722C598D50BCB51CBE5E8BDBCC9
D27E27C2C12F17B80B2226F833CC6630F7EF5598835C7F0946A9609B91315767
23C3F77ADD1824D20A189DC41BF33E0FC71879E2F00CEEA39612E86306CD9FE7
E12E4D21774E6D8BF7C9971B9BAA698D96F784BEB3ABA2876FBDFA1C5F4BE70A
004C02E0A27C3829902CF3DC18A1DDD2174F69866C3E68BB41E3F92EBB23C19D
C1EEBAAEB9852902030A3F680D43CA7DDD5ABD8A59632C52C7AD9B7374F43F0E
70C9B6C6A7A50F5946D9B5A9122C342E5A9E61A838E1F4BBCE92FC030CBB4481
02653F60FCBAEDE6E472A94C043E8B9D2858BD4581EE3BD3E12D106DFEF29C44
8EE9071EA31C75F775C17E516F7F04CBD28DBF037B7C03A695522A7967B09402
4F01A0E28BDDCC5CDA972D7B44097962545A863984F5ECD12CE5CB06882D25E1
B237892A4B77B80497F0620E1B5C90818D6CFF968A7BD4ED07E425A9D380F751
8EE57E6C91B48217CAAD259ED52BE3FB5966F205BED5028486A7F8164DC93AFE
EC7BDEBEF45E37555D6E5FA8D17ADAAA741D883860E6E68267BE61B41B3E994C
81163E1758C638C468D5F574127D546717ABC29441CB4DDA6BC4B721FF7E51CE
414E11BF0A6466951130E54E8736D9086F5B2188772050403BEE287EDDE9B4E2
63D6DA15371001791605AC1355D3B9647B0C9BCA35501E3796ACA40F177FE00C
FAC8C6A03014EA351905254CA8CFE459E058ECAC86EC94C25485961154B3D8B1
A092F8451C88E6EDAC1CEBB60C4965334D7657519F4DF49B1A2E982C4319E6C5
885D8006DC8A90C2CD4033F5BA0753F1ACD7E1F9648889578CB3CDDDB5B7A872
5044B3A40092E7509721E7C10644A418705F0AD67AE24D3B39773FCA9E68B9F9
0B3146A9FB54C5E21F6B8CCA281375F7587CE37616F20BF35FCFAB68BD14E616
ACDF41115D1825D13BEC25F68895D768D13B63EA2B71F11E062D61A78F9E698D
8506DF16CF209362D33DA83BF438E50E1ED3017C523B07EC1871AE6645BCE34B
6E5AFDC897AA98088BDA5174605900798A559211AC0291616E89BC9FDA4C40D3
AD076CEFD25BFD74E29CAEBB11C6D4E67F79D8D4EABFCDE043E892CAAA9F7A56
EDC4BDF4CD83B6CFAD1A60806AC94D1E2C8BAC01D356B3CC7AA8B2459AB48CE9
E6325165172A3439957367E774003CD6437D39D2C537058B06F3515D550BAB10
3FDAD0C937AC752DBAD8DE7B1DE5E3801C97772DF1EC7FD849BC5777D9CA0F0A
1BB724F16423C2A64EB62331D9A6DA65FE59ED26572CC7FAA4EEC21CEC9E2A40
10E08B537D301BB82BD18CB382C8D2DB86CF050D3B9C9AB8D1B528496D579AF1
77123BEC678DBB2B7F252367B3F05FC9BE12399BE34EC027E83001171FFE1744
154643DCA8FE7B577F60F55E28D2D51F7214FCDD0927DFE6A9038596809A2F81
3DADCEE109883C10BBFF9CEC7EB41C846C112B50F44D441917349A35DB8794AC
E0CE2C2F80AFB2017E9A068D7CABCD24243175971E997E81B34B7F91DD88FA9A
CAF0DA6ECA58DABA394F1AB815D68271AC03A1F5BE250D27352534A1472CAA3F
BD94A1809143676F4744586410E32EC60C27D8E3FD2B7C591F7B32331BED6075
DBDCE25376C687179EEC65DDD351277D704A387B631F49E82810BF77BA6AA975
A5F2AF1AD36ADD93909E029919E2225ADDF3100F5A500471C4DCCA9D110CAD0D
29D4CADF2357C5BAA49CBFE1C139A6637AB3C49A63DF1EE2DA85658A33D93E08
443D8BB5044FF6E4A64ADB9CC308C7A609505BE8B644BCE39895DC77C55255B2
E8C1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusSanL-Bold
%!PS-AdobeFont-1.0: NimbusSanL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Sans L Bold) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -155 def
/UnderlineThickness 69 def
end readonly def
/FontName /NimbusSanL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-173 -307 1003 949} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8D62A63193C4AE94C086C1
552833DDD8F116B5DF33205AE709B3AA63DA7BEBB165B67281827B48FB5EDBED
02A1A5C0784FC57D3487DAA59520BADA1BE3FB9795669924321CE4F466CD8E3F
7E8EC2494AEE80E2DD7A48A6861AF5B9F0CCAA4A2FE2B03498EACACD6B9C39C6
A8F2E39E06BBB061CF2EC380A32EFAD0B790974BB5CC3DAF0992471456967362
77DE34813F27ABE99302F86BB4D293A37F84667E7F3DFEE4CFE9D1A676A5728C
AEB5222FF50DA97E74B2CDEBF725FBCA7015A188891C8A376B9DD8A642C4B184
B1BBF3F376A6D6E31EF1C8354DDF8039CB20FAABCB34D4749B3C8C8D6972CEB1
06B8A5AAE3AE40A91F1F2B1155681A9CC933F87528C99A2B0268B43A3E829E7F
3BD863CB52950773BD9B0731DC4992541D7DE7A055CA65DDD2317F1705C20D1F
93291BCC254CBABA425C032B3B15050D41DA14FFE1B3D684EEA428095A01E931
98D4F849B239AD9D79F4502F0271AFFB0C297F2F347BFB9C137782646F648F77
0076B85F5A929FCDEA2703333F6918B8F125627F8B505C688E30F258DED1AECF
2C86EDCD88C29249A8081731737195FAB7ADBB54743BD66511194DEE2516959B
A20701E2D97342248297425491F6C9471EC9A98E630D734DAC19721F0B324432
C8D7A0B751453F89F7008BA37BC48E0831EE3ECBD8A0A292D63CFC890B28F695
9E29AC3B4DDB78A6883B9272CE34A012A82ADEC0B6B641E3940A438A098CCFBF
C50544B94FACFD9D7AE09AD0632015F81D2F77FC6D80A42EC11D67D8A91C376C
13C8E3444CDFDE4D2A1ED021410F4D6A4E97804AE949BD913094D23108C9D384
56F11025E2D24939114B6BCF579A0315C52F3CA1BCC2860FC1A0B9FB8A37AE2F
C20C0FD44D215FC2AF737FD0339B070D54E664021240071C665DE4170DFA182D
4E385685FB41A2D85888B1149E9A766CB4F309B4E2BAA28CF1F8CC12C2D462F1
A71924DC798B57B6D5D13738CB2582F75CA7F1BAE6B9A8B0E31D2AE2C7723DE7
EF1E262B77314B252928C6699442358D53C590CBF6D0C1B406F3DDB54D85FB94
F4F66C7DC21C22595CDB358A007D8CAB42412D8D6638AA0D62613C595D1E9AA5
448AB0EECCCBC6EDAD098CF976BE53A8E2F5D2A4BA6EDA8B1095B381096178C6
DDBDAC4BEEEA9A039505936488E7E94479E6F02D75E2FCBA18607B510B4ED51D
B6F8520C261ED5549FA6287B240C140D3234EFFE4D089D9B450B8E946967403A
D3AE666EA92F348B20011F78FE6D542317CCB82B906D58ABEC0C1485BB092E90
6E7424CC62AA9E61A47258A0C9B8A990E9AF27AB9182812F516DAF8BF9F0F7D9
86B1D4352D3FBA9AE6B0AE4D83681CE09B1BAABAD5DEF2C0EBBEAAE575B67C26
D06A35A0D394EF1A332D55D86418FD79975C870E6D88A5E7E0269BAB29E63CA9
1A99D4E55FB18F6C6A2C175D46C65DE37427737C529217CDFFB40C1CC5E799B3
728AF8D6A742D6FB17DCAE007F67FA45EF0CCFC2AEA3B4E47F70BA2D5AEE9FFA
E5585511048432F2E80E18174791A6E15E13987EB96A2EAC896063C7418B4BCF
C127A9AB30BC2073A5FBF9F7673E1A4D816B85DADE28C0C67A74F8126AE35689
E82EEBD48F301B04F46631626586FD77921C79F575FD55F8C1899BB3199B31F3
0DDC42416A75061A2EA631B0A322D4E4B9F225EEF68B82816888826930854328
CC6563095F56B93D56DF696400ACD04765BC79375ED42D633CFAF4907DDE965A
3959752BED492B8DC2BB83AD101DF51A51B1902F650D61A0914635854E96036A
5A06BC8FCE74076177D517BF6BA575B98AF83BC7BA75204B9571C4E7C2331C05
67543D7D8C43583DFF737EF0AB7CE7E6D852B647B75A7F9F7E8468E708F9176A
A2BC6B2CE468C84CA3A11BA5B5CCB3F325E51FAF09B5F38C119934FFADECD16F
B3061E4445DD5B88906B59DFE804795EBB850D2C87A69A63A297549D01CCF8A9
2C81D0504D7CF23B6EADCFE52D2A9D0C4C94CB706120B5F5641CDE18C45A24E8
C329CD0EE5FD19B8B0E204CF88D6B87D9DB81659C255392A89742025378CF853
F6A8188534F35B49E1153A25EBEAC76FEC601CF4D10F65DAE3EDBD2325C6E607
C1EE5D38720004E4858B624AD50EF959B465EE94D92CFB878BB725B0E81E119B
3C1DC388C75BDA5904DFB6386ED196F743FF57EE7DCC2FE096C4A16A25CB7A54
3B33ADFBBBEC29E29CF2347AA6E81223995BD023F95E71A2A3C258F7D7BE6DAF
E1F3D2CCFF30C54E6609CBF4A5DC01AD6F3500F327B50EB05B489E8D9049B9D2
6877A39D29FF6AACDD72D4849AB5B7000CE1B55B2F5B035ED70817E8C999AEF8
2993A381C77DAE71C9C8EDA1C1E01FED1A686EAFE3CB12F40FAA3C0CC50C7A25
9AF32F4C81D9B39470D9993CB966E7D491B5803E4E32D24FDE0B7C56732957AC
35E7C9A9B7B8DD2F0B8D82752DF19FF85F3ABBCA8FA90637B2F1EE09B02354FF
0785CF2080B22BA58A66E60561F8E36881E4D5DE87BC69EC96D61BD7D1AC9B89
51553628670D822220DF7090617026A84C36E58D3D29D900E34DF22CFAD7EB23
15F190D4345AE2CCF62BD45A23D3AD37B2CC8E6D1168F052EB8536E07ADF328E
D4E535A986EC62CFF42BF070F142AD945AD74B9DC7E53B0B78B1C186D5A9C518
082D756D394B8D39B50BD09D78B72E622910E696972F2553ED0EEB16F25B6D79
8871D0640D0ACC03CD2BD48F18EC823A5D48784E90371976C5FAE1625D62879E
4B5A7F10378A9F30C739477EB1F5370DD1D26E6DE100B060B7E57DAA706609D0
33D80A82CC481EAD70AADE0E2676CAC46031A8204CE22B0906EDEDFFC684F2CC
E516A901673C3FFB17E4621145D1DDDA77BE41E745F20E64783500D46EA7DC05
D42B1D6A2AC0C7AE3925BB9317209E37FA2725A0A86C028FAB0F20F238C85528
B8B7946ED4B2A7B7B9AA763F56FFFFE98E8B960C5B9422384915F6481B9AC0E1
3B169DD71090499B415AD8AAFD99AC0AA4FCE9C00A5845D1C7E8F51710B4F1A4
DBD8E6BF4935858F00E6A27320CF515B7B8AF90D0682E89F0DEA5FB293F86FD9
F644C0D8C8FB99DBB010E78DD13AF37A8AFB0869D655CC9E8B8BB20FFD9430E3
FFF709683D46BF7288C1771381D3DA8A12D9F442795179AAD932C1B7609BE49D
684E162BE716A84D6131A8394308DD06BC0ACBF3400DB1B1206F189644097A36
2399BD8C3EEA746ACBA5FC9B87A40860605FC048EE22B02E4EC8DEF7DDBA734B
187D6F48F38DC5E7D697ACEDB4305C22E53AF6480AE86AC85AE6D70EB30D8EDA
1D69BBA4C7F6456725DAD91678ABAF962F4BBCFD8C21691C46ECBF38C38E26B0
A4FF1C7B574AD22D9AD62DEB412D8EC172A6E60CC9D92B9E89FE1A6FCAD90C56
843464AD51C07117D7D6D347CC1C09DE58642CB0326229028DC168AE63B11D15
A49B6E46D8EC621225A259A2C4569E58941EC067EC4C03A2F8D4D19690C2AFC6
09817A83B8CD7BA6EEA79B7034C1128484ADB7FA41251F40E3E00F45773DC204
80C8D6BB75756FFD8F5C7EB9224E8FC35C43DE0D5A4F0514FF307F5ED154EE1D
792890D8FA0E198FA27CECC7A2DE2DE9462DF4721A71DD6E4F3E9E694D6D5649
F5E6E4336D2219D23B611A302610AD7CE0DC20FF7AD70ECFB5C62C42B8B0B6EC
4E1DCA47451CC8919DFF187A589F11E89869BE371938BF65DF1F1DA5439DBC80
2B4A9D803BD635C05B896AF6EB49474FE6289109FB4B754EB4CB28BE158E71B9
09954466C7032C6FD3DE6ADE20EBA3FA90A30C4993CA512F527FEC90A0764E90
27D61CE5938B121AE9F845F1C42E9EAC8E5E51949710ED727C5D7E7F360A82B6
99FEA7BFE9B364A389B0435866F54E0E55D9344A4A39AF1799994DEBD48FC3DB
71B5DA1F4C5BEF5A5898473308AD08EC8E03DA2C33280ACE467AD4A2AB571B26
EB4B4AFE09E11A01244745CF5C9DE9CEF6282F29B195ACFB381C8DB1572BE0B2
5CC9A930C899EE6BFA7E310715327AA223DBD798C6556C6E970FF088A386CB77
A060B529FF519061D19D1AFE2ACB4D3F6A4DB719E4FEDBA7F882054BA0E6B528
F4213907ED29A192447C159A816D12852E2B90ECBE12C65CB262B817D7C33783
3DD53B75B05F357A76FDDC3D01D7EFB91C0F6EE88AC486232CA6612E23D24F35
3022546DDE81E6B4F79EC50CD4ABBBACB8CBA56782088B266946B79BADE117A3
CE61C8E630B470CDEC3D8826E86802F571301D867ACC718B35E05681593ED4F7
2131F263EB75B1547B4DD04D25A140AEE1929CE43617B124FF4BE1B4BB80D8E3
719E67B0ACBAB5DDFDBD497EEC7FC185DEC0C5287CBE61E9072516A093E5578A
8739E190ABC992302A8E601D13AA387781337A4EE5A95B9304CB9EBC3A3D3773
22FC994DAAC423A4B40357D5C6F51F1F8ED8819E41741EBD5CFF2A4FA545841C
4379F02ECD0ACEEA511B20D4D5F72565C43F022989D17CA9AE42D8C2D8E0955D
009995333DBC8305E2D7B929A3CCC0066047253D42A7FCB3C1780A0C4E8BD60D
6C5A002691B4826035454EB98F9D7F73D5EADA826DF6E43993D3B05E305FB06C
893035B2C0BC715F298ABD2AC20D3632772BF8651FCE784AD5831E4602A32970
A60C132A8B43EF2DEC5CF2ED61C2F9C77266204AF421F2CF3CA262052DEA0EF5
69A91F21C6772E261FFAF7CBE6791C791A0005560E62BAB252E0098BF7DE48FF
A7EB2877AA136544BF2723FF4B483C9EAB59483993169243AC5981F77B988950
69ACC060A22CD373872A8F72364714F7CF503D8C2933397FB31AB0E0721BF6B1
BFF9AA0C526A8E5FACA8EE85B2315D4106CFABC41D135BA324F4022D08BA44B9
7EBAC1E38092A59E959F574594D4C8C603A42000EF2D6E27FCD3A60D773DEE68
3E120FA4ECCB3438BFB4EC245A48D6B73E260C27D7895C1B89540EF31B9A74AD
59A514F54313F100C4F6C277C2F16B6692E841CEEB349F4598830F16FB075716
06325E15DDE54B05423EFDC21CAA2AA8E7733830CC6630F796F8CE5A3C8B65B4
A77CFF536FB08CC7B372E99E3F2EB61ECA6959C311A3BDBC1983390F37178BB6
3CF2C0A5747A6C6EC87168C57650B2FC16943470DD9D7C48150591B14E138D91
FEC3FD0397C7EDA10C345F5F68747E05DDC8CCFFE441EF3EAA6B75992D4B60F1
CF29DD0ABAE2368B94CD3662B513FC83A36F2D86C86B60C0F9029985F2625EA0
B5B628A08E7A5971998B3D4554AC20A4B455D0662DBA9CDAFB5EED52EBF1AEEE
57D4DE40F63679DE5CC174D9AED7F0A85A6E2ADCCF49B06731EE262D6846272B
AEC3CE31A5C0FD05B2D610049E1CEB83CF8350244EB0457B81ADE60AC72FFE8B
EF59CB75934CECF47EEE4EAB8B76203EA87CC9E129C1A6065F8C834EAACA821A
C9F1545289753FCD50FD46178004BE2F21C36BF9D04A88DA358F5881148E422D
BEDE0AF5CD890470AA5ADFF54C7988E6C56C2062C0AAB9B0BE1F418380801941
90ADCCE50CA4E3413A1A1A35B62F8D27180A72F03BF4C1D6F00CEDD7484EC6A4
12D81FFE71B814A2ECFB64B25E994F52631FB2ADBEB835E67E3B4C2D3E93C971
B19DA3E86F16128BC1DC58A1E5042EA7DE5B1AC104F3BFE202191D4AB77C0052
2256B8484669AE47D6BF1E8A4678508923FB4AF9CE6DBF5949007FB2D0557A88
D362014EDFD3445233A038A39F0F20D821F125DD9B4396F2684BF4963FC18B01
4180857D6485705A16F55D895A66A025AF7FF70168200E8D99B9931168DE5DEC
F910B7CC3367E692FAA534A5F317B391909F3B136F0F64F8BADA464131FEEA31
380AB18053D6894D6680AF8A9A4EFF1C5EBF59EA66354CB1AF4137FA5D299725
DF4AA2785769C94370B4E3C12D5D684673BCEB1C016B7C469D93B8CCF13C4D3F
2E703CD25D9E066031D4383B2202DB203886107AF158F4FFFAEB738D25F173BD
86C842D1C91DF84A0F042DCACBAA9B054E97386886ECE5A8AC55F5D0B33C60B9
F702DA2B6223EC60BFCAA8E29F309AC14FEC4B241DC8D2AC65DA21D043074AE9
801932C81FE35CFCE0AAE0324A4BA2EB1A312F0865843DE50F8AA35143992377
87DA9B2DC9D1AED22C2EAE8A436BF76BDEAACA47D04546EFFD1AC386043D6E17
8810E70370BAF7C1B52A067A884BEC6465A5814897382EE634241D3A427F9B1A
D26ECD535E46C137084A835CDBBE0B2718C044731B6DB8007749D1B605F39741
3DF96878DBECDD79FBCC7A4425EDDAA7F49257148F05FF52FCC382E4873E0065
A9F726733B0736BC25D02CE66AB3D69B90BF97B72A12C91CBBDB13FF3DE31109
B39281A3A4B51B756F93C58A259860E29451D98F0B263012F9F288321EF3842F
2C9362414E03C6C3EE7BFCD2D8C6A8AC5FFB96E6B82EFD33741743178CF16F2D
4E2880EB4A142EA2CCF76E2AB18FCFD76548FD63B8AB41F3EC49852384915273
A4D397105BB491AC49E08AD9DF0272752554A4ECFFE07B8873D2E9C085BBB027
6E7DD887B4A4D21B7A2FF499333565B6755CFECD5A7D6AFBE3357B27903484CE
3F5D8A621A69BCC42ADF231AF58032B8A905FABBEC1B28D204C9F508DE64083A
A7CD0A8F3C0EEA6E6D9A06D0ECFD7DC1D74BDEA77930F422822BB15D1BFC89A8
565E74F4E7D247EAA5BF1BEC53DD019DFCBC3099ABCB56722BEF7F9C9D4E4602
EDEF6492A8AB391237137B5A5F8E0C72577F941648A1EAB4225390F130D83BC8
D134CBD393DEDD4A99CC2F0BD0358E73D500D9A5CF19043C6EC5655BC753054E
1A5ECE20913D3B458713583686ED9E5C94260E09FE875A6D265BE53C340FF2A1
0826D60E299972AA41009D168D5DD2C006D33E39EEE344BAFC62094361A996BD
8C18BE053CEE56108584D0F2F7B0AE05933EAE2CF8F223E470C0C8F6741A5C45
AE186A2F9E899153F7F2F9E5AB5817ECEE3B272FBD24A46D9F5365A783EBD5BC
945C595C9B5AF7158A098CD4C026A95D677617CAEE4CA4B282C8E1B9BBCB9558
497A66CE72491373354376AEF7374AE1D709F87C7667A58DE4AB7B8519C0DF7B
5A381FF8E1C160FADE7BEB1ABEED9E395F1F1DD95ECC8B4432266F91644C95C3
052ED84AB231B88E71B9D3FE88048DAB5228DFE4900074813A6BAA4F7CF2CC57
A84CFBA77156ECFCF0B9E78BC0358E7EB05B2A2A877C99A2BF9C4A75DB0DBFE6
85EA6305AE4903D01C0D17932A73500C7463DD797D3131E64D27E44A0246B8CD
3C9A2750274BF28E51AF4A1763D5CDA42962D5268E351B333351989A17A96D64
C45F6DCE11C90A03AC912EECBE39F726A1BA9FEE50089F30F3C4AD4AF9C1EF1B
8B350977EAD3B9A24FAC75A6E0F08A1B9C2DCFF9FF07EBE8217BE06FE5B911F5
AD7FF78DB3B33A27309384BB1A7A26F87958F958B10401E58A1B97F91D2CBCF2
C7F013C70C389D87B88FF0658726BEDF26F171C5F46454C42ADDEA0A13DF0F6E
329CE3538618374AD7FF4E83A08486E779A1EF7CFE496A9B0D8B24A78E678E5D
03584BBB3F4CFCCD65FA2517348B3B449177A2844E4E4FFF9A396B070C694369
D598915414B19F8F9A2FCF96A2FED65A9E0D792E8C5BEC2F9FBB43132AB57767
D019D452E7CD9233AA5B447B67656D8754F3E1ED5FCE6DDCE388F2F00295FAE7
99C1E4E1A006EBF8C62F432DBA827C9B41AE77342EB3F9C0EDA6DCBC66574D1B
3D25C43E7F0DD106698BCDF8B3ABB8A3FB18B6A6E1CF95A6A8A8C62DA2556394
A4D92E98FE8568E2BB46D4819B160CF2AC36BFF5FC5A09D6ED1AA688CFB935FF
635B80BCC4B4542D460D7158A42FBF8B0C37678DFB7DC9081FFDF90586807AB3
8A8553E4B5F8DC87B932896960D8FD0CFBEF937D58EC082FE134D63FCE5E5A6A
299480075F37256E75C026214FD89E878548430A29188942F043B9215557D9C4
818F6798333E1036BF46A22331207CF1D12258134D3358639D2B50025F62F33F
A29306EA95FB0DE2794C4387BF1952C287E1B6C4B978CDB693F70E8397961599
F33EE397593F4499D6B7B6E0580904A27F71ACD3544B49F7E37E9C181A42B509
26D7C0CFF0DEC2604EF52210F34362743E2864BBF1A695D15D2540CF94A876C9
F80B65E064DAC055D267FD3410321A22EFBDD4DECC2C7E505CC6AC674D25C328
EE16D1527B5003F22BA2CD16591D73C4137A72819977A9C13394689F9A141507
9402E2BD9735E68EA0F445C80EA153550D6663B44F688525187480503021184E
137774FA958C0EB9CDE40AEF302168D923B1A9D5B0F6D66020301DA1D349AD4A
1044C543B3CCE044D7F9455866C7670D6F1F897FF90B864BB173A3096360473A
024ED229B884ED9C759F90805413FC8DFF2FD2DD10EAA2190E974956ECFD98AF
B36FAEA9EDAED8DEA77B533D00EC5E0D97031985CE75469510A2454CA357F02F
3574A25EF59EC7F28B41B30DCCCE34D1F731CEA1FFA934DEBDC5E37B17F78F4D
E4F817514336EF0C8443F9933ACD2938305FB763678ADAE3FA1E9ED450025111
B7C98E662E68673E7FD6A713E905AD2F4BBD8B13E9454D9C29957B246D94B126
17ABAC3722E8D5E407DE57CF36FE8CAD17D489407C3B6DF2286FBCF3E1891FCE
B413D6B6FC84B873CD212A963AA85A32327C4886824767446172DD2E1BAB819F
E4664741C4BD094B8ACB1383BA390FD1FE3E6D83738550EDAFC646E91BCB710B
500C93211D78067924AEB6F51A2F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (paper.dvi)
@start /Fa 172[43 5[69 7[52 69[{}3 74.7198 /CMTI9 rf
/Fb 205[28 28 49[{}2 41.511 /CMR5 rf /Fc 251[58 4[{}1
74.7198 /MSAM10 rf /Fd 213[58 42[{}1 74.7198 /MSBM10
rf /Fe 171[35 27[35 5[42 46[32 3[{}4 49.8132 /CMSY6 rf
/Ff 167[111 86[35 35{}3 74.7198 /CMEX9 rf /Fg 146[51
2[24 22 105[{}3 41.511 /CMMI5 rf /Fh 209[23 46[{
 TeXBase1Encoding ReEncodeFont }1 91.3242 /NimbusRomNo9L-ReguItal
rf /Fi 161[38 32[60 2[21 7[38 38 5[60 1[30 30 40[{}8
74.7198 /CMR9 rf /Fj 194[47 10[30 30 5[47 43[{}4 49.8132
/CMR6 rf /Fk 139[24 29 29 3[38 54 20 33 25 22 7[34 97[{}10
49.8132 /CMMI6 rf /Fl 139[28 36 2[39 1[46 1[23 40 6[40
1[33 41 11[52 5[58 16[60 1[60 21 21 30[44 8[36 4[40 1[49
11[{}19 74.7198 /CMMI9 rf /Fm 149[21 2[38 38 9[51 51
2[55 3[42 1[65 1[54 3[53 58 6[59 8[38 2[43 1[0 3[51 16[77
4[77 6[60 60 1[60 2[38 14[60{}23 74.7198 /CMSY9 rf /Fn
206[25 49[{ TeXBase1Encoding ReEncodeFont }1 49.8132
/NimbusRomNo9L-Regu rf /Fo 139[21 29 29 2[37 2[21 33
1[21 3[33 37 33 1[37 16[46 54 3[50 2[54 26[25 45[{
 TeXBase1Encoding ReEncodeFont }16 74.7198 /NimbusRomNo9L-ReguItal
rf /Fp 172[33 41 8[22 1[48 18[33 2[33 4[17 4[22 39[{
 TeXBase1Encoding ReEncodeFont }8 66.4176 /NimbusRomNo9L-ReguItal
rf /Fq 105[33 28[33 1[48 33 33 18 26 22 33 33 33 33 52
18 33 1[18 33 33 22 29 33 29 33 29 12[41 2[48 37 2[59
2[26 2[48 3[44 1[48 7[33 33 33 33 33 33 33 33 33 33 18
17 22 17 7[33 33[37 2[{ TeXBase1Encoding ReEncodeFont }48
66.4176 /NimbusRomNo9L-Regu rf /Fr 134[37 37 1[37 42
25 29 33 1[42 37 42 62 21 2[21 42 37 25 33 42 33 42 37
12[50 42 54 1[46 58 1[71 50 2[29 2[46 50 54 54 8[25 3[37
37 37 37 37 37 2[19 43[42 2[{ TeXBase1Encoding ReEncodeFont }42
74.7198 /NimbusRomNo9L-Medi rf /Fs 5[37 8[37 92[33 33
24[33 37 37 54 37 37 21 29 25 37 37 37 37 58 21 37 21
21 37 37 25 33 37 33 37 33 3[25 1[25 46 2[71 54 54 46
42 50 1[42 54 54 66 46 54 29 25 54 54 42 46 54 50 50
54 5[21 21 37 37 37 37 37 37 37 37 37 37 21 19 25 19
2[25 25 25 1[62 22[46 10[42 42 25 1[{ TeXBase1Encoding ReEncodeFont }79
74.7198 /NimbusRomNo9L-Regu rf /Ft 134[50 50 72 50 55
33 39 44 1[55 50 55 83 28 55 33 28 55 50 33 44 55 44
55 50 8[72 100 72 72 66 55 72 1[61 78 72 94 66 78 1[39
78 78 61 66 72 72 66 72 12[50 50 50 50 2[25 33 42[55
2[{ TeXBase1Encoding ReEncodeFont }53 99.6264 /NimbusRomNo9L-Medi
rf /Fu 134[42 2[42 46 23 42 28 1[46 46 46 69 18 2[18
46 46 23 46 46 42 1[46 11[60 51 55 3[65 1[69 5[65 51
55 60 60 20[23 28 45[{ TeXBase1Encoding ReEncodeFont }31
83.022 /NimbusSanL-Regu rf /Fv 24[50 109[50 2[50 55 28
50 33 2[55 55 83 22 1[22 22 55 55 28 55 55 50 55 55 9[94
66 2[66 72 1[66 2[83 55 1[50 3[61 4[66 101 17[28 33 45[{
 TeXBase1Encoding ReEncodeFont }34 99.6264 /NimbusSanL-Regu
rf /Fw 134[83 4[50 83 58 2[91 91 133 42 2[42 2[50 83
1[83 1[83 13[100 13[100 3[108 19[50 42[91 2[{
 TeXBase1Encoding ReEncodeFont }18 149.44 /NimbusSanL-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 157 107 a Fw(Economicall)n(y-Ef\002cient)
40 b(Sentiment)h(Stream)g(Anal)n(ysis)254 445 y Fv(Rober)t(to)29
b(Louren\347o)h(Jr)-5 b(.)270 532 y Fu(Computer)23 b(Science)g(Dept.)
272 619 y(Univ)n(ersidade)h(F)n(eder)o(al)f(de)478 707
y(Minas)g(Ger)o(ais)185 794 y Fv(rober)t(tolojr@dcc.ufmg.br)1606
445 y(Adr)q(iano)30 b(V)-8 b(eloso)1488 532 y Fu(Computer)24
b(Science)f(Dept.)1491 619 y(Univ)n(ersidade)g(F)n(eder)o(al)h(de)1696
707 y(Minas)g(Ger)o(ais)1439 794 y Fv(adr)q(iano)o(v@dcc.ufmg.br)2815
445 y(Adr)q(iano)31 b(P)-5 b(ereir)o(a)2707 532 y Fu(Computer)24
b(Science)f(Dept.)2710 619 y(Univ)n(ersidade)g(F)n(eder)o(al)g(de)2915
707 y(Minas)h(Ger)o(ais)2657 794 y Fv(adr)q(ianoc@dcc.ufmg.br)345
943 y(W)l(agner)29 b(Meir)o(a)g(Jr)-5 b(.)270 1030 y
Fu(Computer)23 b(Science)g(Dept.)272 1117 y(Univ)n(ersidade)h(F)n(eder)
o(al)f(de)478 1205 y(Minas)g(Ger)o(ais)287 1292 y Fv(meir)o
(a@dcc.ufmg.br)1594 943 y(Renato)29 b(F)m(erreir)o(a)1488
1030 y Fu(Computer)24 b(Science)f(Dept.)1491 1117 y(Univ)n(ersidade)g
(F)n(eder)o(al)h(de)1696 1205 y(Minas)g(Ger)o(ais)1488
1292 y Fv(renato@dcc.ufmg.br)2605 943 y(Sr)q(iniv)n(asan)30
b(P)l(ar)t(thasar)o(ath)m(y)2658 1030 y Fu(Dept.)f(of)23
b(Computer)h(Science)2856 1117 y(and)g(Engineer)q(ing)2685
1205 y(The)f(Ohio-State)h(Univ)n(ersity)2611 1304 y Fv(sr)q(ini@cse)o
(.ohio-state)o(.edu)p Black -152 1442 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -152 1442 a -152
1442 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -152 1442 a 0 TeXcolorgray -152 1442 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -152 1442
a 83 x Ft(ABSTRA)-5 b(CT)-152 1645 y Fs(T)g(e)o(xt-based)17
b(social)g(media)g(channels,)h(such)f(as)g(T)-6 b(witter)m(,)16
b(produce)i(torrents)-152 1732 y(of)i(opinionated)h(data)f(about)h(the)
e(most)h(di)n(v)o(erse)g(topics)g(and)h(entities.)k(The)-152
1820 y(analysis)g(of)e(such)i(data)f(\(aka.)38 b(sentiment)24
b(analysis\))h(is)e(quickly)i(becom-)-152 1907 y(ing)f(a)f(k)o(e)o(y)i
(feature)e(in)g(recommender)i(systems)f(and)g(search)g(engines.)38
b(A)-152 1994 y(prominent)23 b(approach)h(to)e(sentiment)g(analysis)g
(is)g(based)h(on)f(the)g(applica-)-152 2081 y(tion)30
b(of)f(classi\002cation)g(techniques,)k(that)c(is,)i(content)f(is)f
(classi\002ed)g(ac-)-152 2168 y(cording)19 b(to)e(the)g(attitude)g(of)g
(the)h(writer)l(.)j(A)c(major)g(challenge,)i(ho)n(we)n(v)o(er)m(,)f(is)
-152 2255 y(that)d(T)-6 b(witter)14 b(follo)n(ws)i(the)f(data)h(stream)
f(model,)h(and)g(thus)g(classi\002ers)f(must)-152 2343
y(operate)21 b(with)e(limited)h(resources,)g(including)h(labeled)g
(data)f(and)g(time)g(for)-152 2430 y(b)o(uilding)31 b(classi\002cation)
f(models.)57 b(Also)30 b(challenging)i(is)d(the)i(f)o(act)f(that)-152
2517 y(sentiment)d(distrib)o(ution)f(may)h(change)g(as)g(the)f(stream)g
(e)n(v)o(olv)o(es.)46 b(In)26 b(this)-152 2604 y(paper)18
b(we)g(address)g(these)f(challenges)i(by)f(proposing)h(algorithms)f
(that)f(se-)-152 2691 y(lect)27 b(rele)n(v)n(ant)g(training)g
(instances)h(at)e(each)i(time)e(step,)j(so)e(that)f(training)-152
2778 y(sets)20 b(are)g(k)o(ept)h(small)e(while)h(pro)o(viding)h(to)f
(the)g(classi\002er)f(the)i(capabilities)-152 2866 y(to)h(suit)f
(itself)g(to,)h(and)g(to)g(reco)o(v)o(er)g(itself)e(from,)i(dif)n
(ferent)g(types)g(of)g(senti-)-152 2953 y(ment)e(drifts.)25
b(Simultaneously)20 b(pro)o(viding)h(capabilities)e(to)h(the)g
(classi\002er)m(,)-152 3040 y(ho)n(we)n(v)o(er)m(,)27
b(is)d(a)h(con\003icting-objecti)n(v)o(e)h(problem,)g(and)g(our)f
(proposed)h(al-)-152 3127 y(gorithms)h(emplo)o(y)g(basic)g(notions)g
(of)f(Economics)h(in)f(order)h(to)f(balance)-152 3214
y(both)e(capabilities.)38 b(W)-6 b(e)23 b(performed)h(the)g(analysis)g
(of)f(e)n(v)o(ents)i(that)e(re)n(v)o(er)o(-)-152 3302
y(berated)g(on)f(T)-6 b(witter)m(,)21 b(and)i(the)f(comparison)h
(against)f(the)g(state-of-the-art)-152 3389 y(re)n(v)o(eals)e(impro)o
(v)o(ements)h(both)f(in)f(terms)g(of)h(error)f(reduction)i(\(up)f(to)f
(14\045\))-152 3476 y(and)h(reduction)g(of)f(training)g(resources)h
(\(by)f(orders)g(of)g(magnitude\).)-152 3680 y Ft(Categories)25
b(and)g(Subject)i(Descriptors)-152 3800 y Fs(H.3.1)j([)p
Fr(Inf)n(ormation)f(Storage)h(and)f(Retrie)o(v)o(al)p
Fs(]:)45 b(Content)30 b(Analysis;)-152 3887 y(I.5.2)19
b([)p Fr(P)o(atter)o(n)f(Recognition)p Fs(]:)23 b(Classi\002er)18
b(Design)h(and)h(Ev)n(aluation)-152 4091 y Ft(General)25
b(T)-9 b(erms)-152 4211 y Fs(Algorithms,)19 b(Experimentation,)h
(Measurement,)g(Performance)-152 4415 y Ft(K)n(eyw)o(ords)-152
4536 y Fs(Sentiment)f(Analysis;)g(Economic)h(Ef)n(\002cienc)o(y;)e
(Streams)h(and)g(Drifts)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -152 4873 a Fq(Permission)26 b(to)f(mak)o(e)h(digital)i
(or)d(hard)g(copies)i(of)e(all)h(or)f(part)g(of)g(this)h(w)o(ork)f(for)
-152 4948 y(personal)f(or)f(classroom)g(use)f(is)g(granted)j(without)e
(fee)h(pro)o(vided)g(that)f(copies)h(are)-152 5022 y(not)c(made)f(or)g
(distrib)o(uted)i(for)e(pro\002t)g(or)g(commercial)i(adv)n(antage)h
(and)d(that)h(copies)-152 5097 y(bear)e(this)g(notice)g(and)g(the)f
(full)h(citation)i(on)d(the)h(\002rst)e(page.)22 b(T)-5
b(o)16 b(cop)o(y)i(otherwise,)g(to)-152 5172 y(republish,)g(to)e(post)f
(on)h(serv)o(ers)g(or)g(to)g(redistrib)o(ute)i(to)e(lists,)g(requires)i
(prior)e(speci\002c)-152 5246 y(permission)i(and/or)h(a)e(fee.)-152
5321 y Fp(SIGIR'14,)g Fq(July)g(6\22611,)g(2014,)g(Gold)h(Coast,)f
(Queensland,)i(Australia.)-152 5396 y(Cop)o(yright)h(2014)d(A)m(CM)g
(978-1-4503-2257-7/14/07)22 b(...$15.00.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 2040 1525 a Ft(1.)99 b(INTR)m(ODUCTION)
2115 1633 y Fs(The)25 b(need)g(for)g(real-time)f(te)o(xt)h(analytics)g
(is)f(clear)h(and)g(present)h(gi)n(v)o(en)2040 1720 y(the)21
b(ubiquitous)h(reach)f(of)f(social)h(media)g(sites)f(lik)o(e)h(F)o
(acebook)g(and)h(T)-6 b(wit-)2040 1807 y(ter)l(.)37 b(Speci\002cally)-5
b(,)24 b(recognizing)i(customer)e(sentiment)g(in)g(real-time)f(and)2040
1894 y(enabling)31 b(adv)o(ertising)f(on-the-\003y)h(ha)o(v)o(e)f(the)f
(potential)h(to)g(be)g(a)g(break-)2040 1981 y(through)g(technology)h
([20].)53 b(Early)28 b(e)o(xamples)i(of)e(such)i(technology)g(in)2040
2069 y(use)f(were)f(demonstrated)i(in)e(this)h(year')l(s)f(National)h
(F)o(ootball)f(League')l(s)2040 2156 y(Superbo)n(wl)k(\(a)f(premier)g
(sporting)h(e)n(v)o(ent)f(in)g(the)g(USA\))g(where)g(a)g(well)2040
2243 y(kno)n(wn)i(manuf)o(acturer)g(of)e Fo(Or)m(eo)h
Fs(cookies)h(took)f(adv)n(antage)h(of)f(a)f(third)2040
2330 y(quarter)15 b(black)o(out)i(\(and)e(associated)h(T)-6
b(witter)13 b(sentiment\))i(to)g(embed)h(a)f(con-)2040
2417 y(te)o(xtual)21 b(adv)o(ertisement.)29 b(Another)21
b(e)o(xample)h(at)e(the)h(same)g(e)n(v)o(ent)g(w)o(as)g(the)2040
2505 y(adv)o(ertisement)i(for)g(a)f(Hollyw)o(ood)i(mo)o(vie,)g(where,)f
(based)h(on)f(the)f(initial)2040 2592 y(adv)o(ertisement)j(which)f
(happened)i(before)f(the)f(start)f(of)h(the)g(\002rst)f(quarter)2040
2679 y(\(and)16 b(associated)g(T)-6 b(witter)14 b(sentiment\),)i(the)f
(decision)h(on)g(which)g(of)f(se)n(v)o(eral)2040 2766
y(possible)24 b(adv)o(ertisements)g(to)f(run)g(later)g(on)g(in)g(the)g
(program)h(w)o(as)f(appar)o(-)2040 2853 y(ently)i(tak)o(en)h(as)g(a)f
(runtime)g(decision.)43 b(Examples)25 b(lik)o(e)h(these)f(are)g(lik)o
(ely)2040 2940 y(to)j(occur)i(more)e(frequently)h(due)h(to)e
(lightweight)g(and)i(easy)e(communi-)2040 3028 y(cation)e(mechanisms,)h
(such)f(as)f(T)-6 b(witter)24 b(microblogging,)k(which)d(mak)o(es)2040
3115 y(people)d(eager)g(not)f(only)h(to)f(e)o(xchange)i(information,)f
(b)o(ut)f(also)g(to)g(con)m(v)o(e)o(y)2040 3202 y(their)e(opinions)h
(and)g(emotions.)25 b(People)20 b(w)o(atch)f(e)n(v)o(ents)h(together)g
(on)g(tele-)2040 3289 y(vision,)d(while)g(tweeting)f(out)h(about)h
(things)f(happening)h(around)g(them.)23 b(As)2040 3376
y(a)d(result,)f(opinionated)i(content)g(is)e(created)h(almost)g(at)f
(the)h(same)g(time)f(the)2040 3463 y(e)n(v)o(ent)f(is)g(happening)i(in)
d(the)h(real)g(w)o(orld,)g(and)g(becomes)h(a)o(v)n(ailable)f(shortly)
2040 3551 y(after)l(.)52 b(The)28 b(analysis)i(of)e(such)i(content)f
(\(aka.)53 b(sentiment)28 b(analysis\))h(in)2040 3638
y(order)24 b(to)g(e)o(xploit)h(the)f(aggre)o(gate)g(sentiment)h(of)f
(the)g(online)g(cro)n(wd)h(goes)2040 3725 y(be)o(yond)f(adv)o
(ertising,)g(and)f(is)f(becoming)i(crucial)f(to)f(recommender)i(sys-)
2040 3812 y(tems)19 b(and)g(search)h(engines.)2115 3899
y(There)27 b(is)g(a)g(gro)n(wing)h(trend)g(in)f(performing)h(sentiment)
g(analysis)f(us-)2040 3986 y(ing)f(classi\002cation-related)f
(techniques:)38 b(a)25 b(process)i(that)e(automatically)2040
4074 y(b)o(uilds)e(a)f(classi\002cation)h(model)g(by)h(learning,)f
(from)g(a)g(set)f(of)h(pre)n(viously)2040 4161 y(labeled)29
b(data)f(\(i.e.,)h(the)f(training-set\),)i(the)f(underlying)g
(characteristics)2040 4248 y(that)23 b(distinguish)g(one)h(sentiment)f
(from)g(another)h(\(i.e.,)e(happiness,)j(mad-)2040 4335
y(ness,)d(surprise,)g(suspicion\).)32 b(The)21 b(success)i(of)e(these)h
(classi\002ers)f(rests)g(on)2040 4422 y(their)i(ability)g(to)h(judge)g
(attitude)f(by)h(means)g(of)g(te)o(xtual-patterns)g(present)2040
4509 y(in)18 b(the)g(data,)g(which)g(usually)h(appear)g(in)e(the)h
(form)g(of)g(\(idiomatic\))g(e)o(xpres-)2040 4597 y(sions)k(and)g
(combinations)g(of)g(w)o(ords.)30 b(Sentiment)21 b(analysis)h(o)o(v)o
(er)g(T)-6 b(witter)2040 4684 y(real-time)22 b(messages,)i(ho)n(we)n(v)
o(er)m(,)g(is)e(particularly)g(challenging,)i(because:)2040
4771 y(\(i\))f(T)-6 b(witter)22 b(follo)n(ws)h(the)h(data)f(stream)h
(model)3287 4739 y Fn(1)3317 4771 y Fs(,)g(requiring)g(classi\002ers)e
(to)2040 4858 y(operate)g(with)f(limited)f(computing)j(and)f(training)f
(resources,)i(and)f(\(ii\))e(ei-)2040 4945 y(ther)25
b(sentiment)g(distrib)o(ution)g(or)g(the)g(characteristics)g(related)g
(to)f(certain)p 0 TeXcolorgray 2040 5066 997 4 v 2048
5122 a Fn(1)2077 5153 y Fs(There)18 b(are)h(three)f(main)g(source)h
(streams)f(in)g(T)-6 b(witter)l(.)21 b(The)d(Firehose)g(pro-)2040
5228 y(vides)27 b(all)f(status)g(updates)i(from)e(e)n(v)o(eryone)i(in)e
(real-time.)45 b(Spritzer)26 b(and)2040 5303 y(Gardenhose)19
b(are)f(tw)o(o)f(sub-samples)i(of)f(the)f(Firehose.)23
b(The)17 b(current)h(sam-)2040 5378 y(pling)h(rates)g(are)g(5\045)g
(and)h(15\045,)f(respecti)n(v)o(ely)-5 b(.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -152 -69 a Fs(sentiments)23 b(may)f(change)i(o)o(v)o(er)e
(time)g(in)g(almost)g(unforeseen)h(w)o(ays)g(\(i.e.,)-152
19 y(sentiment)d(drift\).)-152 182 y Ft(Our)25 b(A)n(ppr)n(oach)h(to)f
(Sentiment)i(Str)n(eam)f(Analysis)-152 302 y Fs(A)d(possible)g(strate)o
(gy)g(to)f(cope)h(with)f(the)h(aforementioned)h(challenges)g(is)-152
390 y(to)e(emplo)o(y)h(selecti)n(v)o(e)f(sampling)h(algorithms)f(in)f
(order)i(to)e(focus)i(only)f(on)-152 477 y(the)17 b(most)g(rele)n(v)n
(ant)h(training)f(e)o(xamples/messages)i(at)e(each)g(time)g(step)g(and)
-152 564 y(to)g(creating)g(training)g(sets)f(from)h(which)g
(classi\002ers)f(are)h(b)o(uilt.)k(Such)c(train-)-152
651 y(ing)22 b(sets)e(are)h(k)o(ept)h(as)f(small)g(as)g(possible)g(to)g
(ensure)h(f)o(ast)f(learning)g(times,)-152 738 y(since)k(a)f(ne)n(w)g
(classi\002er)g(must)g(be)g(b)o(uilt)f(at)h(each)h(time)e(step,)j
(after)d(a)h(ne)n(w)-152 825 y(tar)o(get)f(message)h(arri)n(v)o(es.)36
b(Also,)24 b(messages)g(should)g(be)g(selected)f(so)h(that)-152
913 y(the)19 b(resulting)g(training)g(set)f(pro)o(vides)i(suf)n
(\002cient)e(resources)i(to)e(enable)i(the)-152 1000
y(resulting)29 b(classi\002er)f(to)g(be)g(ef)n(fecti)n(v)o(e)h(under)g
(the)f(occurrence)i(of)e(drifts.)-152 1087 y(In)21 b(order)g(to)f(pro)o
(vide)i(suf)n(\002cient)e(training)h(resources)g(while)g(k)o(eeping)h
(sets)-152 1174 y(small,)28 b(our)f(algorithms)g(select)g(training)f
(messages)i(by)f(taking)g(into)g(ac-)-152 1261 y(count)21
b(tw)o(o)f(important)g(properties,)g(that)g(we)g(de\002ne)g(as)g
(adapti)n(v)o(eness)h(and)-152 1349 y(memorability)-5
b(.)63 b(Informally)-5 b(,)36 b(adapti)n(v)o(eness)d(enables)g(the)f
(classi\002er)g(to)-152 1436 y(adapt)21 b(itself)e(to)g(drifts,)g(and)i
(thus,)f(impro)o(ving)g(adapti)n(v)o(eness)i(in)m(v)o(olv)o(es)e(in-)
-152 1523 y(corporating)i(fresh)f(messages)h(into)f(the)f(current)i
(training)f(set,)f(while)h(dis-)-152 1610 y(carding)k(obsolete)g(ones.)
39 b(Memorability)-5 b(,)26 b(on)f(the)f(other)g(hand,)i(in)m(v)o(olv)o
(es)-152 1697 y(retaining)k(messages)h(belonging)g(to)e(pre-drift)g
(distrib)o(utions,)j(therefore)-152 1784 y(enabling)20
b(the)f(classi\002er)g(to)f(reco)o(v)o(er)i(itself)e(from)h(drifts.)-77
1872 y(W)-6 b(e)14 b(hypothesize)i(that)e(adapti)n(v)o(eness)i(and)f
(memorability)g(are)f(both)h(nec-)-152 1959 y(essary)20
b(to)f(mak)o(e)g(classi\002ers)g(rob)o(ust)g(to)g(drifts.)k(Ho)n(we)n
(v)o(er)m(,)c(gi)n(v)o(en)h(their)e(an-)-152 2046 y(tagonistic)d
(natures,)h(impro)o(ving)f(both)g(properties)g(may)g(lead)g(to)f(a)g
(con\003icting-)-152 2133 y(objecti)n(v)o(e)31 b(problem,)j(in)c(which)
h(the)g(attempt)f(to)g(impro)o(v)o(e)h(memorabil-)-152
2220 y(ity)23 b(further)g(may)g(result)f(in)h(w)o(orsening)h(adapti)n
(v)o(eness.)36 b(Thus,)24 b(we)e(tackle)-152 2307 y(the)h(problem)h(by)
f(proposing)i(selecti)n(v)o(e)e(sampling)h(algorithms)f(based)h(on)-152
2395 y(multi-objecti)n(v)o(e)f(optimization,)g(that)f(is,)h(we)f
(propose)h(to)f(select)g(training)-152 2482 y(messages)i(so)f(that)g
(the)f(resulting)h(classi\002er)g(achie)n(v)o(es)g(a)g(proper)h
(balance)-152 2569 y(between)c(memorability)g(and)g(adapti)n(v)o
(eness.)26 b(Our)19 b(algorithms)g(are)h(based)-152 2656
y(on)c(central)f(concepts)h(in)e(Economics,)j(namely)e
Fo(P)-6 b(ar)m(eto)16 b Fs(and)f Fo(Kaldor)o(-Hic)o(ks)-152
2743 y Fs(ef)n(\002cienc)o(y)i(criteria)e([19,)5 b(22,)g(28].)24
b(The)16 b(P)o(areto)f(Ef)n(\002cienc)o(y)h(criterion)g(infor)o(-)-152
2830 y(mally)21 b(states)f(that)h(\223when)h(some)f(action)g(could)g
(be)g(done)h(to)f(mak)o(e)g(some-)-152 2918 y(one)f(better)e(of)n(f)h
(without)g(hurting)g(an)o(yone)i(else,)d(then)h(it)f(should)i(be)f
(done.)-5 b(\224)-152 3005 y(This)17 b(action)f(is)h(called)f(P)o
(areto)h(impro)o(v)o(ement,)g(and)h(a)e(system)h(is)f(said)h(to)f(be)
-152 3092 y(P)o(areto-Ef)n(\002cient)24 b(if)f(no)i(such)g(impro)o(v)o
(ement)h(is)e(possible.)40 b(The)24 b(Kaldor)o(-)-152
3179 y(Hicks)f(criterion)f(is)g(less)g(stringent)g(and)h(states)f(that)
g(\223when)h(some)g(action)-152 3266 y(could)d(be)g(done)g(to)f(mak)o
(e)h(someone)h(better)e(of)n(f,)g(and)h(this)e(could)i(compen-)-152
3354 y(sate)f(those)h(that)e(are)h(made)h(w)o(orse)f(of)n(f,)g(then)g
(it)f(should)i(be)g(done.)-5 b(\224)-152 3517 y Ft(Contrib)n(utions)26
b(and)g(Findings)-152 3637 y Fs(The)15 b(main)h(contrib)o(ution)g(of)f
(this)g(paper)h(is)e(to)i(e)o(xploit)f(the)g(intuition)g(behind)-152
3725 y(the)j(aforementioned)h(concepts)f(for)g(de)n(vising)g(ne)n(w)g
(algorithms)g(for)f(senti-)-152 3812 y(ment)22 b(stream)f(analysis.)32
b(In)21 b(practice,)h(we)g(claim)f(the)g(follo)n(wing)h(bene\002ts)-152
3899 y(and)e(contrib)o(utions:)p 0 TeXcolorgray -41 4077
a Fm(\017)p 0 TeXcolorgray 38 w Fs(W)-6 b(e)29 b(formulate)h
(simple-to-compute)h(yet)f(ef)n(fecti)n(v)o(e)g(utility)f(mea-)35
4165 y(sures)24 b(that)g(capture)h(the)f(notions)h(of)f(adapti)n(v)o
(eness)h(and)g(memora-)35 4252 y(bility)-5 b(.)23 b(F)o(or)c(instance,)
g(the)h(similarity)e(between)i(messages)g(that)f(are)35
4339 y(candidate)25 b(to)e(compose)i(the)f(current)f(training)h(set)f
(and)h(the)g(tar)o(get)35 4426 y(message,)c(as)f(well)g(as)g(the)g
(freshness)h(of)f(the)h(candidate)g(messages,)35 4513
y(are)g(measures)g(that)f(tend)h(to)g(pri)n(vile)o(ge)g(adapti)n(v)o
(eness.)26 b(In)20 b(contrast,)35 4600 y(candidate)29
b(messages)f(are)g(also)f(randomly)i(shuf)n(\003ed,)h(thus)e(pri)n(vi-)
35 4688 y(le)o(ging)17 b(memorability)-5 b(.)22 b(These)16
b(utility)g(measures)h(result)e(in)h(a)g(utility)35 4775
y(space,)22 b(and)g(the)g(e)o(xtent)f(to)h(which)f(each)h(candidate)h
(message)f(con-)35 4862 y(trib)o(utes)d(to)g(adapti)n(v)o(eness)i(and)f
(memorability)g(depends)h(on)e(where)35 4949 y(it)f(is)h(placed)h(in)e
(this)h(space.)p 0 TeXcolorgray -41 5116 a Fm(\017)p
0 TeXcolorgray 38 w Fs(W)-6 b(e)30 b(e)o(xploit)g(the)h(concept)g(of)f
(P)o(areto)g(Ef)n(\002cienc)o(y)g(by)h(separating)35
5203 y(messages)24 b(\(vie)n(wed)f(as)f(points)h(in)f(the)h(utility)f
(space\))h(that)f(are)g(not)35 5290 y(dominated)h(by)f(an)o(y)f(other)h
(message.)31 b(These)22 b(messages)g(compose)35 5378
y(the)j(P)o(areto)g(frontier)f([28],)j(and)e(messages)h(lying)f(in)g
(this)g(frontier)p 0 TeXcolorgray 0 TeXcolorgray 2227
-69 a(correspond)18 b(to)f(cases)g(for)g(which)g(no)g(P)o(areto)g
(impro)o(v)o(ement)h(is)e(pos-)2227 19 y(sible.)24 b(These)19
b(messages)h(pri)n(vile)o(ge)f(either)g(adapti)n(v)o(eness)i(or)e(mem-)
2227 106 y(orability)-5 b(,)26 b(and)f(thus)g(the)o(y)g(are)f(selected)
h(to)f(compose)i(the)f(current)2227 193 y(training)19
b(set)g(from)g(which)g(the)g(classi\002er)f(is)h(b)o(uilt.)p
0 TeXcolorgray 2151 335 a Fm(\017)p 0 TeXcolorgray 38
w Fs(W)-6 b(e)17 b(e)o(xploit)g(the)h(concept)g(of)f(Kaldor)o(-Hicks)h
(Ef)n(\002cienc)o(y)f(by)h(select-)2227 422 y(ing)k(an)g(additional)g
(set)f(of)h(messages)g(that,)g(although)h(not)f(lying)f(in)2227
509 y(the)15 b(P)o(areto)g(frontier)m(,)g(correspond)i(to)e(a)g(positi)
n(v)o(e)g(trade-of)n(f)h(between)2227 597 y(adapti)n(v)o(eness)j(and)g
(memorability)-5 b(.)23 b(These)18 b(messages)g(are)g(selected)2227
684 y(to)i(compose)h(the)g(current)f(training)g(set)g(from)g(which)h
(the)f(classi\002er)2227 771 y(is)e(b)o(uilt.)p 0 TeXcolorgray
2151 913 a Fm(\017)p 0 TeXcolorgray 38 w Fs(Our)28 b(algorithms)h(may)g
(operate)g(either)f(on)h(an)f(instance-basis)h(or)2227
1000 y(in)19 b(batch-mode,)h(by)g(emplo)o(ying)g(classi\002cation)f
(models)h(based)g(on)2227 1088 y(sentiment)15 b(rules)f(that)g(are)h(k)
o(ept)g(incrementally)g(as)f(the)h(stream)f(e)n(v)o(olv)o(es)2227
1175 y(and)19 b(training)h(sets)e(are)h(modi\002ed.)2115
1327 y(T)-6 b(o)27 b(e)n(v)n(aluate)i(the)e(ef)n(fecti)n(v)o(eness)i
(of)e(our)h(algorithms,)i(we)d(performed)2040 1414 y(e)o(xperiments)15
b(using)h(T)-6 b(witter)13 b(data)h(collected)h(from)g(three)f
(important)h(e)n(v)o(ents)2040 1501 y(in)25 b(2010,)i(spanning)f(dif)n
(ferent)f(sentiments)h(e)o(xpressed)g(in)e(dif)n(ferent)h(lan-)2040
1588 y(guages.)e(Results)14 b(sho)n(w)h(that)g(our)f(algorithms)h(mak)o
(e)g(classi\002ers)f(e)o(xtremely)2040 1675 y(ef)n(fecti)n(v)o(e,)22
b(with)g(gains)g(in)f(prediction)i(performance)g(that)e(are)h(up)g(to)g
(14\045)2040 1763 y(when)e(compared)h(against)e(the)g
(state-of-the-art.)24 b(Further)m(,)19 b(the)g(amount)h(of)2040
1850 y(training)15 b(resources)h(needed)g(is)e(decreased)i(by)g(tw)o(o)
f(orders)g(of)g(magnitude.)2040 2044 y Ft(2.)99 b(RELA)-9
b(TED)26 b(W)o(ORK)2115 2152 y Fs(In)g(the)h(data)g(stream)g(model,)h
(data)f(arri)n(v)o(es)g(at)f(high)h(speed)h(and)f(algo-)2040
2239 y(rithms)20 b(must)h(w)o(ork)g(in)g(real)f(time)g(and)i(with)e
(limited)g(resources.)29 b(Further)m(,)2040 2327 y(in)i(some)h
(domains,)j(algorithms)c(must)h(deal)f(either)g(with)g(b)o(urst)g
(detec-)2040 2414 y(tion)25 b([42])g(and)h(concept)g(drift)e(\(i.e.,)i
(data)f(which)g(nature)h(or)f(distrib)o(ution)2040 2501
y(change)19 b(o)o(v)o(er)e(time\).)22 b(\016liobait)2856
2500 y(\001)2852 2501 y(e)17 b([35])g(cate)o(gorizes)h(such)g(drifts)e
(as)h(sudden,)2040 2588 y(gradual,)24 b(incremental)g(and)f(recurring.)
35 b(When)23 b(data)g(distrib)o(ution)f(or)h(na-)2040
2675 y(ture)g(change)i(o)o(v)o(er)f(time,)f(its)g(rele)n(v)n(ance)h
(must)g(be)f(recalculated)h(to)g(a)o(v)o(oid)2040 2762
y(harming)d(the)f(model.)27 b(This)19 b(kind)i(of)f(data)g(stream)g(is)
f(kno)n(wn)j(as)d(e)n(v)o(olving)2040 2850 y(data)g(streams.)2115
2937 y(Man)o(y)27 b(techniques)h(ha)o(v)o(e)f(been)g(proposed)h(to)e
(allo)n(w)h(accurate)g(classi-)2040 3024 y(\002cation)j(in)g(e)n(v)o
(olving)i(data)e(streams.)57 b(N\372\361ez)31 b(et)f(al.)g([27])h
(proposed)g(a)2040 3111 y(method)23 b(for)e(k)o(eeping)j(a)d(v)n
(ariable)h(training)g(windo)n(w)h(by)f(adjusting)g(inter)o(-)2040
3198 y(nal)27 b(structures)g(of)f(decision)i(trees.)46
b(An)27 b(ensemble)g(of)g(Hoef)n(fding)h(trees)2040 3285
y(ha)o(v)o(e)f(been)h(proposed)h(in)e([5],)i(each)f(tree)f(is)f
(limited)h(to)g(a)g(small)g(subset)2040 3373 y(of)g(attrib)o(utes.)45
b(Gama)27 b(et)g(al.)f([17])h(proposed)h(a)f(mechanism)g(to)g(discard)
2040 3460 y(old)d(information)h(based)g(on)f(sliding)h(windo)n(ws.)39
b(Bifet)23 b(et)h(al.)f([6,)13 b(7])24 b(pro-)2040 3547
y(posed)d(an)g(adapti)n(v)o(e)g(sliding)g(windo)n(w)g(algorithm,)g
(called)f(AD)n(WIN,)f(suit-)2040 3634 y(able)25 b(for)f(data)g(streams)
g(with)g(sudden)i(drifts.)38 b(The)24 b(approach)i(presented)2040
3721 y(in)17 b([24])g(suggests)h(that)e(a)h(time-based)h(for)o(getting)
f(function,)g(which)g(mak)o(es)2040 3808 y(more)27 b(recent)h(observ)n
(ations)g(more)f(signi\002cant,)i(pro)o(vides)f(adapti)n(v)o(eness)2040
3896 y(to)19 b(the)h(classi\002er)l(.)j(Klink)o(enber)o(g)d([23])g
(compares)g(e)o(xample)g(selection,)g(of-)2040 3983 y(ten)h(used)h(in)f
(windo)n(wing)h(approaches)h(with)e(e)o(xample)h(weights.)30
b(Experi-)2040 4070 y(ments)21 b(sho)n(w)g(that)g(both)g(approaches)i
(are)e(ef)n(fecti)n(v)o(e.)28 b(In)21 b([30])g(the)g(authors)2040
4157 y(proposed)e(an)f(approach)i(based)e(on)g(a)g(training)g
(augmentation)h(procedure,)2040 4244 y(which)28 b(automatically)h
(incorporates)g(rele)n(v)n(ant)f(training)g(messages)h(into)2040
4332 y(the)19 b(training-set.)2115 4419 y(Some)25 b(w)o(orks)g(ha)o(v)o
(e)h(focused)g(on)f(feature)g(similarity)-5 b(,)26 b(such)g(as)f(T)-6
b(orres)2040 4506 y(et)26 b(al.)g([31])h(that)f(studied)h(dif)n(ferent)
f(methods)i(for)e(data)h(stream)f(classi\002-)2040 4593
y(cation)d(and)f(proposed)i(a)e(ne)n(w)h(w)o(ay)f(of)g(k)o(eeping)i
(the)e(representati)n(v)o(e)h(data)2040 4680 y(models)c(based)g(on)g
(similarity)e(measures.)24 b(Feng)18 b(et)g(al.)f([16])i(e)o(xtracted)f
(the)2040 4767 y(concept)h(from)f(each)g(data)g(block)g(using)h
(feature)e(similarity)g(probabilities.)2040 4855 y(Masud)k(et)e(al.)f
([25])i(proposed)h(a)e(no)o(v)o(el)h(technique)h(to)e(o)o(v)o(ercome)i
(the)e(lack)2040 4942 y(of)24 b(labeled)g(e)o(xamples)g(by)g(b)o
(uilding)g(models)g(from)f(unlabeled)i(instances)2040
5029 y(and)e(a)f(small)g(amount)h(of)f(labeled)h(ones.)34
b(Zhu)22 b(et)g(al.)g([41])g(emplo)o(yed)i(ac-)2040 5116
y(ti)n(v)o(e)i(learning)h(to)e(produce)j(a)e(classi\002er)f(ensemble)i
(that)f(selects)g(labeled)2040 5203 y(instances)g(from)g(data)g
(streams)f(to)h(b)o(uild)f(classi\002ers.)42 b(Also,)27
b(in)f([37,)14 b(38])2040 5290 y(acti)n(v)o(e)24 b(learning)h
(approaches)g(are)f(presented)h(for)f(data)g(streams)g(that)f(e)o(x-)
2040 5378 y(plicitly)e(handle)i(concept)g(drifts.)32
b(The)o(y)22 b(are)g(based)g(on)h(uncertainty)f([21],)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -152 -69 a Fs(dynamic)17 b(allocation)f(of)f(labeling)h
(ef)n(forts)g(o)o(v)o(er)g(time,)f(and)h(randomization)-152
19 y(of)i(the)f(search)h(space.)24 b(\016liobait)693
18 y(\001)689 19 y(e)17 b(et)g(al.)g([36])g(proposed)j(a)d(system)h
(that)f(im-)-152 106 y(plements)25 b(acti)n(v)o(e)f(learning)h(strate)o
(gies,)g(e)o(xtending)g(the)g(Massi)n(v)o(e)f(Online)-152
193 y(Analysis)c(\(MO)m(A\))f(frame)n(w)o(ork)h([8].)-77
280 y(W)-6 b(orks)26 b(abo)o(v)o(e)g(cited)g(attempt)g(to)f(f)o(ace)h
(concept)h(drift)e(in)h(data)g(stream)-152 367 y(through)18
b(manipulation)f(of)f(classi\002ers,)f(with)h(mechanisms)h(such)g(as)f
(train-)-152 454 y(ing)j(windo)n(ws)g(and)g(decay)g(functions,)g(acti)n
(v)o(e)f(learning)h(and)g(sampling.)24 b(In)-152 542
y(this)29 b(paper)h(we)f(present)h(ne)n(w)g(algorithms)f(that)g(select)
g(high-utility)h(e)o(x-)-152 629 y(amples)e(in)f(order)g(to)g(pro)o
(vide)h(adapti)n(v)o(eness)h(and)e(memorability)h(to)f(the)-152
716 y(classi\002er)l(.)41 b(In)25 b(order)g(to)g(balance)h(adapti)n(v)o
(eness)g(and)g(memorability)-5 b(,)27 b(we)-152 803 y(formalized)20
b(this)g(issue)f(as)h(a)f(multi-objecti)n(v)o(e)h(problem.)26
b(The)20 b(sample)g(se-)-152 890 y(lection)f(is)g(performed)h(using)f
(economic)i(ef)n(\002cienc)o(y)e(criteria:)j(P)o(areto)d(and)-152
977 y(Kaldor)o(-Hicks.)38 b(W)-6 b(e)23 b(did)h(not)g(\002nd)g(in)g
(the)f(recent)i(literature)e(approaches)-152 1065 y(that)g(emplo)o(y)i
(multi-objecti)n(v)o(e)e(models)h(based)g(on)g(economic)g(ef)n
(\002cienc)o(y)-152 1152 y(criteria)19 b(to)f(deal)i(with)e(issues)h
(in)g(the)g(data)g(stream)g(en)m(vironment.)-152 1364
y Ft(3.)100 b(ALGORITHMS)-77 1472 y Fs(In)25 b(this)g(section)h(we)f
(present)h(no)o(v)o(el)g(selecti)n(v)o(e)g(sampling)g(approaches)-152
1559 y(for)d(learning)g(classi\002ers)f(to)g(distinguish)h(between)h
(dif)n(ferent)e(sentiments)-152 1646 y(e)o(xpressed)16
b(in)e(T)-6 b(witter)14 b(messages.)22 b(W)-6 b(e)14
b(start)g(by)h(discussing)g(models)g(based)-152 1734
y(on)31 b(specialized)g(association)g(rules.)58 b(Then)30
b(we)h(present)g(measures)g(for)-152 1821 y(adapti)n(v)o(eness)h(and)e
(memorability)-5 b(,)33 b(and)d(describe)h(the)f(message)g(utility)-152
1908 y(space.)48 b(Finally)-5 b(,)29 b(we)d(discuss)i(P)o(areto)e(and)i
(Kaldor)o(-Hicks)f(criteria,)h(and)-152 1995 y(algorithms)20
b(that)e(select)h(training)g(messages)h(using)g(these)f(criteria.)-152
2155 y Ft(3.1)99 b(Sentiment)27 b(Str)n(eam)f(Analysis)-77
2263 y Fs(In)16 b(our)h(conte)o(xt,)g(the)g(task)f(of)g(learning)h
(sentiment)g(streams)f(is)g(precisely)-152 2350 y(de\002ned)30
b(as)f(follo)n(ws.)52 b(At)29 b(time)f(step)h Fl(n)p
Fs(,)i(we)e(ha)o(v)o(e)g(as)f(input)i(a)e(training)-152
2438 y(set)j(referred)g(to)f(as)h Fm(D)469 2446 y Fk(n)512
2438 y Fs(,)i(which)e(consists)g(of)g(a)f(set)h(of)f(records)i(of)f
(the)-152 2525 y(form)e Fl(<)40 b(d;)13 b(s)232 2533
y Fk(i)298 2525 y Fl(>)p Fs(,)30 b(where)f Fl(d)g Fs(is)f(a)h(message)g
(\(represented)h(as)f(a)g(list)f(of)-152 2612 y(terms\),)e(and)f
Fl(s)252 2620 y Fk(i)303 2612 y Fs(is)f(the)h(sentiment)g(implicit)f
(in)g Fl(d)p Fs(.)40 b(The)25 b(sentiment)g(v)n(ari-)-152
2699 y(able)19 b Fl(s)g Fs(dra)o(ws)g(its)f(v)n(alues)i(from)f(a)g
(pre-de\002ned,)g(\002x)o(ed)g(and)h(discrete)f(set)g(of)-152
2786 y(possibilities)i(\(e.g.,)f Fl(s)434 2794 y Fj(1)468
2786 y Fs(,)g Fl(s)543 2794 y Fj(2)578 2786 y Fs(,)g
Fl(:)13 b(:)g(:)p Fs(,)21 b Fl(s)782 2795 y Fk(k)820
2786 y Fs(\).)27 b(The)20 b(training)h(set)f(is)g(used)h(to)g(b)o(uild)
-152 2873 y(a)i(classi\002er)e(relating)i(te)o(xtual)f(patterns)h(in)f
(the)h(messages)g(to)f(their)g(corre-)-152 2961 y(sponding)29
b(sentiments.)48 b(A)27 b(sequence)h(of)f(future)h(messages)g(referred)
f(to)-152 3048 y(as)21 b Fm(T)45 b Fi(=)25 b Fm(f)p Fl(t)169
3056 y Fk(n)212 3048 y Fl(;)13 b(t)274 3056 y Fk(n)p
Fj(+1)393 3048 y Fl(;)g(:)g(:)h(:)p Fm(g)p Fs(,)21 b(consists)h(of)f
(messages)h(for)f(which)g(only)h(their)-152 3135 y(terms)16
b(are)g(kno)n(wn,)h(while)e(the)h(corresponding)i(sentiments)e(are)g
(unkno)n(wn.)-152 3222 y(The)j(classi\002er)g(obtained)h(from)f
Fm(D)767 3230 y Fk(n)828 3222 y Fs(is)g(used)g(to)g(score)g(the)g
(sentiments)h(for)-152 3309 y(message)j Fl(t)151 3317
y Fk(n)215 3309 y Fs(in)f Fm(T)d Fs(.)32 b(Messages)23
b(in)f Fm(T)41 b Fs(are)22 b(e)n(v)o(entually)h(incorporated)h(into)
-152 3396 y(the)19 b(ne)o(xt)h(training)f(set.)-77 3484
y(There)27 b(are)h(countless)g(strate)o(gies)f(for)h(de)n(vising)g(a)f
(classi\002er)g(for)g(sen-)-152 3571 y(timent)e(analysis.)43
b(Man)o(y)26 b(of)f(these)h(strate)o(gies,)g(ho)n(we)n(v)o(er)m(,)i
(are)d(not)g(well-)-152 3658 y(suited)c(to)g(deal)g(with)f(data)h
(streams.)28 b(Some)21 b(are)f(speci\002cally)h(de)n(vised)h(for)-152
3745 y(of)n(\003ine)h(classi\002cation)f([12,)12 b(14],)23
b(and)g(this)f(is)g(problematic)h(because)g(pro-)-152
3832 y(ducing)e(classi\002ers)d(on-the-\003y)i(w)o(ould)g(be)g
(unacceptably)h(costly)-5 b(.)25 b(In)19 b(such)-152
3920 y(circumstances,)g(alternate)f(classi\002cation)h(strate)o(gies)e
(may)i(become)g(more)-152 4007 y(con)m(v)o(enient)i([33].)-152
4167 y Ft(3.2)99 b(Sentiment)27 b(Rules)e(and)g(Classi\002ers)-77
4275 y Fs(Ne)o(xt)d(we)g(describe)g(classi\002ers)f(composed)j(of)e
(association)h(rules,)f(and)-152 4362 y(ho)n(w)d(these)f(rules)f(are)h
(used)g(for)g(sentiment-scoring.)24 b(Such)18 b(classi\002ers)f(are)
-152 4449 y(b)o(uilt)e(on-the-\003y)h([32,)t(34],)g(being)h(thus)e
(well-suited)h(for)f(sentiment)h(stream)-152 4536 y(analysis,)j(as)g
(sho)n(wn)h(in)f([30].)-152 4723 y Fr(De\002nition)30
b(1)p Fh(.)42 b Fs(A)31 b(sentiment)h(rule)g(is)f(a)h(specialized)g
(association)h(rule)-152 4810 y Fm(X)h(\000)-60 b(!)24
b Fl(s)74 4818 y Fk(i)100 4810 y Fs(,)19 b(where)i(the)f(antecedent)h
Fm(X)30 b Fs(is)20 b(a)g(set)g(of)g(terms)f(\(i.e.,)g(a)h(termset\),)
-152 4897 y(and)k(the)f(consequent)i Fl(s)488 4905 y
Fk(i)536 4897 y Fs(is)e(the)g(predicted)h(sentiment.)35
b(The)23 b(domain)h(for)-152 4985 y Fm(X)29 b Fs(is)17
b(the)h(v)o(ocab)o(ulary)h(of)f(the)g(training)g(set)g
Fm(D)1054 4993 y Fk(n)1097 4985 y Fs(.)23 b(The)17 b(support)i(of)f
Fm(X)29 b Fs(is)17 b(de-)-152 5072 y(noted)k(as)g Fl(\033)s
Fi(\()p Fm(X)11 b Fi(\))p Fs(,)19 b(and)i(is)f(the)g(number)i(of)e
(messages)i(in)e Fm(D)1408 5080 y Fk(n)1471 5072 y Fs(ha)o(ving)h
Fm(X)31 b Fs(as)-152 5159 y(a)19 b(subset.)24 b(The)c(con\002dence)g
(of)f(rule)g Fm(X)33 b(\000)-60 b(!)21 b Fl(s)1045 5167
y Fk(i)1090 5159 y Fs(is)e(denoted)h(as)f Fl(\022)r Fi(\()p
Fm(X)32 b(\000)-60 b(!)22 b Fl(s)1785 5167 y Fk(i)1811
5159 y Fi(\))-152 5290 y Fs(and)e(is)e(gi)n(v)o(en)i(as)316
5242 y Fl(\033)s Fi(\()p Fm(X)27 b([)17 b Fl(s)579 5250
y Fk(i)606 5242 y Fi(\))p 316 5273 320 4 v 390 5341 a
Fl(\033)s Fi(\()p Fm(X)11 b Fi(\))645 5290 y Fs(.)p 0
TeXcolorgray 0 TeXcolorgray 2040 -69 a Ft(Sentiment)27
b(Scoring)2040 52 y Fs(W)-6 b(e)23 b(denote)i(as)f Fm(R)p
Fi(\()p Fl(t)2593 60 y Fk(n)2635 52 y Fi(\))f Fs(the)h(classi\002er)f
(obtained)i(at)e(time)h(step)g Fl(n)p Fs(,)g(by)g(e)o(x-)2040
139 y(tracting)g(rules)g(from)h Fm(D)2690 147 y Fk(n)2732
139 y Fs(.)39 b(Basically)-5 b(,)25 b(the)f(classi\002er)g(is)f(a)h
(poll)h(of)f(rules,)2040 226 y(and)c(each)f(rule)g Fm(fX)32
b(\000)-60 b(!)22 b Fl(s)2717 234 y Fk(i)2743 226 y Fm(g)f(2)h(R)p
Fi(\()p Fl(t)2998 234 y Fk(n)3040 226 y Fi(\))d Fs(is)f(a)h(v)o(ote)g
(gi)n(v)o(en)h(for)f(sentiment)g Fl(s)3988 234 y Fk(i)4014
226 y Fs(.)2040 313 y(Gi)n(v)o(en)g(message)h Fl(t)2538
321 y Fk(n)2580 313 y Fs(,)f(a)g(rule)g(is)f(a)h(v)n(alid)g(v)o(ote)g
(if)f(it)h(is)f(applicable)i(to)f Fl(t)3861 321 y Fk(n)3903
313 y Fs(.)2040 500 y Fr(De\002nition)h(2)p Fh(.)41 b
Fs(A)21 b(rule)h Fm(fX)36 b(\000)-60 b(!)26 b Fl(s)2959
508 y Fk(i)2985 500 y Fm(g)g(2)g(R)p Fi(\()p Fl(t)3249
508 y Fk(n)3292 500 y Fi(\))21 b Fs(is)f(said)i(to)f(be)h(applicable)
2040 587 y(to)d(message)h Fl(t)2417 595 y Fk(n)2480 587
y Fm(2)i(T)38 b Fs(if)18 b(all)g(terms)h(in)g Fm(X)29
b Fs(are)19 b(in)g Fl(t)3351 595 y Fk(n)3393 587 y Fs(.)2115
762 y(W)-6 b(e)20 b(denote)i(as)f Fm(R)2601 770 y Fk(a)2639
762 y Fi(\()p Fl(t)2697 770 y Fk(n)2739 762 y Fi(\))f
Fs(the)h(set)g(of)f(rules)h(in)g Fm(R)p Fi(\()p Fl(t)3455
770 y Fk(n)3497 762 y Fi(\))g Fs(that)f(are)h(applica-)2040
849 y(ble)k(to)f(message)i Fl(t)2544 857 y Fk(n)2586
849 y Fs(.)40 b(Thus,)26 b(only)g(rules)e(in)h Fm(R)3314
857 y Fk(a)3352 849 y Fi(\()p Fl(t)3410 857 y Fk(n)3452
849 y Fi(\))g Fs(are)f(considered)i(as)2040 936 y(v)n(alid)f(v)o(otes)f
(when)h(scoring)g(sentiments)f(in)g Fl(t)3275 944 y Fk(n)3317
936 y Fs(.)39 b(Further)m(,)25 b(we)f(denote)h(as)2040
1023 y Fm(R)2105 991 y Fk(s)2134 1002 y Fg(i)2105 1036
y Fk(a)2165 1023 y Fi(\()p Fl(t)2223 1031 y Fk(n)2265
1023 y Fi(\))20 b Fs(the)g(subset)h(of)g Fm(R)p Fi(\()p
Fl(t)2839 1031 y Fk(n)2881 1023 y Fi(\))f Fs(containing)i(only)f(rules)
f(predicting)h(sen-)2040 1110 y(timent)h Fl(s)2289 1118
y Fk(i)2315 1110 y Fs(.)34 b(V)-10 b(otes)23 b(in)f Fm(R)2700
1079 y Fk(s)2729 1090 y Fg(i)2700 1123 y Fk(a)2760 1110
y Fi(\()p Fl(t)2818 1118 y Fk(n)2860 1110 y Fi(\))g Fs(ha)o(v)o(e)h
(dif)n(ferent)f(weights,)h(depending)i(on)2040 1197 y(the)c
(con\002dence)i(of)f(the)f(corresponding)j(rules.)30
b(The)21 b(weighted)h(v)o(otes)g(for)2040 1285 y(sentiment)c
Fl(s)2384 1293 y Fk(i)2427 1285 y Fs(are)f(a)o(v)o(eraged,)h(gi)n(ving)
g(the)f(score)h(for)f Fl(s)3467 1293 y Fk(i)3510 1285
y Fs(with)g(re)o(gard)h(to)f Fl(t)3970 1293 y Fk(n)4012
1285 y Fs(:)2610 1517 y Fl(s)p Fi(\()p Fl(t)2704 1525
y Fk(n)2746 1517 y Fl(;)c(s)2816 1525 y Fk(i)2842 1517
y Fi(\))21 b(=)2974 1446 y Ff(X)3108 1469 y Fl(\022)r
Fi(\()p Fm(X)32 b(\000)-60 b(!)21 b Fl(s)3397 1477 y
Fk(i)3423 1469 y Fi(\))p 3108 1500 346 4 v 3132 1568
a Fm(jR)3218 1531 y Fk(s)3247 1542 y Fg(i)3218 1576 y
Fk(a)3278 1568 y Fi(\()p Fl(t)3336 1576 y Fk(n)3378 1568
y Fi(\))p Fm(j)3946 1517 y Fs(\(1\))2115 1678 y(Finally)-5
b(,)22 b(the)g(scores)h(are)f(normalized,)i(thus)e(gi)n(ving)h(the)f
(lik)o(elihood)h(of)2040 1765 y(sentiment)c Fl(s)2385
1773 y Fk(i)2430 1765 y Fs(being)h(the)f(attitude)g(in)g(message)g
Fl(t)3344 1773 y Fk(n)3387 1765 y Fs(:)2660 1997 y Fi(^)-45
b Fl(p)p Fi(\()p Fl(s)2758 2005 y Fk(i)2784 1997 y Fm(j)p
Fl(t)2833 2005 y Fk(n)2875 1997 y Fi(\))22 b(=)3083 1949
y Fl(s)p Fi(\()p Fl(t)3177 1957 y Fk(n)3218 1949 y Fl(;)14
b(s)3289 1957 y Fk(i)3315 1949 y Fi(\))p 3018 1980 392
4 v 3056 2033 a Fk(k)3018 2055 y Ff(X)3021 2212 y Fk(j)s
Fj(=1)3141 2126 y Fl(s)p Fi(\()p Fl(t)3235 2134 y Fk(n)3277
2126 y Fl(;)f(s)3347 2134 y Fk(j)3380 2126 y Fi(\))3946
1997 y Fs(\(2\))2040 2368 y Ft(Rule)25 b(Extraction)2040
2488 y Fs(The)d(simplest)g(approach)i(to)d(rule)h(e)o(xtraction)h(is)f
(the)g(of)n(\003ine)g(one.)33 b(In)22 b(this)2040 2576
y(case,)32 b(rule)d(e)o(xtraction)g(is)g(di)n(vided)h(into)f(tw)o(o)g
(steps:)43 b(support)30 b(counting)2040 2663 y(and)23
b(con\002dence)h(computation.)35 b(Once)23 b(the)f(support)i
Fl(\033)s Fi(\()p Fm(X)11 b Fi(\))21 b Fs(is)h(kno)n(wn,)i(it)2040
2750 y(is)h(straightforw)o(ard)i(to)e(compute)i(the)f(con\002dence)h
Fl(\022)r Fi(\()p Fm(X)44 b(\000)-60 b(!)34 b Fl(s)3747
2758 y Fk(i)3774 2750 y Fi(\))25 b Fs(for)g(the)2040
2837 y(corresponding)20 b(rules)d([40].)23 b(There)18
b(are)f(se)n(v)o(eral)h(smart)f(support-counting)2040
2924 y(strate)o(gies)g([1,)7 b(18,)g(40],)18 b(and)g(man)o(y)g(f)o(ast)
f(implementations)h([3])f(that)g(can)h(be)2040 3011 y(used.)29
b(W)-6 b(e)21 b(emplo)o(y)g(the)g(v)o(ertical)g(counting)h(strate)o(gy)
-5 b(,)21 b(which)g(is)f(based)i(on)2040 3099 y(the)16
b(use)f(of)h(in)m(v)o(erted)f(lists)g([39].)22 b(Speci\002cally)-5
b(,)16 b(an)f(in)m(v)o(erted)h(list)f(associated)2040
3186 y(with)j(termset)g Fm(X)11 b Fs(,)18 b(is)g(denoted)i(as)e
Fm(L)p Fi(\()p Fm(X)11 b Fi(\))p Fs(,)17 b(and)j(contains)f(the)f
(identi\002ers)g(of)2040 3273 y(the)29 b(messages)h(in)e
Fm(D)2616 3281 y Fk(n)2688 3273 y Fs(ha)o(ving)h(termset)g
Fm(X)39 b Fs(as)29 b(a)g(subset.)53 b(An)29 b(in)m(v)o(erted)2040
3360 y(list)19 b Fm(L)p Fi(\()p Fm(X)11 b Fi(\))19 b
Fs(is)g(obtained)i(by)g(performing)g(the)f(intersection)g(of)g(tw)o(o)g
(proper)2040 3447 y(subsets)28 b(of)f(termset)g Fm(X)11
b Fs(.)47 b(The)27 b(support)h(of)f(termset)g Fm(X)37
b Fs(is)27 b(gi)n(v)o(en)h(by)f(the)2040 3534 y(cardinality)19
b(of)g Fm(L)p Fi(\()p Fm(X)11 b Fi(\))p Fs(,)18 b(that)h(is,)f
Fl(\033)s Fi(\()p Fm(X)11 b Fi(\))20 b(=)h Fm(jL)p Fi(\()p
Fm(X)11 b Fi(\))p Fm(j)p Fs(.)2115 3622 y(Usually)-5
b(,)26 b(the)e(support)i(for)e(dif)n(ferent)h(sets)f(of)h(terms)f(in)g
Fm(D)3696 3630 y Fk(n)3764 3622 y Fs(are)g(com-)2040
3709 y(puted)i(in)f(a)g(bottom-up)h(w)o(ay)-5 b(,)26
b(which)g(starts)e(by)i(scanning)g(all)e(messages)2040
3796 y(in)e Fm(D)2179 3804 y Fk(n)2243 3796 y Fs(and)g(computing)h(the)
f(support)g(of)g(each)g(term)f(in)h(isolation.)31 b(In)21
b(the)2040 3883 y(ne)o(xt)e(iteration,)f(pairs)g(of)h(terms)f(are)g
(enumerated,)i(and)f(their)f(support)h(v)n(al-)2040 3970
y(ues)d(are)f(calculated)i(by)f(performing)g(the)g(intersection)g(of)f
(the)h(correspond-)2040 4058 y(ing)22 b(proper)h(subsets.)33
b(The)21 b(search)i(for)f(sets)g(of)f(terms)h(proceeds,)i(and)e(the)
2040 4145 y(enumeration)d(process)g(is)f(repeated)g(until)g(the)g
(support)h(v)n(alues)f(for)g(all)g(sets)2040 4232 y(of)28
b(terms)g(in)g Fm(D)2469 4240 y Fk(n)2539 4232 y Fs(are)g(\002nally)g
(computed.)52 b(Ob)o(viously)-5 b(,)31 b(the)d(number)h(of)2040
4319 y(rules)24 b(increases)g(e)o(xponentially)h(with)e(the)h(size)f
(of)h(the)f(v)o(ocab)o(ulary)i(\(i.e.,)2040 4406 y(the)j(number)i(of)e
(distinct)g(terms)g(in)g Fm(D)3093 4414 y Fk(n)3136 4406
y Fs(\),)i(and)f(computational)g(cost)g(re-)2040 4493
y(strictions)20 b(ha)o(v)o(e)g(to)g(be)g(imposed)h(during)g(rule)f(e)o
(xtraction.)27 b(T)-6 b(ypically)h(,)20 b(the)2040 4581
y(search)h(space)h(for)e(rules)h(is)f(restricted)h(by)g(pruning)h
(rules)f(that)f(do)h(not)g(ap-)2040 4668 y(pear)c(frequently)h(in)f
Fm(D)2643 4676 y Fk(n)2702 4668 y Fs(\(i.e.,)f(the)h(minimum)g(support)
h(approach\).)24 b(While)2040 4755 y(such)30 b(restrictions)g(mak)o(e)g
(rule)g(e)o(xtraction)g(feasible,)i(the)o(y)e(also)g(lead)f(to)2040
4842 y(lossy)21 b(classi\002ers,)g(since)g(some)g(rules)g(are)g(pruned)
h(and)f(therefore)g(are)g(not)2040 4929 y(included)f(into)f
Fm(R)p Fi(\()p Fl(t)2574 4937 y Fk(n)2616 4929 y Fi(\))p
Fs(.)2040 5116 y Fr(Online)i(Rule)g(Extraction)p Fh(.)42
b Fs(An)22 b(alternati)n(v)o(e)h(to)f(of)n(\003ine)g(rule)g(e)o
(xtraction)2040 5203 y(is)j(to)g(e)o(xtract)h(rules)f(on-the-\003y)-5
b(.)43 b(Such)26 b(alternati)n(v)o(e,)h(which)f(we)f(call)g(on-)2040
5290 y(line)h(rule)h(e)o(xtraction,)h(has)f(se)n(v)o(eral)g(adv)n
(antages)h([30].)46 b(F)o(or)26 b(instance,)i(it)2040
5378 y(becomes)22 b(possible)g(to)e(ef)n(\002ciently)h(e)o(xtract)g
(rules)g(from)g Fm(D)3602 5386 y Fk(n)3665 5378 y Fs(without)g(per)o(-)
p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -152 -69 a Fs(forming)16 b(support-based)i(pruning.)23
b(The)15 b(idea)h(behind)g(online)g(rule)g(e)o(xtrac-)-152
19 y(tion)j(is)g(to)f(ensure)i(that)f(only)g(applicable)h(rules)f(are)g
(e)o(xtracted)g(by)g(project-)-152 106 y(ing)c Fm(D)17
114 y Fk(n)75 106 y Fs(on)g(a)g(demand-dri)n(v)o(en)i(basis.)22
b(More)16 b(speci\002cally)-5 b(,)15 b(rule)g(e)o(xtraction)-152
193 y(is)21 b(delayed)i(until)e(a)g(message)h Fl(t)687
201 y Fk(n)756 193 y Fm(2)k(T)40 b Fs(is)21 b(gi)n(v)o(en.)31
b(Then,)22 b(terms)f(in)g Fl(t)1686 201 y Fk(n)1750 193
y Fs(are)-152 280 y(used)c(as)e(a)h(\002lter)e(which)i(con\002gures)h
Fm(D)867 288 y Fk(n)925 280 y Fs(in)e(a)h(w)o(ay)g(that)f(only)i(rules)
e(that)h(are)-152 367 y(applicable)25 b(to)f Fl(t)289
375 y Fk(n)355 367 y Fs(can)g(be)h(e)o(xtracted.)38 b(This)24
b(\002ltering)f(process)i(produces)-152 454 y(a)20 b(projected)g
(training-set,)f(denoted)i(as)e Fm(D)974 423 y Fe(\003)972
468 y Fk(n)1015 454 y Fs(,)g(which)h(contains)g(only)g(terms)-152
542 y(that)f(are)g(present)g(in)g(message)h Fl(t)700
550 y Fk(n)742 542 y Fs(.)-152 728 y Fr(Lemma)g(1)p Fh(.)42
b Fs(All)18 b(rules)h(e)o(xtracted)g(from)g Fm(D)1008
697 y Fe(\003)1006 741 y Fk(n)1067 728 y Fs(are)g(applicable)h(to)f
Fl(t)1608 736 y Fk(n)1650 728 y Fs(.)-152 915 y Fr(Pr)o(oof)p
Fh(.)42 b Fs(Since)23 b(all)f(training)h(messages)h(in)f
Fm(D)1078 883 y Fe(\003)1076 928 y Fk(n)1142 915 y Fs(contain)g(only)h
(terms)f(that)-152 1002 y(are)17 b(present)h(in)f(message)h
Fl(t)562 1010 y Fk(n)604 1002 y Fs(,)f(the)g(e)o(xistence)h(of)f(a)g
(rule)g Fm(X)32 b(\000)-60 b(!)21 b Fl(s)1525 1010 y
Fk(i)1568 1002 y Fs(e)o(xtracted)-152 1089 y(from)e Fm(D)73
1058 y Fe(\003)71 1103 y Fk(n)114 1089 y Fs(,)f(such)i(that)f
Fm(X)32 b Fd(*)21 b Fl(t)632 1097 y Fk(n)674 1089 y Fs(,)e(is)f
(impossible.)24 b Fc(\004)-77 1264 y Fs(Lemma)15 b(1)f(implies)g(that)h
(online)g(rule)f(e)o(xtraction)h(assures)g(that)f Fm(R)p
Fi(\()p Fl(t)1700 1272 y Fk(n)1742 1264 y Fi(\))22 b(=)-152
1351 y Fm(R)-87 1359 y Fk(a)-49 1351 y Fi(\()p Fl(t)9
1359 y Fk(n)51 1351 y Fi(\))p Fs(.)51 b(The)28 b(ne)o(xt)g(theorem)h
(states)f(that)g(search)h(space)g(for)f(rules)g(in-)-152
1438 y(duced)c(by)e Fm(D)206 1406 y Fe(\003)204 1451
y Fk(n)269 1438 y Fs(is)f(much)i(narro)n(wer)g(than)f(the)g(search)h
(space)g(for)f(rules)g(in-)-152 1525 y(duced)f(by)f Fm(D)199
1533 y Fk(n)242 1525 y Fs(.)k(Thus,)c(rules)f(can)h(be)g(ef)n
(\002ciently)f(e)o(xtracted)h(from)f Fm(D)1687 1494 y
Fe(\003)1685 1539 y Fk(n)1728 1525 y Fs(,)g(no)-152 1613
y(matter)g(the)g(minimum-support)h(v)n(alue)g(\(which)f(can)g(be)h
(arbitrary)f(lo)n(w\).)-152 1799 y Fr(Theor)o(em)32 b(1)p
Fh(.)42 b Fs(The)32 b(number)i(of)e(rules)g(e)o(xtracted)h(from)f
Fm(D)1494 1768 y Fe(\003)1492 1812 y Fk(n)1567 1799 y
Fs(increases)-152 1887 y(polynomially)21 b(with)d(the)h(number)h(of)f
(distinct)g(terms)f(in)h Fm(D)1414 1895 y Fk(n)1457 1887
y Fs(.)-152 2073 y Fr(Pr)o(oof)p Fh(.)42 b Fs(Let)17
b Fl(k)i Fs(be)f(the)g(number)h(of)f(distinct)f(terms)h(in)f
Fm(D)1344 2081 y Fk(n)1387 2073 y Fs(.)22 b(Since)c(an)g(arbi-)-152
2160 y(trary)j(message)g Fl(t)311 2168 y Fk(n)378 2160
y Fm(2)k(T)40 b Fs(contains)22 b(at)e(most)h Fl(l)g Fs(terms)g(\(with)f
Fl(l)26 b Fm(\034)f Fl(k)r Fs(\),)20 b(then)-152 2248
y(an)o(y)f(rule)g(applicable)g(to)f Fl(t)537 2256 y Fk(n)597
2248 y Fs(can)h(ha)o(v)o(e)g(at)f(most)g Fl(l)i Fs(terms)e(in)g(its)g
(antecedent.)-152 2335 y(That)i(is,)g(for)h(an)o(y)f(rule)h
Fm(fX)35 b(\000)-60 b(!)24 b Fl(s)730 2343 y Fk(i)756
2335 y Fm(g)p Fs(,)c(such)h(that)f Fm(X)35 b(\022)24
b Fl(t)1324 2343 y Fk(n)1366 2335 y Fs(,)c Fm(jX)11 b(j)24
b(\024)g Fl(l)q Fs(.)j(Con-)-152 2422 y(sequently)-5
b(,)23 b(the)e(number)i(of)e(possible)h(rules)f(that)g(are)h
(applicable)g(to)f Fl(t)1728 2430 y Fk(n)1791 2422 y
Fs(is)-152 2509 y Fl(l)15 b Fi(+)-41 2449 y Ff(\000)-1
2476 y Fk(l)-6 2535 y Fj(2)25 2449 y Ff(\001)73 2509
y Fi(+)e Fl(:)g(:)h(:)f Fi(+)322 2449 y Ff(\000)358 2476
y Fk(l)358 2535 y(l)378 2449 y Ff(\001)434 2509 y Fi(=)21
b Fl(O)r Fi(\(2)643 2477 y Fk(l)668 2509 y Fi(\))g Fm(\034)g
Fl(O)r Fi(\()p Fl(k)949 2477 y Fk(l)974 2509 y Fi(\))p
Fs(.)i(Thus,)18 b(the)g(number)h(of)f(appli-)-152 2596
y(cable)i(rules)f(increases)g(polynomially)h(in)f Fl(k)r
Fs(.)k Fc(\004)-152 2870 y Fr(Extending)h(Classi\002ers)g(Dynamically)p
Fh(.)42 b Fs(Let)24 b Fm(R)33 b Fi(=)f Fm(fR)p Fi(\()p
Fl(t)1495 2878 y Fj(1)1530 2870 y Fi(\))21 b Fm([)g(R)p
Fi(\()p Fl(t)1776 2878 y Fj(2)1811 2870 y Fi(\))-152
2957 y Fm([)13 b Fl(:)g(:)h(:)23 b Fm([)h(R)p Fi(\()p
Fl(t)223 2965 y Fk(n)265 2957 y Fi(\))p Fm(g)p Fs(.)48
b(W)m(ith)27 b(online)h(rule)f(e)o(xtraction,)i Fm(R)f
Fs(is)f(e)o(xtended)h(dy-)-152 3045 y(namically)20 b(as)g(messages)g
Fl(t)573 3053 y Fk(i)621 3045 y Fm(2)j(T)38 b Fs(are)20
b(processed.)26 b(Initially)19 b Fm(R)g Fs(is)g(empty;)-152
3132 y(a)24 b(classi\002er)f Fm(R)259 3140 y Fk(t)283
3151 y Fg(i)337 3132 y Fs(is)g(appended)j(to)d Fm(R)h
Fs(e)n(v)o(ery)g(time)g(a)f(message)i Fl(t)1594 3140
y Fk(i)1643 3132 y Fs(is)e(pro-)-152 3219 y(cessed.)i(Producing)c(a)e
(classi\002er)g Fm(R)p Fi(\()p Fl(t)873 3227 y Fk(i)899
3219 y Fi(\))g Fs(in)m(v)o(olv)o(es)g(e)o(xtracting)h(rules)g(from)-152
3306 y(the)33 b(corresponding)h(training-set.)63 b(This)32
b(operation)i(has)e(a)g(signi\002cant)-152 3393 y(computational)20
b(cost,)f(since)g(it)f(is)g(necessary)i(perform)f(multiple)g(accesses)
-152 3481 y(to)24 b Fm(D)-11 3489 y Fk(i)16 3481 y Fs(.)37
b(Dif)n(ferent)23 b(messages)i(in)e Fm(T)50 b Fi(=)30
b Fm(f)p Fl(t)1002 3489 y Fj(1)1037 3481 y Fl(;)13 b(t)1099
3489 y Fj(2)1133 3481 y Fl(;)g(:)h(:)f(:)g(;)g(t)1332
3489 y Fk(m)1390 3481 y Fm(g)24 b Fs(may)g(demand)-152
3568 y(dif)n(ferent)19 b(classi\002ers)g Fm(fR)539 3576
y Fk(t)563 3586 y Fb(1)600 3568 y Fl(;)13 b Fm(R)699
3576 y Fk(t)723 3586 y Fb(2)759 3568 y Fl(;)g(:)h(:)f(:)g(;)19
b Fm(R)1001 3576 y Fk(t)1025 3584 y Fg(m)1084 3568 y
Fm(g)p Fs(,)g(b)o(ut)f(dif)n(ferent)h(classi\002ers)-152
3655 y(may)h(share)h(some)f(rules)g(\(i.e.,)e Fm(fR)773
3663 y Fk(t)797 3674 y Fg(i)846 3655 y Fm(\\)g(R)980
3663 y Fk(t)1004 3674 y Fg(j)1039 3655 y Fm(g)23 b(6)p
Fi(=)g Fm(;)p Fs(\).)i(In)20 b(this)g(case,)g(mem-)-152
3742 y(orization)28 b(is)f(v)o(ery)h(ef)n(fecti)n(v)o(e)g(in)f(a)o(v)o
(oiding)h(w)o(ork)g(replication,)h(reducing)-152 3829
y(the)21 b(number)h(of)f(data)f(access)i(operations.)29
b(Thus,)21 b(before)h(e)o(xtracting)f(rule)-152 3916
y Fm(X)32 b(\000)-60 b(!)21 b Fl(s)69 3924 y Fk(i)96
3916 y Fs(,)16 b(the)g(classi\002er)f(\002rst)g(checks)i(whether)f
(this)g(rule)g(is)f(already)i(in)f Fm(R)p Fs(.)-152 4004
y(If)i(an)h(entry)g(is)g(found,)g(then)g(the)g(rule)g(in)f
Fm(R)h Fs(is)f(used)h(instead)h(of)e(e)o(xtracting)-152
4091 y(it)h(from)g(the)g(training-set.)24 b(If)19 b(it)f(is)h(not)g
(found,)h(the)f(rule)g(is)g(e)o(xtracted)h(from)-152
4178 y(the)f(training-set)g(and)h(then)f(it)f(is)h(inserted)g(into)g
Fm(R)p Fs(.)-152 4485 y Ft(3.3)99 b(Utility)25 b(Space)h(and)f(Selecti)
o(v)o(e)h(Sampling)-77 4593 y Fs(Our)i(approach)h(to)f(sentiment)h
(stream)f(analysis)g(is)g(based)g(on)h(select-)-152 4680
y(ing)23 b(high-utility)g(messages)h(to)e(compose)i(the)f(training)g
(set)f(at)h(each)g(time)-152 4767 y(step.)k(T)m(raining)21
b(sets)f(must)g(pro)o(vide)h(adapti)n(v)o(eness)h(and)f(memorability)g
(to)-152 4855 y(the)28 b(corresponding)i(classi\002ers.)48
b(Impro)o(ving)28 b(adapti)n(v)o(eness)h(and)g(mem-)-152
4942 y(orability)24 b(simultaneously)-5 b(,)26 b(ho)n(we)n(v)o(er)m(,)g
(is)e(a)g(con\003icting-objecti)n(v)o(e)h(prob-)-152
5029 y(lem.)39 b(Instead,)26 b(our)f(approaches)h(create)e(training)h
(sets)f(that)g(balance)h(be-)-152 5116 y(tween)k(adapti)n(v)o(eness)g
(and)g(memorability)-5 b(.)52 b(Speci\002cally)-5 b(,)29
b(at)f(each)h(time)-152 5203 y(step,)e(candidate)f(messages)g(are)f
(placed)h(into)f(an)g(n-dimensional)h(space,)-152 5290
y(in)20 b(which)f(each)h(dimension)h(corresponds)g(to)e(a)g(utility)g
(measure)h(which)g(is)-152 5378 y(either)f(related)g(to)g(adapti)n(v)o
(eness)h(or)f(memorability)-5 b(.)p 0 TeXcolorgray 0
TeXcolorgray 2040 -69 a Ft(Utility)24 b(Measur)n(es)2040
52 y Fs(At)d(each)h(time)f(step,)g(the)h(classi\002er)e(must)i(score)f
(sentiments)h(that)f(are)g(e)o(x-)2040 139 y(pressed)g(in)e(the)h(tar)o
(get)f(message.)26 b(Some)20 b(of)g(the)f(utility)g(measures)i(we)e
(are)2040 226 y(going)25 b(to)f(discuss)h(ne)o(xt)f(are)g(based)h(on)f
(the)g(distance)h(to)f(the)g(tar)o(get)f(mes-)2040 313
y(sage.)31 b(By)21 b(minimizing)g(such)h(distance)g(we)f(are)g
(essentially)h(maximizing)2040 400 y(adapti)n(v)o(eness,)k(since)e(the)
f(selected)h(messages)h(are)e(similar)g(to)g(the)h(tar)o(get)2040
488 y(message.)51 b(As)27 b(for)h(memorability)-5 b(,)30
b(we)e(are)g(going)g(to)g(discuss)g(a)g(utility)2040
575 y(measure)20 b(based)g(on)f(randomly)h(shuf)n(\003ing)g(candidate)g
(messages:)p 0 TeXcolorgray 2151 775 a Fm(\017)p 0 TeXcolorgray
38 w Fr(Distance)g(in)f(space)h Fm(\000)g Fs(The)g(similarity)f
(between)i(the)f(tar)o(get)f(mes-)2227 862 y(sage)k Fl(t)2410
870 y Fk(n)2475 862 y Fs(and)g(an)g(arbitrary)g(message)g
Fl(t)3281 870 y Fk(j)3336 862 y Fs(is)f(gi)n(v)o(en)i(by)f(the)f
(number)2227 949 y(of)k(rules)h(in)f(the)g(classi\002er)g
Fm(R)3045 957 y Fk(a)3083 949 y Fi(\()p Fl(t)3141 957
y Fk(n)3183 949 y Fi(\))g Fs(that)g(are)h(also)f(applicable)h(to)2227
1036 y Fl(t)2255 1044 y Fk(j)2287 1036 y Fs(.)g(Dif)n(ferently)21
b(from)f(traditional)g(measures)h(such)g(as)g(cosine)g(and)2227
1123 y(Jaccard)g([2],)g(the)g(rule-based)h(similarity)e(considers)h
(not)g(only)h(iso-)2227 1211 y(lated)f(terms,)h(b)o(ut)f(also)h
(combination)h(of)f(terms.)30 b(Thus,)22 b(the)g(utility)2227
1298 y(of)d(message)h Fl(t)2608 1306 y Fk(j)2659 1298
y Fs(is)e(gi)n(v)o(en)i(as:)2674 1602 y Fl(U)2726 1610
y Fk(s)2759 1602 y Fi(\()p Fl(t)2817 1610 y Fk(j)2849
1602 y Fi(\))i(=)2992 1553 y Fm(jR)3078 1561 y Fk(a)3116
1553 y Fi(\()p Fl(t)3174 1561 y Fk(n)3216 1553 y Fi(\))17
b Fm(\\)g(R)3396 1561 y Fk(a)3434 1553 y Fi(\()p Fl(t)3492
1561 y Fk(j)3525 1553 y Fi(\))p Fm(j)p 2992 1585 585
4 v 3107 1652 a(jfR)3231 1660 y Fk(a)3270 1652 y Fi(\()p
Fl(t)3328 1660 y Fk(n)3370 1652 y Fi(\))p Fm(gj)3946
1602 y Fs(\(3\))p 0 TeXcolorgray 2151 1839 a Fm(\017)p
0 TeXcolorgray 38 w Fr(Distance)22 b(in)f(time)h Fm(\000)g
Fs(Let)f Fl(\015)t Fi(\()p Fl(t)3075 1847 y Fk(j)3107
1839 y Fi(\))h Fs(be)h(a)f(function)h(that)f(returns)g(the)2227
1926 y(time)f(in)g(which)h(message)g Fl(t)2966 1934 y
Fk(j)3020 1926 y Fs(arri)n(v)o(ed.)31 b(The)21 b(utility)g(of)g
(message)h Fl(t)4000 1934 y Fk(j)2227 2014 y Fs(is)c(gi)n(v)o(en)i(as:)
2882 2318 y Fl(U)2934 2326 y Fk(t)2962 2318 y Fi(\()p
Fl(t)3020 2326 y Fk(j)3052 2318 y Fi(\))h(=)3199 2269
y Fl(\015)t Fi(\()p Fl(t)3301 2277 y Fk(j)3333 2269 y
Fi(\))p 3194 2300 174 4 v 3194 2368 a Fl(\015)t Fi(\()p
Fl(t)3296 2376 y Fk(n)3338 2368 y Fi(\))3946 2318 y Fs(\(4\))p
0 TeXcolorgray 2151 2551 a Fm(\017)p 0 TeXcolorgray 38
w Fr(Memorability)16 b Fm(\000)g Fs(In)h(order)g(to)f(pro)o(vide)i
(memorability)-5 b(,)17 b(the)g(train-)2227 2638 y(ing)22
b(set)g(must)g(contain)h(messages)g(posted)g(in)g(dif)n(ferent)f(time)g
(peri-)2227 2725 y(ods.)27 b(A)20 b(simple)g(w)o(ay)h(to)f(force)g
(this)g(is)g(to)g(generate)h(a)f(random)h(per)o(-)2227
2812 y(mutation)i(of)f(the)h(candidate)g(messages,)h(that)e(is,)h
(randomly)g(shuf-)2227 2899 y(\003ing)i(the)h(candidate)g(messages)g
([15].)43 b(Let)25 b Fl(\013)p Fi(\()p Fl(t)3542 2907
y Fk(j)3574 2899 y Fi(\))h Fs(be)f(a)h(function)2227
2987 y(that)h(returns)h(the)f(position)h(of)f(message)i
Fl(t)3385 2995 y Fk(j)3444 2987 y Fs(in)e(the)h(shuf)n(\003e.)48
b(The)2227 3074 y(utility)18 b(of)h(message)h Fl(t)2805
3082 y Fk(j)2856 3074 y Fs(is)e(gi)n(v)o(en)i(as:)2881
3378 y Fl(U)2933 3386 y Fk(r)2967 3378 y Fi(\()p Fl(t)3025
3386 y Fk(j)3058 3378 y Fi(\))h(=)3200 3329 y Fl(\013)p
Fi(\()p Fl(t)3307 3337 y Fk(j)3339 3329 y Fi(\))p 3200
3360 170 4 v 3212 3428 a Fm(jD)3292 3436 y Fk(n)3335
3428 y Fm(j)3946 3378 y Fs(\(5\))2115 3610 y(Each)28
b(candidate)h(message)g(is)e(judged)i(based)g(on)g(these)f(three)g
(utility)2040 3697 y(measures.)23 b(The)16 b(need)h(to)f(judge)h(one)f
(situation)g(better)g(than)h(another)g(moti-)2040 3784
y(v)n(ates)h(much)h(of)f(Economics,)g(and)h(ne)o(xt)f(we)f(discuss)i
(concepts)g(from)f(Eco-)2040 3871 y(nomics)g(and)g(ho)n(w)f(the)o(y)h
(can)f(be)h(applied)g(to)f(select)g(messages)h(to)f(compose)2040
3959 y(the)i(training)g(set.)2040 4136 y Ft(3.4)99 b(Economic)26
b(Ef\002ciency)2115 4244 y Fs(When)17 b(the)h(society)g(is)f
(economically)i(ef)n(\002cient,)e(an)o(y)h(changes)g(made)g(to)2040
4332 y(assist)g(one)h(person)g(w)o(ould)g(harm)g(another)l(.)24
b(The)18 b(same)h(intuition)f(could)h(be)2040 4419 y(e)o(xploited)d
(for)f(the)g(sak)o(e)h(of)f(selecting)g(messages)h(to)f(compose)h(the)f
(training)2040 4506 y(set)26 b(at)f(each)i(time)e(step.)45
b(In)26 b(this)f(case,)j(a)e(training)g(set)g(is)f(economically)2040
4593 y(ef)n(\002cient)f(if)f(it)h(is)f(only)i(possible)g(to)e(impro)o
(v)o(e)i(memorability)f(at)g(the)g(cost)2040 4680 y(of)19
b(adapti)n(v)o(eness,)h(and)g(vice-v)o(ersa)f([26,)10
b(29].)2115 4767 y(There)20 b(is)f(an)h(alternati)n(v)o(e,)g(less)g
(stringent)g(notion)h(of)f(ef)n(\002cienc)o(y)-5 b(,)20
b(which)2040 4855 y(is)30 b(based)h(on)g(the)g(principle)g(of)f
(compensation)j([13].)57 b(Under)31 b(ne)n(w)g(ar)o(-)2040
4942 y(rangements)18 b(in)f(the)g(society)-5 b(,)17 b(some)h(may)f(be)g
(better)g(of)n(f)g(while)g(others)g(may)2040 5029 y(be)25
b(w)o(orse)f(of)n(f.)40 b(Compensation)26 b(holds)f(if)e(those)i(made)g
(better)f(of)n(f)g(under)2040 5116 y(the)d(ne)n(w)f(set)h(of)f
(conditions)i(could)f(compensate)h(those)f(made)g(w)o(orse)g(of)n(f.)
2040 5203 y(Ne)o(xt)i(we)h(discuss)g(algorithms)f(that)h(e)o(xploit)f
(these)h(tw)o(o)f(notions)i(of)e(eco-)2040 5290 y(nomic)f(ef)n
(\002cienc)o(y)g(in)f(order)h(to)f(select)g(messages)h(to)g(compose)g
(the)g(train-)2040 5378 y(ing)d(sets.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0.75  setgray   tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /P1 { -5.4 0 0 } def
/P2 { 0 2.7 0 } def /P3 { 0 0 2.7 } def /SphericalCoor false def /xUnit
{ 28.45274  mul } def /yUnit { 28.45274  mul } def P1 saveCoor SphericalCoor
{ ConvertToCartesian } if ConvertTo2D /x0 x2D xUnit def /y0 y2D yUnit
def P2 saveCoor SphericalCoor { ConvertToCartesian } if ConvertTo2D
/x1 x2D xUnit x0 add def /y1 y2D yUnit y0 add def P3 saveCoor SphericalCoor
{ ConvertToCartesian } if ConvertTo2D /x2 x2D xUnit x1 add def /y2
y2D yUnit y1 add def P2 saveCoor SphericalCoor { ConvertToCartesian
} if ConvertTo2D /x3 x2D xUnit neg x2 add def /y3 y2D yUnit neg y2
add def [ x0 y0 x1 y1 x2 y2 x3 y3 x0 y0   /Lineto /lineto load def
1  setlinejoin false  Line  closepath end  gsave 0.8  setgray  1. .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.75  setgray  1. .setopacityalpha  
1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0.75  setgray   tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /P1 { -2.7 -3.5625 0
} def /P2 { 2.7 0 0 } def /P3 { 0 0 2.7 } def /SphericalCoor false
def /xUnit { 28.45274  mul } def /yUnit { 28.45274  mul } def P1 saveCoor
SphericalCoor { ConvertToCartesian } if ConvertTo2D /x0 x2D xUnit def
/y0 y2D yUnit def P2 saveCoor SphericalCoor { ConvertToCartesian }
if ConvertTo2D /x1 x2D xUnit x0 add def /y1 y2D yUnit y0 add def P3
saveCoor SphericalCoor { ConvertToCartesian } if ConvertTo2D /x2 x2D
xUnit x1 add def /y2 y2D yUnit y1 add def P2 saveCoor SphericalCoor
{ ConvertToCartesian } if ConvertTo2D /x3 x2D xUnit neg x2 add def
/y3 y2D yUnit neg y2 add def [ x0 y0 x1 y1 x2 y2 x3 y3 x0 y0   /Lineto
/lineto load def 1  setlinejoin false  Line  closepath end  gsave 0.8
 setgray  1. .setopacityalpha  fill  grestore gsave 0.8 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0.75  setgray   tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /P1 { -2.7 0 -2.1375
} def /P2 { 2.7 0 0 } def /P3 { 0 2.7 0 } def /SphericalCoor false
def /xUnit { 28.45274  mul } def /yUnit { 28.45274  mul } def P1 saveCoor
SphericalCoor { ConvertToCartesian } if ConvertTo2D /x0 x2D xUnit def
/y0 y2D yUnit def P2 saveCoor SphericalCoor { ConvertToCartesian }
if ConvertTo2D /x1 x2D xUnit x0 add def /y1 y2D yUnit y0 add def P3
saveCoor SphericalCoor { ConvertToCartesian } if ConvertTo2D /x2 x2D
xUnit x1 add def /y2 y2D yUnit y1 add def P2 saveCoor SphericalCoor
{ ConvertToCartesian } if ConvertTo2D /x3 x2D xUnit neg x2 add def
/y3 y2D yUnit neg y2 add def [ x0 y0 x1 y1 x2 y2 x3 y3 x0 y0   /Lineto
/lineto load def 1  setlinejoin false  Line  closepath end  gsave 0.8
 setgray  1. .setopacityalpha  fill  grestore gsave 0.8 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -5.4
0 2.7 -2.7 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -5.4
0 0 -2.7 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -5.4
2.7 0 -2.7 2.7 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -2.7
-3.5625 2.7 -2.7 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.
 def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0. 
def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
-3.5625 2.7 0 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0. 
def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def
/zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -2.7
-3.5625 0 -2.7 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
-3.5625 0 0 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -2.7
0 -2.025 -2.7 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -2.7
2.7 -2.025 -2.7 2.7 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.
 def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0. 
def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
0 -2.025 0 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
2.7 -2.025 0 2.7 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
0 0 -2.7 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -2.7
2.7 0 -2.7 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -2.7
0 2.7 -2.7 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
535 1277 a
tx@Dict begin { 17.07181 69.70912 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fm(\017)535 1277 y
tx@Dict begin  PutEnd  end
 535
1277 a 535 1277 a
tx@Dict begin { 45.52455 73.40813 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fm(\017)535 1277
y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 65.44139 68.57121 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fm(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 89.91077 44.10184 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fm(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 51.7842 36.98865 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fm(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 22.76227 46.66248 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fm(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 17.07181 41.25638 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fm(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 31.29819 33.57402 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fm(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 65.44139 11.66573 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fm(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 86.78094 7.11317 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fm(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 80.23694 9.95863 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fm(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 51.7842 11.38092 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fm(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 51.7842 2.84544 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fm(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 48.93875 -2.84544 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fm(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 25.60728 21.05518 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fm(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 22.76227 18.20973 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fm(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -2.7 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 2.7 0 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
0 2.7 0 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 0 0 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 0 0 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
2.7 0 0 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
2.7 0 0 2.7 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
2.7 2.7 2.7 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
2.7 2.7 0 2.7 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
2.7 2.7 0 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 0 2.7 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 0 2.7 2.7 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
2.7 0 2.7 2.7 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
2.7 2.7 2.7 2.7 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -6 1.5 1.875 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535
1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fm(\017)573 1277
y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -4 2 1.875 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535
1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277
a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -4 2 2.875 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end

535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -3.5 2 3.2 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277
a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a
535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -5.5 1 2.2 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fm(\017)573
1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -5 2.9 2.2 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535
1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end

573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -4.5 2.1 1.7 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535
1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277
a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -4.5 1.4 1.9 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end

535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -4.7 0.8 1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277
a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a
535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -5.6 0.8 1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fm(\017)573
1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -5.6 0.8 1.6 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535
1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end

573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -5.6 0.8 0.2 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535
1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277
a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -5.6 1.8 0.2 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end

535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.75 1.5 -2.25 1.0 mul /z ED 1.0 mul /y ED 1 mul /x
ED ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 90.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535
1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 90.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED Beta sin 0 lt {/SignFlag -1}{/SignFlag 1}ifelse def Alpha
sin 0 gt {/AlphaOffset 180 -90 SignFlag mul add} {/AlphaOffset 180
90 SignFlag mul add} ifelse def /Delta Beta SignFlag mul sin Alpha
SignFlag mul AlphaOffset add sin mul Alpha SignFlag mul AlphaOffset
add cos atan neg 90 add def /Gamma Beta SignFlag mul sin Alpha SignFlag
mul AlphaOffset add cos mul neg Alpha SignFlag mul AlphaOffset add
sin atan def 270 Delta sub rotate /Rho 90 Gamma add Delta add def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277
a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.5 0.5 -2.25 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535
1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 90.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 90.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED Beta sin 0 lt {/SignFlag -1}{/SignFlag 1}ifelse def Alpha
sin 0 gt {/AlphaOffset 180 -90 SignFlag mul add} {/AlphaOffset 180
90 SignFlag mul add} ifelse def /Delta Beta SignFlag mul sin Alpha
SignFlag mul AlphaOffset add sin mul Alpha SignFlag mul AlphaOffset
add cos atan neg 90 add def /Gamma Beta SignFlag mul sin Alpha SignFlag
mul AlphaOffset add cos mul neg Alpha SignFlag mul AlphaOffset add
sin atan def 270 Delta sub rotate /Rho 90 Gamma add Delta add def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end

535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.5 1.5 -2 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535
1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 90.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 90.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED Beta sin 0 lt {/SignFlag -1}{/SignFlag 1}ifelse def Alpha
sin 0 gt {/AlphaOffset 180 -90 SignFlag mul add} {/AlphaOffset 180
90 SignFlag mul add} ifelse def /Delta Beta SignFlag mul sin Alpha
SignFlag mul AlphaOffset add sin mul Alpha SignFlag mul AlphaOffset
add cos atan neg 90 add def /Gamma Beta SignFlag mul sin Alpha SignFlag
mul AlphaOffset add cos mul neg Alpha SignFlag mul AlphaOffset add
sin atan def 270 Delta sub rotate /Rho 90 Gamma add Delta add def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277
a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a
535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.5 2.5 -2 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 90.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535
1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 90.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED Beta sin 0 lt {/SignFlag -1}{/SignFlag 1}ifelse def Alpha
sin 0 gt {/AlphaOffset 180 -90 SignFlag mul add} {/AlphaOffset 180
90 SignFlag mul add} ifelse def /Delta Beta SignFlag mul sin Alpha
SignFlag mul AlphaOffset add sin mul Alpha SignFlag mul AlphaOffset
add cos atan neg 90 add def /Gamma Beta SignFlag mul sin Alpha SignFlag
mul AlphaOffset add cos mul neg Alpha SignFlag mul AlphaOffset add
sin atan def 270 Delta sub rotate /Rho 90 Gamma add Delta add def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fm(\017)573 1277
y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277
a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1.5 2.2 -2 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 90.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 90.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED Beta sin 0 lt {/SignFlag -1}{/SignFlag 1}ifelse def Alpha
sin 0 gt {/AlphaOffset 180 -90 SignFlag mul add} {/AlphaOffset 180
90 SignFlag mul add} ifelse def /Delta Beta SignFlag mul sin Alpha
SignFlag mul AlphaOffset add sin mul Alpha SignFlag mul AlphaOffset
add cos atan neg 90 add def /Gamma Beta SignFlag mul sin Alpha SignFlag
mul AlphaOffset add cos mul neg Alpha SignFlag mul AlphaOffset add
sin atan def 270 Delta sub rotate /Rho 90 Gamma add Delta add def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end

535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 2.5 -1.7 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535
1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 90.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 90.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED Beta sin 0 lt {/SignFlag -1}{/SignFlag 1}ifelse def Alpha
sin 0 gt {/AlphaOffset 180 -90 SignFlag mul add} {/AlphaOffset 180
90 SignFlag mul add} ifelse def /Delta Beta SignFlag mul sin Alpha
SignFlag mul AlphaOffset add sin mul Alpha SignFlag mul AlphaOffset
add cos atan neg 90 add def /Gamma Beta SignFlag mul sin Alpha SignFlag
mul AlphaOffset add cos mul neg Alpha SignFlag mul AlphaOffset add
sin atan def 270 Delta sub rotate /Rho 90 Gamma add Delta add def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277
a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a
535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1.1 1.5 -1.7 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 90.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535
1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 90.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED Beta sin 0 lt {/SignFlag -1}{/SignFlag 1}ifelse def Alpha
sin 0 gt {/AlphaOffset 180 -90 SignFlag mul add} {/AlphaOffset 180
90 SignFlag mul add} ifelse def /Delta Beta SignFlag mul sin Alpha
SignFlag mul AlphaOffset add sin mul Alpha SignFlag mul AlphaOffset
add cos atan neg 90 add def /Gamma Beta SignFlag mul sin Alpha SignFlag
mul AlphaOffset add cos mul neg Alpha SignFlag mul AlphaOffset add
sin atan def 270 Delta sub rotate /Rho 90 Gamma add Delta add def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fm(\017)573 1277
y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277
a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1.1 1.1 -1.9 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 90.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 90.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED Beta sin 0 lt {/SignFlag -1}{/SignFlag 1}ifelse def Alpha
sin 0 gt {/AlphaOffset 180 -90 SignFlag mul add} {/AlphaOffset 180
90 SignFlag mul add} ifelse def /Delta Beta SignFlag mul sin Alpha
SignFlag mul AlphaOffset add sin mul Alpha SignFlag mul AlphaOffset
add cos atan neg 90 add def /Gamma Beta SignFlag mul sin Alpha SignFlag
mul AlphaOffset add cos mul neg Alpha SignFlag mul AlphaOffset add
sin atan def 270 Delta sub rotate /Rho 90 Gamma add Delta add def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end

535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1.8 0.4 -2.5 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535
1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 90.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 90.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED Beta sin 0 lt {/SignFlag -1}{/SignFlag 1}ifelse def Alpha
sin 0 gt {/AlphaOffset 180 -90 SignFlag mul add} {/AlphaOffset 180
90 SignFlag mul add} ifelse def /Delta Beta SignFlag mul sin Alpha
SignFlag mul AlphaOffset add sin mul Alpha SignFlag mul AlphaOffset
add cos atan neg 90 add def /Gamma Beta SignFlag mul sin Alpha SignFlag
mul AlphaOffset add cos mul neg Alpha SignFlag mul AlphaOffset add
sin atan def 270 Delta sub rotate /Rho 90 Gamma add Delta add def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277
a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a
535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.325 -3.25 1.875 1.0 mul /z ED 1.0 mul /y ED 1 mul
/x ED ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch
} false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end
 end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535
1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277 a Fm(\017)573 1277
y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277
a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.5 -3.8 1.5 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277 a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end

535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1.5 -3.8 1.5 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535
1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277
a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a
535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -2.5 -4 1.5 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535
1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277 a Fm(\017)573 1277
y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277
a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -2.5 -3.5 1.7 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277 a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end

535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -2.5 -3.8 1.1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535
1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277
a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a
535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.4 -3 1.5 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535
1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277 a Fm(\017)573 1277
y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277
a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -2 -3.8 0.7 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277 a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end

535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -2.3 -3.8 0.7 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535
1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277
a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a
535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1.3 -3.8 0.7 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535
1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277 a Fm(\017)573 1277
y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277
a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.3 -3.8 0.7 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277 a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end

535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.3 -3.2 2.2 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535
1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277
a Fm(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a
535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ -5.4 3.0375 0 -5.4 0 0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta
20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ -5.4 0 3.0375 -5.4 0 0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta
20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -3.2 2.2 0.6 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535
1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fs(Adapti)n(v)o(eness)934
1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 934 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -2.2 2.2 0.6 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535
1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fs(\(Distance)19 b(in)f(time\))1074
1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1074 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -6.4 -1 3.1725 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535
1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fs(\(Distance)h(in)f(space\))1107
1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1107 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -5.4 0 3.1725 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535
1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fs(Adapti)n(v)o(eness)934
1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 934 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ -3.1725 0 -2.1375 0 0 -2.1375  tx@3DPlotDict begin   /RotX
0.  def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1. 
def /yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def
/dzUnit 1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.
 def /Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta
cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /SphericalCoor
false def /xUnit { 28.45274  mul } def /yUnit { 28.45274  mul } def
convertStackTo2D end   /Lineto /lineto load def 1  setlinejoin false
 Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 0 3.1725 -2.1375 0 0 -2.1375  tx@3DPlotDict begin   /RotX
0.  def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1. 
def /yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def
/dzUnit 1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.
 def /Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta
cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /SphericalCoor
false def /xUnit { 28.45274  mul } def /yUnit { 28.45274  mul } def
convertStackTo2D end   /Lineto /lineto load def 1  setlinejoin false
 Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -3.1725 0 -2.025 1.0 mul /z ED 1.0 mul /y ED 1 mul /x
ED ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 90.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 90.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED Beta sin 0 lt {/SignFlag -1}{/SignFlag 1}ifelse def Alpha
sin 0 gt {/AlphaOffset 180 -90 SignFlag mul add} {/AlphaOffset 180
90 SignFlag mul add} ifelse def /Delta Beta SignFlag mul sin Alpha
SignFlag mul AlphaOffset add sin mul Alpha SignFlag mul AlphaOffset
add cos atan neg 90 add def /Gamma Beta SignFlag mul sin Alpha SignFlag
mul AlphaOffset add cos mul neg Alpha SignFlag mul AlphaOffset add
sin atan def 270 Delta sub rotate /Rho 90 Gamma add Delta add def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fs(Memorability)945 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 945 1277 a 535
1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0.4 -0.1 -2.4 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535
1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 90.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 90.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED Beta sin 0 lt {/SignFlag -1}{/SignFlag 1}ifelse def Alpha
sin 0 gt {/AlphaOffset 180 -90 SignFlag mul add} {/AlphaOffset 180
90 SignFlag mul add} ifelse def /Delta Beta SignFlag mul sin Alpha
SignFlag mul AlphaOffset add sin mul Alpha SignFlag mul AlphaOffset
add cos atan neg 90 add def /Gamma Beta SignFlag mul sin Alpha SignFlag
mul AlphaOffset add cos mul neg Alpha SignFlag mul AlphaOffset add
sin atan def 270 Delta sub rotate /Rho 90 Gamma add Delta add def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277
a Fs(Adapti)n(v)o(eness)934 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 934 1277 a 535 1277
a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 1.4 0.1 -2.4 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535
1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 90.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 90.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED Beta sin 0 lt {/SignFlag -1}{/SignFlag 1}ifelse def Alpha
sin 0 gt {/AlphaOffset 180 -90 SignFlag mul add} {/AlphaOffset 180
90 SignFlag mul add} ifelse def /Delta Beta SignFlag mul sin Alpha
SignFlag mul AlphaOffset add sin mul Alpha SignFlag mul AlphaOffset
add cos atan neg 90 add def /Gamma Beta SignFlag mul sin Alpha SignFlag
mul AlphaOffset add cos mul neg Alpha SignFlag mul AlphaOffset add
sin atan def 270 Delta sub rotate /Rho 90 Gamma add Delta add def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277
a Fs(\(Distance)h(in)f(time\))1074 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1074 1277 a
535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ -3.1725 -3.5625 0 0 -3.5625 0  tx@3DPlotDict begin   /RotX
0.  def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1. 
def /yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def
/dzUnit 1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.
 def /Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta
cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /SphericalCoor
false def /xUnit { 28.45274  mul } def /yUnit { 28.45274  mul } def
convertStackTo2D end   /Lineto /lineto load def 1  setlinejoin false
 Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 0 -3.5625 3.1725 0 -3.5625 0  tx@3DPlotDict begin   /RotX
0.  def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1. 
def /yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def
/dzUnit 1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.
 def /Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta
cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /SphericalCoor
false def /xUnit { 28.45274  mul } def /yUnit { 28.45274  mul } def
convertStackTo2D end   /Lineto /lineto load def 1  setlinejoin false
 Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -2.69 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277 a Fs(Memorability)945 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 945 1277 a 535
1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 -4.6 3.375 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535
1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277
a Fs(\(Distance)h(in)f(space\))1107 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1107 1277
a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.5 -3.6 3.375 1.0 mul /z ED 1.0 mul /y ED 1 mul /x
ED ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535
1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277 a Fs(Adapti)n(v)o(eness)934 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 934 1277
a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 21 2251
a Fr(Figur)o(e)g(1:)23 b(Illustrati)o(v)o(e)c(example.)24
b(The)18 b(3D)h(utility)e(space.)p 0 TeXcolorgray -152
2539 a Ft(P)o(ar)n(eto)26 b(Fr)n(ontier)-152 2659 y Fs(Messages)18
b(that)e(are)g(candidate)h(to)f(compose)i(the)e(training)g(set)g(at)g
(time)f(step)-152 2746 y Fl(n)29 b Fs(are)g(placed)h(in)e(a)h
(3-dimensional)h(space,)i(according)e(to)f(their)f(utility)-152
2833 y(measures,)19 b(as)f(sho)n(wn)h(in)f(Figure)g(1.)23
b(Thus,)18 b(each)h(message)g Fl(a)f Fs(is)f(a)h(point)h(in)-152
2921 y(such)h(utility)e(space,)i(and)f(is)g(gi)n(v)o(en)g(as)g
Fl(<)i(U)995 2929 y Fk(s)1029 2921 y Fi(\()p Fl(a)p Fi(\))p
Fl(;)12 b(U)1215 2929 y Fk(t)1243 2921 y Fi(\()p Fl(a)p
Fi(\))p Fl(;)h(U)1430 2929 y Fk(r)1465 2921 y Fi(\()p
Fl(a)p Fi(\))21 b Fl(>)p Fs(.)-152 3107 y Fr(De\002nition)e(3)p
Fh(.)41 b Fs(Message)21 b Fl(a)f Fs(is)f(said)h(to)g(dominate)h
(message)g Fl(b)f Fs(if)n(f)f(both)i(of)-152 3194 y(the)e(follo)n(wing)
h(conditions)g(are)f(hold:)p 0 TeXcolorgray -41 3382
a Fm(\017)p 0 TeXcolorgray 38 w Fl(U)87 3390 y Fk(s)121
3382 y Fi(\()p Fl(a)p Fi(\))h Fm(\025)h Fl(U)375 3390
y Fk(s)409 3382 y Fi(\()p Fl(b)p Fi(\))d Fs(and)i Fl(U)699
3390 y Fk(t)727 3382 y Fi(\()p Fl(a)p Fi(\))h Fm(\025)g
Fl(U)982 3390 y Fk(t)1010 3382 y Fi(\()p Fl(b)p Fi(\))d
Fs(and)i Fl(U)1300 3390 y Fk(r)1335 3382 y Fi(\()p Fl(a)p
Fi(\))g Fm(\025)h Fl(U)1589 3390 y Fk(r)1624 3382 y Fi(\()p
Fl(b)p Fi(\))p 0 TeXcolorgray -41 3609 a Fm(\017)p 0
TeXcolorgray 38 w Fl(U)87 3617 y Fk(s)121 3609 y Fi(\()p
Fl(a)p Fi(\))f Fl(>)h(U)375 3617 y Fk(s)409 3609 y Fi(\()p
Fl(b)p Fi(\))d Fs(or)h Fl(U)653 3617 y Fk(t)681 3609
y Fi(\()p Fl(a)p Fi(\))i Fl(>)g(U)936 3617 y Fk(t)964
3609 y Fi(\()p Fl(b)p Fi(\))e Fs(or)f Fl(U)1208 3617
y Fk(r)1243 3609 y Fi(\()p Fl(a)p Fi(\))j Fl(>)g(U)1498
3617 y Fk(r)1533 3609 y Fi(\()p Fl(b)p Fi(\))-152 3796
y Fs(Therefore,)d(the)f(dominance)i(operator)f(relates)f(tw)o(o)g
(messages)h(so)g(that)f(the)-152 3883 y(result)25 b(of)h(the)f
(operation)i(has)e(tw)o(o)h(possibilities)f(as)h(sho)n(wn)g(in)f
(Figure)g(2)-152 3970 y(\(Left\):)e(\(i\))c(one)h(message)g(dominates)h
(another)f(or)f(\(ii\))g(the)g(tw)o(o)h(messages)-152
4058 y(do)g(not)f(dominate)h(each)f(other)l(.)-152 4244
y Fr(De\002nition)25 b(4)p Fh(.)42 b Fs(T)m(raining)27
b(set)f Fm(P)736 4252 y Fk(n)813 4244 y Fi(=)36 b Fm(f)p
Fl(d)987 4252 y Fj(1)1021 4244 y Fl(;)14 b(d)1096 4252
y Fj(2)1130 4244 y Fl(;)f(:)g(:)g(:)g(;)h(d)1341 4252
y Fk(m)1399 4244 y Fm(g)27 b Fs(is)f(said)g(to)g(be)-152
4332 y(P)o(areto-ef)n(\002cient)21 b(at)f(time)h(step)g
Fl(n)p Fs(,)g(if)f Fm(P)902 4340 y Fk(n)970 4332 y Fm(\022)25
b(D)1114 4340 y Fk(n)1177 4332 y Fs(and)d(there)f(is)f(no)i(pair)f(of)
-152 4419 y(messages)f Fi(\()p Fl(d)219 4427 y Fk(i)245
4419 y Fl(;)13 b(d)319 4427 y Fk(j)352 4419 y Fi(\))21
b Fm(2)g(P)529 4427 y Fk(n)590 4419 y Fs(for)e(which)g
Fl(d)937 4427 y Fk(i)982 4419 y Fs(dominates)h Fl(d)1348
4427 y Fk(j)1380 4419 y Fs(.)-77 4593 y(Messages)d(that)e(are)g(not)g
(dominated)i(by)e(an)o(y)h(other)g(message,)g(lie)f(on)h(the)-152
4680 y(P)o(areto)25 b(frontier)g([28].)42 b(Therefore,)26
b(by)g(de\002nition,)g(the)f(P)o(areto-ef)n(\002cient)-152
4767 y(training)i(set)f(at)f(time)h(step)g Fl(n)p Fs(,)i
Fm(P)747 4775 y Fk(n)789 4767 y Fs(,)g(is)d(composed)j(by)f(all)e(the)i
(messages)-152 4855 y(lying)17 b(in)g(the)g(P)o(areto)f(frontier)h
(that)f(is)h(b)o(uilt)f(from)g Fm(D)1215 4863 y Fk(n)1258
4855 y Fs(.)22 b(There)17 b(are)g(ef)n(\002cient)-152
4942 y(algorithms)h(for)g(b)o(uilding)g(and)g(maintaining)h(the)f(P)o
(areto)f(frontier)m(,)g(and)i(we)-152 5029 y(emplo)o(yed)27
b(the)e(algorithm)h(proposed)g(in)f([11])h(which)f(ensures)h
Fl(O)r Fs(\()p Fm(jD)1751 5037 y Fk(n)1795 5029 y Fm(j)p
Fs(\))-152 5116 y(comple)o(xity)-5 b(.)49 b(W)-6 b(e)27
b(denote)h(the)f(process)h(of)f(e)o(xploiting)h(P)o(areto-ef)n
(\002cient)-152 5203 y(training)15 b(sets)f(as)h(P)o(areto-Ef)n
(\002cient)e(Selecti)n(v)o(e)h(Sampling,)h(or)g(simply)f(PESS.)-152
5290 y(Figure)j(2)f(\(Middle\))h(sho)n(ws)g(an)f(illustrati)n(v)o(e)g
(e)o(xample)h(of)g(a)f(P)o(areto)g(frontier)-152 5378
y(b)o(uilt)j(from)f(arbitrary)h(points)h(in)f(the)g(utility)f(space.)p
0 TeXcolorgray 0 TeXcolorgray 2040 -69 a Ft(Kaldor)l(-Hicks)25
b(Region)2040 52 y Fs(The)20 b(PESS)e(strate)o(gy)i(follo)n(ws)g(a)f
(stringent)i(criterion,)e(which)h(tends)h(to)f(se-)2040
139 y(lect)15 b(only)h(fe)n(w)f(messages)i(to)e(compose)i(the)e
(training)h(sets.)21 b(As)15 b(a)h(result,)f(the)2040
226 y(training)g(sets)g(may)h(become)g(e)o(xcessi)n(v)o(ely)g(small)f
(and)h(prone)g(to)f(noise.)22 b(The)2040 313 y(Kaldor)o(-Hicks)28
b(criterion,)i(on)f(the)f(other)h(hand,)i(follo)n(ws)d(a)g
(cost-bene\002t)2040 400 y(analysis)22 b(and)g(circumv)o(ents)g(the)f
(small)g(training)g(set)g(problem)h(by)f(stating)2040
488 y(that)e(ef)n(\002cienc)o(y)h(is)f(achie)n(v)o(ed)h(if)f(those)h
(that)f(are)g(made)h(better)f(of)n(f)g(could)h(in)2040
575 y(theory)i(compensate)g(those)f(that)g(are)g(made)g(w)o(orse)h(of)n
(f.)28 b(Thus,)22 b(under)f(the)2040 662 y(Kaldor)o(-Hicks)30
b(criterion,)h(an)f(utility)f(measure)h(can)g(compensate)h(other)2040
749 y(utility)20 b(measures,)i(and)g(therefore,)f(this)g(criterion)g
(selects)g(messages)h(that)2040 836 y(are)i(located)g(inside)g(a)g(re)o
(gion)h(which)f(is)f(belo)n(w)i(the)f(P)o(areto)f(frontier)l(.)38
b(T)-6 b(o)2040 923 y(de\002ne)23 b(this)f(re)o(gion)h(we)f(must)g
(\002rst)g(de\002ne)g(the)h(o)o(v)o(erall)f(utility)g(of)g(a)g(mes-)
2040 1011 y(sage.)2040 1197 y Fr(De\002nition)j(5)p Fh(.)42
b Fs(Assuming)28 b(that)f(all)f(measures)i(are)f(equally)g(important,)
2040 1285 y(the)19 b(o)o(v)o(erall)g(utility)f(of)h(an)g(arbitrary)g
(message)h Fl(d)3329 1293 y Fk(i)3377 1285 y Fm(2)h(D)3508
1293 y Fk(n)3570 1285 y Fs(is:)2483 1492 y Fl(U)8 b Fi(\()p
Fl(d)2613 1500 y Fk(i)2639 1492 y Fi(\))22 b(=)f Fl(U)2824
1500 y Fk(s)2857 1492 y Fi(\()p Fl(d)2927 1500 y Fk(i)2953
1492 y Fi(\))c(+)g Fl(U)3129 1500 y Fk(t)3157 1492 y
Fi(\()p Fl(d)3227 1500 y Fk(i)3253 1492 y Fi(\))g(+)g
Fl(U)3429 1500 y Fk(r)3464 1492 y Fi(\()p Fl(d)3534 1500
y Fk(i)3560 1492 y Fi(\))356 b Fs(\(6\))2040 1613 y(That)24
b(is,)h(the)g(o)o(v)o(erall)f(utility)g(of)g(a)h(message)g(is)f(gi)n(v)
o(en)h(as)f(the)h(sum)g(of)f(its)2040 1700 y(utility)e(measures.)36
b(Also,)24 b(the)e(baseline)i(message,)g(which)g(is)e(denoted)i(as)2040
1787 y Fl(d)2080 1756 y Fe(\003)2116 1787 y Fs(,)18 b(is)h(de\002ned)g
(as:)2345 1995 y Fl(d)2385 1959 y Fe(\003)2442 1995 y
Fi(=)i Fm(f)p Fl(d)2601 2003 y Fk(i)2649 1995 y Fm(2)h(P)2776
2003 y Fk(n)2818 1995 y Fm(j8)p Fl(d)2922 2003 y Fk(j)2976
1995 y Fm(2)f(P)3102 2003 y Fk(n)3165 1995 y Fi(:)h Fl(U)8
b Fi(\()p Fl(d)3338 2003 y Fk(i)3364 1995 y Fi(\))22
b Fm(\024)f Fl(U)8 b Fi(\()p Fl(d)3627 2003 y Fk(j)3659
1995 y Fi(\))p Fm(g)219 b Fs(\(7\))2040 2116 y(That)22
b(is,)f(the)h(baseline)h(is)e(the)h(message)h(lying)f(in)g(the)g
(frontier)f(for)h(which)2040 2203 y(the)d(o)o(v)o(erall)g(utility)f
(assumes)i(its)e(lo)n(west)h(v)n(alue.)2115 2377 y(The)d(Kaldor)o
(-Hicks)h(re)o(gion)g(is)g(composed)h(of)f(messages)h(for)e(which)h
(the)2040 2465 y(o)o(v)o(erall)22 b(utility)g(is)g(not)g(smaller)g
(than)h(the)f(baseline)h(o)o(v)o(erall)g(utility)-5 b(.)32
b(Such)2040 2552 y(baseline)26 b(utility)f(is)g(the)h(utility)f
(associated)h(with)f(the)h(message)h(lying)e(in)2040
2639 y(the)19 b(P)o(areto)g(frontier)f(for)h(which)g(the)g(o)o(v)o
(erall)g(utility)g(is)f(the)h(lo)n(west.)2040 2826 y
Fr(De\002nition)24 b(6)p Fh(.)42 b Fs(T)m(raining)26
b(set)g Fm(K)2930 2834 y Fk(n)3008 2826 y Fi(=)34 b Fm(f)p
Fl(d)3180 2834 y Fj(1)3215 2826 y Fl(;)13 b(d)3289 2834
y Fj(2)3323 2826 y Fl(;)h(:)f(:)g(:)g(;)g(d)3534 2834
y Fk(m)3593 2826 y Fm(g)26 b Fs(is)f(said)h(to)g(be)2040
2913 y(Kaldor)o(-Hicks-ef)n(\002cient)i(at)g(time)g(step)g
Fl(n)p Fs(,)j(if)c Fm(P)3355 2921 y Fk(n)3436 2913 y
Fm(\022)39 b(K)3593 2921 y Fk(n)3675 2913 y Fm(\022)g(D)3833
2921 y Fk(n)3876 2913 y Fs(,)30 b(and)2040 3000 y(there)19
b(is)g(no)g(message)h Fl(d)2682 3008 y Fk(i)2729 3000
y Fm(2)i(K)2860 3008 y Fk(n)2921 3000 y Fs(such)e(that)f
Fl(U)8 b Fi(\()p Fl(d)3338 2968 y Fe(\003)3374 3000 y
Fi(\))21 b Fl(>)g(U)8 b Fi(\()p Fl(d)3636 3008 y Fk(i)3662
3000 y Fi(\))p Fs(.)2115 3174 y(W)-6 b(e)15 b(denote)h(the)g(process)g
(of)f(e)o(xploiting)i(Kaldor)o(-Hicks-ef)n(\002cient)e(train-)2040
3262 y(ing)28 b(sets)g(as)g(Kaldor)o(-Hicks-Ef)n(\002cient)f(Selecti)n
(v)o(e)g(Sampling,)j(or)e(simply)2040 3349 y(KHSS.)17
b(Figure)i(2)f(\(Right\))h(sho)n(ws)g(an)g(illustrati)n(v)o(e)f(e)o
(xample)i(of)e(a)h(Kaldor)o(-)2040 3436 y(Hicks)g(re)o(gion)h(b)o(uilt)
e(from)h(arbitrary)g(points)g(in)g(the)g(utility)f(space.)2040
3624 y Ft(4.)99 b(EXPERIMENT)-9 b(AL)27 b(EV)-13 b(ALU)-6
b(A)d(TION)2115 3732 y Fs(In)28 b(this)f(section)i(we)f(empirically)g
(analyze)h(the)f(performance)h(of)f(our)2040 3819 y(classi\002ers.)h(W)
-6 b(e)21 b(emplo)o(y)h(the)f(mean)h(squared)g(error)f(\(MSE\))f(as)h
(the)g(basic)2040 3907 y(e)n(v)n(aluation)j(measure)f(in)g(our)g(e)o
(xperiments,)h(since)f(we)f(are)h(primarily)g(in-)2040
3994 y(terested)f(in)g(e)n(v)n(aluating)h(sentiment)f(scoring)g(gi)n(v)
o(en)h(by)f(Equation)h(2.)31 b(The)2040 4081 y(MSE)18
b(measure)i(is)f(gi)n(v)o(en)g(as:)2512 4306 y Fa(MSE)30
b Fi(=)2829 4258 y(1)p 2797 4289 104 4 v 2797 4357 a
Fm(jT)19 b(j)2956 4235 y Ff(X)2923 4395 y Fe(8)p Fk(t)2982
4406 y Fg(i)3008 4395 y Fe(2T)3099 4306 y Fi(\(1)e Fm(\000)23
b Fi(^)-44 b Fl(p)o Fi(\()p Fl(s)3365 4314 y Fk(i)3391
4306 y Fm(j)p Fl(t)3440 4314 y Fk(i)3467 4306 y Fi(\)\))3527
4271 y Fj(2)3946 4306 y Fs(\(8\))2040 4506 y(where)30
b Fl(s)2288 4514 y Fk(i)2344 4506 y Fs(is)g(the)g(correct)g(sentiment)h
(associated)f(with)g(message)h Fl(t)3913 4514 y Fk(i)3981
4506 y Fm(2)2040 4593 y(T)19 b Fs(,)j(and)28 b Fi(^)-44
b Fl(p)o Fi(\()p Fl(s)2375 4601 y Fk(i)2401 4593 y Fm(j)p
Fl(t)2450 4601 y Fk(i)2477 4593 y Fi(\))21 b Fs(is)f(the)i(sentiment)f
(score)h(assigned)h(by)e(the)h(classi\002er)e(to)2040
4680 y(message)g Fl(t)2340 4688 y Fk(i)2387 4680 y Fm(2)i(T)d
Fs(.)2115 4767 y(T)-6 b(o)14 b(e)n(v)n(aluate)h(the)g(amount)g(of)g
(computing)h(resources)f(used)g(as)g(the)f(stream)2040
4855 y(e)n(v)o(olv)o(es,)i(we)e(emplo)o(y)i(the)e(RAM-Hours)h(measure)g
([9],)g(where)g(e)n(v)o(ery)g(RAM-)2040 4942 y(Hour)23
b(equals)g(a)f(GB)g(of)g(RAM)h(deplo)o(yed)h(for)e(1)h(hour)g(of)f(e)o
(x)o(ecution.)35 b(W)-6 b(e)2040 5029 y(also)26 b(e)n(v)n(aluate)g(the)
g(amount)g(of)f(training)h(resources)g(used)g(o)o(v)o(er)g(time,)g(as)
2040 5116 y(the)d(number)g(of)f(messages)i(labeled)f(during)g(the)f
(process.)34 b(W)-6 b(e)22 b(used)h(Ho-)2040 5203 y(ef)n(fding)g
(Adapti)n(v)o(e)g(T)m(rees)f([4,)12 b(10])22 b(\(abbre)n(viated)i(as)e
(HA)-8 b(T\),)21 b(Acti)n(v)o(e)h(Clas-)2040 5290 y(si\002er)e([37,)11
b(38])20 b(\(abbre)n(viated)i(as)e(A)m(C\),)g(and)h(Incremental)g(Lazy)
f(Associa-)2040 5378 y(ti)n(v)o(e)d(Classi\002er)g([30])g(\(abbre)n
(viated)i(as)e(ILA)m(C\))g(as)g(baselines.)23 b(All)17
b(datasets)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
