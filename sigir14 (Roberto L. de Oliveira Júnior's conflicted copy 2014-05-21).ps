%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: paper.dvi
%%CreationDate: Wed May 21 18:41:29 2014
%%Pages: 10
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: NimbusSanL-Bold NimbusSanL-Regu NimbusRomNo9L-Medi
%%+ NimbusRomNo9L-Regu NimbusRomNo9L-ReguItal CMSY9 CMMI9 CMMI6 CMR6
%%+ CMR9 CMMI5 CMEX9 CMSY6 MSBM10 MSAM10 CMR5 CMTI9 Helvetica Symbol
%%+ NimbusMonL-Regu
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -P download35 -t letter paper.dvi -o sigir14.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2014.05.21:1841
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 781 2013-05-21 08:25:07Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.15, 2012/10/18
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa

/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def

%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def

    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 

  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 594 2011-10-31 18:13:18Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 713 2012-10-16 14:25:00Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.03, 2012/10/16
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { 
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get 32 ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ rightTrim psStringwidth } bind def

%/show { rightTrim psShow } bind def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 765 2013-04-09 15:32:28Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.14, 2012/09/18.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
 /startGlobal { true setglobal globaldict begin } bind def
 /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def

/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3dplot.pro 0 0
%% $Id: pst-3dplot.pro 467 2011-03-01 21:04:36Z herbert $
%%
%% This is file `pst-3dplot.pro',
%%
%% IMPORTANT NOTICE:
%%
%% Package `pst-3dplot.tex'
%%
%% Herbert Voss <voss _at_ PSTricks.de>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-3dplot' is a PSTricks package to draw 3d curves and graphical objects
%%
%%
%% version 0.31 / 2010-02-20  Herbert Voss <hvoss _at_ tug.org>
%% with contributions of Darrell Lamm <darrell.lamm _at_ gtri.gatech.edu<
%%            
%
/tx@3DPlotDict 200 dict def
tx@3DPlotDict begin
%
/printDot { gsave 2 copy 2 0 360 arc fill stroke grestore } def
%
/saveCoor { 
  dzUnit mul /z ED
  dyUnit mul /y ED
  dxUnit mul /x ED
} def
%
/3Dto2D { % true or false on stack
  { RotatePoint } if
  1 { %  dummy loop, will run only 1 time, allows exit 
    coorType 0 le {                                               % the default |
      /x2D x leftHanded not { neg } if Alpha cos mul y Alpha sin mul add def %  /\  co system
      /y2D x leftHanded { neg } if Alpha sin mul y Alpha cos mul add neg Beta sin mul z Beta cos mul add def
      exit } if
    coorType 1 le { 
      /x2D y x Alpha 90 sub sin mul sub def  %  |/_  co system, no shortened x axis
      /y2D z x Alpha 90 sub cos mul sub def 
      exit } if
    coorType 2 le { % coorType |/_ with a 1/sqrt(2) shortend x-axis and 135 degrees 
      /x2D y x 0.5 mul sub def
      /y2D z x 0.5 mul sub def 
      exit } if
    coorType 3 le { % coorType |/_ with a 1/sqrt(2) shortend x-axis and 135 degrees 
      /x2D y x -0.5 mul sub def
      /y2D z x -0.5 mul sub def 
      exit } if
    coorType 4 le { % Normalbild in Trimetrie Skalierung so, dass coorType2
       /x2D x -0.5 mul y 1 mul add def
       /y2D x -0.5 mul y -0.25 mul add z 1 mul add def
       exit } if
  } repeat
} def
/ConvertTo2D { true 3Dto2D } def
/ConvertTo2DWithoutRotating { false 3Dto2D } def
%
/Conv3D2D { /z ED /y ED /x ED ConvertTo2D x2D y2D } def
%
/ConvertToCartesian {
  /latitude exch def
  /longitude exch def
  /Radius exch def
  1 { %  dummy loop, will run only 1 time, allows exit
    SphericalCoorType 0 le {                                               % the default |
     /z { Radius latitude sin mul } def
     /x { Radius longitude cos mul latitude cos mul } def
     /y { Radius longitude sin mul latitude cos mul } def
      exit } if
    SphericalCoorType 2 le {
     /z { Radius longitude cos mul } def
     /x { Radius longitude sin mul latitude cos mul} def
     /y { Radius longitude sin mul latitude sin mul } def
      exit } if
  } repeat
} def
%
/ConvCylToCartesian { % r phi h -> x y z
  3 1 roll			% h r phi
  /Phi ED
  /Radius ED			% h->z on stack
  Radius Phi cos mul exch 	% x z
  Radius Phi sin mul exch	% x y z
} def
%
/SphericalTo2D {
  x y z ConvertToCartesian ConvertTo2D
} def
%
/CylinderTo2D { %  r phi h
  x y z ConvCylToCartesian ConvertTo2D
} def
%
/convertStackTo2D {
  counttomark
  /n ED /n3 n 3 div cvi def
  n3 {
    n -3 roll
    SphericalCoor { ConvertToCartesian } { saveCoor } ifelse
    ConvertTo2D
    x2D xUnit y2D yUnit
    /n n 1 sub def
  } repeat
} def
%
% the angle in the parameter equation for an ellipse is not proportional to the real angle!
% phi=atan(b*tan(angle)/a)+floor(angle/180+0.5)*180
%
/getPhi { % on stack: vecA vecB angle 
  3 dict begin
  /angle exch def /vecB exch def /vecA exch def
  angle cvi 90 mod 0 eq { angle } { vecA angle tan mul vecB atan 
  angle 180 div .5 add floor 180 mul add } ifelse 
  end
} def
%
/RotSet (set ) def
%
/eulerRotation false def
% Matrix multiplication procedure
/matmul {

  /M@tMulDict 20 dict def
  M@tMulDict begin
  /m2 ED
  /m1 ED
  m1 dup length 2 sub 2 getinterval aload pop
  /col1max ED
  /row1max ED
  m2 dup length 2 sub 2 getinterval aload pop
  /col2max ED
  /row2max ED
  /m3 row1max col2max mul 2 add array def
  m3 dup length 2 sub row1max col2max 2 array astore putinterval
  0 1 row1max 1 sub {
   /row ED
   0 1 col2max 1 sub {
    /col ED
    /sum 0 def
    0 1 col1max 1 sub{
    /rowcol ED
    sum
    m1 row col1max mul rowcol add get
    m2 rowcol col2max mul col add get
    mul add 
    /sum ED
    } for
    m3 row col2max mul col add sum put
   } for
  } for
  m3
  end % end of M@tMulDict

} def
%
/SetMQuaternion {

  /MnewTOold 11 array def

  /Qu@ternionDict 30 dict def
  Qu@ternionDict begin

  /normRotVec  xRotVec yRotVec zRotVec 3 array astore VecNorm  def
  normRotVec 0 gt
  {/xRotVecNorm xRotVec normRotVec div def
   /yRotVecNorm yRotVec normRotVec div def
   /zRotVecNorm zRotVec normRotVec div def
   RotAngle}
  {/xRotVecNorm 1 def
   /yRotVecNorm 0 def
   /zRotVecNorm 0 def 
   0} ifelse

  2 div dup
  /q0 exch cos def
      sin dup dup
  /q1 exch xRotVecNorm mul def
  /q2 exch yRotVecNorm mul def
  /q3 exch zRotVecNorm mul def

  /q0q0 q0 q0 mul def
  /q0q1 q0 q1 mul def
  /q0q2 q0 q2 mul def
  /q0q3 q0 q3 mul def

  /q1q1 q1 q1 mul def
  /q1q2 q1 q2 mul def
  /q1q3 q1 q3 mul def

  /q2q2 q2 q2 mul def
  /q2q3 q2 q3 mul def

  /q3q3 q3 q3 mul def

  MnewTOold 0 q0q0 q1q1 add q2q2 sub q3q3 sub put
  MnewTOold 1 q1q2 q0q3 sub 2 mul put
  MnewTOold 2 q1q3 q0q2 add 2 mul put

  MnewTOold 3 q1q2 q0q3 add 2 mul put
  MnewTOold 4 q0q0 q1q1 sub q2q2 add q3q3 sub put
  MnewTOold 5 q2q3 q0q1 sub 2 mul put

  MnewTOold 6 q1q3 q0q2 sub 2 mul put
  MnewTOold 7 q2q3 q0q1 add 2 mul put
  MnewTOold 8 q0q0 q1q1 sub q2q2 sub q3q3 add put

  MnewTOold 9 3 put
  MnewTOold 10 3 put

  end % end of Qu@ternionDict

} def
%
/SetMxyz {
  1.0 0.0 0.0  0.0 1.0 0.0  0.0 0.0 1.0  3 3  11 array astore /MnewTOold ED
  RotSequence cvx exec % Now create a new MnewTOold using xyz, etc.
} def
%
/ConcatMQuaternion {
  MnewTOold % Push onto stack
  SetMQuaternion % Uses [xyz]RotVec and RotAngle to make MnewToOld 
  MnewTOold matmul /MnewTOold ED
} def
%
/ConcatMxyz {
  MnewTOold % Push onto stack
  SetMxyz % Uses RotX, etc. to set MnewTOold 
  MnewTOold matmul /MnewTOold ED
} def
%
/RotatePoint{
  MnewTOold x y z  3 1  5 array astore matmul
  0 3 getinterval aload pop 
  /z ED 
  /y ED 
  /x ED 
} def
%
/makeMoldTOnew {
  /MoldTOnew 11 array def
  MoldTOnew 0 MnewTOold 0 get put
  MoldTOnew 1 MnewTOold 3 get put
  MoldTOnew 2 MnewTOold 6 get put
  MoldTOnew 3 MnewTOold 1 get put
  MoldTOnew 4 MnewTOold 4 get put
  MoldTOnew 5 MnewTOold 7 get put
  MoldTOnew 6 MnewTOold 2 get put
  MoldTOnew 7 MnewTOold 5 get put
  MoldTOnew 8 MnewTOold 8 get put
  MoldTOnew 9               3 put
  MoldTOnew 10              3 put
} def
%
/RotXaxis { 
  eulerRotation 
  {1 0 0}
  {makeMoldTOnew MoldTOnew  1 0 0  3 1  5 array astore matmul
   0 3 getinterval aload pop} ifelse
  /zRotVec ED
  /yRotVec ED
  /xRotVec ED
  /RotAngle RotX def
  ConcatMQuaternion
} def
/RotYaxis { 
  eulerRotation 
  {0 1 0}
  {makeMoldTOnew MoldTOnew  0 1 0  3 1  5 array astore matmul
   0 3 getinterval aload pop} ifelse
  /zRotVec ED
  /yRotVec ED
  /xRotVec ED
  /RotAngle RotY def
  ConcatMQuaternion
} def
/RotZaxis { 
  eulerRotation 
  {0 0 1}
  {makeMoldTOnew MoldTOnew  0 0 1  3 1  5 array astore matmul
   0 3 getinterval aload pop} ifelse
  /zRotVec ED
  /yRotVec ED
  /xRotVec ED
  /RotAngle RotZ def
  ConcatMQuaternion
} def
/xyz { RotXaxis RotYaxis RotZaxis } def
/yxz { RotYaxis RotXaxis RotZaxis } def
/yzx { RotYaxis RotZaxis RotXaxis } def
/xzy { RotXaxis RotZaxis RotYaxis } def
/zxy { RotZaxis RotXaxis RotYaxis } def
/zyx { RotZaxis RotYaxis RotXaxis } def
/quaternion { } def % Null
%
/VecNorm { 0 exch { dup mul add } forall sqrt } def
%
/UnitVec {			% on stack is [a]; returns a vector with [a][a]/|a|=1 
  dup VecNorm /norm ED
  norm 0 lt {/norm 0 def} if
  { norm div } forall 3 array astore } def
%
/AxB {				% on the stack are the two vectors [a][b]
    aload pop /b3 ED /b2 ED /b1 ED
    aload pop /a3 ED /a2 ED /a1 ED
    a2 b3 mul a3 b2 mul sub
    a3 b1 mul a1 b3 mul sub
    a1 b2 mul a2 b1 mul sub
    3 array astore } def
%
/AaddB {			% on the stack are the two vectors [a][b]
    aload pop /b3 ED /b2 ED /b1 ED
    aload pop /a3 ED /a2 ED /a1 ED
    a1 b1 add a2 b2 add a3 b3 add
    3 array astore } def
%
/AmulC {			% on stack is [a] and c; returns [a] mul c
    /factor ED { factor mul } forall 3 array astore } def
%
%
/setColorLight { % expects 7 values on stack C M Y K xL yL zL
% les rayons de lumi�re
  xLight dup mul yLight dup mul zLight dup mul add add sqrt /NormeLight ED
% the color values
  /K ED
  /Yellow ED
  /Magenta ED
  /Cyan ED
} def
%
/facetteSphere {
  newpath
  /Xpoint Rsphere theta cos mul phi cos mul CX add def
  /Ypoint Rsphere theta sin mul phi cos mul CY add def
  /Zpoint Rsphere phi sin mul CZ add def
  Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end moveto
  theta 1 theta increment add {%
    /theta1 ED
    /Xpoint Rsphere theta1 cos mul phi cos mul CX add def
    /Ypoint Rsphere theta1 sin mul phi cos mul CY add def
    /Zpoint Rsphere phi sin mul CZ add def
    Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end  lineto
  } for
  phi 1 phi increment add {
    /phi1 ED
    /Xpoint Rsphere theta increment add cos mul phi1 cos mul CX add def
    /Ypoint Rsphere theta increment add sin mul phi1 cos mul CY add def
    /Zpoint Rsphere phi1 sin mul CZ add def
    Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end lineto
  } for
  theta increment add -1 theta {%
    /theta1 ED
    /Xpoint Rsphere theta1 cos mul phi increment add cos mul CX add def
    /Ypoint Rsphere theta1 sin mul phi increment add cos mul CY add def
    /Zpoint Rsphere phi increment add sin mul CZ add def
    Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end lineto
  } for
  phi increment add -1 phi {
    /phi1 ED
    /Xpoint Rsphere theta cos mul phi1 cos mul CX add def
    /Ypoint Rsphere theta sin mul phi1 cos mul CY add def
    /Zpoint Rsphere phi1 sin mul CZ add def
    Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end lineto
  } for
  closepath 
} def
%
/MaillageSphere { 
% on stack must be x y z Radius increment C M Y K 
  setColorLight
  /increment ED
  /Rsphere ED
  /CZ ED
  /CY ED
  /CX ED
  /StartTheta 0 def
  /condition { PSfacetteSphere 0 ge } def
  -90 increment 90 increment sub {%
    /phi ED
    StartTheta increment 360 StartTheta add increment sub {%
      /theta ED
      % Centre de la facette
      /Xpoint Rsphere theta increment 2 div add cos mul phi increment 2 div add cos mul CX add def
      /Ypoint Rsphere theta increment 2 div add sin mul phi increment 2 div add cos mul CY add def
      /Zpoint Rsphere phi increment 2 div add sin mul CZ add def
      % normale a la facette
      /nXfacette Xpoint CX sub def
      /nYfacette Ypoint CY sub def
      /nZfacette Zpoint CZ sub def
      % test de visibilite
      /PSfacetteSphere 
        vX nXfacette mul
        vY nYfacette mul add
        vZ nZfacette mul add
      def
      condition {
        gsave
        facetteSphere
        /cosV { 1 xLight nXfacette mul
          yLight nYfacette mul
          zLight nZfacette mul
          add add
          NormeLight
          nXfacette dup mul
          nYfacette dup mul
          nZfacette dup mul
          add add sqrt mul div sub } bind def
        Cyan cosV mul Magenta cosV mul Yellow cosV mul K cosV mul setcmykcolor fill 
	grestore
%	0 setgray
        showgrid { facetteSphere stroke } if
      } if 
    } for
    % /StartTheta StartTheta increment 2 div add def
  } for
} def
%
%---------------------- Cylinder ---------------------------
%
/PlanCoupeCylinder { %
  /TableauxPoints [
    0 1 359 { 
      /phi ED 
      [ Radius phi Height ConvCyl2d ] % on décrit le cercle
    } for
  ] def
  newpath
  TableauxPoints 0 get aload pop moveto
  1 1 359 { TableauxPoints exch get aload pop lineto } for
  closepath
} def
%
/facetteCylinder { % 
    newpath
    Radius phi currentHeight ConvCyl2d moveto
    phi 1 phi dAngle add  { % loop variable on stack
      Radius exch currentHeight ConvCyl2d lineto        
    } for
    phi dAngle add -1 phi { %	fill dHeight
      Radius exch currentHeight dHeight add ConvCyl2d lineto 
    } for
    closepath
  } def % facette
%
/MaillageCylinder { % on stack true or false for saving values
    { setColorLight  % expects 4 values on stack C M Y K
      /dHeight ED /dAngle ED /Height ED /Radius ED
      /CZ ED /CY ED /CX ED } if
%     
    0 dHeight Height dHeight sub {
      /currentHeight ED
      0 dAngle 360 dAngle sub {
        /phi ED
% Normal vector of the center
        /nXfacetteCylinder Radius phi dAngle 2 div add cos mul CX add def 
        /nYfacetteCylinder Radius phi dAngle 2 div add sin mul CY add def 
        /nZfacetteCylinder currentHeight dHeight 2 div add CZ add def 
        /NormeN 
          nXfacetteCylinder dup mul
          nYfacetteCylinder dup mul
          nZfacetteCylinder dup mul
          add add sqrt def
        NormeN 0 eq { /NormeN 1e-10 def } if
% test de visibilité
       /PSfacetteCylinder 
    	    vX nXfacetteCylinder mul
            vY nYfacetteCylinder mul add
            vZ nZfacetteCylinder mul add def
       condition {
         facetteCylinder
         /cosV 
	   1 xLight nXfacetteCylinder mul
           yLight nYfacetteCylinder mul
           zLight nZfacetteCylinder mul
           add add
	   NormeLight NormeN mul div sub def
         Cyan Magenta Yellow K
         cosV mul 4 1 roll cosV mul 4 1 roll 
	 cosV dup mul mul 4 1 roll cosV dup mul mul 4 1 roll
         setcmykcolor fill
          showgrid { 
            0 setgray
            facetteCylinder % drawing the segments
            stroke } if
       } if
     } for
    } for
} def
%
%------------------------ Cylinder type II -----------------------
%
/MoveTo { Conv3D2D moveto } def
/LineTo { Conv3D2D lineto } def

/IIIDEllipse { % x y z rA rB startAngle endAngle Wedge
  /dAngle 1 def
  /isWedge ED
  /endAngle ED
  /startAngle ED
  /radiusB ED
  /radiusA ED
  startAngle cos radiusA mul startAngle sin radiusB mul 0 
  isWedge { 0 0 moveto LineTo }{ MoveTo } ifelse
  /Angle startAngle def
  startAngle dAngle endAngle {
    /Angle ED
    Angle cos radiusA mul Angle sin radiusB mul 0 LineTo  
  } for
  isWedge { 0 0 lineto } if
} def

/IIIDCircle { % x y z r startAngle endAngle Wedge
  7 3 roll % startAngle endAngle Wedge x y z r
  dup      % startAngle endAngle Wedge x y z r r
  8 -3 roll
  IIIDEllipse 
} def

/IIIDWedge { % x y z r startAngle endAngle
  true IIIDCircle
} def

/IIIDCylinder {% x y z r h start end wedge
  /isWedge ED
  /increment ED
  /endAngle ED
  /startAngle ED
  /height ED
  /radius ED
  startAngle increment endAngle {
    /Angle ED
    radius Angle 0 ConvCylToCartesian MoveTo  
    radius Angle height ConvCylToCartesian LineTo  
  } for
  stroke
} def
%
%---------------------- Box ---------------------------
%
/PlanCoupeBox { % x y z
  /TableauxPoints [
      [ CX CY CZ Height add ConvBox2d ] % top or bottom
      [ CX CY Depth add CZ Height add ConvBox2d ]
      [ CX Width add CY Depth add CZ Height add ConvBox2d ] 
      [ CX Width add CY CZ Height add ConvBox2d ] 
      [ CX CY CZ Height add ConvBox2d ] % bottom
    ] def
    newpath
    TableauxPoints 0 get aload pop moveto
    0 1 3 {
      TableauxPoints exch get aload pop
      lineto } for
    closepath
} def
%
/facetteBox { % 
    newpath
    dup
    1 eq { % back
      CX CY CZ ConvBox2d moveto
      CX CY CZ Height add ConvBox2d lineto
      CX Width add CY CZ Height add ConvBox2d lineto
      CX Width add CY CZ ConvBox2d lineto
      CX CY CZ ConvBox2d lineto
    } if
    dup
    2 eq { % right
      CX CY CZ ConvBox2d moveto
      CX CY CZ Height add ConvBox2d lineto
      CX CY Depth add CZ Height add ConvBox2d lineto
      CX CY Depth add CZ ConvBox2d lineto
      CX CY CZ ConvBox2d lineto
    } if
    dup
    3 eq { % left
      CX Width add CY CZ ConvBox2d moveto
      CX Width add CY Depth add CZ ConvBox2d lineto
      CX Width add CY Depth add CZ Height add ConvBox2d lineto
      CX Width add CY CZ Height add ConvBox2d lineto
      CX Width add CY CZ ConvBox2d lineto
    } if
    4 eq { % front
      CX CY Depth add CZ ConvBox2d moveto
      CX CY Depth add CZ Height add ConvBox2d lineto
      CX Width add CY Depth add CZ Height add ConvBox2d lineto
      CX Width add CY Depth add CZ ConvBox2d lineto
      CX CY Depth add CZ ConvBox2d lineto
    } if
    closepath
  } def % facette
%
/TestPlane { % on stack x y z of the plane center and # of plane
  /nZfacetteBox ED /nYfacetteBox ED /nXfacetteBox ED
  /Plane ED
  /NormeN 
    nXfacetteBox dup mul
    nYfacetteBox dup mul
    nZfacetteBox dup mul
    add add sqrt def
  NormeN 0 eq { /NormeN 1e-10 def } if
% test de visibilite
  /PSfacetteBox 
    vX nXfacetteBox mul
    vY nYfacetteBox mul add
    vZ nZfacetteBox mul add def
  condition {
    Plane facetteBox
         /cosV 
	   1 xLight nXfacetteBox mul
           yLight nYfacetteBox mul
           zLight nZfacetteBox mul
           add add
	   NormeLight NormeN mul div sub def
         Cyan Magenta Yellow K
         cosV mul 4 1 roll cosV mul 4 1 roll 
	 cosV dup mul mul 4 1 roll cosV dup mul mul 4 1 roll
         setcmykcolor fill
         0 setgray
         Plane facetteBox % drawing the segments
         stroke
       } if
} def
%
/MaillageBox { % on stack true or false for saving values
    { setColorLight  % expects 4 values on stack C M Y K 
      /Depth ED /Height ED /Width ED
      /CZ ED /CY ED /CX ED } if
%
% Normal vector of the box center
  /PlaneSet [
    [ Width 2 div CX add 
      CY 
      Height 2 div CZ add ] % normal back
    [ CX 
      Depth 2 div CY add 
      Height 2 div CZ add ] % normal right
    [ Width CX add 
      Depth 2 div CY add 
      Height 2 div CZ add ] % normal left
    [ Width 2 div CX add 
      Depth CY add 
      Height 2 div CZ add ] % normal front
  ] def
  PlaneSequence length 0 eq { % user defined?
    Alpha abs cvi 360 mod /iAlpha ED
    iAlpha 90 lt { [ 1 2 3 4 ]  
      }{ iAlpha 180 lt { [ 2 4 1 3 ]  
        }{ iAlpha 270 lt { [ 3 4 1 2 ] }{ [ 3 1 4 2] } ifelse } ifelse } ifelse 
  }{ PlaneSequence } ifelse 
  { dup 1 sub PlaneSet exch get aload pop TestPlane } forall
} def
%
%--------------------------- Paraboloid -----------------------------
/PlanCoupeParaboloid {
    /Z height store
    /V {Z sqrt} bind def
    /TableauxPoints [
      0 1 359 { 
        /U ED [ U U Z V calculate2DPoint ] % on decrit le cercle
      } for
    ] def
    newpath
    TableauxPoints 0 get aload pop moveto
    0 1 359 {
      /compteur ED
      TableauxPoints compteur get aload pop
      lineto } for
    closepath
} def
%
/facetteParaboloid{
    newpath
    U U Z V calculate2DPoint moveto
    U 1 U increment add  {%
      /U1 ED
      U1 U1 Z V calculate2DPoint lineto
    } for
    Z pas10 Z pas add pas10 add{
      /Z1 ED
      /V {Z1 sqrt} bind def
      U1 U1 Z1 V calculate2DPoint lineto
    } for
    U increment add -1 U {%
      /U2 ED
      U2 U2 Z pas add V calculate2DPoint lineto
    } for
    Z pas add pas10 sub pas10 neg Z pas10 sub {
      /Z2 ED
      /V Z2 abs sqrt def
      U U Z2 V calculate2DPoint lineto
    } for
    closepath
} def % facette
%
/MaillageParaboloid {
  % on stack true or false for saving values
    { setColorLight  % expects 7 values on stack C M Y K xL yL zL 
%      /CZ ED /CY ED /CX ED 
    } if    
    0 pas height pas sub {%
      /Z ED
      /V Z sqrt def
      0 increment 360 increment sub {%
        /U ED
% Centre de la facette
        /Ucentre U increment 2 div add def
        /Vcentre Z pas 2 div add sqrt def
% normale à la facette
        /nXfacetteParaboloid 2 Vcentre dup mul mul Ucentre cos mul radius mul def
        /nYfacetteParaboloid 2 Vcentre dup mul mul Ucentre sin mul radius mul def
        /nZfacetteParaboloid Vcentre neg radius dup mul mul def
        /NormeN {
          nXfacetteParaboloid dup mul
          nYfacetteParaboloid dup mul
          nZfacetteParaboloid dup mul
          add add sqrt} bind def
        NormeN 0 eq {/NormeN 1e-10 def} if
% test de visibilit�
       /PSfacetteParaboloid vX nXfacetteParaboloid mul
                  vY nYfacetteParaboloid mul add
                  vZ nZfacetteParaboloid mul add def
       condition {
         facetteParaboloid
         /cosV 1 xLight nXfacetteParaboloid mul
           yLight nYfacetteParaboloid mul
           zLight nZfacetteParaboloid mul
           add add
           NormeLight
           NormeN mul div sub def
         Cyan Magenta Yellow K  
         cosV mul 4 1 roll cosV mul 4 1 roll cosV dup mul mul 4 1 roll cosV dup mul mul 4 1 roll
         setcmykcolor fill
         showgrid {
           0 setgray
           facetteParaboloid
           stroke } if
       } if
     } for
    } for
} def
%
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
% u -> e_u with |e_u|=1 
/vector-unit { 1 dict begin
  dup vector-length 1 exch div 
  vector-scale
  end 
} def
%
% u v -> u+v
/vector-add { 1 dict begin
  /v exch def
  [ exch
  0 	     	% u i
  exch { 	% i u[i]
    v 		% i u[i] v
    2 index get add 	% i u[i]+v[i]
    exch 1 add	% i
  } forall
  pop
  ]
  end 
} def
%
% u v -> u-v
/vector-sub { 1 dict begin
  /v exch def
  [ exch
  0 	     	% u i
  exch {	% i u[i]
    v 		% i u[i] v
    2 index get sub 	% i u[i]+v[i]
    exch 1 add	% i
  } forall
  pop
  ]
end } def
%
% [v] c -> [c.v]
/vector-scale { 1 dict begin
  /c exch def
  [ exch
  { 		% s i u[i]
    c mul	% s i u[i] v 
  } forall
  ]
  end } def
%
%
% [u] [v] -> [u x v]
/vector-prod { %% x1 y1 z1 x2 y2 z2
6 dict begin
  aload pop 
  /zp exch def /yp exch def /xp exch def
  aload pop 
  /z exch def /y exch def /x exch def
  [ y zp mul z yp mul sub
   z xp mul x zp mul sub
   x yp mul y xp mul sub ]
end
} def
%
% [u] [v] -> u.v
/vector-mul { %% x1 y1 z1 x2 y2 z2
6 dict begin
  aload pop 
  /zp exch def /yp exch def /xp exch def
  aload pop 
  /z exch def /y exch def /x exch def
  x xp mul y yp mul add z zp mul add
end
} def
%
% [x y z ... ] -> r
% watch out for overflow
/vector-length { 1 dict begin
dup
% find maximum entry
/max 0 def
{ % max 
  abs dup max gt {
    % if abs gt max
    /max exch def
  } {
    pop
  } ifelse
} forall
max 0 ne {
  0 exch 
  {  % 0 v[i]
    max div dup mul add
  } forall
  sqrt
  max mul
} {
  pop 0
} ifelse
end } def
%
end % tx@3DPlotDict
%

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: groff.enc 0 0
%!PS-Adobe-3.0 Resource-Encoding
%
% @psencodingfile{
%   author = "Werner Lemberg, Michail Vidiassov",
%   version = "1.0",
%   date = "2006-Feb-03",
%   filename = "groff.enc",
%   license = "public domain",
%   email = "groff@gnu.org",
%   docstring = "Groff default text encoding.  Used with MetaPost."
% }

%%BeginResource: encoding groffEncoding
/groffEncoding [
% 0x00 | 0
  /asciicircum     /asciitilde        /Scaron            /Zcaron
  /scaron          /zcaron            /Ydieresis         /trademark
  /quotesingle     /Euro              /.notdef           /.notdef
  /.notdef         /.notdef           /.notdef           /.notdef
% 0x10 | 16
  /.notdef         /.notdef           /.notdef           /.notdef
  /.notdef         /.notdef           /.notdef           /.notdef
  /.notdef         /.notdef           /.notdef           /.notdef
  /.notdef         /.notdef           /.notdef           /.notdef
% 0x20 | 32
  /space           /exclam            /quotedbl          /numbersign
  /dollar          /percent           /ampersand         /quoteright
  /parenleft       /parenright        /asterisk          /plus
  /comma           /hyphen            /period            /slash
% 0x30 | 48
  /zero            /one               /two               /three
  /four            /five              /six               /seven
  /eight           /nine              /colon             /semicolon
  /less            /equal             /greater           /question
% 0x40 | 64
  /at              /A                 /B                 /C
  /D               /E                 /F                 /G
  /H               /I                 /J                 /K
  /L               /M                 /N                 /O
% 0x50 | 80
  /P               /Q                 /R                 /S
  /T               /U                 /V                 /W
  /X               /Y                 /Z                 /bracketleft
  /backslash       /bracketright      /circumflex        /underscore
% 0x60 | 96
  /quoteleft       /a                 /b                 /c
  /d               /e                 /f                 /g
  /h               /i                 /j                 /k
  /l               /m                 /n                 /o
% 0x70 | 112
  /p               /q                 /r                 /s
  /t               /u                 /v                 /w
  /x               /y                 /z                 /braceleft
  /bar             /braceright        /tilde             /.notdef
% 0x80 | 128
  /quotesinglbase  /guillemotleft     /guillemotright    /bullet
  /florin          /fraction          /perthousand       /dagger
  /daggerdbl       /endash            /emdash            /ff
  /fi              /fl                /ffi               /ffl
% 0x90 | 144
  /dotlessi        /dotlessj          /grave             /hungarumlaut
  /dotaccent       /breve             /caron             /ring
  /ogonek          /quotedblleft      /quotedblright     /oe
  /lslash          /quotedblbase      /OE                /Lslash
% 0xA0 | 160
  /.notdef         /exclamdown        /cent              /sterling
  /currency        /yen               /brokenbar         /section
  /dieresis        /copyright         /ordfeminine       /guilsinglleft
  /logicalnot      /minus             /registered        /macron
% 0xB0 | 176
  /degree          /plusminus         /twosuperior       /threesuperior
  /acute           /mu                /paragraph         /periodcentered
  /cedilla         /onesuperior       /ordmasculine      /guilsinglright
  /onequarter      /onehalf           /threequarters     /questiondown
% 0xC0 | 192
  /Agrave          /Aacute            /Acircumflex       /Atilde
  /Adieresis       /Aring             /AE                /Ccedilla
  /Egrave          /Eacute            /Ecircumflex       /Edieresis
  /Igrave          /Iacute            /Icircumflex       /Idieresis
% 0xD0 | 208
  /Eth             /Ntilde            /Ograve            /Oacute
  /Ocircumflex     /Otilde            /Odieresis         /multiply
  /Oslash          /Ugrave            /Uacute            /Ucircumflex
  /Udieresis       /Yacute            /Thorn             /germandbls
% 0xE0 | 224
  /agrave          /aacute            /acircumflex       /atilde
  /adieresis       /aring             /ae                /ccedilla
  /egrave          /eacute            /ecircumflex       /edieresis
  /igrave          /iacute            /icircumflex       /idieresis
% 0xF0 | 240
  /eth             /ntilde            /ograve            /oacute
  /ocircumflex     /otilde            /odieresis         /divide
  /oslash          /ugrave            /uacute            /ucircumflex
  /udieresis       /yacute            /thorn             /ydieresis
] def
%%EndResource

% eof

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: NimbusMonL-Regu
%!PS-AdobeFont-1.0: NimbusMonL-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Mono L Regular) readonly def
/FamilyName (Nimbus Mono L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusMonL-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-12 -237 650 811} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B89290699B50C1BF1BAEFFE
1F57BE7B5EA025241A248A6D4CFA5067A1DA6EBA4CFC940599BA3F3C934D7248
B8E4AC5816F0D2CE8B3C4193CE39D19FFFDB75254573173CB51CCD83C2F2D06B
2483CF9B07B21EC6F502F028C273887BB06DAE2AFAC10E9FD3C7CF51BCA7B277
B706E425302DC78975AC0E43B87073257A5CD7424B6865FCA89D886E8F95C4F6
D457623DBBC0D16BAFEB4C649F5D72B09B18502EEAB687E915E9B536A361B4F1
44C3CD4CC683B5F05A4ECB4823A5EB5179BB7EEE8B76C21B2491A97808F6318B
585B0BAD98F42FB4A755BCB74CD354F794C8BEA5B90FB9681BD5849D45247E39
930C882490230E1662D39CCA875BFFEAC3E79A78DE6E1298ABE9817AE98675C4
16220AD0D3A36580EE2F2A17AAA1246C416D58A4C52FBB26AAF3B6F75833AF8E
3AA996218DAFA571FBC7CAD90ECE9C883C813D8F168C5E86BBFA0F0A5CB36E35
2DE4CAA0F8D3227F72C5056BFB5BCA6BF9C60E037A0E44670A8D3CBC9A19F379
CA8DB30B711F518A8C7569211AC70C46EED2AF62A37F238BD0BD12D60332E673
C6E784B3EBA3F2E71E9993B97E8A38F85048937E958F1CD8FC6E661048546135
56B810FA1FF611B96495081C04542DF7FEF085DEC619DC8C84CC57683D212813
9D14728AA32723E1D15F2AF8F03422CFAC472B1D98FBD0E2E060DBF2CA9A25A5
B11F5A21C9DDD3781A586EEAF451935FDDDC897D2B235FC33C523F93DA3B5684
49DAB2B2402C3A49097E7598116A4D36295BE3F0F241BFDF8A78969FF3C005B6
DC5A54916ED69D1B7FB6EFB7DD6B6C1E79369FAE64074784CD74B34B93D42B17
F6059A1AFC17A51EA38AF85539833E865A51A7FB5A5279043E68FFB9229EC6DE
4ED5A8DA7D9F76AE8021045DC09C95C9AE4B4EF735A5414D985EAD8846A82AF9
1F44923F25BAC6773C8AD0A810792531D6C664F8CC76003C390E4C666D8156FA
A3FD5B5A21FB57B445CC3B9E9DB8993E4F73FF91CFE037D18E559DAB50A977CF
474EE1410D7097785D120CACB576738EB12DA190F7B750529BEE076434721451
DBA912E47FC61D09F44A31F7D88B072B10C44A60DFBC669093304B6A9793AB48
4BA68656FD37163201BA034610F9A7BBE4D94389941682F0CABD073F2376E62C
44DC287DAE5C2DBBCA73CAF31025A3FD47B8B3105C7B8DAF584E040F89694E7E
7977975282962120B9FC4056A749DDC15C7A56AC870774C97200F0601ACCC391
9419478EB7CBFE4FA27538E2780FE896E01C6B488FD152C0CFD0662D318787C1
08CF6922C96AD6D987BFCF71D9D041AFE0416F4F1A755E97F12D7026336D199E
9CA3CF34E140D7DBDF0CD2C2808BF33DBF18E81C46D517324A5E6FF1135DDEA7
7C3A81634324BF12787974F7593F2CC8CF006AEF8B1106D9E42E1BD075949F47
EF868AC4807F7AF1D8580FA64B5350CBE26C0401E33DFD17F6080B00A9B3BB54
8FD2D8337553BF31AA5F2A0A5156B81553747E436F523BE782F9D7CF003C7D49
723CB3509F29909A009B6625CD539E909156A47A1D4F89C3686AA1450F23A5EB
F94C4754EF165A16F356294AFFB344911D7ECD11AA4FF54DEF7C1093ECDC200E
0C407318D16C37BE276A19C497B4C0403D49DBB6803FD753A9E426992ED6BC8B
EFEEAD4D7F0AFC75BAB14B817CE2AD91E5FB8C735C681B61295068FDAD7F8655
6D7A49C65A2B28B030CCEB0EFB92CBC6C3ABEE1E14C643529096A2EFD737A46F
DF835FB00224251203763DC185708039F299BE6BABA56EB677FEE7BFE1DCD5BA
2764536718B57418C07E23BB2D72A807F216E2009FFE57F6CB0CB72BC26EF0EC
DD2C0BA97451C9296C2100009D54C0722BEC75EC3DD97D3D9C53571086A1EF88
110925908148F724A5D21C53DBF2EECA199594CF093FB8D49DAB28DA0EDB9463
FD1A066CBCBA4B3FCF3BC8D6A3496230AAF1232518D579ACDF043A43A294F4A7
F0FAC599672AC5FD5FB3C7F90A908D3DEB35D08E2EAF4EDE0C0C64A45E3F43EF
0E613C40802E0D32EF0DF8FE6F2D4E2880EB4A142B1051D652C1E371D57B511B
52A4DB8F69D76C3BBB44713AF222687DB9CF10CD88109B0AA050F06A64F757B5
69AED696735480B8BA5F68FED42DD602A9644C8587C6BC5C9FE406C4A4206DF7
652D22B20BC90EFF9E94E483473A359ABF0C020AA89F9E74BA70701B18D94002
8C70E43447EFC2E50AD5550235270EA6787A4E15BF4FE23DFDA51D40DD9BF5DD
D3CB175F3E1E612D87391E09FE53FAA4CD9E8C779273D47755CAB6FFF172646D
F47F999BF6FF6FAD1450F5FB9B42ACAD3609A54B8B49C81270862B8528051C67
824D505EBA49C21B1C0C5AD05C2736E54B1C37962B6AFC229BC6F0A0527C100D
EB0C7D98EB67CE9C25F62632EB30BDE3A806E10F28A51822A85F52582848C432
4241222673009938835AFBCFD91900B19867E85B3CC3AE38C42A90CFEC73FC18
1CA0042E22BFC1725BA2C696CD7D58DF4F8A5F6C606372AB44A10872CBD16F81
22A624D8D71C946740BE4BF01A7ACD72330ABC9E413D1DC2AC8DB5FB78D744C9
ABFCD095A12C405F561BD9FBC456D92083B879671A87722307DD8BE84F65F443
B78CC756130F09B9C2B636562C5C7CBD2D34994227FD7BC1FC0E142A7644F56B
21B1EFDAA5BD4F7059552906D8A023148C895EC6A8FD669D6702EA42A1BCDA40
7B3C74C6BAA665D56A05FE6A270625DF8ABA0420067817990FE7EEAC4CAD991C
4DA475602C98D1064DBF03040A309616B0A7A154D9577EB6EDFB9F157911E60B
FC3B690939F3A8A9BBEE9C86E10FCF925E732C057266164650BB229B28B16735
5EE6F84A6ED6F6C0C6A035414264822C8973EB8766D839FDFE58085B97DF00EE
C1D6C2B5A8BD9D9858193BC1069471D0CA4DC7AA32B5B6EE7AF1B21C91041D82
8C72E2878F2F679C3A002A563D158B30253C166B90C47B6B6ED24B0288F8BAF4
C04BA55DB6D86E691B2CA7B82F4ED2802349FAAB0C1E630615DF446C732E1914
27FC63A7A675AE7AAC070D489EEEE1EE3B133ED53C51EAB75CF06C2B39A08FA8
6D87D20D1F0B525DB06AC0C91AA11485015CC8B64370AE846216191026A9BE5C
6B9AA0D1E9EE8B39ACA1871159093178D4E8ED4F80F4AC37E8983FF25130188A
C7F3F66C8AE30B2A8BB96416FDFF84817958000F3C95A9938EF236F4147C250F
6D7F8459AC97D82B1BB0AA8636673A031C4EB0CBCA8FE2C5FA3DA9FAC142F34E
6F7F433285B53255A22EA2E4621836C0823B7C40BE0B01A33DE66E4A145A65DB
755677EDBDA91A2C4536F31F7CF7D9EABCB9960BD4C526766BCE797E071A3A11
38EA6A07CE358D979C7BCF0215BCA4082250452F80C93A84675B71AF94DE6734
578EB4A5B6278F07939498C1DCBD58F8C08E9425D1377529CF10005EEF6EE7DE
F4CC7BAD936B6690D703DE63E3749D84267FCCA50FF886822E597FC6F6EFAB54
80535ECC2E3EFAD46CF7ABEC3DCA5F569DAD35D02661371C060C93832786E828
B40DA49914AD3DE63CB597A3481F644F2860E6F084B94BECE38ED18213D39824
FBB9960F14BB19B2CE1D8231393D0F2B15905C0CF9A80CA596F4BEFE0A21AD2F
3B06405ABC1B2F8B457D429E01DCFBA28B4DD4B2F293D154DDD00FA8BEA6A988
21199BD912FFB741EEB0E06C040E9B1B54BEADBD633737BC1871607DB0267EF3
C3D113DF45488C62D0F2585855BBE79443A489FF504A744DB2C24EA2D2D80BAB
E40FEDCAF3E4DB41F051F1DD765A0A8592C49F5A97EF2EC09D42FD75CE50678D
9F9903284508FAB202177A3A1D72FE49202C843F2D8B66E59BE53EDAB3DA137D
59CC6EFA0F579F8281254B09ED15BFCB1DC55382255E271D25341EB5D5944D29
48011A3C3271F01ADF07174DAFCB0F18A3BAEAC2BF412452A1F976B7A481011C
7FD0CFD23B1E1537EEE6604F8AC6DB3F3E54B5DE3D9670D3318CD8985AFB18CC
674166455D888CA8A3B820DB6BE101296BDF05D292DF7E84591A71CEFADC7BFE
832A0B2448297AC5F4F735D757C9F988B62D82E068EDD4C4AB353C247827B40D
C36A2C3ABA0BD4198EB619BA08259D3D1E99C85BE6F23132597568B3E55D035F
3590EAD0E3784F6F23C5C92A2FF167998EDDA54CEA8BEDA86EB7B7D792C7F524
17674B2C91A291CF12A51CB4914D94599DB4279EF1E740B263D9A0C8802A9157
AF1175AB47229D0F348EA969DF366D3E1141C897A434CDF2A2ACCAE877C3B56C
B5A29F919EDF2C7AF3433139132A62240BB9C4839AE787FD25487D6E75872D8D
0E5BBB31FA3647D2B0AA7E01243B0C396418447226075F55E9E9D5120CC8C8F9
81E145ADFA910C9F03977D8452CD70A67A06DC1EB3F2B3C58FBD1B8C37098334
DA8DEF993163433A376BF9DE637A5B961EFB3A8DCDC8E1A2F6AAC3F6FD242C25
F6952AC55C24ED123A69EDD233E442E4A7B0DAE50CAD34EE9951CFBB3E23E96C
758979570E4EC81674B196E901B0EEDEC46E94C594D4966CC0B9417F7374DE7D
C83F2B3D66FAC9E510D5EAA04E3A2FB184846B76AB69AC3CF11F513BEF0C35FD
1780834FA57C049859928A3DFC72752ACAD074AA416C667FCD1ECBB6E3EDAA05
4E5916B4684BA243F56FD007773CA35731C39721EA5C3464B0245E02013E1666
DCE85044D5A1925E6C7EAC6B9A8134C4E8F4969C9268F7A2C3061CE2F7766500
F5C0E809C17938DFC080422D3A98CB5674FDFEC1C5334E8BD682234879B240C9
86B2994201C878C8267C6EF15648339BA8ADA6096582C1A91F574AF050891D36
43FBF1C49828A834755A98838D8959EBE345EFA7A751C96B0700773E8536527C
34EDD5B21E328A19BBF306E2606C8892B9AE0AE8B1F6703464043980C187EBE2
CA566458459B9FAA8AB24C7A116BD7C588A6234FE178628E7D1D060322B22677
E6BFAD42B0C93F6454969964D6C7FAADB2FC59777A23370631951C63F5EE5882
F7C39D2D1A0AE53506F8B3D51A8E2F6DF950C5DE4148180360AC11C8B6EDD315
FC808B09D170C3862189D3394C5CC59C494D3267703850158FCDABCFB7D3B9B4
64579AB84853192DF8A10FAAE04DEC9B0DA2AA7E52915D01CAAE8A12E63A3B03
AF164EC4833E4448820E126A8AEEF67F4F087AC760385B2BD29DB3997620BB2E
9C742F9DE1F570C8EDF0185B124D8B19AAC0033BD0500CA9D3D4C654FFD7928C
8F6D24B3BA48E2F307360D86A6335F4E0C165445F254B509931C3C69EDED0D37
4D0EE084E363C8B70D005A132E9414A86AC30CD79118685CAE901143DBD89323
986BD69FD39E64A06D3687AF2495402298DC4DEA17EE5841B4CACE3C466208F0
92F00EDF0DFC887D850F2AA6A08CBC39F48E699F7437339478CEE4087309FC4C
53590512295D833B1478F8554CC72452E8A6B93557DB7995DDF16B0AD6196AF5
D7AE1D0B4A903A6D25AFBB2445723D58924BAA230DC32CF0EAFE9AD88A24903C
429D12FBA5B84518FCD8802EBC2E490CB537D7C9DA4E28EACFCF6429E53EF7A1
577A32FC7412034987DF856B9590235EEAA432A64804AA54296F876427E54598
2AE56A3FFF8497157BB17CD0EF6C9B48CDE64F2789F8A31ADA67B080B75BCE74
E4F528DAA9AE70164FCE4D3CDE749F84F81767ADCC9636B47097EADC109EF9F5
EEA0A6A7D080E420E35130D22CB692311A0BE5A1BBB2ADC017D0B20B194D7361
0CDE7261FEF99046265BE8E082EAC0069226B5E104F6D5B1B4E182B91AFA3429
C32375C0D8B52A62E9F3775CAEDADA05ED75A4D20EB11412D1012AA475556665
128B99C201E6FA07658436359C2461BEA57F9CC512BDC51EF25496B7DDFA66B0
01427BF5BE8D3F1C7C052B488381C7C822762EB91FF0437ABABA9A0D0316F882
45A78056FBBFA94FC29C8C10D9D6717D8203BD4ED1BD7AAFCF78B5AD01250047
A724AF9C66AE82CB864AB947E3582308319FF3B9EE2399D39EF436CBA30F8EB1
A6E543782DABE3FF85447DEBD80194D3526B2F54E7891A5195138695EED597E9
5BA7FF5F8BF26006164709596C0E78321C9CB5060802B0E83BC884BDAD2E7864
F2E521ADC7C069C46B465D19B5CEA62AA27DA04D2DC9F3EB1838B3E3E3709779
9835B19D6CEC3A003AD97E7699B0D9D02F1B51F3C6DF6F45C355B8679004B35D
754A18A615A3D23ACD78645D8D4DA865BC8048C20DCB99FD2BAE685387799105
9EA431791563D184C4139B0111BF88E55C4E52F038F5EB123B00B89E4132E2BF
7FE56CF6503EAC88E8B4F4DCE65151908B857A4EF7605B82852DF995296C3156
B4B5722E1A76B6684B67355C6EB30D38D487488A571F1CF7A9B70649864B112A
764FB4B7694BE5BA08D6CA0E890CF427C2BFEAEB173B2F166FDA22E38A447F74
08BD9DC974B524363E09C01DC47D2CA3D7E500C9BE47338665F1538F2D831C3D
57710E22F1F98824AFF33B68549CE34ADDF25C4CCEF12912B16B203007F4E5A5
6534D8FF497D54824EF46DE8C9E650DB86749EE832B7C325B0E0DC02BBBC83B4
CF384E996D072E87FBEF1A4EF1FE73D48B3ED3EE34967E7E67C90E0CCB248245
03570117323252722787576F450C869BD1A8259D0976FBAA6F873209E8915224
03F4EA4E1ECDE1EA43EEDB955513F42EDDCF39AE522A1496378C429CB0DD0279
D0FC834B3DA7B3B8C176ABD5244263A99DA07B183366F8C35A210B248F0BD387
E54F1BD1B1ED071B9F70A0BD023E32A55F14E55A2D5CEE2F43EAEDE8E4AF40F7
3F7C7BAED2D2F3FFA02D3F4C69964F7BC6D8F52122B8BBB73BDC31C477A7F1FC
73B49906DFB188C49D6187C823F533087883A087234A8A27F23E71AA93437A95
22A015D41C58DCE0075458FE5CE174118E523CDB52429A85CD87315FB8A92800
C51F9FC7B77051D80B0E19E51402C9EE862FB1D5B0EFB46C67201AC4BF8FDCBD
0491E1E6E683D2545B0E605A30D8E3A81658BFBC6022A68FD6EC424403542061
D8D374C63378573CA78C558B1FE34A7118DB776C08AA9FE34FE4FAB54440AC89
B10C3D923689F96FA3FA862AB1894990F06C42BCA13C08A89E62D68A8348389D
3052344CF6FC14B920176667500E58785189CE8472D16C4B5D2DAA979CA0A168
B951ACB031C16076ACF4577766F2F9E0CEE7389AB33B0A9680247EA9732EC178
1FD2EA170959DBD8AC8F99E1B578C4992EA47CC17C96966089D62EC74FDFC7CA
0FE1804669F676335E0758C765DC078A77FF0353B07F96CD78F8D6EF0C8CD4A0
1F63B6B2C6B6FCB93802D72D75FDCBE531471F7796B3FF181058A150C2F26653
C32293775E6E1A76AAA10879A94A8D549FEE816C4E0310DF2D64F17F2503319E
7EFAF339F1F5FD42A2D8F6F358A5EB238ABF9859555A41FA4A0C8ABE2059516D
D7D4036CAFBAAD8C23ADECFA9AD03420AE2DDC41E023D253CA80D42F4079B5FB
0D28629C3EA72E3712BC0BF22B54831E70C375D12DE9704D4DEE308AC29CAECC
F909B89F19EDBDA44E136B80E94818862FB66CBB41BEE8CABDCD44E57B69CB12
C048AD91BB7506102A4A8906C9DC97F8ADA2D7B95DBF387D5465D2518DCEAB49
D791DFBEBCA0726DB5E056F1F3B6AC679C2C16BC82545A7C86B2EA4D0AAAC6F8
5C6906234CDA18FF18C69FB1928D4BB80824762D66942399270BC54B074A984A
18987177DF30862E92B0C6AC37EA3B5B354EAFC9DEDEE0B6A107FDEE15F82D35
6E7FDF06636E837E10CBF596AD8A40924A08AECFC43AD29D20A1824E71D4F251
D2AC920D1350FF5921DD3CD96270E194E8BBA5826C9341856DFB7F5E59812D03
D5DC52C45C2F02F64929180CE372AF5C41AACB3EB96E04E6EDF433870C0523C3
1CC5AE2C6ECF3E17DEA772B1645C193A30A85C341BF8EA532AA886EC057FE17D
A22089D8C8C83C552D45A8992E37497A0F98FB65A3E15A580584441A471E7D56
62D38A92BBB8756A35066D506FDB2B07C859E7A61FF79B7DCFE5992EFB440194
46D21C85FBDAFACF0769E38D8D2C243628DF8BA7F5AC5C947C411E64B80A77CC
87CD5627E970BD7263B6E0A53512832C42CA4D89E4D7CF476183DD877EBA4ACF
C6CA13330DE20FF572252E197B1937078314CC815FC2A9C04ACA10EBAF5413F7
5BF77C41C9D7F20746076248A8A338C4F7B3F6AF906CB8FDB95F16328FC6FC05
6B85F24CE5F0856A8ECFBBCD5169855F2E3D089EDCCA571951FB00BA852270DD
4C257B717B23D5E9A0D9D41C51660B59567F92FA38178F1B5AF5E6173D27CD2D
9945AF3ABDEF736C33750555D792E9182357FFAE9854BF2EEE7AF32A62E200E2
00AFFF4D9B7817C06B5C83AF6A5B575CB0AFF4C4B9DD70AF2AD39C1738304CE8
625BD23097502678C0F28450B65F657B92FE7E8A637896CBE12FB73BDB8F7FDB
820857F4FCD87E82586B4B6405236DAB84C829D43F9834DF881BD744548D096A
B30FDB15807429EC3B54E7DDC9023AB440DECED4991EC791D1C95D53EB4A2EC1
27FCD67B44C7B41D8D1A84EC04FD5333ADAEB2C15F80CB3ABAD3ACE45E4F5015
C91F3CD5A38350AFE3009F4B5B5B6DC573AB127AA4A1771A92EF38914F6E3DE9
844AFF300699B030DB9A6A39DB65E5CA049592FD36A756B45C68A9A7647E56D3
CF5A90F0C147AB71439D9CA3705A55B0485E05E05162E06173B56BD2EDE6368C
685EDAAC4DD9413E8894BE1F1BA86CD1E4D06274FB26D89BF06F56B2163E1CBB
EE5D75EEFF0FFF5DE2EAFD05924439C19947111269986FE3FC4B272462C3C49E
C48CE72E37EF6CFFA363D804FAA4DC1AE2281199E3AFA59F01F322718D86F96C
5DDF5325EAB3710BB5A8082C52539A44C87C8B70D9489D653D960F7240FA4797
942F9227920C569B212E8AA342872DA9A9EA07F3C9DC6131816B7088D0155E03
9CA055F76D3CC191C841FC554EA7826F00FEBD2885D0E6D640285D602BF604EC
294BA1A2A516BD769E79C1608660ADB1585D7533EB28EFFEB7BD63EE65C514E7
712C51407DF6237EF0F0B532BF5C3CAF9D51C26C74FAF6664F70AB792CA6508B
4089179F010CEADBF8736010C5555039921C23485FFA564C93AC6FC379585CD7
C1CA36F0ABDC921497DB924BBD653D40C47BCC53851A0B24AAC2B7F8E68773
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMTI9
%!PS-AdobeFont-1.0: CMTI9 003.002
%%Title: CMTI9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTI9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTI9 known{/CMTI9 findfont dup/UniqueID known{dup
/UniqueID get 5000827 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTI9 def
/FontBBox {-35 -250 1148 750 }readonly def
/UniqueID 5000827 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTI9.) readonly def
/FullName (CMTI9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 69 /E put
dup 77 /M put
dup 83 /S put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1B57C50F9043B95BDF77C
1450E422362CCD41FB4AF30F73B66A85AC8DDEAFA65B4FCF0033D034E111830C
ACB981C2AC41AC32863D02E6D9CA81F8D407DE4AB20B4CB6418B8067D694DA02
6E76FF50A7197281B7E8E700C4A8824220374DE1CA077D50A8B751391E35FAAE
E0AB0604164A16D476EDD5E33B08639DCA14796F27A20EAA52D0BD8B61065AAD
083E4AAF626C2575C56F87AAC636FDC2E5ABF623F2D916D3CF5CE8703D297151
0A664F40B144A2F3900D053B709210AB8678EF35301AEF3696CF17A5B41B588F
539243F32FD78B62A0D80B17F1028CBD7234BA7513A4809B584092B95583CF1B
664929C33846E8F59A43220F79D8BE0DA051D17D09C1E9DBA6C60BCF99BAE773
3E9439791901546793B3CDF014E6AD9AA169483DB87A6CE4104A8B25AC117504
8D6DF6052EF491D510F67D730CA315915E77290A40D3F8EB8F004114BB64C5EE
9F1E18A47A785A04D4EE3FCEA794EB3438CBCAE35242782053277EFD6B67F6AF
97D892DA958EDBFAFDDEBEAC4451EF8E00D6D0E7E60C112F74999096428AFC5F
507D0DEAC778A81F8F47FBB1FD8C22FD22DF2AD0C9BDEFF2633F180E0186A9AB
B0680E661CF083B8DC5635D7DBD69A17E6BF1E86F7C19FF7E48EAE8D35F0B698
F990DC16CAE9D6E9D1C323FDD183096BE0EF3BCE379CE5E5CB0F58E4516C01B1
55004C20A6F2BF430D59368AD4F6D398B9A27B89DBCF70BB8A36AA24496CA621
0D28748646257C95B113209FA00B4525C582A8B223C64B658DA11CA08CB64F12
8BF230A57B4DC2FD0AA8C486D7B151C9713B12ABDF174ABDF52EC8034B0858CC
6D389B503A320AE42AF3BBE33135032FE83E6B7AE0D713BA6A56230A50C22FB8
597A5F21CDF98D70423E8AF8E3CBCE4756DEB5695D3A5E7C47E6EE62F4D06BC6
C9978DEFFF773BA6CB9B92D2B2638FA3A1D92806EAF9A9A9D6DE09D81FBD8622
AA7AE1FE01A1390427D270287D4A436A544D4F568640100F94518C113CCAA34B
28791F62F1C5B6207165A847AE2A9F1E3AF8B96203DDAEC2AF8F3450CA2FFB5D
E55DA538F39D6A5F13963857E2CE6D75E510E8287D4DDFE5FF5CDCC0FF51E346
B8717B28181DC56315751FC861DE7CAFECE8E350CECE6B324879ABC8D8206ED7
51D1D299BACD2F7F6EC2F8D3836EED6CCF09C205A7A76B82FE1AAFE0833C7693
FC7E22D373C10C34BC0B57382312646763F593AA91D90F6CBDB096CAF9F52C12
CB6E75237566C5D528DB58B92D0C7E16D6BB2D097C1FE565A07076209AC4DEE2
BB6147D06D65F403B6919D65D1C3D9D0FFFC0CEA7FE0EE002AA0EFBFC120A724
CCE85B3419C44ED7216E4C714FC85F72CA933D3707D2EDC6AC02335D4770B48E
0B64716C0E1B9DC8A4DA1BCF7B47FE7B37F9630E55E9868AD41AC770C5036E78
4D8B24AF41E90CE8358F97CCC43295371B73EF7E86BD1647EAB2E493EE912F74
EBDBB5CAC34EC1044114FDFEEE2FA8E3574F4D1E3EFB38C3BCDC341A0E53044C
0A19D619CB789E8C10100E413B8057373E6D77709B8019841DF04C8B27700FA8
B21E2955C9ADD9CBCECB52727BFF0E48029D46C695028CB3A7EA779EA69C8763
2BA38F274B4217F4D5C942042ABC9E4C1627D63C0BA9B1E03E9E3C7C8CB2812F
503564C0C02A6F2041D4CD59BFD6E465CD060D655C38FC5499F06E0323A4F359
37061EA5248B3AD809D16446E67B0267A3A929FBEB0A93DFEFEA3E8D5B7C564B
95AA458F532CBA8770DD90AE6D3A0BED3BA140A4AB6261CE41967038861D947F
20BCD353B32618537EACA0F1CA5C2708D67D46B6F9B6D4F12081485AF0699628
05AE00F008AA816DB07710E06AE2DBFA830C34851E5C63A7E9E02404ADF1DCA7
2185507F0CEAF858389E4F8DC3A1283FBEC373FB4A1720BA71F993D432425C2E
D0FB5A6FBC1E1904B959838FCCD085AF1778A5E3EF29166C6660B797C8ADAFF7
1EEDE9BD371E11CEE77D70008706E0BF2B6DA250F9C6A92BF91ADB7D32CA17D9
776CE695179FC5D1686E86E2B4C3E34D2741CDA86C0F343E7CDD52AD3059A8C8
134C7DAE20076E5EE5990CC56EF8AF66131243212C40480BBFDEA97FE0558ED5
7AECD669BA1AD9A50F1C0B21D75AD5A11FF9F577153C12F9789EDDF81FB683B1
F66244F6FB2DC1FF2B3BC8CDC6990E6C4CB835E552E2AC9A7540DDCFAD1F931C
44815C59118C7EB3C4CED4DE0D45C311D69576D5E6DAE9DF8265EC6E566DDBA7
22655E765C074082F346AB496F08F4E598D6D35472629273128157FA8608DD96
0CC4A3B97B430B1DF8EA4851CD54E742AC0170215F86D4612129F2CC3874D047
F485BE77D2FF57B8899E1E667D41E519948F0E60C5247F5483D20CB108BDDDA4
27F15C14A35FDC3CEA924E051D711D8D4EE36E7735E6DB443DBBD000A4CE0635
2727EF9C1AFC95E876A46FE001EFF903D64A2C1F00D734D32FF4A6C8E3956DF5
5E676815AA165DAA9E0AF2D56EFFF32BEC9897F45E40909F2F39BAF85A354420
5E6CBBC6626B98FF1A9BCC1F76D9AB0348C8E7540E42EEF3F3351006CDBFEB01
0FED065EBE147B5E36BB659D6AA429E6BF8121F147554BC0959E6F45C6990AE4
66A74CEBDEDD67A559C3E4937F50D3B51E7DACCA53A2DB98306E7AA86D21977A
A4CB7592590C94C8479530239945471408FA1F774CAD14F58AFFB59D8CE596B0
8DDC2E8CEAC94156D5FC69D70F2F779774503F168C48594C63F3180E8C93F423
7F1F1D44CCC5E5F766D7BECC470F880611C545FB3F4C0E171A30516DBD6477C6
2C478B4E3C2AC2241C68124C4570D476B1A18E7D093C97D16999E06CC1C8C485
15AFA4836718A40733ED145DFA4B80D3FC3AA074665316786E65706DA958BB71
67A4EE35FA629FE738CEC51D4F51431BCF8B14804F2C83453566253847077644
257AFB4D3D13CE77C9CD592F6C913F5AA3064E88779966EDCA52B2D9469FE48A
C8F6E5036AC9B0671508DA664E3F24BCE551D22434DBDF58196254D7D2C7C308
1A6822F2F21BDAE029F7F776C1FA7BA9CD94CA7D919B4E7BCB9B885FD767CD9E
96CC1604B95F0A8715837D7C27BBA08663FBC0DA33C2962577451DB48A4B76F4
8A4B66E7D2A2E465789D1E6B6D5F20413D84A47E5788CFA97BE43ED05FA176B1
F535C65F8FE60C72BE326737154602688AB71A8F12622648031414AB80C46289
1EAE582B933C87122DBDF3E3F1C4F4F5175E88AD0EC90B33CFC13DA07CBE8C49
EB1E86E0DCA68AF0BE3814595A4B2A4113FC8654A032BF00DAE293B4F2CCECC6
C0E804B658720C67DC156B4785D9A15274F2BF38748FAC7936275CDF42915CBD
FB21A739B80CE81B3897539492F113D589DA8A6C7B38621C8354625DC8B40FC0
7CFF21FD2D09E41AC9E99CB18FB9C92BB735C16FDEE7A8BB75A2258E76195AD2
1A88B0D64C130BE88CB2FEE3C723A46516DCE8DC6692EE27C6D8469FF511B7EA
F1B7EBA054708112981C79CFDCDD40BC55A1778FB3FDFC0AAA7EDC425FC2938D
694802705011B724423608C7BC1E803D344C9B5BDE13005D06C3F27DE0371EA4
0F836D5C0D6C0BE2D27700B08ABD09783D329EDD00415387C97C04F89607DCAB
62463E6A37E36C3A1CD92158353D45B443428177D1AE501F1CC0B50C100166B2
98C4824CAD58B3A396D097E2850B39130E743CF3CF59259A174586B9361D8F23
6DFDDAAC5B40CBA0495A3971399A95BAAC66CE5B472669E2C31ED0F2BE60E787
503EB379D332055EBF839B25802E076B1BA8DE3EC59782335AC80D1CB950948A
5EEA00C5F5829EB5293E05B982032207D41DDA035B3CAF26802A61751B17D0E5
170C99F6A0EE0EABB1576814EC3B4317A89C7F11022A0695FA3C2B2B80A2F73F
6A3FBD3A2B8C4820E7705CCEE368CE580434F3EBD2E9DBC162CB482278531546
74355C299E321C47D1C4C6D48C5100A4B8B2A16DD422AC3365B37A79D936FB24
786E9AD00E8E2666438B096BEF243BEC5C1AE35A9612D08CF7776E458265FC58
0D67659A4D5AB175ADB10F662536C8A9447DCF5173E620320A43B2AA5D5B5C34
78265F88656D2125C6E694AE4750193B05ED2A6DB4CD5A81E48B9912E25710DF
C66A0FCB7920479DBBF739D4BC746BB03C2F1FF89288DD807E805957EFB929CB
248F64A431C995F0300C0F836EBE1678C28DEA1F45034A4057520D17A25180A8
693BB0FE3FE6308A332A7E54A674B497471E2D13756CB0B991C4A4F9F4851A9C
49DDFB13416722223559BF7BBE8F1499BC93DC8BAC757E42E25369B182811ABC
FE4F1CBA5E5BC15ACB6344EBC575C2F443A508A46ADDEBF7C34D88702FE46A8E
D96C91AEA3EB989909A2B22E86FA80721E68A1385239B4883DC065A0C08ECCB3
693B0D13CA411A78C13BEE866D8AF8A634B81283B77FF62EEF25C5D48CCB10DB
BFA10E3066C116662395A6AF0B71D23C4047EE0352F4E02CCF28F959FD4394EF
43F0761B73B8D726B69D5111CF94B720D461E0AE42C974F2EDA6F7883BCC35FD
093304225534D8043D934772B0FEEE6427D0481A6CD8BD614669B875E1DCC6E8
EC423D9A0DA290D8571E97CB6CAEF274DF823767AF4E0576588CF2ADC239FDC6
437910EC0C2F01B4DC773E73C7FDE6E37D3E784E0E5B655600FBF3FBCC1FDCB4
CF356017BE2A663DD7983A46482A4C1B42A067381D58AB1B332CAB8E5C83FC78
1F0D9DBACEAAD372991BE3074D9911CBAA95E776008644F203D6B2EEAAFCDC57
C53DE48816934BF9D70F90F4186F6268522D260512492305533C1B0FB23D4726
6ACE20B872517CA01EF5EE275CCDC3BFE45C19FF225550E4E73B15E9BEE3CF21
1594CC1773CDAF0C659F3EDC2EA43C25D00AA68DA8D39DC46A1676099496DFD7
1155BCBC439742A80EC917BDB6E7593639CF1217C0265BA3183209DDDAF50E71
FA061C8978583D93EBD97C70A890230AA7123947B197E9536F0DA91373DECFD9
BD4E1C12B086B12077EBA19BA50B786AAE9244C60020F406AFF705CF029B43E8
D70CDD5DC7A61A75858E03657264392D9CAEA8C515DD98C2CB9E84BDBC6A62D2
36CA59D774BD889D64E6C9A0E043D04744D3D807D3A1B1B25266F0D9953266DC
662424A93FFEF40F47097F48D1904A1CC00030155AA3D9B07D281E055E6D033D
745856D9465D7349797A07396AE9026EE96DB8BAAA081D64EE4D86ADD8C4D1C1
CE8EDA25CF3242047E18E4C9870320052ADF3EA543D32E6EDC93264DCC2E5A1F
458369CC5CD73DDE165D5BF594C81FC992F35DF29A57464A0C6D72D5E7A92535
3CA14943640A67B23935409206FAAA6A11F598BE24373E7BF54A2B3C34551080
1B4DB4E3135AD0B61CB1C12A5154013E11B33393A1C16D74B16BB4D8E7B893FA
E6AA0C843BA5DC50FBE07407D8B16ED2963E36D021EB433609053BD19ACA31AC
53B1360A48F71D972E669D5357C22A33A7211F3380DF41069AFC7ABCB3300D72
FA1E9D6F2291E147988003554D2DCE165B5F316A390500D0273E83453381B13A
95D6E6F3300F36155573B8FB32A1691F6A9AAFC39541BAE0A4153C9F6B181B89
43D246EFEB5A2B5F66FC60A44E2E1A6D972C53B1E930CAA18A5B58820D8D2EF6
C1E798E9B744A31FB980C77D36728AEE6E682EA668F32E0C3EC70BCADC32A8D9
A2597F1A4AB9565FEE420056E8A8B0004C006AD981E94A84CB30ED6FC9642D65
0FADC7C9950BD962E0D86543EED6DE476E29A525183E52A8C97769E2FBC4149C
53A13C54341A9F554F0178211FA1E4731BFB84C11E6B776335F1F42864C70E9F
4C3F71F7DED7FB704A05FAEF7A2186B2C9C2AE9A3BEA55EC7F3334699BCD3D70
A675D3D1EBD9958BFE62267CAC06FA97421994C17D60879D8B847B39D5379B2C
079AD7BDB6FDDC56106127147297932F788184B0BBBEA5657DC92E4D6B097F30
97149A14677113EC8929C69FC93CCE56C068C015F46029110C7DB91DFE31E06C
CBB475E860D068ED6BE3B15B5C6F6F0D1D5FE6E7E4E47392C46FAA9CE932F928
FF628944653962EBFE4EE5AF7522BACB33ED77387B0247C146B81F7A860B84D0
D372252C89556DABA34913010DBA3576A6E13E3A184CD18D53FC758DDA762338
AF195F1F261D5F10AE0E733ECB98BA2F81F7B456A75D862C69D623CBDC50BE99
E3D1ED35ED4AEBD6CE39723F459AD508863C020FEE61980A17D41BBE0A54E120
1EB69BE8C1198663596A3678F11BB8F28D7BF5F713AAF61866B6C172EAD9D25F
02289C719F2C121A09DE6D8E47001FA41002DE821E739567F5D45F5C65D2A0D2
65D011472F8AA705C7BC3E0580BF4E2E007EA98AEAF9AFD2F25FB20B08EE26E2
E8F94A39F6240409F44E85FFAC9A46A2EA23A5A5F8BB0DBE50A7A1A9A6034D32
B777C38B88F25D392E59AFEC304C13CB1407C70B7DEC884B5B7AC97440CC198A
A949ABBCBABD1442C67E1828CE582D77F616A49BA12BD006CD541F707ED05737
FEDED2D912D3C1083AA726C21C396EC6A36EB6B9219F2BE7EF62D09E487B3FD0
9748121C531F7CD54DD98622C4C945E5B04ED2FD66D20873BB42C5391627B074
7DF90B81ECC6AA0743F25247978CC09C28C4F878E29A5070E4023BCE95FE0ACC
CC01D0EE219FA8344E8F6D7D43475678DEC28FCA370A417D2192DD293B13E507
F20AEEC2B825BD73A6678698858CC4B3DFA40DC96536735CFBBC2CEB5CA6A396
C8D387BCB4D6031DD45563921409C33F3BFFE220D7A255AD2B422AC9DDFE7A13
AFFAE4D39E8F285A4877D1FD83FF8BB9BAAD29C4C4DC7CEEB139D4CC253859B7
24221EBA02F074C94543E32176588F50D0ABB9B0AB449E21E01377E96A487B39
E45385A6A12DE9067750598BD5A12DEE276612012DC4226B14B0B289C9C8EB08
49B5FBCA42865EE9ADECA117AF8B2BE60A2F825F51B3FF32DE769AF8A9F0708D
7BA0C614E8B1CAFB429B6407B3BDB582FC49D3794A0BA6932824A1FE44429731
5F1C8D2DEE93EFEE11C29B1C020196EEC515336D8FD1FBD73FA4F2B454066970
1657B1EF286BB2DE8E5ACBBF40C992F9A22255B3D842E68346CF43C568E1DC7E
389CB45E387321424D7950AD8834BA43A128309ACFB55FA8D30C0A4E13A06862
0BA93765AD3744B7F0502EFE5D457D7CA7E988968EF34E2AEF0D1C5C1252BA48
E4AFEBD828CD1DCB34738801458A8E4F9970DFDDF7973961E756ED7DAD161736
0F774F441671DB46F07E28F57A1EC5FAFA529685CC5D419FA0ADDF1030B3F21F
AF395EF405CFC8FDD30B79B80CFC1708602680E9985C38474971F5A24FD0C415
CAF1F98938F27BB1C805F0617DFB86783BE6F3AE6265DE523D2781E94B042D16
36DCBA12FAC0BA0B2CAB48F31FE24BCC5B032D3987DE21BE7E191D578E9E5644
81BC38C95513F04C8F1BB7DD82DA3909DC75CD509C0A5EF8226E0EAC4BAD4D64
FD2D6BD98699B1B147B03FB3235F4F16F367D9EF10EEEF02093C40B9C6905716
E43CBE3B6814EC7DC6358B72A2DBDB3A22F65E1B9CDDD4A639ED9FF36E021E07
F5C45A74E31E755CD1F75CD2432D2E369537D3D738D643624E43CB52A1675A2A
2501397B11A902B26BFA87E328EF3578521D4EE45BF11C9E7E56C076EC42F6A6
2EA65F60BB702FC122804D410420CB4A1195C76A6AD7E44D4E0B3A1A6C53FC6B
15B9FD882B347D47083C93E891FFE9A9FBA9F331A24401ADA372D1DF54999C22
8E7E7F3F8DCB07512ECB44D71092A3CFC7C91EA6FD0B83E9091476F178B0912B
E065E87305F8C81EBF0ADEA9D19360DEA9297C2EBDFF02BC92B7230769DF58F2
254E3B19C1CE2AC3E17E2DA671A7FA88A19938A72A95AD88922B141A5BCFA898
7CFD39CA40BE4E783D0FF5B28F89F2AF17EBB3993B5FAD8315779A3B99F178B7
FE19C5ADFC99F33D9F5E3084787308269D476B42C57BADB61B4801B413FE611B
A2A2DC9D43FBD5D530F666CBBC5F0E500666E874B31C31E23F0309C5D17C6649
9FA67A729168EC1A93397BB304A4BB7E845F76765516CD4342B75925A975E812
5CAEEB26B16A7EF94A14001E666394DB10336DEA5A0CA8DFEA463A8BE92A0870
9096536D2CD6C435FB43F70A8718374952FF45F9B1B9FBD6A08E4051693D9333
646AC3FBA5C06F4AF013AC19A24E2F07B2B51251B448E71953B5E5384F7B787D
92C09DFA3E7DAAE5E3EF6388284B6A322EF3C309B525CC3E237A761EF74A35E6
37AFE9FE29A87C2D3E974D2A607CA70C3900359010AD5247F75C53F63C852D75
B2FFFE7D84EFDF3FF4E49EC6B70D1D3ED3359FF87AB1A68CDA04AED3BBBBAAA8
426A09773BFAA38F718B161657214EFA899277D966008605D5FEBFDBA1B4C096
6B927A1371CF0C345A25CF7BBE4BC2C3059B52E57376C61D0A3D04EF48FED4D2
EE891EE3BB18736D5327410B09F5F25601E573D0517C04FBB3484ABCBF23EF36
61161A239B2E5019C05419D83CDA99EDAA0D93EC65A4BFB69ECA6E0AD6E4EF48
4F76771BDA2637CD0E990C3A4C264FA19EF3966226E73C5F1C86416FB383F523
76F30F3A51640CE8F0B4B686581AFA4EC15721FDC8D4DD740744CFAB5B95A433
408A0BC28D10684B41854B5263FA20CE4C6FBA7F378E2E66B63A105B6F6C4093
789029514B58BF370396F4A1066A3F5B9B68EA6A173B2C8F984E5FB6318FDBB5
54C342F72144992462EB195E5FB218CCB9C90952EF91F8FD1EE7B0B8B356CEB4
0DB0259218EBDC49607A6F81B2200BC675C840B60B487AA9A778FCD2353A610F
7CE95DD3BF87779268EA758FE00BDD5A5E362479D4505CE2A2855F17FD4B2D9D
C03E6120850D3A7B4935CA52B3AD7B61EFAB062B8C093091B61FBFFA4803A461
4064704E372FE794A9EA8481B224C13CB2EF6050F31367EA8FF566533564FB44
CF0F1CD6375EBB1E0A056732324F70C6A3D486D1FADFF6945834A2AFE5301231
194E661D1DA6F94628174B86B3C4D111890DA3721EEE5097051C637CD103A81A
726C77C6B23BD7F6445136BBCC26328B542E4A8F528143B3B6792ABB1D2DEA48
FC528E4C30A3289E3220FC1C35AA4FF54DE070081A5EA40EE89E42CA503E52D7
A2FCF968BF1AF79C68EB8E84EA00CB38875A262E149EF29EADD7E01866594CAD
F1818F32BEE7795CCEA2A59A1117
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR5
%!PS-AdobeFont-1.0: CMR5 003.002
%%Title: CMR5
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR5.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR5 known{/CMR5 findfont dup/UniqueID known{dup
/UniqueID get 5000788 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR5 def
/FontBBox {-10 -250 1304 750 }readonly def
/UniqueID 5000788 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR5.) readonly def
/FullName (CMR5) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DAE26BF1F487876AD1
16184ABCA7446A2352AB37C36E9C9BB67CEE105C612D36566FB459D6ACFB1DC3
7A59448A06EBA21F8824266BDD0ACF9E356251A897A920C39F1AB236EE06C039
8C4C0AE55FCED464E19AFAF548D454FCF73F6087102630AEA03E622AF2596870
1353925801642BBDC11F09963F4ADF037671B73D48CD9C209DB4D5BE7F4CB381
94887E8365D25C45D1F87EFFAE360104ABD3235E4D2F4BA163408448E814D49A
3E7C171B8F1275D49937C3255326069007B302844EBF2BC1990DDFF1A34C2770
A262ACCE874DA1E0002188D6A713C79D5E9226178EED27D6F4E4DC24ED2669B2
3873F42A48E5C1365AAFC83FAD8B849E5D7E52BFBB01B281005A9EBEB4EA2F35
B691489305BCFE5516DEFBA092F66ABCA2D739A9277AC69F74F786045E63B0F8
66D545B12B0581AEB579D5E1E2A412DB8F66276E05F131EC3B9F543E11F40FBA
8CC47071DB04A5D38A707C9F825527521CA1FC412FB54DBD72E912BA4EC8F747
306A65040671237C8FE84AB6D6157D96EDE13B3A8FBF7140F1A9DA55B666953B
C7FA638353F278D07066AB8DDF0DFFC832F7025DF1AF9F894D52E9FA95EBBEF5
9D6B97768FEC26E845B87C6ACF5395C75B894B5A1F50B248BA33943C5AD6CC2A
8D9AC65C08B3206E7F5E5913CD0D54C9FF741A4D92B628F85E43F52082397891
66E6F922E0BFA2E45F0072217011D4B8EB40893F151E4E2E92ECE5862C467D4E
3833311B08340AE1C0C692095AFB739E9B9A4F56BFA0F0B2AB8455A7470C22C2
0C2EC285026195CB73EE2A713ABBDE4945AFEB92630BF852DD4845FB4C9A8C8A
0C8C971F29440B4A786108D0DA1AEFDBE03568B6B2F3953B4D07A5B7D6FF564F
6CC0D8C08CA459D556154A45133BD7AF70C7D8F474DE66E64FA112D776478A83
B282EA4E941CE2FD6D8F7B68D129CE0093AAF7C1D345C3D65BE74EE9391C9B89
2D4D31764F1BA81CB12CE46D15A6BF941C9F0EACB4A2DECC8F2F6B85FFF490D4
ED7BB6C7CDED10F03F68282B2ED20809F95840A904020C98299E17C46243D9EF
05B5B8173BB2E8CBAB3AA9B8207A9EFE6366C91A7674DBCD9FAF12A2EF4B5117
5687F3DF1244F5439ECD8AB0587F492E990DD7B516C664AFAB76CE71084FDD70
E7F5A38BD46926615659488D3548C5066C06E443016DD40275CFF3105573117E
369C8C34E48BEE832D93F0ADA7674FC6F5A64183DB2B70FF166E02E044B7063A
41D2F396A9158A26D3953F12982ACD1D7593F474DB98ECFD00EAF57FAAF17C7E
C1E4775B37FCBCD6DB1B5BC6209162E57E21A6AF427043562D9854B430A0BAED
20D31A9AC334C87875E53E0B956D33111955459DCD98D54E1BCC61BA58CDB41E
03009979C0A541FA9F69B55D3F3750515E5F268A7B55254B8A44CA732F2B9242
18F34C029665B31EB68331B0147607645983340D15E322E3D0532E6376D40FA2
1041F7988EB9F56D83946757786737D8BB4A996EA7933E79BE61B4EA1115AA4C
286B7AAFE80AB7C619329AD5FA772A6279FE85FA6B623138FAE1C6AE3FA45AB0
95D8020D2EE2979E8A87D7E7C5DA2E6B701FEB4923F401F892D83A4928807152
96CB664018AF24E829E582FA8B4F0E07387BAC53530AB3AADF74404EB2F311E6
C6A70F960FA962E52A30CCC6E15097F9B7BF011626DAD38EDF78745B60C0818B
34663683577D897B1B6AEB240F3A2AA29F1F1800FE0A5C205B35C6A6438259FF
CCEC942AD2D7C3CFE01F956B795C0349DD5380D0140D3BB54FD99EEE5171DAF5
4FA360A740589A1F8AB4FBC275CC06FF89A8350F4982F87E747501A74B7C81A0
0F40FBA9D2875022DC3D417FD623D89FB6A0C0F1B930ACC2117C6CE94AAE5844
0B5C9DAD579B7DDB73F2B26B05E1AAE30AF69937722E8360987AC0BDBE305B5B
DDBEF5A6C03BE1743C518E6B7B58A85AC961B8755BF37688E37DE0632BBE06E0
53FAFAFBE52EAF276365A0484A1A682C9B9486CDCFBFBC4F4A1D6BF71378F014
56DDF9B15A5AE0276827ACBD9AB04D685F52A62BD3DA33BDC2A262B756B58C26
4F3B552841B81CA60C951F400551166C72B8D357D8122685FE97D14AC22AB6FD
2EE4CC429D580AD7B8D12A9C601FEE5D25C98BCBCF96C87FCFBF28419BEEFFA8
7A4FC7B6E5FD377EBD5E743C3FDBB7554A1FB9663B648B15C4119CA952A8263B
278E5845AB929942E1A0FC4CC413F36134884EAF3704865C1478D6988880EB54
C5C5C1BDD7CB0548342B9C7B6F94DD6341C5744A9A3C4A866F620BB70575EABD
AAA42E3B6E23AA029080B299294AF2E9388520367E964A3A66A84628D75F1BEB
C7A58C92EF7335F30BD0A26D072A986635318E0473CE3CD5B4F1BBFF6E781938
EE4E3C11AC27A1BE0C3B55586A4565E4B967ED2EE4674121A46DA1C32C5D278A
44BEB43CCA246B730D337918AAA394728814C726DA4F9C40AC6EE877365976EE
A53276A818CF25E995CAA34039339C55DDDE74B3C11742786C1E9FA5C432EAC4
E184F35560EA31D687D005843B02F9252C2A16F9E4C31C18D0D45B7D5F63D589
3C1FE3D33C912B9CD79DBCCF9FD8223FDC18D55762F0DB2DB241625B91DB17F6
206120D6300D317E82F3DDE6D2D0825547C08BE7E6FF8FB54D4DFEF2F4E475F7
F3838B4ADBE49F8C41409D85085DB5A030858AAEEA5AB9CD2D1172C8D0EE31AE
507D8048E123AEAB05979C872ADBA4833D36626166BBB2A2CEF2F3E641DB429C
AB15C97D7180E8E6AC0D871E20678516ABAA4D616B51C132F41E5661858B8C2C
ECEE4A65A2B0FF310DFB531B213196D2E2AB015963246F44E22E603E741BBFF0
16DBFC284906983A8C15278A36F5379F46C152304DADC8D90C313961E5F58180
EEEC5A15131E5C48AD27F80B77EB0370482D528735FBA3E6C0548BB66CC222F7
CCE87194F565B9EF7F32E656E6964501CE32462FFA6B87087EBAF45D454CFBA9
ACA808C4397F3852158F1C0AE44772253ABEF6D278F726A03A9CBC4330EC80D0
117F9131C5974445B81093C1D6E093C669CD285D1BFE864D53E5F140D40BE4CC
2689C42C50C4137DE564374B2130609785D8F519E0083DD24A44DE24A68E4071
4A2122AB8AB9649660D1C96DC58F37F88623528078BFDA3BA3085D527ED4CAF6
25BA663A61AEC4938CA78C49623FE0EED33DA2D08CC78F86A807E791BC9CFCFE
8FBFA55EC2259B64C31F6EBC45D2DF9B47EE09AA54011D40F55B6F12F49F2266
EDDB09D44C521EC9568CA7E62283C483A436417B65B4FCBC7EA32AC6EB4E7B30
080816F29F06D6B09E5506D3149C5D758BA85D820357D4955B0C1FFB383E10DA
4D61774D3B23C84A339C7348ECA6078080FF8B436B2261091DBBDC02583E366A
622ED9F95D2A85BDBA48DCE8BE45628A4ADFD5A48869800D9B54F530F43A8F53
F765F5D5C44A9399FC1B9CEFA343966118DD11CB102423D46BA0F096795AF0D1
BA33F089AD80A104DE7FDF8A6E7D935E6713963FE3C57CC673BCDD423DF3DCE0
C57EADCA2AE4DBB30166C2CF1F7113DF96A27D4BBB23ABECC5A4795F1290F4F5
5293B5870F892C9A32C776AAD06D78D0514F047373879CFC5AF9D624DCE5BC8F
7CEA5055064050AAB2F24A1C792B2609FFDADC6AB8D0F31A12403CF3436A1E1E
E24BA5F92587925C4D6795A3FB163245FBF054BB1B0FF01FD63DBF7C192D0F31
33A17E7764699B669A3ACCF7C36849EEDA395E7F55174023A79904A766F21D58
3DDB7B4C2808DE7FFB8717658084E70DBE046A13BBF1F9BB97B3AB527D68DE8E
924DE65486C3B883CD65A95901B0DE57821CB6C6AE37644E02F5CB0163617113
C91D2C649A0BA10736F3709BD504F22DA8831A09BD0B2D6790A498F2FBC2F642
7845796E606ECAB2356238AAF40323D71B236CBD1E3E43BD5443F304D52F3CC0
28DB5D33A732695AA09C0449C53C656704D820217AC035DF45F59AE445946481
E5BFBE5D4EC0A42B5662FBEB9FF6ECFFB5E8517312F56C91A01824E401E7203E
258C3BA073C1B2532B8312F5AE29E37F5EA71C52F171593B1370D4ED5D7341CD
567390ED5B75D612D5873BAC518587525A591164E8D36D2BD89F792BD9EE6ACE
99FB72B23CB2445F12B8A6A0876EE711166C9E34897D370174C17A2495D58B4D
3DA19DBB1AF2E09C72FA42AA3D8047D05AC4F6A27F3EBF32ADD2AD2FF26EAE05
A9AB34C9287EE00E8EC29C6603036D365AE08E00D1C7C410EA2551696954EC92
92080C8FA5C9E67698BD7B895C82ED29391E015F83E0DA145384E223319CBA74
19494F070649E03CE9FF905619C6CB40F562DA49C1EDD2CA221DD7D3DAFA8279
AB50DE1C059CB8D5C9FA8137DA711B9D30F236526AA389B2F79F3D5BA6ED9534
8852BF4448DC1B72E361A6A2B94CF865BC9C3401D995529E2A36DE755EE001FE
C67B184AE8241D08AF88D626BD2D8AA12EE791AC4253D4761A21917C7F2F5AEC
795CD14B33F59DD7080C7654DEFFFA669F50FB1AC8C0F2E60201673A78D03DFD
DE0CB142F0F616C4051772BDB837CB4CE87A0C8D61E0FC7F90517EA0F5F6B1B4
D57143CC0AE7CA9521C1536962867D6318DF1C9CE6476CEB9ADB21655D379B26
7A0EAEC2D28430C14D38764C493BA4C06EF4BE6780131F2FEC066C4866E0B258
51C48BEF77011A0B5763CB3D69A50BDD50C2D7EFBBF18BF42544B1AC196377FB
4826BACB3C16DB805D38C34F9E92AA9AB5F9A9B317D8BF32AF8A758017269914
DE3B748625D319E571187E1BFED9CCBE11ABC18C0C6123D24D2C7303DE998847
0F6F644748ED225135CC3B957EDE8567AF3EE47F5E942EA9293F7BF74260D1D5
A6F5E56705E12C8379DED158E66DF54349F0504EF584C6D05C44CDD8B720809E
3DC36FF60BF55FDF1CA8C968E68346CF43C568E0B3175CB7D55343DE21CF9730
C9DF918360036E4204CD024A67E764D3CC7677E5B229C1B909ECD1B9042134BB
DD8E47FDBF63F212D401A797EF60011F52EAAFB88E3E70E007BF19826E40FE4A
73B57D52FAB33A737B1341381EB2ED307E0B83B45D6911E04BE623DA82DD6BDB
2DA096827E6A498A8D503668E45926525789D43D1BD5B896B487C0CE04FC9DAA
CD9078D0C8A0639E27F0DCD82C552A7FABA42BFFEAD66CEBBD4D2E4B4A1B40A7
B6FD119D37FA26C14C29A70E2EDB3253A1AAAC2650009CA3B97B430B1A05F2C6
F2120C8981683D0976BC42FE98AB2D33014B983CE1E2F1E1AC4A524249C3CF13
4B36652F96FCBD3660ACFC2F9778B729AFE2CE1BCF473DC5A846FCC3ACBE455E
2C37853F5204085ABF3BEE50C28D99312A078CE2F6F4C1D2D3017F0E5BB5B614
102BE45CAF8108407EA970111B5A97CA8C7A64C70D52D28D2EDCD27879B1003A
6D168CD054E87C063744CDE097887CDF268D89180AF8BB4F170804AE5DA779B2
1941775FC32FA189038D6050EC0E400BBED364E0CCD8DA571E902DAD812988E2
4BF761F472EBEB411388FEB6F901777D090400F695D823C758882CC008D889E1
02678FF81B252C33C89E3B04157C889D4F0F86D432F0B3DD7811BCF01C2FC041
0D4B1DD9CB6F2433F9B34E7E8ED8BB1FA4F9F7CEB5354A8305C372C2EDEAFE5B
4AE23CEF34AC457961B15CEA084E31B3741CF2EC317DF484736EDD688737C380
6D868BDC02D1E63A52D21C8E7C1FD1BD8717612FC247293CC91E0EEA08D5F805
70217761CFCA0F9C13996DE0F045F28DB67378221722416236E4DC00194E9C45
A3839F4BB53E226919C2CD13A44E4F67334454DB7E133B2D308925CC2E275293
F81AFEC4DCF49230F22EFA19F48CAB7E09FA727CC2E11E5A5CCF57307506D5E7
6DD1D26BFD3DF97E73C2DC019B0A75B9D6386469ACF1A00A5AAB55F99BA1DE49
9883DC4FB0E8AD9421B105E050519976705F7BC889FB3B6C2921D2E198FEA294
E192DB3738EBEBF6485075728A0E16ABD53A25BB0795A21B65AFB6ABD7EAA3F7
1DAE1BA012651B4BA0ABE02F3CCCEB9E92979F17A3338A376C57A1F13E3C90C7
9DE8ADE421329A57369CCC2BA622840B79C0DF098EA42B810C596DE85F51EB9E
C8F6FAA598C73F359FD7CB1D337E3B083833389846A99C87885A7537D35772DC
A7EE51E8EEECF4E4F38AA04C3F4C447080386A41F1461599739D73C58CD02D65
0899177F7D707AE793B4C915C590AFD6E6810700BC0C3D14B67E03129A4215E4
953B88C7A9FF1AF4B6DA293E1DF2EF5667D408AD3F2DFDBA46EF95A1D8E1CA29
FBFA01A4B965D1101CA6C0C2BF4670E94776753FF52C2751AE41872EBE3DC66D
EE58BFD3BF8F543802C7614F64E7A9CC4474DAB5F4C59F8085FD523C91F0FCE2
0CAEE1B9613064F9C9CE9556C841563A43660E0E71EE761F0448C41589AD0312
958167F62FB166655800150F9E81A558949071F01BB11C9ACFB2ACA4F332D2AC
598AD5ABD3D5EB17AFA97456C0DE4D3D872750F548C357FF34919A3EDCFF9658
F3DBF53BB3D0A204E84702DF6FCF5022E753CA92323ABEDC81071ED44C306A7B
C10D15F905672783BFCDF28D97EE156E293046C09595159C735A266ADAACB887
7026C404951C27B88CC3EC1A6F15F016D55AE6B5DD739914DBD6861098977064
762AE2867697967117DD7E3CDFC24D046F1D83856D49224191CBAE95C2E7B9DA
4DC5ACB06B9F637312C1378941EF6B9D966E84DA69E66C43EDC0564D4A9B201E
5CCD830900AC4D4EEDBBA4AD14ACBADA20179AE138CF35D6F830801D7F9D1F3A
B48B6C2EA3B77E7EE42DC0A26C7FDA6EB64DF4136FC3AE0FADAB84CD30392E44
49DD3F7DFAB77AC2E3A8D16C9BC002AA17A9C1E9166A21648AE2AD7F9DB250DD
2F3F480844C93059796E89238B0DD470329C2AEC9F178B83D421063BCC18CC35
2C562DAE86EBE6529D19066FAB70C8E73B260C71924B0B3DD652AE37DC2ADCD7
A3E3E1936FDD259A3F32D669B6CD82D73436212D6CCBE436578139AE07BA8C5F
07A8D2158C8F21007FC0B96E2B3588466A6FAB4F70363E994AC4FDC2CAB3A478
9C98DE079DF219648A6219EC7040A8FA91BE9D9451BEA89906677866F50B6FAB
E8FC00E826B115CD65FAF738492A919CCB657186BA12260C2816C44A632285CC
25CA1D797DB0D901EECA675FFA1182AD6D48A8A96402D07A288CCC02F8A7CE0A
39084DA379C5FD08743060851BD02A3C9CC298FFA0AEAC5F5E1928C46A6EBB42
7D2AF9D32BD0117A8CD7B453C66FF39163092568B5A26F210900D466EA5CE01F
14BC1F57BB0D3186BEE9BA1A5648887CAC06E23057199A31781C4C37B1A07C32
B8AE8A40F5C481C8D2854AE5C2C3C746C4A2B48189A373A438F512642A55F2B2
3CCD2D5A06A1859B50C1C3352B1B5B56E652F00EE79060842A33A8CBD002E777
3CF6C051A6D5F02E35480569E9D00493C494F9FB977E665AAE4468E6DBBCC950
33876A21B75095CF391E09E814D7A03EAA19BA0D7A560610CC36EC3A9CA39CD1
4A359FBC14B07975379B68949C9FC2DFAF037C56C13802A7F66C809549EF2FC5
25EF3F517F06F90EEDFA6F8A3E5F1F3531A5415F3191B8FA7B0F28950A20A1E0
6E354480D09729E3A2D6796DB81825DADFA4580FDC7813B7989B18020C3AB1A2
87E948890C25563CB26A068ABABD94F3D42213218F2ACBB2F5B317311474B222
BE1844548554B37C97284940D5B7AF9E4CBD884D4994A76CC1ABF8E6AB0676A4
0A8130F05B0ABAC088FE4F9FB536924A55451C8772B29087B8E5E649DA3B449B
4A055214DF69D0218549440B3665E4D20C5A8660B3E0C3ABBA3426E7820E1A94
5D273A6ACB263765D340333B5CD8D1282FD5B0F5BD4D40DA12A5CF44075F33F9
BCC0B4C20EADE30D0ABB3562C00540200F10840375F983A6164552AE036D3093
A5356EDCF93C32DA144B43073308EBC75FCF69553358597EBA96149759D262DF
CD5671D9666C708D60B7AF987EEBB36F9EF27997C256BBEA31710649E75089FF
284FE9441A327129E5F6E9364CBB2CA20F417FCD6682C95A0A69C760A1C7C80B
9FECACB06D839936A5C38FF717026025787349524C635FD7B729B457251C7129
689AABC24AE22C90AA37B13791AB7AAFF29D6DBC991842EA880FCCEB0BB04266
44308F00754CC0CBA9CC0A97E74FE428BC04B2A7A92847B0D1CD9FB54DC33514
F4C499697AB9EEEE6AF1AE86A443C8678D7B97D26AF3345016DB96B378D70C76
171BF4C398670CACDE8725D9E0110842B6514DF91A51B54006A327D5C8EF3B8D
9CB65D21F3AABB8C0875D3274A09BB492CBD3103EA18C598A758D1859CB780AF
10E80B3F16E6DE90992BD7AED054E12407CCE01C4E738C4A70B48545C4AE0CE7
38CE458533BB509DA48925CA08904DA3B781A278B512E16241DDC32705E4042E
C8F1E4C5DA658892E92B60
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSAM10
%!PS-AdobeFont-1.0: MSAM10 003.002
%%Title: MSAM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSAM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSAM10 known{/MSAM10 findfont dup/UniqueID known{dup
/UniqueID get 5031981 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSAM10 def
/FontBBox {8 -463 1331 1003 }readonly def
/UniqueID 5031981 def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSAM10.) readonly def
/FullName (MSAM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 4 /squaresolid put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE2340939CE40EE9186A0DCC3D3
D661293EC5BB40766B73935EB54125526067D631E1E3D1D6569AB3546CB257C3
4C12CA4AE98C3F99898F1448AC0B416B8E5C3EEF3D74B5FD6A1BE3C23B160E78
79A9E0AC4FC82364F946003C1B2E0EF3CEA944727E7502B65BA1331D36C159E2
1D107580F28A32E04CB876822CEF478BF4464CE4F7AE824FC786E099A1BE2A3C
7D2BFE2A748AB092AEBC2021DBFD5C40E912BC5856F3EF8615147350E75D2BF9
E428D7948E2128053FDB1F90CA9C7D6581E25A6645879F50577FE7F0B32B873F
13F97C524E19F1CFE3883C0DE1DF80FB61111978B0C2D028A99A712D3DC27D8F
C83C4EC335F0DB9912DD2AF009FAA56C5BD5855BA92851629EF6C47E6AC303A6
1A231558746ED8A78C76E476ED71246A2E15C51F465AB21A22ACACB03014B06F
201876D3C6F49E2D38D8C4FE8011F7BB148FC3227E0BFA51C0F9AAD64F0C6095
77B3D875476B666F9FB9A46763C49272FC504CC0E817A1533409D293D6D62CC8
DFDA666BC9DC70C4510BFB0DD2BC94B33D457EACFD754761B696163DB4C547B5
FF8994977A7C9910AF486487CE0320FA1E705BAF4B14FB937229D80F58D01E6E
9D9716EA3EDA84840B5D6BDE216A25814ABC4DE4C6818266C33CD4C3DA4F23BF
DAE6ABDC6D64E7EC7DE918DDB0B05D8413D32D99D15FE112C1D393D21806E0C9
7CE0F0977AA36617B8DD50937C5B0B5698947B0A71A167072FE1B3AD6F274D97
484926DF52CE7D9D2A4928A188E1F867C298E6DB475C0CBE09F0523D8BC6FE24
E1CED78178EE1E9D66A906B72505339E62499C0E4B6B5A2D596C4F8F4312F582
9413DC88D6EDFEAAE0C86BEE44CBDDD79BC02C844B80324B1FE3512E73C213BF
ECD22E7E13F98AB56E4D693B1D6045045E2F01DCC2AA1F70A4699B7D718A743F
D749133029EAD1870DF0B00EDEEDFD33642A88EB10DDF4CBBF8A7D8F7781179F
A91CF398747D52769A054CDACAEDC330FB79ECC96CF43C29515F5895D3A8C1E6
828F776844C88090405F868A872EF54467B72825B001B46F6496817A9B928BEC
ED212D4368368778F2D1B66D005F2D6E3DF4AB9B9791AF2CECCA3AE524781A41
5052FD21CB81D934F0F12CF8C8FFC656BAFBE897C5E86A21D3F42A38F7916693
ADD1DBF48F534DA16099FFCF3E3DBCB254BF49D8F72FAC2F9548477F9AFA414E
65A29F24FA16A9E0955A9A6CCC47198E6332ECD1A791F2E36E6656852179A94C
E3CF4477A9A6CF507B8184ECA5C0304FA15ABD8B0C379EAC19B9D16A630D96DB
A6DA819C2E481AE4870BCAB5963C0F9D837C97E207F7ED58B776799586B9F755
B705AC31C09C3F74AFBCDACF092B05F9E2B072C1B17EE6347523D3D5E1D404AC
636C33DD94121C3711C3D05F48E12DF8489F894E4913263176E81927BF5E3A94
99D124F64D00BCC288F03FD14F89E6352083333EC6C2044E2F81C477DD4CA9A9
55135915C27654B09BC9099FA966AD440417945879399B39C7BF20385456878F
9AAE7343912927476C2C88A445C03E3B77381F3F9A82FEECADCCF8C307144775
144279EB14E0F0443F8200C0FABD54A075EDCB83EAB07A7CAF6EAB17C6CDB239
077DC62173A54E93BE2911F4A45F72B80DD9C41B301B292EFA78D361AD74BD7D
2E94D44A2D79BB7B89708E094A21CCB28D80E0FCA707D742CC02BB81FE4B0E06
4A5E93DF0414BAC27ADDB044A0D444692973994CD028E1C62F1FFA4776554914
2D55B0F81C06A2633A4AE42AD00422A619E339F2E6F0C6FC74F70552974509A0
812F1007FD7055E9ABB8CB39F799F847993DB9593A76C388F9BC883D4A0DE2CD
BFD0F7F2A5F1C50791EB4363104B49088E6EA2C5E61EF256A9FF232357D62D78
0C876D200E4136F7B0570A3B0988F3E23443081591DDB861745B4F6F0FF7D854
8F558F995A283B346E266DB6FFB54E0761046152A864F710113B6BF12967D022
2947517E1CE2079849CF8EB01BB2B96EEC2575AAAD1AA1E019D7E72BCFDF2979
8E2A6EE0C1525389C16411E5DBD416467B9900F07223117A77E0B4C3B0D49A96
C2E3A61AF9C9B1CEB80AC6357FC0CA446FF87BA0CCCD81924F6209198BD6E1A6
9EECEF233B17CC4E9F0654024F7E857EAB409F4B9B9ADE4090F2B715443A80EA
130369A193A32A4DA3730F13E3C9E717CCC9E74611D787277B73EFCE14FCC3B8
6B11AD88F42705F65E9C747B472F379ECDCB7F8F9C3FEA64402972623EA0998F
255892C43CEFD7ED08957C495AAACDA59E9398B43788DF27F7433F72377C8F88
F54F5E3A5564244827EBF92227B94F4FE896FEC6519769AAD567E618DFF61B7D
B93EE0FFA2EA58BE1FDAA0025259789FDB31A1019661C18080567EB5C6306596
F97F039E3C9ABF9E40B4725A96F8170B49B73B68E308786FE99B0C005DE01894
7CC93C196E1F830570D51F0AD29BF27CCE45AD7D3B4332C9D50F1E9C2D04E033
1E197DB9BE1D44566F738CD26A13B8EBC8FD49E999D35F042E8A24F025414F14
D9D11ED702250F1295722F68A022196A0E38B9ADDDBA997283ABAA62898EF32B
C765387E238CA3475ED5C6EF2803CE32B5A90A8287C70386F46B84C332E8C00F
85A8CC2DE78D433A325B7862AD4D93B3EE2CABC4B688833BF263E26879AF213C
934FAFEBE8D804E2BC8433B81ED5DA99F08C2C11B93019D3D9C1C952F20C68A7
E141DEA2CB983DAC5A2B9426A98262FEB13C420EAA315C890F0B907BEA099C1A
10B0AB255AF99694C722166DCDA72FD58CFBA3328FC5EF83A52A750C5E613E74
A8572CB8B78ABDAC27B798E727E3E5AF9451416493FE3F4E95157B4ABDF3A910
64369E34A2B40176A5E0E30F472E33A41B8C7BA4CB1BFB9173783909161370AA
EA40C83C60AAE242358688CE13193C9DDC3544A959A1E6A16FCC4BFAA65A63C7
5AEF208FC201F88DD047B5E6EFBD4BB256F973269BA1B06CCFC186D48BCCB4F6
A0F512B1D6541417BB6045045CBE72B72AA2549C345B1BB466335226A0E76A10
9645C25A0FB4CD8455C7C10C0F4E7E9914D2010BA1C95C6BAE4E62C8B6A8BDB4
92281B366208ABD9C010B3660C5E150D63D6927255CF9081C0898E9B206FAB57
B306669AB87AF405C537CA7D3411DBC41C53EEFD8071C094486158E97BAFE90E
BA29BEB83BA60776D33BF9CAF9C7FEB66D4B93DA27E499B006D243FF59CB33F6
AFC65D10B74CC522BF4AD45E3451B395AD5029B148A1C9B710D5CF02B65F9189
0822C0A33C4D07F2DEFDD5B4F6E063891F0456F1BCA4540F9DCD3B0F9F39696A
52336AFCF0A33A029AEEB448CE120B9D939487EC8274AD4E1D5F5AF4C14EC910
680C5E312735DFA3A5B1835370A76DFA63A05379021A64EE55E25AD5218398A3
6DD66D1B474A2E7C6E236E0E4A9BD0E4F7AD1807C6478225C58327BFE1822000
26713D01CAD6951F456504D79867D523605ECD78F2D5DA05994BA4812BF65E7E
34ACB732150ECB3D212D03387C71677F617D76A9A42C708C89D61614F280A5FB
0BFA84A17CF9DF333C9E13DEE82A5ADC9D2E588338D247889ECFB090CC63CF9B
8D92B1CB784B65BE80E3B57998F9ABEE702E07BC127D272C67B0A97734E405C1
FAA87E6B9DDB8ECAD2B9DCD56D687DFF71BDF29BBDA0A0812695F81C5EBB83F8
0A810D6560F28D7CA1F89A11F253E1B3B4EBAF511454E4BF2C46A333BC186558
8D73374455A32DE993526063AE70EAA647454ECC62BFC5A53357F2955E4A8A02
E20AA64AB6511CEFC5A32874C8F2BC2424C6B85BAE80191216A22D93BF2813EA
18A1A961543D7C58C4F4B263D76AD6C61270F2A77468B3E59BA9D861E5AA6CE1
B7A9C4C2A13E80C4052283DF3529210B3F6E90C2EFF205866865E7E96F34513B
05A45939728619E02FF1410C0D220F6D615718893E7370A0B91675BCF681B2D9
56112D9D37ECB819017472DCD38FE4724834869F82985A69E33BF862DB420DEB
AA1CDF83099114501C037873E86E0D33FC954E12D40038FBDC78E7159B738516
A078AA386D9424B8D4913B7848D8439D2ACAFB7C81C9AB192D77F316D299D11B
24F67141B1E0FDB564B70FE68070BE6BC00F22C11A1291BA6401C722487BFE19
D7869DA874C9059677DBEF958B7AA06EB924A17B3EFE9014493EA1FA8C4C67B2
B5DC483ACFAAE88F2DFF9FAAA7825854671ECFD522540C9F6C3817C11D3B63CA
8ECF710EAC4F27506B67B972633D0821BD15F4511F305A5677F2919DEBF7DE88
4F60E36360A7856B6B6A8A866832534279AF45B4232877F45C92ABDFE0910F7C
F86825A1B6012FF93479BDC9639C01CF2C783356B33127AEC7039D40529EE54A
756D8B7524E069DA60A38AFE592B8B228ABE22B7BC9CD9B23277FBB567B1377C
77E21AE6F55ADF4F8864F4260562F0384165444385D5A8C5966EBF191900B898
85240634EBE8A5DA382E0EE3583B1B5D102B6EBFAD60AB9C335919EFBAA55A6E
36CE4887299E395EB5766080FC0B6F93B1247F28842FB817084C9C090616AA72
25F4ED6996D36CD9675009C615BA26BD4904F3130991023E4116A7E6BCB26C10
7106241DE039BA7F26E137040BAF587AE03A476526F025C70F16EF23474C0EEB
6E27D8562C7C733CF470EA198494A505A8F871E8EBA31D4F0D9F0AEB9D0EF63B
738B582F7BD73DEFD5D83707BBC7854B6FC7FA6E2636F0B68C4858B247F70C4D
F602764B9465975E9AF28C2046EAD743CC350E747D6524B9CD7F325946B9287B
F7D46E4342A71B0409B2BF5FA4D340DD549F6A5B05D2784EC5A248560F4E214B
C5304217B3AF8451C190FE1C312527746E45DE39D8D43CBEED9A19FFE143CA61
3B65344C26E189D790A0211556C609F107C78F55CA120F3449A697D1305DAD2C
D3EAB88E2CBDC022A4E036E232237C1C16ECFA62D6CF8EA3B6610B58C75EEEE9
676201206E4A8B8C7CF5EF409F2C0544DAAC926497B1FBCDEA07DF042ED870D3
9D74709FDB8CD2CAC4726655371EDDAE78A5D9E0811ED4DCE8C23DAE1ED44D06
F4DF09BD9A00C1DE178E766E05CD3CA64301C592BC01EA4F6D1973586547B170
A3338C60FA1148DC5F3F7B7DB5EAC870239BD137CC85AD54380379F5C30B0754
D0A0FD8DDDC7CE725B58F37DE7DF077916C912F2808D0E4CA32808D0439A148E
3B1E18B9C88C8B4DF23FF5C53B2881D7C23D1C239F08137BBD8FEA326E7CD1BC
C80027A40463BD58758F4402D3DCDFED46C2E3C405E1B1E8DD0062E1272AB5C8
91953946FBB4B9EB0A74D0F7F4FAAD798571EEDBF0CD4C92A6916909297F27B7
5135990685B849E8244D2EE73D5C7BEF1D3042CA8353210EB4293A2B2F1BCCEA
7FF2AA91F52D343BFBF5E91F2381AE5B6803C46605D471B7BD122153E87D872D
EBF37727370BB683A194C4C4DE13F54AECB116BEB3E0750E10AF272E0C015641
0F9264A21BA79821B29D8CB78746C314E6893765AB9BB7BB1730D758F687E615
D2AEED695331E99591AFA000AA540ABD36ACA911E91E20912AB819A80D5183A4
CB88E08E0E9911612639C05043942AC8EA0072E9CB7154C415C0FB37DFE3F01E
638D5052C87A8359DD979C44B730F06019191C5BED15E6E79FAF312ED8EB0B02
3E712A0F6C89A6F7C122A561F133FB4D2A98EE09B11ADEA53702C92C210334E6
8D5F3E1BCC0E81CE178ED749B00FF4089C1AC412DC5F6696C9D8B9D2EB24B35C
3C1F8F63EA348A95622AF76CDD5C4DFE06A8C7534A55FAF937777E864C98062C
CEAA3ECB5E518C75FEAA240910646EF782303BF34FBF8162C8650D5A6F0EADB4
FAD9AED7994003F74E09A3CFD8900A33160CD1D49AA1C7BB5E42A2B0AB5A9D20
A5AEE02435D84A2622ED87454A2867E112A9AC72653A7865E2DDB9C236384228
94DE4A396FA798ED1F370AE5247E0E703D4D4225ACC1EF410631555D7DBC814F
F84353CD407284FBEA1D371CA578165B888D771ABEF7C3ADE33DF899E55FB0C6
A99A97A474739D07FF17DDBA267EC6C0A6154094D6E7354FEEF9723F23CA6E86
D8467D66FC5DEA43D700C9712BCDBCB15EDB628F4B840A76D761CC213376A0CF
3F137F399AF2F349C1D7FC9EE28CE88F416F1069D6907C3E917AECDD245A1BBF
4375A03755C145042232F87BD3F097746E41A70FAE7761AB26D1FDBABBFB56FE
D8C80879557D3849CBFC7D25D84D137ADBB5FD4F6FEF8CC9D54824EC85DDF553
FC992F823952FC7591D08F035BDAFC9317F144C94E828F09E29A02F0D6639DF5
08D32902957CF0BE88694AA031FA8BCA9E73D48A60FBEF090FEFF955FEF964DA
F53A9B58D2732F986DD20814A1C11963E4FF24011CB93D616CF4A6DEA6ACC5B5
354626A142D85BFC4F03DBC32F26253B97414C9CFDF3C3EBDD68FE0B7908AF88
1961CDBB6A94155524361C0B95E42AF0DC1542752B2129938BCD020CA19D64E1
0EB5DE254B638D700EF4BA620D924D65E95A329AC2657D2CCA597A4FEF7F1347
05419CFB59A93578682671B9A2910BBAF099C877288C19A4EBEBCB3C64415248
C00D0295332B6388384F27779F0B0A2D05A9F3BBCB3C1F587EAE05AE4D2C5319
478E8D848ED75B368FF45ED8B2D572AAE502493D2A3660F8400E1AAF9B27AB35
99FA7E39E250E91A67101F20FAE8BFC13A07FD2F7FD3A45002C02AD891458739
10D221602C35139358B1F23E0DDEADDF0AC07B1689EE95DB17A3B6888D9BEB65
C7A9BA2CD903B2F8348489A57F5A7191D1627A2C76A856C9E178B17A40293F98
E9CACD819DBAFBD0FFEC6EF5BAA6D8AFF764786470A5B02860DA35A5B3A2BBE7
45E6E4882CCF3A980B0C35F6C170D7269F7263FBBBF4051A51437A218711AA18
A408F16E7C9FD7D61AC4E859A91CA4B18D5BC3B0F6EF0287298B75C11FBD9FA4
1BF203A988C21BC2C550839E432350ECB4471F8553F7B4E42128DCA6B1239DAF
6C9D4A8B8AB7FA8AB013EC3060F02D6DB609F59E0BDE4D05891811A41F7E47EE
7166D88DDCFF5BFE1AB84D873C38009A857DB436100CACD8DEB98548A2FD3770
B44D6194717757468A9C84238E5B83AD19921E31485ACC168C25DA73D95767E2
27EDA7FBEC3FA6C8C58DED3649994CC965F81327D8547181CE06A73A6D696552
6A6EB8009B1C40A46791E8DD0AD66E125F61CA6810BB4B74E266703F9DE0E322
41D93C72DF010EE7DF3B7AF46CAAA9463E68D5C8B792D3197C4EED52CD16D5E4
493C1F8944901537C4E6AC73E5D6621CBD177B50CFD7F86E786D6E6EC176F6C1
3D7E9346C2859A185793A764E960F236A1798FF5E3A740ADDEF422FDA93FE058
53A9989A0A7252337DDCE50B6A040E49421069081644A51C80D37BF73CB30254
BC1D8A551F71FFE93F068070448334307A87526A86A3A7D53AEABC3506E78DD1
849BFF403701D6059D6CC2CCFCBAC8BEBF440B8D3152C63908C6882E56EAAF71
2984E440F40B5F355DAC74EB02738BCB094E40A55A48A26BA9970D09EF48EDB9
C0C6BA95EC2A5E98325594AC418DFF541515964C77B8D2C8E953703063F17F36
D042EFFB97936DA27FC3601DDD601709B71382EC67BB58C8D07254A6BBF7FFF4
EADB3B735D143E4654A5F06ECF67F0305606CD0619022A5DE90E2E58DD79C8E6
05F0CC17918DF52A858BC442594669827B3F6435993DDAF84BAB036E6146853B
EE469B081200810521522008CC7E3A396A8EE1FB14C976112B9DE60C281DC528
69148DBAC1EA4812B8F9C8854B7FC03D43F47C6F522C225B67573891636ABDE2
3319EA7DCFD8E88682C130E0EF728A401986C50D3DEF377CAEF216A5A0DEB8ED
C0BB83249CF414967A020E5B8B0F4C985C1D242C1D066E165BF330F4D3A0A807
DA8C72ECC5BE7BD4241CB4AF9E7DBE74C7DAB52EF2E3DC5AC531F8B5061C0CBC
620D7CCAA0E331EB7AB0AF62C71B8B7879B21FDC78BAB3C944BCDCD6A65B67F3
692DAEF4DEF28B5FC78F9B26E111583C71D31F7D8FF558416B79718F7C53E34C
5057880AB32CF15942D364A4E16C5BF382CC68A690BF42586C7D5DF306BD03A5
AB4E8AC7F70BCD0AEE3C4CCE6E1793589423B942DBBCFF3CD0CCA2ECFB00F9F0
98AE65B317C6D0B0C4604B614685B523515EC158884E26A6EE6CFA5EEA25F6D5
47FD647E044206E1567BD589C6D37033A588A77C2963BBB0094D7548BD0A4FEB
6C2A94DCC5EDA5EE5281207597AEC31B363640D8A3D1AF3BF4DF95EA544F4F78
48B1397CF782683EE76A15AE0A5B86A60C9E5C077DA4594E9CD62CB3BB1AE0D0
ADC2B18C7B8C10FEBCB0901B7344D343AC5B13DDDF62E0D2C62329A19C700457
4F1D3AEF396AC0DE08E400F3DBA346E0D9D8A235F8278E0B7CA284D2D531A139
484D8E124CE3A67BFB77BFB9FDCE085732E3ABD6AF50450AA98A1CD755B1B15F
D6898D56A1A04CBA8CA9F6EFF55C304AE62A71EA684359261D379C99518D766E
D931DC2594192696E87FE03408E9B2D9063FBD8466562C6DEA47CB3C10123321
DA0CC671D35D8B57758689C8B9176D49054F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/UniqueID 5031982 def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 42 /notsubseteql put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA853
B843CABA76BDE9582090299F423519EE3AF8F83AE7F7828B314B6E36E9127419
F274E9FBF5622C5E48D7E9565826BE29C911612FD17FFF0DF5C4CFAF099524F3
62A1886858F28F08D31AC2F5F386D64B425BA17916CF75EDBF62B7B5BE82F91F
378FC68FD76F0A5EDF31BA9D30CB4ECEF6EE4F8770F4589BFF9B98EF66FD657E
1E194E5056F040C99604A8CBEF831E495AE4729EF0253CE3714931846369270F
F0B11C226BEF445F92CF7DFD59E59B4CA9FCBBFF917BD0B7B2E1818D489EB427
98BA149ADB67B7827BF231823723C9789489F0D02FB7D539528900264611F3A2
63F895A9394AC48E64DA0D7E571CD8248693216EFFBBFA86536B22585157E5A7
DFA25BDC016DAC82256F51E34250CE303B4BCE41CC22122795A5B63D6C475AB8
3A71C9D01DD08AB48D325EF2631BB3728F512D1AA4A45EDA6139482F8F2113E6
9739FE03E3EB7B40E49C35CABEE2B4091D2CC00FA2DC221F4D0C58DBD3F68F56
1A7300CEF0F8296A98C852BFA573E07486AA22CB33520F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY6
%!PS-AdobeFont-1.0: CMSY6 003.002
%%Title: CMSY6
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY6.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY6 known{/CMSY6 findfont dup/UniqueID known{dup
/UniqueID get 5096647 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY6 def
/FontBBox {-4 -948 1329 786 }readonly def
/UniqueID 5096647 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY6.) readonly def
/FullName (CMSY6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 3 /asteriskmath put
dup 50 /element put
dup 56 /universal put
dup 84 /T put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D6AE353EAB9DBA0D
4335868937E3A2D0F9C8A4FBEAE138AE56EF84665582DDEF7B546714518D224A
F91D19409EC600924626D79F58E272E3657E631C06412F9D42732B6AE0A93D81
E2B13A81C76CC37FCA6DB35A1C6A572EFFEC7E1581C57B1D22EAE9C407771F40
71D002A06A6AC249FCB7605C902A76EB298B05E39D543A63332A91B8A1ACE05B
F902540FEC1024680B8D5857E4931D00781747C87ADCC45430B5462EA480BE50
D07C5C9EA0D8D6447324434CF0D637BB13037B6E1C48F191C52CF2B9511690B5
405280D5C825BD376EF12429837CD44BEA223DC8E199D8F85856C0FD551471CA
B30481FAE99B71FAA56B639F549F449F2CA6F5450AADEAD4C09595A7A8530D12
B23E012978225E112D23BD1D48DB097994A9D5EC707216D2BF5DF8B69E66ADBF
DBDA4737737F51EB7A38A4207BB46456A8117067748659D654B1D14849F14920
E57462ECFF602A181700A346C1E95131C6F1C66132915FFD999FD4105AFFE7D6
7DA46DFCC4FE53265B14D7326F5A44A3E97902CCB106AE99ED6434AA9EEE7E6F
60B8034EF80DF885FC63DFACB0AD1C00BE56F79B1AD41B065C59A35073B450F3
7E6BC7B90C9D9337F9636943ED701398E6886947E126F1E12D74C5E4B5CF06EA
E60F9B121B9B15E6752B127CCB9C26017A84BE6DD918AFE46DBF27BC06E66AD9
830BF2D6CA9E24A0199DD3E732405F3210C97C9BD21545B5E4DC10E17C1A2C71
851ED2B272055831A6F95864137C218E555B054BE3616820FE671E5BC08E7A48
D683ACDB91E05F469C0C8919D71027E179F4911E878F8D13F999C63C4EC2C21D
ADE1A11979B539C4C5746AA157A4EB4A7A153BC5D966197A7FF6A2DA3FDB161A
EF43C2D906C617868617E72163D5B0BC29C36A60867C120A02E08264231FD46C
1D3B62622A05129188D818E2AE83FB2770DF1D466CA38A49D15F9056BB7AB8BF
D7DEB2E3B3A8157B59D138787B21CE3B3A456E230CFEC1374AC66B7DBBE788FD
5182DA23264093CEF60D5BB0073AEDB68A61ECF1C69669244A1FA0CBA44DB83F
352AEE6012082B8A3FD62F4497B1BE0E4FF77FF94BF221212D63BC1E35B9758F
2D7F8FA002751DC0380AB954331E9AABA6C122F8F3D7E69CE8A6B359184F0531
6B158ACF34C64C32F4671D430820B36C9A9397E9C877D734B17C3BBD8A88CE2B
9F96D7AC5B8D55415E942D6C05392D03DAE53449F8FBE2225C91F228704BE9A1
ECC568FB2E90C73F2F7AFA62859C35F0FB26756DE719BEA5A3EB81A6481507F1
813CD1680EBFCF612FD9D3AA4B90688521446FABD5C54CAFE7B879F24B54449D
2B30738B137B5E212B34BC5384BC2216A5D13F761D6E13A043DB2AABC0276705
5C80CA394A8179D60DCA4651CE8B0A477165FF48A31BEC6B7C0852C9D72E11BE
FEC5E4B984DFDE90218C105999E070FC83F1716D13389B5EEAE3F26C82FE9A7D
3C67A98027D15DAD791348A21DD922C71145D287C7EA83B225377744BBB0082C
22FD44E1B0DF60956DB9C4790F4E2F81C477DD4CA9F4BBB4287914EBBB4F6E36
976C9E573496A2311E5C7677FBC4BB755B8BF925F291DE0442FBB8921402A487
ECF23EC556C3FD66158727B10B74C778FA91EC16629F6E949624D265FA6FDF1F
772E965A2C30C80AEEDC4A1867AE3D6D116BCE0F96D1A0C5138F294CC7C2AD72
8BE152B314E26422FA2DDDFA89A054CEFC6607D932FACB035FC9FD9959C4A468
CAC0F4DD41DFB83297EFFE36C352CA0A6B1485BF8433522BBBCCF9C73FB7334D
1CFC92348F91C4D0EAD90B22BAC6B27D21CDF5AE65C056BDE3B30424F76C8EFE
D7CDBC854B13EAEE0485CC348AC52F5345B7545B4FFC60B6E7CEF8D32354B233
8DF503A03F5201EC012AA67157F4A47B902D269A060A5B8E10A37CA7CAAFD417
1A13EED9533BD4A6E8845D7D236CB254D40930C273EA4372E0B13912B2CE9261
275D51D202D461FD69AE352E95F72D61683267D4951BB602A0BACEAFF9516F3A
C30EFFF3ACC08AD374A730287B148FE8E168089D239E1084E0F7D83CB9815031
5428874FA4640E1C216514AA16C74BD2B9A95EFD7B6B0C575A5D5B3AD1086CE7
E8EEE33490CDCF2E3FBAEDC984FE53D033987580E75E74E455E44496E186349A
DE4B5125F69BF79936565986B3D91E6A25CE6E1C4527FE22580A39805A91BF6B
90EFC8AD31FBA71FCC90EA04875B5A7ED05BA2FFD1C04774E1ECE84B4105ABBA
798C339FB61ABF75C6FD3F24BC775A7FDBDD87BACCB9A86B4D928917CA62C0B8
56343CAE0051A1172E7F234001A5FAA947CAF382FBF23E57F1144425713423E4
4FC1AE1D096D10D6FECAA6A9186B0D519F51D06CC976A65A37E9219492E6218A
FE9F99700C0D0D18BC48632268DA0F0CC24BE660E30645E7F63B0AD49CCA26EA
CEDE4DED685DBD38F5C4BB6AD6CDFEBED1B14A456C27C448C91CBF6337FB3632
7B9A565874F9849FC5E22C5A0437AF29E2B7FA405CF6B7AFEF66AE7449E89746
66ED2D4C15A36C45C0F64E6F185B808FC788984C230B4BA63204B38C309F2DE2
2937A92C184077F5252C9D6171EC6378273C32B61CF65E4DC124B321A4049294
BB6CDD064D4E07605DA5FFB7B3B0A55A09D26C8624F03D8C197885BFF0A20B77
257637447F628A4A642F6F92019F9ECA5B2DBCEDA63C05E5258C9DF131EDD1B2
B4B04E7A5441035163BC2769B79C89ECFDF071E3517C59A45C9E97800724E1F5
FDF504E2798FA9074A37B210B1C24DCC0B78263E2297ECA31D5C258BDD92D2DD
8C53DD3B3BC3835E5AF52311EF0AACD6DCD159C45743B1AE7EE5A0111DCC9193
441FB81F945D219DFF26BF50D80606DD3392CE941242CBAEA45077FBE6AD78E3
0DF4FA54CC33CAC27A337FF307F14E60D1FA48FB8368E307441D6811676CFD38
094A558CBF0B92503014BB169E345C27C74543CDA9E8134F85AA0DCE45EAF612
1AB1D86FFB5E13CBDE8E0F68B19E30D0D9F5F0A3EF2A84AEE4D7F1F63A045297
3F5C3080F313B32066E0C209C2708636C33A6531F1A483F3AFDFEA62305EF41E
C55594660133146B24184070B87C22EE5B80D66C409076D733245FD100E936D4
E844D8A15CF45C0CD6AB04F3B5FCB0BC7B1517BAF21CED4D6CCC3F19D21BABC5
FFA9768D77A41BC3F5C4595D868F2FCA88D6E41558FA5A70FB562E4EB22651A3
886F0ED1B46BFFF297A28ED67BAA28A1302BC866AA7A73418BADE0870872CE0A
305A5E46BE0CF6B5794539B8509F1E2DB4E40124D72201589BC4B55ABA2F5C40
E167175C7F7378203C949B8967E8CCC40F44A2D1D555A4273733874265542C0A
3C47FF7144C4DB276320150FD5CF453A505BD3BC1E98738A1CBE175574037D47
8EF9F80622F57DF4DAB8FB13004ED1DBBFB4664F8D7ADCCBD529B22235740EB1
216799B2D8CEC7CC4D16D8273B6AEEA427D480AA6E3C463F46763864856713DB
05307CE674714CAC8351410627B8D1087155F3788E744158F3428A767CDC9769
CFBE28A30D635D7C4FC44E43E7F13128A867389FD66CFAE939AE2745055BE71A
AA7A7817E24D38773771C77328F4A755C872AA977C062A3BF7EBCD6DEBC7746E
70346293A661684D3988A5D0B29860E6789FA8911E0C0749ADCB9A6B053B0E31
3D490B9A2982CFC167001648FDF96D040BEFDB75A4EB90E2974927BF38F10E78
17FFB9DF2A65CF56C1F63544662CEA0E88A5141F990DF6B5DA79CEB5B4744083
C4697EB37422BF120332AB934D292CE8A3624E2C8FE6862C2211254558459BAB
D8F1D8C76C604098701163703FAED0BB298396C86A0427106C007A7CDBB0AC8E
35F39B240F8D9D43C1BCECAB622C02E721A323383973B61DB81115E3552E4260
9F252F18E01C1EA2B0A1DED4BA50A5822D10AC7ABD664C460A4022BA910804E2
2094A3AE0F2AE375FB22CBD35CE9C2542C240A79BC6A79F1135E58985837E1CC
1E5D6666BC5D61FE6EF590316F9D1E80C42B9A7B6106D8B7F575447AACBB2660
2C96D7F024FFE3292611E82CFE62D95646B92CEF6F03EEFCB3F6950A22B0997E
52C38B55B77C2EE7A4D047F27ADEC6BF0BC639589FD0D1E0A47C948AB5BADA43
9846CBB5B1CE53E96622B59133303AA0F559A481E50382A2A38C98C1A56D9AD1
1668FDDBB1FE8068DCE68E5DA13C2D9918D1FEC7F69A6DDD3A29E31A57B7BDDA
EAC616202162DCC7B9DC52AF821A9C1D2D7F860A2F294904A55499432C7098CA
BF79B1B0A1527B99A4C57673AF54297BA822AF200FFBDEC475158AD6ECB55F87
555012ACFBDD0EA527CB5793CA7CACE2FD956F30D7A8AC7F6A98979BE4BD744F
BB84A87668E3DE62A814B92D3139981200D5ADA86C5D733CF5107DF6CB5C999F
F6F63ABEBC9694F0F67EC632BA8C58E715D92FD6BDD056F29753BCC3E54B0A7E
63EC33F7A29740EF0D8351B5897B126FB6C33E9A33CC83DAB91691690B8B9598
FD3F397FAD45555CF5FB9CD80879A0CAC1CD8E8D536F05134B21FA4065452DE4
BC8F63C82A3C34A01D00F4BB254F2AD7F6171EFFF6D7BE1213C9456AB383C568
BEC17694C545B98E8AD734D0522FEC92EB3182DDDAC54740AD352E7645D08B4D
CB4DA9B381D36C920C77869619855B4CF730E590B0405CD25884D6DB4D49F1E3
D79EC4D0489514359CABED492BD751104091A661A510F268EC681F818780F304
D960A15E583F354DD574767B860C57CC9CCA991E710576C626EA909C6677057A
C409AEE846B4D5C0535F849F33470FA395CCF5C05CBB9A1FB62CF656F7A2AA42
34730F786153A9856C337112F6A555A70EFA76404E2B88DA2DB91E8A2BC5A05C
CC339DCA364A87738B60497CB790EF16875CBC506695DC7D70C6ACCDB2A00555
3877A013482D55281C83BB630CB3EFB0657E5490176CF23420B97265B22B4CFE
1DF9E0B294F064F5160540EF3A452641C82E347A96514E4063A7FF16832736A8
6F21F6881E269CA09FB66DF37CAE7FF46D6B9AE42B6396EBF9A7A06453A81EBD
808B047421B0F88F62B3FF217542FBDA872D03A476FBC7C0D658C03AF70ABB40
03F1A3027E0FE186A22AD461835877ECF843C0E8B8340306092FBC5E91783A48
E010EBD29F114BC273BDC53D2C94275F8956A74561813AA6C2D896CB3F6E13E3
30F6C230C00917A40EC6F4689B65BEE32F5722BB1D1147585AB3B3D2D5EB8273
CBE30D1C6CA1BCC4BEA9B87A014E7ED3CE53D13ACC8D426267CD3BFB8497E1DC
C51CEB14F9CFB4D4BC9D6EA5A49DC3871DE59C89F855F079299F45D363F78634
493829329E3F370D117DEAA18E7A6989C515667C2229779B9A5494DF0B4109E7
71D79D379FA7B408A4675FA3DE17ED0ED632F9A443527CDA8E960411AD4070EE
173ABBFAF9101BE92BE59707F98419503A85AC58B949E8595D66D7B13B8FD4EF
11B28FCB5955C5F147BD7FA141AE0CA2ABCB1CAF82FE22D3281852205087CF45
549F4D5B47F52AF50E8F6FA0AEC0F95FD0B1EBDCF965BC8A924CE0F4598AC546
C15CEE4EDE7E6DD0E5FEC3A531B944CEA406DBEE21C4CF3384A79D0D5CD51BD8
AA5B8B1FC987AEB57E86D3C6FDFADF998A6D6043449FA5B88BB2DCBF2945A513
AD7ECD01B39BE46A577437E1774C3FEA176287C51ACCA15909E987B5AC2CA664
709AA5605EA89A8DCE6B4014CFA781E822E8B05F377BD0187D5EAA0585A98E2D
6726C471578295D824D1FBFE89F04A67F1A360D799CDF92C1218F29C24DE22CB
C6B625D044404C22C89C433715BD77D0BF171030BA84E292B7A81E2FD99D4E67
BA702C2EFA11D4461D833E74E97C9E295C6D170DB6BD73D615D03E678B0296C0
F8BF99321767684127625942B4C3241BD0608460C81D97FA658BC179917B5065
74A4D1F729CEB1D51C82F9C90F0C712917AC482D413ED7CAAFD545508652DACC
1A03842E354F734C5FCEC8C7BEA4C69B066DBC83BFAA473D0A632DA2CEDF20B7
6C7C83B4AE2AF7E05AA2C081BB6870AE38848F3870DD62C7D56EF1CCDD4BA3B0
32C61ABE629BBC464BBAB06AA0202772C16D82427ABAB4830ACEA267B0109A81
BA5D832731D1E9C9F0552BEF7A9B7AAA73760C6A09B910009BA9D93F1A56298B
A43A32D43CAA3988643DE373FF47C176CE92D7931601F0034E6CC303876498AC
026BB32D2F656A3541815697CBA2B6D527B69816161B2E13171E073D7CD85435
3D32708391F63D592B71D98805CD19978C2BAF780CB124372EEA0A3DAB537683
DC74F9E9EF98843F170FB086AEFD526CB81A7CC88046C52E1E56EB40F6F5C75A
FE9D5ADE49E82078858072F68BCD02487EBAF4E3F7F309628C1FDCD4B01F7D00
E1AE0A7CD3455953FFC77EEDCC5B5ECB1FA583064EC17132A3C12C0153C4B87D
AA57FF73AD33C22C81C545F0593DC7EF438FF7A5F76A04E52848E00CF2C8CB06
F295B1CD3BDB1D9E4EDD765D3753EA8DB76DAACAD75CEAC866FC4CA41501200F
F12998E8DA573786AA9A7232287A6D19A12536026BA4423EF0B6D81D38BDCD9D
2BEF15BCF32824F8EE802B461F52BD926A5BEB2E6CB31AF83E98E849D4339FFF
95419941B12D2F3B76CCD34D6B78B91BDFA5DB4D4879501DF3E514A5EA8F1713
E96330C5B4F1B7BA42D42F05E229FC303AE00E954A81F9BD43016F5930A0C490
6C753157E4355F6ED3C5D1963779EB27402522B5E9D459206B3A06E594DF198B
785F96B96E13045594EB42EF4A8BFE0DFCB4C5A2DA9594431FBE72A5AE18991A
36FEB5FD9E8B238B3A095939B6ECAF5644BCE7DFFD8EA3E723F66B305F142B71
B26F34E0538E4B58C4B5984883C6B08F3D1F596B56578FFB0EDFFE3F95E3B6AB
63CEFA183A5A49F07F0F7559994F56D7305139D06AC8DF9466E715D90AECB1E2
C35E3CD3F387579B3C9CA6F5BD741A7A5D7B63FC0130AF374124DC8C6AFA4FAC
E40BD5923FE889E87126FB22C1AC4FFBD351F884D70803BBE1BD0D40D3CDA0DA
F6984C373D3174358BC41C8DD4A215283ECCBC24F345FE65E316F24940198A6C
3B5483129706AEB60D6C0CCE0DF9C130593475C72A92662A323EA5B689E5AD0F
C949536875C37AA2517281A36A1C1D5650AC96E0CC00C03266E279B54232A1E6
E6697196A4270E1DC794D8DBDF0690372AE19121B85FFD357E965228C66BBE6B
D2E55533F7A1BF30B2EABBAC98CE35C619556CF9F0A522E8EFE4BE3EC61FDFE4
E364608963C928AA8B302B1636DE15C83711C8FA060C5BBB1BCB8E02215A4F4D
560DBC4A235F6F07EFD20ABAFEDE0795AA3932556D6AE3F6EB8FD0C1C509FAA2
55CCC2703661C9F48233B429F020E01C1F3B8090D331C3B925DD5D1CF9D19F95
6B192C593225B5186109D3E6636E87BA6F24EFEACD1F06A29DB1D1F4DE0D0253
87641AA4A1113755D0DDA6EE4234CD9AF550DF63A46FC6F698E623BBF6F05278
858904B415033C1A33B7770D99247815E2A8F1216EB42EF9742EEB4E1D90EC3E
F2C0661DFDD996CE1FD66F946B9D4FFADF86861CF8EDCD570CB400D181697747
83F38B92B1803874C24AF99C66E5F966B0E72B725FFBC6172341596D8AE51C3C
4676A65E4D32F499FB1ED170554DA7AFD79DE5953988516A8B2B123FA207BC49
D80645DFB16A79549BD5E41606D80424DBFD6F5BA1DF0EC271C596EBB4FD0B84
DC5EEC45C3FF598241368442A3FB06B460C7D46678069011FFAA3072402D4DD2
3DA6139A548FA99A68AC61134087071ED8B4A37A0A8A1A3B48A2A8CCAA351D75
1828BA7DD5B7758A43F98F4D449ECB58B20B26C40B35AC82623961CD892B5DE3
777908625E1A91DDE62DEBB2EE5EA3CAD7E089F421DF613D976660D547CCB02B
3C6CCF2F577C568ED74466961DF3B0939277731760E6CA8A496B50489AFDF559
CE627D143D52526323CAC273BFD754EFD5F279C96E7AC2F5EACC1C542DE2231C
3D0ACE7755A7AFEBB374E4807E8038FA1EAE518A7376807A32DE5FD55344F9F1
3342D6A1C34CABD7222EB2729EAB1941237687CB5CB2DCAB2D3E81731B26E397
704536C5FA39A4AC96298241BD976D01773218CBC7E73827519EB19DC4DC5B54
B4D3F1C441CD6688C404F6BDCAB1B0E56BD97D7AD07639E358720E2F61BC41F8
859A3A3ABBC189CDCECD66EA5953ED9347A599F6E305BD511D4F363FA36EC6BF
49CEF2458F987C017C0DB1BF27A6F70801FB6AC15F46BC393874AE9316E1EBEF
D3D4566C41E5635E353E6B08ADE7F4A66517B75ABEEE309594E5221085C60D95
DFA6B1D26E11A5C95622357D12B65ACA22605F360E3AE00E7907B842D4CB079D
B9E5C55C263333D7AECE4A31ED63312FCA1BDCB890F2F8FD374E3B04F2FAA7D5
EC55584C9B2EBFF56A589615651515A3D1A19E22D1038EE1066D03B94BA8813C
4E50B4ED4C895F1FB9B61AF146BFD5BAA50E77ED3009440AE9518DF67FA53A89
9573038FB52A41C95F3B5EFFBA5C6DC12CA2DB0F833329DE81E22546CAE17ED3
9CE3664F59C123C4394EA84AEB1D6EB39A405280B3212E1E0DE4DEF7E91E27C9
362E12B0D6A91977F1738083B5A305EC33C719A374D4A8DC8AF3743F85790F0E
9E1991A1BE3C960F5AB5FFA07DA291754C8DB10C1A0661279BCE4F47C3FDE870
9F6E2F9422270A0AB023998A638121B6317FB8E40ED7FF889A252641A33F1359
AF538069E361366F248224C1B5AA963096C30B7F629E90FC1667376EE2F21C6F
D8CC3EE7A0D8EADA928FBAE0FFF413F17DAABB200B700593A892BAAA0D79B9B0
5772EC77A931A1DE07D137FCE18F7CB1A78211086349641C43EA355EECE8B2E4
4DD1581C8BFE49B3158AD0382A4356118C3C5A89502C81797AF1FF0C4EB4B0B2
BA2B13E4A2BA75B3CF407A202838275B12524523B693B4888D346FD3D618A80D
73203C54B08541DD167B54B29E5E52CB811842259F32BC4BDD5399A9BFCF095D
573A3CCE0FECE49FE859A13616816BC26C0AD16157B877E057662AB696A5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMEX9
%!PS-AdobeFont-1.0: CMEX9 003.002
%%Title: CMEX9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMEX9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMEX9 known{/CMEX9 findfont dup/UniqueID known{dup
/UniqueID get 5092765 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMEX9 def
/FontBBox {-25 -2958 1495 772 }readonly def
/UniqueID 5092765 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMEX9.) readonly def
/FullName (CMEX9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /parenleftbig put
dup 1 /parenrightbig put
dup 88 /summationdisplay put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB69434BD2F5E56C8FF46EC332DB0
76984939803A4D2E4F7065326BC983B6DC4219499435B304C1AE83C8A14C4085
131D1CB66E24EF3AECA881EB3CAFBD7CC6E70F905DF2FF583BF11F2E5A674AF9
11C625E782E1503243619CCD6B1222599F709EC8E7657B1053FEE4D83E29B295
494CE2255E9D555D71DACD865C95E1A3ACC8D19A468D316142A854F452DE76EC
B45C35C92BCCA844FD24BF5D5A43BED6C829FAC12BEC9C216414BA7783DB2747
0B114774A6508C9D617C38A99EB5DCC26758D9D55A563F8240143878C5C49256
AD489CE0A01657DE0051A2E845EFA4EB61043270B4A8E5E0676E90149CAB94D5
AAA65B9198DF0EC8439A194D5CC14FB65FF3BC2D67707BAA7B23484DA100F9DA
DB0610AF3AD273DB18B69EC987D6D9A0BF699BBBEA34A0AF1AE401429DA0C85B
AE89B1AB922D16074CE2208BA2C3F88AE84F7BD87F4F23EE64789BB62814BFD3
946734BDD1586BBD77254160BDA350FCC2C30B7F6B6AE44B928191DD564693B1
29D840BF729843DA6A707EA375F7541D398527AA15017B3B625000ADAE91FCD5
B749C01D15B2A8C60E3E4D97D5C454974BFB02CC706122041709F96659FA31D7
C27D613F0B45ED42ECEA2090986FD97A3AD736C9310B7FBBB8B6FDF7052B9941
A609E7F7EBC0B652B6FAC06337ACC5A1D1260454F16F5EC6C967D5B7402600FB
546B55667896C188F50BDDA2E195EC55C0A7B48D6A025845BCBB4B567BB19946
69191A766E28660A8DC4A15C8022948207DDE6E7451DDDED8376E52631E4F0D6
B947E227F99E03605688E5E28EDFF6E8033E25FBE8F6A86D5A26B2937FF48C14
BD9AC06DEB234FD1669C8F3EE9B8BF3E17139E08C308A3BB0ED0AAC81291D8E4
2C1134A3314BCC0D93D513E3EC0D91C45C05ACD19994AB285B896334721B8C42
420BF74A5CFE7CBD243D3DDB163362132A0285C280277B4C60D9BFC3D40944A3
943697BD335C27F16ED870DABE54DDDA4BB5C3868DA4CC1C0DDCB50826700ED9
9DF963A75151C5BCDEEDCAF2576E0E21288D194E540B422BC03B62CFD137E732
D0660236BEA09052A292CDC218E48181DEE1BEC6548C828AF0FBCCF10BDCD4F8
B71AAD95C5CF688815B9BF856FCDBBF769FD395885A88F4A13FC7B9440BDE7D1
90324ECFF82AD30375BF19834A5CDCE28FFEC0FEFE45ABF372FA5C6F03D972C7
AB3BC52C7E1C1783D6F80155B3A5BD54F19E6B3FF7155A6DD083438D0EA7AE2F
F5BD3F1C0A13438F4C42B3379D2868D688C14DF6202B5006BE89F09FEBC4EE0A
CCC50B10D3F9E56CE282FBA763D6F46CD62A860CA0744267D336833173C93951
87995BAD6E789CBABD53DBAD179F29DBFE73E9E28FB75ABC0C3014A72D9C3CE0
A80412E418D69741397C867907C795A20D45306EDCF032DA7A4A248C8FFA0189
2552A041D06D13826860886B2FFC1361EEADCD6BE3710CD640E881B2811E81A7
45BE7BF836AFDBC85E5AE36274D19BB1A12083A35BC231D6C1D98F8470ECDF8D
8AFF93893D5C0557152DB776FA755663D4E1A7659DD7D7206305378297175CE0
444B24650996FFAAEF4A23052AA4E77553F992DF1D6819C195B0B962F5571346
7CC036EE1D527B68965DC2EED66818821AD02BDB5A27B3129C43986C3928E391
BA170B1B161818BB2E2529024B721839DB116A174DCE89F92FAF4DC83033434F
C96D97A6202D48E7FADD753825159E50FD051D7D268C5807225D52D161569EE7
F94A99E78DB76DF5860227F5B6ECB1FA255E162C3D2AF6D96099CF3286E96DE5
31D324EB92FBDCE0FAFC586FECDA5D9376D40C9B1A43BF1D52D3D54BA06745AB
58E755921509C3335F72DBB2366726C4CB688000C1D6BCE706A3DE168DD0D5B7
45BF139E205273B248F5C4E3844D4CD211E6208A2BBDBCD88AA8DABCE4FD0594
151AAB58FAF716298DDFFA7A97C02AC060A114FDB3A0FA6EF7B8F1CD8606BE46
8B7DAC1E72788C555BF9B5701865B263725AF314DB471239363AA8437EF51206
2181B31E56C30103126582F77EFC23CD8F37DE389C16333F6C4F78699D187746
EF94B8A9BF312AC2ECE4F23F9A7AA0487D09CBA71C11241155AFDA73BC914425
4943E10468A243ECDBC5E70A06A00529EC2DF656F21EC7522BF41EF0F8BF7D35
E0E76D6589E77900943C06AE933DBE3668099BA91C38C19E945BDDBFA4FA5C49
ECDC4F183CB9189609F753DBE5D5B1AD7FA8BB9E28E3BF72DE2C604D88F43552
ED0C3D02277BEDAB0DB5B7A9CCABC8932006E8D44300E748C149C08D41F86608
F980E68813988906B7A4C5436CA1C10E54EF608945632E82B22021193A51342F
5530D708792FCE9BEEB224D03DEA481107BAFAFEA271D16C3E8B89A481933D27
03A044FB481748F2C7CCDD0562AC53F9AC2A9423FB0C7DDDE764022EEC181FC1
1EEED102ED0F29A61D17004FACE1A1CBDB8994E2AC2F88DA74B173C45362EBBA
597EA55D327886FCAB9221CE187D9589BB795BAA03F931CBF86DE3E8668CE8E0
F8FD3B098CFE2ABA2099BFF8DA83E54E9996D2DC42E7D9416DC2D7FCBA3A0DDC
B8CF9B37F7EB7AAAA6AD85297B042900688BEDB470E6E38CE0929AD5176A6C7F
059174C1123F3AFB6FE77E4CBA0394C9A305FBC8FC817BFA6F97D530C77AFBEA
29CA42B9551906D7187398AFDABD2EE9B06243E95BB467EC8E0D895474C9C455
1CEE93868A6412C4BEFF0BD0272BA95DDCC0369AF8160EC2FE1C60F5E535D25F
B0632C01BF40867E507E7BDD03BCC3BC21337FA3B974244E5D4591437FDFB185
78F0176F5DEA5803EAE72E013AA7FFE07C40EB971DD7937DFE111BBC33F4F8D4
5504AA54C414D94A9FA908B7B5356B913CA1AC0E71BD21E3CE550226FC5ED00A
86C05BAB4571AF93066C4F4612CC3C51BEA3F241EAE68A79284DB837F5B1904E
B642AA64A984EFB35F870912ED178F53DBAEA4A0E6E116256930BF507C01DE54
8BB70AE4F99C5639BE4F065C51C95D3C97512E6C7E2E796E90CC540B09DF02A5
CCD2694E35C075BA264B1C1C83CBDAFCA48807A008B1873273AA1028923AABF6
6660CE500CF174183CB593014D8A272EBCF3A09133603CFFEF43A6FF059BCE52
5BF232A5E067BADBAE7D90A56392F6B5922443B8A14DE64434A0018E21C1CC89
CD5D85A03022B4D80FC1C3C8740140DD6793C65319FC3E906C7CB714DB22068C
A66714E765A17F446CBDC8DBEFFD8A8E284DBAA179C9DD9BD9FD0A1DCEE171D9
D5E47F8246FBBBDEEA159301B189724C21E5318D1B73BADDEBD21FCB6E8DBCBA
4872FB568BEEFFC852FC84255B5014DB80589DC29AF1EDA5A57309FA19167514
967F9F9D5DE56CA3E66A3D937C041E83C29AC39C357667715A824ABC7A39F398
60C43B9ABB86F0CB56F9CDC50B6CADBA7938D020CDD81D1B59430611632E2368
E7483D596A272D1D99B5CDF4BA2B66C9F50625ACFF60905652C251B724FF8C68
D45C0174D12B87E95E7D480DADA7EF001F12A1B3528ADEFC3052E7CBAE406533
32CE0D5F96B7A2DF24ED4B5C6FB220E751257161A0F095017D90E95F1DCB6B5B
BF0413399B722A309C1155A0A9F2903CBB7F192149DB130BC24E5C41056FC750
1E83C4E6EE02EA45465598DCF7C4892D00F14A954A4AA6C2E616D39F09BDEA3D
27F0BABE6CC9D417A17D3EB2C138A842F1E53B30F58F05C9C77F3A0CD8B3ED6E
5F67D05F551E95D9D1133D33C9F8CF57839C998E204A1FD39F24EAA20FB6B3D4
9FF31D4D1826745AD4D3E95EEF71DD2D4E6300C42BA9316F1560E2D9A094007E
79C04433D225BFDFDEA8F2E6D42C456B722F80EF4223ABB38991344ED1C78CBD
830400A52BD0F2253E20A30122A842971BE77794DA8CC6290EAFEC44E3273E10
54A6A2AE4E8F8072FF4A37265CC0C1FC4F773190B439DC006D769F3089928C4B
DFD6A6012A39A0C8E997599EA3F4A73FF32C011819711BC6FBC4B6260A02DC29
7348188F3B7EF0BDEBB8EAFF7347A3023C478F446CE904FC25AA2DDA51D976DB
584A2ACD393B9E9C601AF9DA9629DE5C003F742AFE6D414A9BF1377D823B465C
CCCD4A7D7D108A9D639C6BBC15844D9CF1AB8B8B2260AE601E7E9F7394E212B2
693B47C8AB94612A779255A9FD9685585B0D1A7FB8B7E586197426517B122055
CF9A5207EEF696E1B881E64754AFDF0C60838783E6BD49D470FD0553649DB0FF
7B8CC86CF80D05B0701580E75D874515C4C8A7823CE924E9E7ADF1C97085A6CE
24EE43E7969701EE5D3E5F07F59492A9A946F300DD83F9FBA4B8CDE73C12C563
0691D30B57F253DB008E4595AE2D472376E88E30246642031DFF3132F971D172
19F4B6C6F87303ABE5E1B4CF1AE504D1E4B5BF5C86E232B42304840A9BB34E73
BA98A3186A01B72D98C92032180DCBD3A8715016557108B939293E23697D81C3
FEBC37582B7F7AA541C220DD5D93E555AC54D7D277AD6DE29158CE8B89E29C67
A305FD1F200B5ED02588CC1E0CCC93F9C8CED113066C401E1FCB4EDFB49C9224
0FDD03519559B710C046DF2FD60DFE4029FD9505867321D98507F0523E93739A
81A9E72430D30D0585977DD323CE222D408E4E2DDA7FBFD91A1EE1F75B530C6C
A5F6ABA3BB9B6CF94C29837A4186EA933C7BA60AEA9CF1F7F632F5F561A4CB79
CA533B32069D8A8D2DBD8089F295FB7E0631ACF087B7E777BF77EC394DEE5BE3
B69A27B122339829F3593ED92F42FF2721840133DD96450BD9DBBCF984B3383B
DF60B5C6603EA17DD5A3D0BBA5C61E1A7737E5F7719E2CAF59EEB87293BBC72C
0BE5F5A97CF28FD8CE19177B37E8C223549F926B6A979F89C06FEBFE86178B82
44F429C3C3C1F6506CED46DE0774ED12D7BF94756D38A8B1801B086CE71FBD37
8C17A639A05280033FB5A7B8770A953C0CCB14B386D336C1CAE1CAFEEECCAA1C
936164553CFA7ADC9E540353BC77C57AF8F96CD0FB7C41D5265011C86FD66BA7
993FE45C8BD006B9BF0CFCD721A80368A1C4DD30EE15EE526D6F511DD5B42A75
9C53639E5CD73845FCA08B21A3EF803C0DD4DC61598CC3446AE68FD548B9F5E3
94B6A56EF1D7BDDAED84F8213EB7DCC84E699BD985ED8E5CFF2C729C02A925D8
B7906366BD4520AF1B56A6D16D5B8D1A9B9AA1EDD2CCD597BF963F42611D48E8
D2B4F733DAF0336890511388ADFC1A8801D25944E95BB859DC761B72B9E99A53
584DB945DEB895BE8B6CD42F39D9568CCE9F89781614437088584A57EF884C63
12FBD3E7874C42F97E8E2DEE2130ABF60DD60A3D84224AF5F6BC06F1DE598843
C9016FCA08B9A343FC5638A5F849C84B248C3BD487895F602268D3E6F5EE8AFD
0016BEAFE2901B570E75465A86AA357D15EF02EE39D18AA90D784DD117CC911D
47BCCD7B6221F4A0741BDCF8BF30EBA66596F2164C5C9B9BB1E013C9F92D0E26
A8C82CE7E6EEB0870BB2A6D09BF336CC2AC4B35D740403A60C31984F11B0D4E9
8A8B95DCF96A7BC07C1FF7510EA6B709A2FAF612CDF75B71C1E471ECF2650192
4643D9FCCDB1FDEC4FD158AE04768C099C7CC1FA1F693F884E04522E179C9E63
778D704419A3EA4217A85AD8E70B6BF53F87430E511C3FBDEC1909CB52912EFC
3E645F84680F4750762BC29CDEE4D355E3F2DA698F474D585E4068CE0BA9C253
89E76F438987B389480A7CB39CBD601D9A2A5640EE3894A345548F18269D275B
D43F757712E746E7EA971055FC27159818DB2E464628E362EEA21A9C5250AD98
58DB14F128F2C1394D38F5D12417141DF703A471BE813269CDB23E3F8AAE820C
65A72B14E8663ED16AE4BB7B979545FA7A3EA413E6435E0BAC5F16EDA64F5AC4
5B3B4188BACE769342E1B5405A3D87A3E8D337E8C6BB74C0FBAE053BFBC86746
3ACA563C0B70FE33B38C5F5C0D704B90D8A081F5A21ECDFE0C800CCFE29086AC
1AFD3E9F3A37C62656182F8FA82BDC9B6D818FBC9377271CB5F4F60E2AA1422B
4A52A35434D55740380F28026DFC190C9FB8F2D60A87E9D6C2FB65E3B745EBED
917DCC5CD77BEEA69D2C9698A0A2BB3FDCA2C338B1D4FD47B06FE48A1B643DCB
AEFEE774A7636F7D29FDB77B8DFC56FB7769521857ACE49C2A46A19EE83FA941
F1F79A39384D9C0C69F3AB2E22B142FAD9F6EC6F4D9FDE36E12BD766206EDAD7
91BBC76CC9F6EBD6668BB435501709CBE1CF23C32C5C2A877B57445EB3B879D2
FC850D78BCB7E116C1155981F8B1B7225FB495E0927B42DE27F16AA7DF593762
67A6AD250B378667E70198B04B040132AEB3747E89F9F2A213AC9D008558D32A
23DA61B5AB7D18DF90C68BF29FF638630D5E69872C3B7D905182BA65661CF042
EBD958B8648F5B650425B86336F3F57ADC4C3A02CAAC08E87DB5EBF6DE8C6E40
CEE8B7138105873B76925E5F08EB999C4A24E1F3EBEFD79B17D31BC0E2D12C4C
52708F03EA1F6859B3F91B885F76E6EE97D3A813F2635231F9C93D642EBBF666
EDE5B814BC413C5B85E31DB99EC2A1D6861801C7ADA21BFE167441B26E1E2BDC
6BBE9A438B41B5E3A7006637708163CF0E95AA0C47C15DDA87893AC37C3130E4
81F084FA674E69515E490C819676C2E4FB666A4125C7677FEB8C32299E6751AE
0ED2F1CB6AEDC00E0F8D8EEDC6C735A5CB813F1DCC95BD568030E63AD7DC317C
6F61B99A39C65B93D0828817A1079F40909A01A2F11A01FA256D2C57F7A28BFF
82D4E3E4CE220F270536A6424468A2A55C567AF75363C7BBE849BA0547D3867F
34A50839A7061287272464F0C5CA47C965A265E044A366CA620896AD19EE956A
8049A30C2B93FA109424AD69F8C369379C5B6DC1C695DB16E43912308DE3E3F3
18F592F0C2559951F9B1ED4D9B66D0F691BE22D45361D74A216C4D91B72AC393
28A28481B8377D8A20E2DCBB87FEAAA6C47861D12AB22FE1DE62CC65798D5614
58AFBBDE546B5712A69F199C1D84CC20281C24246CFBE9B2DAF3A9DCDBA4E5D1
BA82CB7082E3F560522D4947B51182431BBC02250648D7D2B771FFE8B272F269
14D4A76B275B1DB785C374A227624FC944DD8E80A0316EFAC25B7CB975195EC8
B248452D9D09C2B304FB2F5D416BB6387C2B0EB06223AD089BB9BF21B6079B1F
22DFF38A0E248B9733CF97D23214A30167C32E63803515168556062D710FE258
C6E3AD9D3DCB888950940F7E91F5B5D25C03B5A25AD033C8443DA01914A20EA8
F2E6CAFA15F6E10D5645DB2EEF7D627BB5DA85DA1DD2009CBFF9D2DD159FF95C
211360B517EFA263CFD0D2368C13381D3BBF877CA98DC6ACCA103B099DC2F3FA
B7A6C1A01CEA32F205716B83CCCFD20C8ED17A3D778B36C1F28C88B7151637D8
ACA1CD904829034DE2B388CCBE8789A647604825949FAB2921C78C670DD741AE
E988968EF346E13CE3021D1A0DABB13746EE4D782630708F40346358D1E71DCE
A3889ADAED210ACA14904C4F06EF1F86542C5ABF455201647355CD7AE4106036
F1B7EE78A25934E8D077D323F961A71FA3CCCDF5A2C468B48D08BE2763346935
0AE028DB5DC32E84F6D20CDCC34837AE20D6FBE559C10A65DD5ACF4BD1AF9BD0
2D5280D6763618A3803F4777CB8D89F7F96B93EC116373B47C98A95D9C332C38
4DD9CBC706C928A414FA1FCC656C3D91023125015202411418DBAEAE0472AE86
C7CEF889388A03B9BADC361256A312AC34F3A4D860D8913EC169F62D3F454A67
DCD2AA7A2527B1C5D97A19D241E20B4613D932FB941F118FFD512FB3560FFA1E
35F8249D0A8F141A95222394672B524A6D6D924CFC4511B349AD4057B028B02B
908576B216B5E155F63D569BB7854505E08C6291443032286DC2FF0837C5BFF5
94436401691DE24F260A3FAA5DD28CC2DB8FE5D901F60BD5CEBD8083A72598FD
5D092F0DFE6DA5CC49E7C6D5C678D71648BAD7AB5702950E178CF393A176D0AB
56264BCA7504A6E66D7F9F5779EB071A12D8551768DB40D26CC4C5CC4EA2F027
4B16A80AA4D3C80AE757AACCC0C4422DE67E27076549BE801ADA61B11F5EC2A7
6E8494C0C0FCB959BAE43964CC328A25871953E354D324A48BC5E5554A73554F
F1D2C2D59F1E0B70762A90E559D72AD6D057774EB0F53CBDA3E8FCFD98A93695
6999AED6871B73B99FD113700D718E02F7F5528453A1D72A204E21292F3CD093
D6B2CD340836E50EC28163B0509DDADF15C6438F49D4AD5AC9D38AE0E3DF63DF
72644C36BEEFE5740FE90FE9A484A1109FE124FF6084B8448A83D6E719002409
C29E4B66C44E8CD46B11B91AFB9B9FCDE4E0DD1EB86EB5579E2E531467BAC0BF
36714F9EAADF14BE855E5976A16075CE1A9AFBB6A4BEE7AD60D9A92BEB5B7123
9C03778B689235F41DADE99D9601AFC999547D463B3F992A7991B2511970819F
FA8E90BCA951064DBD9A7ADC8796D597D5F4D60DB0CF2FDC7A1A25C7497E7C7A
A0A97F623B6691E24DE996357E879289D7A8D70053D76780593C266E0BE2295B
70001BEE082E1F76982BE259C6A85A6E32DD1634E8A1AC40650F2054A5ADA35B
ED6501FB315F62F0DA89E1846192D9F087DE9BEE1853ACEA6B1F5C78F47FB0ED
B8BA77
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI5
%!PS-AdobeFont-1.0: CMMI5 003.002
%%Title: CMMI5
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI5.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI5 known{/CMMI5 findfont dup/UniqueID known{dup
/UniqueID get 5087380 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI5 def
/FontBBox {37 -250 1349 750 }readonly def
/UniqueID 5087380 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI5.) readonly def
/FullName (CMMI5) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 105 /i put
dup 106 /j put
dup 109 /m put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFB9CDB3B91E19AA95
B6070999687CD39CE05B0501BC0F19F4FCE5E19BCAB1989C541A47F00C4947E1
FD7D566D95445A20A22834570ECFD7F17970BBB274C172956BD6458D36A306AA
51AA40FA84AB99AB3D1C47256A2DC605467A7F2C77963B2D31C2CD1971FF9627
23D5B9CE163D84AD3071314F555A564CC82CFB80B05E31708542DAC587837E6A
8708B83AA4527ED523623419123FB743F544A691FF62C172E6FC42F1EA9D96F2
023DE87858FDA38BF3FD9E2AAC5F05FEBD28A5DE1E97FB1B03F6D7BCF64ACBD5
20083E062A50A1B86CD28E5DA789361A19511275636562527DA0CB8A62C0CF8D
8A46EA3505E7C597428C86B3B05FFFCDA0492897AC6C6F689ECDF468F49463DC
F193DE83E34D73E48D23ED37CC1BAC6D1CF6BFF1C6A0165B21B844326B418575
18E1D044C1864B27AF65AB4A031C767FB91D2CFAA1729386A7C1621D859572FC
B604B35455D870D5A757DB7BF44D9D079F4F70FC669A96A0A1080F3297B6353C
6161E0E815C054EB6709752A8C104D177FDB4962B988270E9538E944E2FF6717
6389DBFE95B71E95EC57335EEF4F3E8E7B041690F54039D546937028BD0E8740
A9F8719E08AD387878420EBF7D8D1807B6A594E98E27BE8C6314BACE9CEC94C7
D57CB34AA7DFD06477D62C981D9D686255817A22E3F49DDD47B28FE7CEBCDA0B
30515EE8EC56542A3E3E68B990E5BE8FD65B953A0EEE2B066FEA586C75E4978F
0A0357C0C37397AA22B9EC8D9081B44C71CDE7991903DD5E071B87D081A57064
A143042086EEBF8640F36E61D8A0052C726C25F1B3CCCC6A58868E00C30D5CD2
034835FBF999CCCCE1CA0ADCE3A4EE4A36475FF6D00E1D7A8ED65CB0213FCC76
AB7DA81B9A97FEF3A51754A48C76E80198A2475DB6047623FCBF2CDC827229A5
C1DD7E79197C29CFF591EAE9547A1B21D381FA04D80E87F41C9A00A71B5424CC
D7550DFE38CC7BF2B11B810FF09DDC48046BEAF8EDE7CBF8847DA0BD5FAC93DE
09EA6AE97B193E9A31F1174C337C72F4CE28CD59ACDE969712C57701EF3C48E1
38C650DA766470DBA252DD9FA657F7738D31A864E26A89C0618EB611B36B321D
C48CD0F10C4157E210657C6CEA4BE0DA047F414C16F18B8A49E4E783164A83F5
E59040752152EC549ABC2F840ED955F90188E8F91E4F4533CB5F42478029B90D
76A996EB3D99BDF9E1B3019AFC030536449C04275DD78343702CC302461DDAE0
9CE2AAB36414A34066ED793CA7313767AA897AFFF6676E1AD5D4E3CB3C3A66B8
C5E91C170C41B7233D544D8EC3FB6E7E6EBF4E1CFBE49E3F00732256EB2495AA
9D206A20E902CFC57ECA3CD1DF324C834C75DE927C473650E4FFB299509557C5
9313ED07F343B6B4FD9F3DBDA9B3242756575AF54DEAA7C6DB9F1B9E1128989B
312A505411EE636BEBE0823610CFCC7D347185E09CC8A1A78CAF7F20C9668C91
0DAC60D889D17BFF3B7AD694F587ADCBD4E48F36DFA34FE98CB2E8A17929A683
0B66E005FAC311AAFA9814DC9CB2DE3059E0966106CFDDB18035EB255906F843
C8473B5E66E8FB4582FB72BDA4F4EE7A8F3A178F02EF1264C0692D7CBA2B1906
DC27331F86B6D88D3233FD74CA88D7041B4A2025A7024F467B64222ACAA24DBE
112C83886821994044EE5800F1F81F7F58ACEB07D15E22D38EBEA6F5C4F7896C
BA2EC301F8FD150832966A0C46EB35ED3EFD0192351AFD1FB9C394454BB1FB79
2BB86FFF5B846F412C1D28C560C00B1FE876684EC864EA6F88E7B095CBAB2B26
29EB6928961BC58633B7D5A5746996C3DAA6FCBBD2D42D59C1273B786511AF00
B60B0E04C7365E4AAC4AC20288ABDBF0A704B6F7CA2D9FC65CE4AF36A5CC463F
F97844B79F772F1E0C6F4A6DCD7AAEEF16A4ED9CAB55E692586C5C9DE8701A3B
111D15F99AD44A3F375E7C4A531020E9AD5CD77212BAF0F9516B7E865F5F5042
50524EE6502209FA562C94AEA4555F868C9FF68368EC6C2E52253E0C882132CD
DDBB83AF15DF29B2DCF516A004DB97AA9487EC2CB1B772E8C84DB1B82841CE64
D4D10FDAB7E162E079FCBB9D4670AB4D2F9128E48183A3884EB8C74DEF7F0E70
A587A300CE834A739244A237936A78D31617E4F8D298EEF7A783BC573BF464E2
9FD1F0592DBA4400AC25327DEC2F28F8EE0CBD17F012E9E15FFA98CF1F1F9265
C2E4B8F3ACEC102196B4F9F973D747979E38DA36558D6CEFF3538CA7E1427352
CFCFA0DDE3C02A42FA39CEA5DEEEC5F3F7FE7C1B1AD98D51446772195F08FBBC
D8CF46DFAF7D78A43B70F9B660406BC43FBD32374C022C3A58CB24CC43ADBD80
4E7AD6C418FE43DE31176B9128496C331085DBF6FA883042168C0FAFAA9DC403
7ABBACC2B18922C4458B49FCF241C0399E969937A2779184DEC8AD5AC3266E40
3E81D9B9AC5A06F9DE81785668B2CCB9BAA20F89120C9EB9A5F4CDADE6F67C61
C5E89C6014F4772FC208723146587687F8E14F4E63F2FC952D2F9143275F168D
B51AE0A66333D957C9D5D7253A2362C30A0219219BCBC770D9FCBAF0F7F45FBF
E85CAFD899BBC1EDDC416ACD9A7F83711BDEE28A683900E672453F4527F44816
1F284A4C488DE221333EC9249D1C70C3FA41F37924B813A3C54BE3206349D955
8FBC6AA9115F9061C9674958D40EA2426CBCA704E0AB35190F473C72086A2B2E
DCD7E6C1CA9BD9D7C0C2879E414EA6C61923A60FDDB53957680DD30951CD3B0A
6B743B1E7952601F61D4413C3A7BDA4CC1C65DA9D453704A1333512560B2EF09
C2D6D34B5AD4AFECB4A07A7DE5122ECEAF0CACFCF48E78F440071570E3F171D9
96E2C6169DDC77A3B9A61D5188428B035F8128BA909C26B448B6C95FEB52707F
AE0687C3987F75F1BF90A7F61D0C492C49457B59271BCE48F3FEE78E12D3271A
F5A91389DF2ED566990BEA84AB699B3651B2E81975620CEB607E2882F7D29ED3
A4279439107AF9AEBEE47CE85DE5CE9595A96A118ACF1EB1E935E2251E0E7F1E
D675E5D89D501C9CC98EB274B6B00B718D3EC50EFA7E170F2DEA2A2D2C8B5760
E85A1AD504660A93140BBAC19A48B456B3FA48E05776CE9DC05426520692922C
4AE3FBFBBBA2C4EA2B92663E8D316B9D5E733E0F2FA092F24AFC98B5D69063E9
8AC28D6EF97D3674C04176197050E49709D7558F7A32843A2278160DFAF9CEA3
9A0A8907B19379083365EF866E2272A9ED2B662614C57F81DDB145E9D460A572
C573296761CF028B0CC562B5C73B1933F0F78935DB0771D1780C698A874290CF
4F3D2D0C000B9A4077156A0B15F6FA23CF70586D3E341796ED8BD13BE5CE69DA
D169579BE16C6BB5D74224F380490855229FA64A762AC6BBD0D06ECC13E57E56
FCE574D51744431CBC8A369698B3F9BE35B7C1BFC59FCF08C04E3554703230F1
2ED2DC4459A256FCA63A759407CFC0B4D8950852BD11D9D631DD0B1EA09178EC
B5C85FE885F3E048355859AE345B73EA0C9FF89DDC31A7839C86CE36FB7C9C65
33257339FE7DE8F9826AAD599B41B8AF40F47BEA4399B65B7E114FAF14B9347E
4627B501AE9905A4EF4483551D8D5B5F291CCC25506E38A5DA92E127FECFAFBB
F6BE02A63DC1B5090A11CE8700402A53B9DB788ABD4910DCB8F1D0C9FAD68668
0045C5EF2F0F5205F4A4CC2DCF43479DF053E2DCBAD3AD3EE779129E7CF4DE95
34D03F05FBC72CC02C5E1BF394AC39530D93C70739799B7E2FC84D99EF7E636B
900185158DA3427B30E7EBA29CE9657D3103060934EB58A514F6CC06CA0EF378
2447416AD37A066B63F2BBD53B06BAC2C915AD28CAD86AB1725BDCBC12D0368B
0F0DB1885ADA0B4214F59DFD86F15210763091E3E5E7925A39F7C58DEA801563
198D8146DCEEB18EDE7EFEBC5610208CDF7D42B23E15AA911BDE63C0EBB78D9A
DA13B882064E1861DA9B4688A242559ABB1BA404A516A4C7357D18E4C7AC7D41
878E2D8682B032DCAC20FC72BC0D18F9783E9094F59D3A35A977CAE583B5E517
4E8A8C991E5311533BFD4FD0B9B7DC8F129705509D194DA9F18135E7B87DDADD
D06929F6D65C8AB18895447C4E542CAC2FA8DA064681418E49807CE61DB77720
4D7538917F5D113CFABEB51A0E633DA5ADE4D3A09462D2E4C11125A31C3ABCB8
D2905C09E4E91D11B92F405696A4F1996282F44F34A19748121C0E86C3DB2CF9
30073205E35702C191BCC6005822AFAE9EB440CC7739C51D391807AA5FC768E3
928AE0860D52535397395FC31BAD93D8887146E6BAC26891DF852FC5E277C3CC
45A9784386BE5A1926AF84E7F3BF380A5ADF32D73CA695FF1B78215F2D2349D2
B1C3AEB04DB8B11A611682E7F4FEDF08716A801D84D47FCBB5FD4E9AF027635A
74E8C12F7AC159840DD60728DF43615BBCDF8EF80B1D761D34ACCD561F5AA2B3
15BC21A4856032E4F9005F93F7FB3CA7613C32E67D74796C5C819457378FD94B
89E45341CC2B774F16C035079A741B0D2D54B43FDCF69DBC30DE45BB3695AEB9
CDA1C7EDEDBDEAE0079C5FF03BC855E5F5235CDD99A915CFC78373A4604E8E66
3426FE7AD92B8FA0FB0CFCD773434B5C624CF3DA9F77315F0C58D42CE9180BB5
2D2B7DA554300CD38C592CE35966B1EA45638CF064AAB4CCDB2CF3ACE7A816B8
360F2F5D7EF9A36DFF363B87541744CF36ACA31F9B17872C96B8214740C7C0F0
0E251B4B3306C443487F71ED324B4896231B91F909CF28AEB3409DE1094E6483
E851326B4CE4E56DF03A929913926A8D4C52C7DF7A6F7EA62BD9343AAABE9BA5
403678ADBD2C125B5DAA08EC695F6448373355FF5B91A4FF16596A5D172BB3FF
7CF9AF0B6A744A2451C7399E969E6E5A9784B9195A497B43304111165973EE28
3EDA3949E5D891E1EA363F8A8EF4ACDC82CD14BB931480409A5EBEED54CF8284
55FD70C98822BD9A31523A3C6A6F26B0216C07B6D63D3CFFAD15A1B83BE55D9B
4008654433D80F11754E4B4B09FB22569164A8DE5669629E07ED1ECBFE365287
690C6F21274ED9DE2156D06AEA66A323450B29E4AA42CCC9C9261DD499FD33E4
A974570C690D2C0A1367A7487D57427C01203D2939E89A1F18A4ADE84313A2DA
B12EE671E3B42F44F6B32E12F4F2E51479FA3420A3A13087D9BA76BB1756AFBE
C4654792600D79BF52A32EC8E02587753351AE7F192D08B7EA9314FE4CEA31BD
8646E59F96765073ED1E3788C8DC7C0AA2892CA25E5641B338F5F207D37B2757
C7FE8E52649C38062566E420F8F0A6B83043F758DE906CF91413718028C9675F
5E0F7D09633361EE152116C675BC3A90D807D3A19B848DD34BE3BEF950287C7F
021E231262ED6A134208AE2FCB90B7436614D8BD33226D8D519F8F3F494ACBCE
32527307BA114CF02BC765387DF54BC1E231CE3F51D09F7A9178FE80A62D8371
533508ACF5C454CC72400B444D177A36B9A096489CA2761F1CF1F7C788A9F7BD
334A5C24AE6A648EDC740E36B28D6752EEDB64ACAD640CDD66CB98448C7CE7B9
8EA7CEF9E2A80EB270A22ECE1EAD0FA85EF5E0C83AF23F0B4E4669AB41A6B427
3928CA4421E216A4346FDCAE5D1349809C97D059A2CB6BEBED01CE0BA1754863
100D49634FB84A06CEE283104046A90396245601756BC39A63460C2660F54589
5A690DDE53BFEEEB398355E0FCBCFE9CFC664195CFE5BC9C4905700FB9FECB7C
6E644861E81E0C0581130D253D861801958F04A543EF20C99B52E246139B8D7F
B7C78E1E658701FFDAE6ACD2A7E79FD434B1CE834DC7F98D16048A2964EBCEF4
BDACEA4E6FB6EAB3A270FDA758BE633995D1A39EE148ADF8A169173F877089E9
1A560D068ED72051FE7FE1D6C3BAC81EF265950598475B84AF1486CFC55D5903
3BE1479996B48A6E9ED904C66700DF63029ECD9BF1794BA67A7C0A005B00DF52
8A6A0374F4E65CEBC1CFDDFCE3EE53B57D78203D72A0FD5F9699277126B4A5E0
70B9CF50FB9A46D0685B563CDAA61EE9903F0079B22ECC56F0BDA3F1930FC6E4
637DF29BA68C83DE60EC2AAADF31CB46F337126706EEFFA0E8DDC29E5488C2C3
E89CE98157CF908EB04C55ADC7FE853E152E0D963915F5104834A9F73E0EFFF0
BA20972EDA0F691CBFFF3B0D379B0FC55B77E4891B7B8372F5F79662E610AC3A
7A02E99A18D5E87E519C45CB8CA3AFB38A74AC99214C1A182437C15F57963CA1
60709AE4D7A9527518FC6EB1ACB5220932C53F8C1A0DEA53B1716A105922A90F
10E116FDEBCB7491DA52872EA22B8280595120AF86B49759E5D61FF3B39D310A
68685F464915FD4B9A19F7F797BE424748C94F4636B2AA06C07C4A4CBC634CF3
04E5B400E7E4F0419B112DDFAA0C4758560F83D80A525C09B67B5906D65FAF7F
6E5D42E5D0AA0EAB4C189E34CD1AF532F27AFF45FB1B954B3DCBCF75EE60A9F5
018F023784C394FFB581FBCFF4DAD820EC8C64F08360B26A89657FD7F50AFDEE
FE8179573A3CF350FB4D216AD4BBF496AD7A9191941040560854A5A22F2DD997
0B6DD21DD3EA8EB09C49CBEC6CDCEEB0BBB1B88271093BDE64DDA024D67F098D
6C1998506DDFF7907AF00E4A13A0E7C93046411CF6B38DB4AC2A8A0B67A027E7
96725D60A0A50B983A1541C18EC1999A99D7AEE5688407D62BAD5B13725AD3CD
0243D3EF4FDD9E409795D8022D4063BA844909C67ACF82AA9CED304D5F84A9BD
1EA3C7F5D2A7BF70766158BFA2BF63B3078593F3EEEDD0B6083B6858AB0E3925
8588CCB7BBA9438DBD430AD29F127063AF4B9F05EE48507ED3CA9D232187D3F3
ECF6B44F723CA243C91BFA6CBAC2D055A7DE56C0038114145FAA7D6D35070A07
5B65B916EBDF3A8A76849653DFAE3CAF9561D85CCEC1974DCDECC6592040CC64
5745DFBA8D9BADBD4EE85AE9662F32185133FF9A7E44D66410BDE8B1BB1873F5
DEC1D8341D039537358F7EC07365A462A58013C7072979A427CDC52AFFFCE7E5
4D922702976973206C0EE5806C33706C59C7361AD626D6CE7D73B3F566F01F27
AA275388FCE7FD284B031E6E262C2511B3FB2D6B93E53332C2ECF4BF165C03C3
1E16D2FD363B562B17AF600E4EFFAE42CACA979C6CBD4B624732090878288562
D28DA255FF658D7B2BF12E71C704E590188B62B57234540987FAAA373A4E6266
1D72C99948D78EE0BA5F56079E2B75EF5612495DB6ECBE036E13DCC1B79D14C9
5F085D1CBCF29D52C7CCB0AAE0CBC720E909CF719DE6804AB3A2164CC5D2621F
DED2AD5EDC14F9CCECA26EFB9D9803197435588CB476680F7FAE7B8634DB18F3
061C5289F14D2E2136783C42F2AB2ED12973BC60AFBA29150C76C118E72CB788
E61E561574114577F8D14ABC37C23445297753EB71A3C330F984885006154BA3
E1A07EAA256B8E5F5EB5139762EB0F4A641B648B0D781DB48A55B5D15489BAE4
7835562F4B0158AA1C2FD39A76A40238DAC16668DEC357DA709888966E72E933
1F68EA16A3221BE420EBD5CD48F491BEAEFC0E9A77A1670363452518416CB3FF
BAD590D0A3E461EAD5BEBE6EE7B2A42697CFFEB22C6BF46BBD3EA9155A30AA89
7FD1F319335E45B9E6977E4D6AE67993F7BD617356C8476B612AC5F8103603CE
A940D6978F7FB59FF1123D8C3C49A4D94B1EBA8D4CFE205EB0352BD1CB601CDC
9581B8ED3B44B090C731EBB86157498AC7037239F9FFA8261CA99CBF3D382D49
F0117EBF3D9A4DEFC8E6FF39C3F4022F8E1AE5C8B8A9DDBC74642AB0267EBB3B
DACC6B7C00AB6BC3EFF9588CAAD1E91DE71B0B7CC7787D549409481AC250F039
9CCEB878D275E2E346171058EC303E62B84EA810FCEBB2916BE110C37AE06BE7
70561CD930E8AE76E353293F9F839797A135916197A48D453611484DA293AAA3
39402546DB208EFC3CE2DA145B6B40DA1DF5E911DD91EC9F234AE3452CEB3D20
4B6D79703CA2EA91AC3B5951B557D62C7728D6E3F13BE05939C2A6F9F170560C
0AB39BFD238A0859BA570499CAAA419F561C1C0BCB99679553C2535B4FDDE702
D31E2527083154CA648611692A2D022AA1E2C6D5FA580B6E77C2EEB26C6A643E
7C1D168DF865B4775BE5F71D4603C1BAB86B4BBE77B855707A6B4A6C3D5C74C5
2D718A2D86B0C9E91D82C2AEB7166DDE523F70B48D37C52368A01241FCE8B63A
EDEEC917A3C5481118EBD4082FF15FD4D2BE60F57D29418B6B3C5F03D5EA9470
34BF163C67D62FE7359ED7D6632610F0C415EF01B721C7EA2AA27E04BC1184F7
D29B33736C033F3AB2351BAD214D3153A8B56AC1F060222DD0D1599235993179
C9E51D5A3BE628FAEFF08B77361E9F6D6198FA4DFBDBF06C5DE00368064FAB44
711DBD96DC7CC8C8FA6CD5FE6B4BF17DAE96A4D95CFCD30044F7B79BD7ACE218
D20F9B839FD8312F5B3279E3F455D0E8B50DC78A81C618B47F60FA4A056B50B8
139EEDB33C9EC23ED264397A13DE60B53013DE72A50D97CBD671AF4CE2A0F249
E67FEB8BE31C148D70C94F7F4300FA7EBB917B909F92A311E13CAC560CAB2A1F
3919C1CC50F56167030DB5F6C2078C0B62F21975EFE8ADFD1F9ABF923974134D
899CE5265AB1A1C1AC2BC5249CA9710684EA7C3C1FF63A4368A570F229E73F88
47A19307C701FFE0CF51B86D6C4A13B6EB6AFDA9DD47B618E357CC4EFCBBAC57
246B5313271B95FE357BF67271039042066FAE1A169891C0E5E87F6567EB5A13
32DFBF0CD2F48DD68A03A41E14AA3E6CC32FB3E9857BE07C4E2859A66FEA11FD
894171E07AC1813DB1992DC20BBABCCA8AFBA6A3C407FEB6E00A8262FF276B32
BC840C7B0FD7B46F9217748BFC85147D256337E533DC1E58EAA390C0D969AC0F
49BFD92127B1034EE43A16C67BC83C7F5FFA55F9C385AB5CDDFAAA68BD4C8576
1B8C01B012FAD4C3CE3A38025E669093C4CDCAF4AB82EB72CFCCA0EA4785A665
1BD34CD0E0A2361EC278B1F1B76B40829E40CB3FBD04DE1E73E688D697DDB366
466468E557CC5BB564FA54DFDEAF4E81442C96031A3A8954D3A1E1BD5E38DD97
4858B2C219E9889C842C6D9991F69286AC14D0E93399525FC74012325094D39B
95158A2846590C278C572D8559F2A5DB38C335778D4016D417F09627FD9FAC6B
954893D4F01EB82B8A3B51440846B0E32CAE26F6DFCD2C685821269D7E207C99
4062F9E542F8D730B5F2E649CA631A6D13BFEE92AA4B438BBCD3F00DE4C31873
F3F05081C7804311
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusRomNo9L-ReguItal
%!PS-AdobeFont-1.0: NimbusRomNo9L-ReguItal 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular Italic) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -15.5 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-ReguItal def
/PaintType 0 def
/WMode 0 def
/FontBBox {-169 -270 1010 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E134D4CB5ABCED39AC635
DA001E9934C198A7F9B9ED0028A85E9AE00421DFD8EAA3BB3B4B4CE45D209303
237BD51809FE4D880900B1EEB236ACA87B9FF6EBE6B994A60AF5D67CCC42BD56
77295C346EB4C62BDC1EF22EE07DAAD928DFB73455F091F32408ED6430B97417
683AF27A03718A156E3F6E7B6E4F2E8177503CD82DDBF4557A3CCFF4C858AE7A
F7EFED6CC521A28342436B953E4650B5792BE85EA2F989EB6D986905A61FA38B
96E1BBC830B74469150FB0B598A794FD80D10870084A877273A9502C3456E5EF
74350E6E3BE5863E8BA185EB59FB87B36566AF71200B6ED389D1287D4E925E33
B2383ED05D87D48586E698FBC5D562ED9D8A09EC3EAA1B1F300224AF20C23F26
A2EADC74562571DA84B3914D1D80B127C6FF4706C7046BBB372A0013E0AB94F0
C27946583871D272BF4F20FA84E89D745DE7BBA885CC09BA72E0F530ED4EF7D1
864B3C67007ED98800284235372F0A70C912E21E851AFBF812165B8DF912CD1A
013E271F0B347967876C68AE4C4107EF8AD1F170916210034C66394A9D971B68
FBFC1131E37FC178EB97C1B2A0F573ADD9D7C0BF944E6529734DF8A7EF54485B
A3375CC30E9E328943733CBD352BC15B06C85BFB4A96994291C72A0EAE84FB01
0F1B24D0125FB8C16D60561DF8BB7AA7DDFE9549AFB70C1E89424214609FDE41
9A142892E30F02754FD234CEB3C59A2A04C06BAB7AE40E8FDEC50559B8347684
391C750987802D5452C47C1E0B5F222DE9A0EEAFEE19D796FF375A1E1EF0AEED
1BCAC4F485FCAEE18AEC585D1A9D80F41871DDA45FEF1EAE82C5893118987BEB
4D9E345C27C7419FE65E4853B40537D822E34FF1E0BD2819D21EF607981259E8
9F1040A2D708D7463858AA5381759AC49DF4DDDEB209A278FE60BD2508ACA0F4
6A249A05B652E4C7BF1B676943CDC463BC437B72E3747BBC85EDFCD485C8E14A
8E690B5DE0D85B364074F070B57D33653A97A6473B1C561CE8C4F1CE8F5E6577
753611F28C96AF1B81D93D7CEE755D41C6192D9FF95C88A384578D427FEA2821
534EDE598078BF655B057AEE9ED51D2A2202D7308D7D6A39C314F2E83B15178C
BA8107608BAFC9DB06F114DA1547F97C577EC66CEFBDF346148A60B459B9CAFC
6ACCFCA617E5ADBAD2561E2DFCDA5CF3344F0B6B4314B9EEFA480B313069B0F6
A6CFFBC9863633009A906AC037ACB099FF0E59F1FE947A31A763F7DA756E19FD
9BC73FA3DA92729A7DA60F246A41AE4B047288450BC2005DAD85B7480DC99F31
167D12429A48637DB317EA32237EA13BAB3751E9579C8219DD72D005EB5AF605
87D4A26FB7E1C09ED409A37537DEFEC58AF2BD0F42E89A1923604C1C63D0F345
46B5678CC353E83E704DB8B9F65900ACECD700739F954AD5CFBF3A492F2F74A4
D2FBF20E45EBA5D846EF69573C5C757A1F14502D06086CE3AD3BB9DDE9851808
334DD1510066DFB9782EE17D8B2225DD8537468D380D92E1739E47167A0AF9F1
5A33360DEA36DDEA3AF6D0325E404404B0B244836480F5C02A3B5CC0FD8F5932
C6DA4ACA73678AFE982C7C8890636CDEFDED3CA00B86C57DEF55F8D0662E48F6
49117CA18CA484E11F30598F44A65E2D914CD12860F931703DB69B14ECA94EF3
571938E1721511171B2040FB6637140BE927369F803A4FF311D7824A829FBDDD
A0902ED149CFF1997CDC6886A867E872C8D4DF6C5E1A644D9C19E85BB497BA99
7F45D3092719498F9F5C6E7C9E45C24B6F174140CC21F37FF38C44E91999660C
726430CF07401A9F0E1BBE099D5B762FF3130D9CBCEA29F7F89A45595018AA82
5D0AC755E85FBCBBA5B21239888374E1524AC5AD6D8F41605C223FFD739998F2
E779BED51F12B88649B7F017F89BD6F795A0E4E6B18D73ACDCD154E24E73ADC5
8A451A0BB582A022944E02CB6DFD5D5D5A748C350ADBD4A39D34D0C5714622E7
5955FFBE17488448E7EC837B50E3291DF9ED878238DE3D4C65A18310261D7F3D
4AF115492C8F03055C40CDE35107D73288EF401A9B1F48963D5AFFC65E4A63EE
476E239D75409AD68AA03C6A85739E00943EB97BEA4FCD37A409B181149506C3
5D03A042D7305D797166FA44DC926495BB05B058933856FC36C5AA11F7289B8B
87D1713D4C03853DCB7E5B1C68AD03AD7F76BA82E9FFA1D9B9DBC98E1F59DAFA
32DD5F13FF405530128BDB6370FA6152AB34C2854B8B5230799117B45BB185EB
7D3520192E5AFDE5C74BC2A4827253F72C1CF0B3DF42504CDA85843C438E3AB6
D13404B3EDAE94D13744154EA1C3FC9CC0998C4F2C4775DDC42447D7C2687990
9E83C2E2D739722909AB8CCCF9D44ECD29E70A1826785081DD27383E2720241C
E5B53EC115866BDB1BB57E2CDBA9D9ECD28995D3E0F087B8821EBC31533A9AB5
B473FDF9E03ABDA42D7470A3A2AF50FF646823C05C463335A28E08AF7422311A
39259202AEC7661F72CF9BC326B897A1FE852B945B17BEA65090F19556E56267
35EE984D75D6C088333D581BEEECE345BB2FBFF2741AA88DAF174AE969A2F7BA
B1556B14B7DD96942A8919C3DEA6889A208542BEB711CA08D0AC4BFA35CA05B9
58061405D49D4C88A379687089035A0F4E496364192ACFF38BDE4B01A2535C1C
3757BFE429D57F4D1A6413CE1020E85CF8427D4D4079C8F6D991CE40A29239F7
1C30DC6967D0DCFF519A033820B0553B2F5995E0D3E847360F5C5B3C1E18C97B
0F785A2DEF48B5E7FB398EFE811BF29F0F5122D2AF31919A47FBF7A7E2B21395
BABB4EF63DF1C3863B24835D50C691CC91A8E871F14A55D1C83A31511E5F77A8
561FC3B716A82FC2EF5A973B027DBAE1C8E075529DB48CD195F1BE6FB515312A
345F0DFDE9891209A41B05B15F2115AACD569DA26E336290D22E8F2D15E9885A
1701C54A52C36A448D07501C6B42EF5890D646D6097ECD2371FAB2D8B9D2AED1
885AD5A2058199B31DFD60800FC08F2C0B8180E5389A54B8DB82A939E43F31FC
6E363F1E05B58EBD69BBF4716019D131ED8B94E20CB5AAD1335875151454E1ED
13B2B621D252FE550053E109DFF130ECDDAC6EEE875241C7A6E15392B3E04D23
7FD100033229A76D4AD01406640F5DF6C4AA3EC703DEC74719AC35460C03E86F
811C91415520EF14429AB8FA9A5FA3D8378691D5B8848F53054E2AD69FAE9FCC
6406FFCE111D9D9652BDD053FFE120C493DFF9FD4972DAE07BBA157F6CEEBB7E
1A4F11954E11B36A51B6A633EF95C95E9A39346F13290FBE7E63998F74B32F2D
C260B30EFB3F532DCC169AA235F41FD300D2FC0C9920052B5D82E1D4126508DD
4E9128444FB074376FACD7601691D26750F4100694C2A304427CB015B612B0A2
8954115804129E44ED88DA6BF5482782DE09709D47FCC9569856312BB436A9F8
7A34650F4CF9330796E5C55B5DF0C72BF7055BD8802D7AE65AAE0928917BC496
D6AA58B83EF3394E2172E7992C4453B3A91AFBCAEEC0FB3F3B7B1D94767C3DAC
45E4D8F3BBA2D26D9260C8BDEFA31D2191ED96A20A1AF74E76D6269CE227CCDA
761EE868D810BFFCF97D06071C5B50BD64C4AA8894BBC649F5B05DD113C77DBA
059D516C1E87CED11A6CD5AC087C1625158642575D2F3E68F6E461BC738A6293
B88D0BDCBB4DB840A11EA4BB8B2A51EC364937FAFA1514D7A7E2FC165E33EA8B
6E3D26FAB85CE144D79437D8A28806CA08F55471F0624D4D29B082C90DB0FE0F
BBBF86582579C4C79A9FF1DFD2EF620595E4FBD172EEE28632EA15F48A32C78A
FF6CD88E5A6C75A057E5789E58F29B1F5EA5C309CE20F06F2D780F4A9CFBC616
A9399DD009E47E42BF7D6AE9A3D699DFE54AC9E82587E9C155A3E6ACE4D9C73D
061F01E799A168B432A9A38084B0409CD781925B65E3E464D54F0B8C4780EE64
0EA5AE4BA9913A3E0E41F87ED35486F265D20D7E6B8C4F8728AE29D8BCB44FAF
BE880B8E044E46621DB25D84A1204B9EA997A0F8638DA5522265A58C5022830C
570327CCB89B0EB07A93FDC78B253A3412BE37F7E23F1A02A082444E5EE17335
B14E1952AB1DEB6A3E1BF76F90C6477B98B68DECE0CB623982F5ECD71C11D301
013D5D32DADF9CB69F174B4B0F14CC37E22BB6010C13E6BE27EF7FE956FF983B
DA016D8374D4187B60A228406628835B6E3566AF291277E78930401AB2DC997B
301D525F2E6C45B51A4531C254588E710D838D5904F28B83B1F5E70947A0607B
F67FD6D5E380140E55EEE4389162117D365B6545253FA6B18E7A581C8DE8FF30
D556075FD53CB2398FBCB39DB944D7B4B835FC8646657FE87EFB947F6EF31DCC
61CDDFC39A2771858E01300D51C912BE7CBA6297E68387A161F72C87566D8421
87A9B2C04618D40E0CFDD1B23AA85A32326726F417E95A8E1A84BA0C4BD4A6BF
0ED7AFB4A1FB529CEC4BDA087768EC44A893A76E1A4AEE01871CA966E2E755FF
986BC49BBBD96F70C6D02EBA1FD4BFD989F39F4D4B208968D8CEF3E41AEE4647
5BA8FB1896E774F8916725C3FDAF054D58B9354B677B611E4D59ED3564F2BFFF
47BECAA40699209F5E17DFAF885B51B1C91F24C32B6C0377A3049EBE1944427D
3635AAE16D383B9D93FCE91522FE220347F9D7D024AD69C63018054CB8AE7CAB
75105E60AE0E07D48E52A869C40EB55CF31782DCF756AD73F326859D2CB98E99
180E8013E922561CBE42261BB9611DB2291F2AD2585BF559E6BDA1685A2CC4C7
81C4F4C411F79B1D23A87ADA31D3A48C7190B7CB67BBBFC4E36F50E0788FF62C
1E0E08172728FB09EBB89695B5862C96EA1243561331C2D9EE7B65B8258A1C3A
C2B15DB2DC33012FCDDFC8ACF206EF6A6165A4FBCDF61347F594AE5FEF6C3773
F335A7CC092ADED291D41B33E62D7A8D23C21FE364A3DD6E898C35DEB1B25E7B
3E62481F91CECF41EF5C3B1C10287CB7777A3405D5EB7C09146EE1332137EE9E
D3880995E3655D9AE77DF037F0C2F00A410CAE326D673387EA75618A7424378F
85324FC390A1EFD756F2CD5F6351A0D882462B49467B8A2581FF80D24EF4371B
85B87D0C3931CA8E49CA34D57ECAC939242C57E37DFD285B009DE82FB11FE0E3
8A2C5271BBDF07C1CD9E4A7BE406E2171BE92DB1766C861BE292659749A8D452
917A2C181EB81257C6FD428F2B4471FBECEC115D947300612189F3D4E7F3CB07
A25182E3F9D2B24D7C2A7B2B3087F9BD37D43ECA3614E907DECA0181BE745195
8636673A031C4EB041657EBAE38405301FC04B541E2ACF4299819046E4745722
35B8CEACFD773345B3B114770C23082AC81488DCC273143E753A3563B00BA23C
94A3B9DB6DD7E8EA888247ACD9C8FEFA6BE234DA633260399827966B4906D39E
6EA44E3B687CBC8D830CCEB63DFDFBED5F16592115360DE771FED869EF8E7B4A
4199CC252EE32B4B18468020DD0D197727B943F360033AF5370A124AA86C7440
768AA43C787B4DA121B5636B49E1D43D37FB820D25E537157E86C94F8E16FAAE
BDEC86A4E5ACA1C4B1BB0A114787898D3BAB9CA702B201328E76C4406F3424FE
FB413EFC742FF7AD2C8716CE9AB3E053B69412EB01693CBA2E0E4A4E8B4F55AF
936438B65C419BC99C0B233ADAE39DC533F1D10843067264DCA6B38BEDA28D35
D73282D4F1F9A15C4403B7C69C78EB886DD56CD3BECA6BBD5518ABFCE86CC6CA
E184B4B08978BA54BE9B8E6527567AB46EB843726BCB26A03E885CB567895A10
EDB5A60F2B635A8F0188A64E4D273BE6FA1B3C3155C4C2C9D9B6784C80119CB7
7D98FA3095FEA499DC328054BF07CD1CA1159872E9A328FA085F54CD9DD02FBB
CB47FE1A015EFC812D65DFB51E3105021F0B0AD971DDAA362182293B730B9880
BCCC084BFE13F58D0A5B2A7C84A0897807AB1C2EF74B162BD93005ADE59DF6C9
1A88861FF70CF100E2D4D7DA0ACF0491B1252A876D89D1B42E837AF5891BAB00
786E81231B9879EE08A0FD5A88D7DEE6069A4B3744C65416042628EDCD86876B
9AD32BF87142F762E10DAE18C9B29574AA4FC9027AB682AF79E8EAC789CC02DC
E2DC59CFCF6E7C9CB506508BA61B65AB48E0903C3BD2B58A4A58E00B4B28F054
F5628C694DA878C0B71C832D842C1F7B352E141233CD8437EA8221B85DCAD9AA
D5FC33AD3EFDC22EFBC9753FAB182114BCE55F3BE093A931BBFE9A1CA424443C
04D7FF0697C9581CA418622E9EA6F15F9370F6294CEE9F325CA0F06B1C84D0BC
BC5488F33C64E3FD13A0D1B669D0D1136AFDAEE6FB6ADA61C83A8CE2EB32144B
C7389985CB4F5A32031AF9C7AD1B3986EF4BF4B54514B10DA8725AB45B44CB45
179CEF927D66729524E357673D714BFD49F6DBF0BB525F47D93B3D4249ED6468
90A0E8143F8C0213688E6C99A1A68A6A20247B49CE41097D61CF1C5D4E7DBA58
A880FAE0E757B49F463260B755F3BCE71C6E4D3DE65D039BCC0972C527B0D7FE
FF5AE53F2661518DA1826FDD85B8C1160B5D69090DD789229127CB7AB7DFE771
0B9FEA018CBC6314E29059A3D6DD0AD0719C61AE163CD9E70AB25EB4A87030DE
9D4FC35BAC0F22A5DE2EBBDEA69752FA677EF6DB0263E960537C25B412BB40B5
D14A792FAD7161A91B50E361F23209534D0239CC4904253EBAE432D63C84957A
DCF614ADC102E77DE9CD29A053F0E82917EA73F68365E2D6D767B746D429DCF3
91D4F64B45D3F682D21577B3942FCF7F0FFC1E15D291449E2F1EF0C71D93F7C2
B32F4F50097240019E47B2230986A5D37263D62BA3D1959EF2581F14FAA51AE0
B81D6AF0602B80FD0E86AC1CDF80B8E0CDCD40CE7AC49715536DC1A957B72300
0B792A1A65BF2AD13605ED1672C9AD78AF02237B12FAA9D620113A5011BB8D12
8AA9252FB2C6782A6ADF50C25A0A3D6646417C9248461693C84B0AA619862CB6
D2C82F79550539D8996ECA2D636A45B8609193FF71359EC3268924EF07B8DB33
F8D896E245B045E6AA9B4C67E874996B61D7F85E4477638CCE98A000CB0C8E89
BD209DB0CCDDC342CC3D438356296934D03768E286B70E165D9572F9FCE0EDCD
CE6036A19490FE006C62C8F29ECA6585D6E64475EC593EDCAB8EA089FB3950BD
ABC61482CFDAF17C6D2EB1B8D6D579042D3633CD4651B6BB232B661036CE46EF
B7B83A693C2D57AF959D59FBDB8B782D4F27D8F303AC793F85962305ECF4C537
937DB43EA9EFAB259747852070DA0B585D802A1239545A17350B7EA91F6451F6
CA0AF3395B3F4D1547446C07B8401B6E7722FDFAE948B6649469174C205413CA
5F809729D917CAED37ECA3A2B2AD548B7E2E80DB476F285E819715D96470FB49
47C42B9869711F693369DEFC44A7F83507EF250DDC27E296BE91A67C6BED44F7
A82E6FE1C3D9E1C4188E6B711C5FFCBE90E72761373884E5D4278F2D1C185B1F
C6C7C3FC6AD6C7BCCFCDE4BA290BC5768BF6E928F26B5CD634F325A521167817
B4A8581C1177DC4781AF40F1B2F05C3A7F200F6EC4695E63C917157F4AA4AB4E
B271AC2E504ED221761AEACF287822F0286C047C20731ACA77D1643AE5E633C2
7CD0148DC67AFD489DB2BB655EB64C1563DD82CBB5F6C76257C49E81D29F871C
97369E6DAD4963BA50115F840CBE54DCCC08131996F640292AD4367DDC8671EC
48E447C84A11C0CD33217694628F1B02C9134BA366936CDFD7FCD6257906262C
888EDFEF0F922A1A3365937136D18ABD40E6ECE778CE2B0A409BF9E1F7F9BF42
EA170FF2612B34473B69203E63999C4F13EF8525BFDA1F425DB3B914A0C7743B
DF6CF9652ED716F7AACBFF756054124A17B519CC7B93BB610769C16C4F61D8E9
8379F589A265846B8B59D8BCFFFBCA52E83CDC88633B1858B23C934862F5F17E
5052CE629325C6D2443E22F226C3DCE62B737E9D152E450FBD4AE21C544983C2
2D5954AC6371ADA96AC2280B1C1297379C07B99338744879833663FE29397D8A
DC957E298CFFD23AB28D932EEFF2D2261DFE2D3A320F216F40E01AD361B5F0E0
EA0C4E6D30477CFD44C20F4FEF9B7C8FF4AC608E16BF9847FF77DE85355E596E
26B675E04F81E6D1E00B395FBEA1DC6D7D810C4D53D0C90B82BDB347AC0F08CE
D5E2FD68C9D625A89A223C40B8BD82856C997D40C6A37F1AB1A9B32D53E75437
80E7880BA3620030B37C81B6FCECA475223B7E105BF89DA13C574FFFED0B37A7
FC7E45EDFE05A41B7AAFC2565EE30BD9580D337BEBD16848A3A503D2B3C2814B
9E8AC57393D860240C0FC7F3FB528F13664D4177AF28B2A920367D58025FE14E
5689F576EDC99D4B9613335BFA551C7AADFEBA50A8D049FC8A2E0BCFB2A5A96E
379FF42CC0E0EE91ED0C59D0F62E0B0062B6B6B0B33C32CFEEE217F2CA0C7D35
F28E1763C57F4CE7725A7117A145698648C480B09926EBD6DAC722E1D32CC603
8A20F88D3E143F1C54B1F827CF6B988FB5C68E878CCBBC87CFEF1F61058AA73D
F037B931DDD1C47AD767662CDEBE318492BF190333691F0CAC5D7567AA288312
539283644DEE44E8532B2CD4113C1861980DDF168A4659E4B9705BFC0D0DFCFD
F130B917B5D27E43DBD4BD58CD7D2FE4CC4AEC5182F1A8DC53A75BB461D32E37
227C9B82347D36E82A4C35E1F29A0D7AF3CBE41F8EB0DB631E89DC83BF32BA47
15F484D5B923A067290F2D8FD24884E55A6045B67790D231FF4366F81A3FDD94
F1CC106575D23F374C66D19D4DB2D1C996D0D798F3AE005F47BECFC3D7FE63E9
C3B3AE1B805C1D5A24E417B316A4A16051FB8E86535BD1D0B706E17C2329CFC7
F3BE8C6B9DF52694F7DAA5745F624A4A62A074B44B977E84553C8149873CD3DD
3281D715FF07B13080276DE0C1DB85F350697F214B273599AD506E8A317E0646
31C504104FF01A8CBD103DC18045FDA53FAF11F539D43135E3E1608067D43CEC
7754B4A9624B1FE10352B43F823B4C8BD738F6C3EA8E4039028F402E96023178
044DCFCE5251D9F5B0C3E79152801510346A791727DFB0E56B5BA7B0CC88FD56
34D382ADEDCE65DDA46E62F48C1B2C055377124BB655B422612C0096E85D9A5B
745E302B398B3FCE5BB6A02DA23FC5CDE011392DDCD8BFE91D67AB4EA6B5B39C
BA322CF07B513B1F05B2880A4EF389280AA16FB938A1DBEB5F3986C343D17E6C
F2855B9160A02E6D14D862E807F34708436CCC46D1A7A4307B303DA67683C17D
9949927AE04C0CA3591BD9E72532C2593550EB0DF54DF41CB97FA4ACCE1DB88B
61A66934E185F4E23E0A66DD5AB1A296773CD673459AEF9356949ED68C5563C3
4AFD3F262B4D50A92969C83A1F077873CCD9DBCA6094180E47215DDAE59D49BA
BE386BDB6980C550ACEEABD65B3A9AAD90D03AC3F9D04B914F617D136858BE0F
CF19927FBC546CFE43EA6E3FD505DBE240249B4E8238593234A010F37EBBD951
E20978A67F491F2FEBD14471C01F344188EC1705051E045924E18F072232AB86
549401AE3114CC83B1B2C6E829B0A12F452864810F19237C11E486C3C7F4ABBA
2B4D12F40E1BC647FC0A43C0CA02B01130BDEB306E1BF564D6C6C6E43F5830FC
7FDBD5A22FEFA4F53DBE3356BE430C8197CFE24272BF2021F8AE908D2D4339EF
9CD80DDFB772C53578F9434A856C0652DDEA2286D359E3C65AB08E87B4C4586B
FB35E9FB6935C692874703D5A4B1E3753DDFD74BFF855F97C1060034C4D6B90E
1338FF17C28F18838B3EBCEE95DA48067A601572091910CA4474AE0707F726BF
A0BB28F1EF7A81B672DFAD07880891CFDFE27629F67A3AAC1247AE8654521650
7315400BFF58F965F99E5E47DE5A21F7F6290C038819E4A9FF3E0435CC3B31A3
83E323C9C305C383F2CBDEE99868A3CB6D4B37B860D3586E219C55EC4E57A147
FC9AF236D412751A10FE6C3304ECCFC4E8E8FBC3BBFFEBF0F70C0EDDB83E9438
E248E0EB3602971527A50B2E5DFD24DBF588CAF0DCA0ABA57D5C528BAB04C664
98A14254B25DB96A75C5823C506E6AC7E8713D2016EAB1F0BF4E21706C019F5F
BC5D4112B49743F97DEFA1B74CB6482CCC290CE77059CF8AA6793B393E368B0B
2EAB8EB7A64C650FC3164F75F469E63817052A56CB37E8C06639C5A3F47D8C90
A1112461060F95053BBB6886BCB838D2A8060DFA68D3EEA76676A0D66DBD9042
D977EEA6745F62F0715C865422128A163B6C6AE0D98900EB278DEA065E0CE1EA
C06C17C307E771E6A1D218C93C513E09AC13AEF7A3E64ED7B55ED84310BE2400
875FE334F09AC718F307E80B29885BD8B971C8670EB656786543591775F96714
0641FC068CE074975D1CD5E70D041A3B2B0EF18A2569F67BF88CE78C688ACD1A
8B717A6973F6CA9A8F90348D18E01A3D60BFF389C9F86993D2FB854F5208B21A
8100004F2364DA243FB2BF7892D4D1B707DBBEA113843ADDD9B5F5459B4E808C
4E81A290AF003DDC212ABE9E1D7C582856389142AFDE00DCA813444B17426FE9
042E76CAB96587675355AE0E16CEC46470B6FE91E44D9B7811F39E5D39F2D81F
49B2CB2350244D4CB511E635D7C174DBEDAF560E2B3C73D2101C72DB052368B4
D9E304CF614566ABC76C560FF935F7987487ECF74CFA1CC3A21E456DBCFCAB2E
99BF1C1D6CC83623D20DE450B1367CCC4E89D34C1676F19BC2ECC2D462741B0B
A00C6561DF4B4C685584C724E5EE4ADF486DA47F265FF8FC9FF028AAB2FADE0F
87ED7632008080C78C427E8E051B99E95D205AD9D64E68E1A99350025F131D69
7CC0ACDE8CCD15659B5449DB9ABED6F31B395620B82B324356A2D5D8A1DA540D
88F6C9373CFCA37D5032501CA2C9848DF2B29A6DCB7E6618AEF6FBE056513A8E
987C451BBA3AE6D2D5F37AACC96226775B037B126B2952B62EB7C643786E7204
402D527E838E0D65E271CC601A685AB5068BB78422C24D97808198CC19F5B1BE
579AFD141242589D049E4965E75053BDD0E5EB1244331BE1138C61BAA39B0853
D4E73A94C82A96520B00323D1EEF4DC861F9E8D0E20B9AC520FFDE29D0AF2B26
F944B4DFA2FF98D118E25396996E148AC6D93DB82004DB8D6DB21F0FDE312F8B
5888A9E5903E6AABFC1D6F293AAB63EE0CF9D5E9907E38EB0225F6E5AE97859C
C0C06CBBDA9E22E6BD29FB990F7F393A62B18A73362191AC321B53C8510C4290
F90EE1BF9948B9B1136F2A2B90961AABD4AAF2203017AD77C899FE86E5B8199A
5CFA7E67BA4C088E387D5D7D631CBCA2A0FBECB0B08026E3115CDBB71E7FE4ED
D9144793AA8549DB25D939C03B73F2C64250E5EC798A612BE00211C9F4595235
3E6ED578ECFAE357393BDAA439A6A4C614FCF9B15154D3FF754428AE15D0D7F8
837386F411D4369527621A455029BDFBD93B732C349A6E9AD21AD8DA01097F56
A865295A80BC736A8634DD46036359DFDD48C542746223773C8BC72E954983FE
DEBF29C468F87094AF7D0F67F783F02E71203124A14BFC52E9210C8A69255B24
1A9E9B87F2B03692C75CF5492D88F2CBBB332B72A2D6F9BC3EBCE5D8E8EB108C
A188CE10DE7EA7B134807417B52F91F43507CD4475810C2C0738174FDC062FF3
60AFA7EE3F82F7477A180FF3D6F876D5E3064BB81E60C5380B42C39D2AE57467
6AA0592F3F052E71E8E353D7427CE1A758EC0F8CCFB7E060FC724B0190424C7B
39DE9FB040CD8D67922DEB40A3DD61EAA5378501DF9DF82BD5A361FEB5041213
1A26C60A6A5B1050ED6667D2D40A6B6B08974CB5187A516614FFA086067DB7B8
D79EB490706E03FC87B005448A17FF1AA5117AE241375DBC82387FD34E131F8C
A382D2869FCF0F213036AD02BB07FD463138BE60C5CC7E02E8BA2137CAD04FC9
B35F0225CE00C8C9F3647E03E89E38C8C3F9AFFB729B1B2971DBFDB7A696A533
26E328A8F446C41510A842D5DFFA8223B037DC49A4B7BB62E18C43FAC3093100
B9835B0D1EB4B6F556F8A9F1EAAD5C10BEAD7E583F9BC1DCB1EA3B8DA7CDA42E
DC1BCC1BC10458CA6C4395659B0DB6B612C151562F5A31DDE304F2498F905D1D
74E554B61CC07CBE50327D6E79E4AB2AA27DA04D2DC9F3605FFA544DC83B9D83
C969C7E87126969675F5F3B9C6419263555F598E184CE235D436D37D31BCED98
6A27151B5646B053D8A52FCD4D041B6EAD53106C131841B0AF2B8FD9297B207A
2C4C66B6B170E26FB79856C9B035035695EF3BE3064E84D8DC6A6C0542C01CAC
62795960CC75CFA038C3DB87BE391B8951F9FDF5CADCA8F5095789CF5AC58842
5747EBD84BF63AD7FA945FC936C9825E30E3EDBB6C7530AEF999A73AE0F1CDA1
24EA91F21CCE09868A44331AC21B977F13D3C990C973462254BC1B1573C1E2E1
80F80546F10281681243A017AC51302309A409BA27DAEB32A91F36AF8C51E7DA
8149A069EABC6AD3E78C8AF177717D0F82EF241B3467D5DF9877D884436E862A
02B235152159FFE8ED54D7FCB4BEF72904153D8830908EAD1938185F1DEE52D5
7F135F49106B2E2E236864D506438B5EADB0035D58CA23AACBAF780CA819F6F4
4845E77EA37DC3655B65817731270DF6DF12862C65C9C49C7C8C1681E4C40170
5527F6B46DDC4209E20DA81B2CB91E60257F534A4C2F97C5802C930E2070B6C1
274CF9EDB90BD756B95F309904C8CB0BB177D2E25431FBAF2971D9DE0A869983
FFEECCC5A784EFDA15C13660344A69A789B50339064E0B1B8441EA6CD3799BFD
DF983404E3536BD95C8E4208C2C59A4662D2BA55702AB6488F5058B206F1C968
1CEC2E1F9D8686EEF30AE06036D7E46F983CB50F4E6F629EAD2AB3BF6CF10E1A
44F29115F7819B0C999BFDCB2AA612DADA4F8F665B4A9A9E06210D4DC0A8A44A
4D686726CF0DEFA6CB1FBF360FCE850CF3275C7B24275AAE27F12CD2AFCE27D3
B1122D8FCAADC5112AF3676CF2A7321479941291722A40DCA6C290B42808CEDF
F22FF802E2FE486E977C940D08CF2B918C3750EF3C6A1C2BB29623D800B87422
5173640852ADF7BC6E1498E5EBE6B717245B87110EDA2FB71FE7F7D3058149DB
C3F2D1A59AEAD00AB6BEE8A6E994D5E8ABD45E50438C0D9FE3794BC9A371AAC7
671A0500C7EEA4EF77DA3E54539E31DF483345D3F782DCECE090BA198B96AA87
68DFCB841EB4AAD1B824705F7AE538F631CB5F3890A8EE4CD385527CDABEC674
B13534775190E8F43AE2440BDBEF72E2CE9D33E4B984C25F20BDB72AEE544B60
57D87BE781188C6727CE72FBD72009EE8FFC9E2FEB8416B4152F952D6B3680E1
0CB26E5D6FFD063031A93817EE0472894ADEA0405A5C6E688F723DC13E332F6C
D9343DFCE57B5471B755A847D005918F9B82F5341164C221CCD40E7EC832F0BA
C1183F4534E4BAD92FA3052FE1129D27DDCF4D736FF1648CA9349FF4A0D51477
673322F6EAE31FAB206843E41FC4E188A5A0C8EC640CF8A36081CFE54B305DA4
4F2FA1024CC81F8595E502479234AB3C692C6647FA3B3461B91C16A9E1F15DF5
7B29FF041EAC7C7B37E55FDB1971BDE1A62881766DD1EABB7EA9D0F5B7C9A6C3
2F79F1BE3854DEBF2F1F60305934BA00524B86323480C8557581C3C5E31E04BC
D4A6609EC1D62ABF636954C8C02234949CF90090863B823032250AA525FCDC33
FFBDF46F396C096B15FD5ED424781F8FEF256998F10C80A977F1C6788A743B5A
24384081A7877632C96BCC1E5CAB15FF19933865443593D761E7974C86D13058
FF4D055FC06D0DEA2E2B3A3B35663B7865D05FD65D7E05D9A7F2B8A1CD439FFE
F7E1CDBA43DCB7C2B7126F6017869EC8873DDA425B77B931DE607339EF0628BE
FAB1517273E676AEB3A721212B99C1B3FFF8BADBF72E55531AAB1D0DDCE10ED9
AAD11678DFF4D0B94A8CC1F0370FE7A160CA17EAF87CA1D942E63965B2C7FDD3
CF48BFD410FE3D6FDDAF409E1C7A37EE990F9E37373F66FB8E471235CA3B7E53
AB6986A574B7C2AA2174344D6E3E3E73776E1AFB27768D510B082D150CC285AB
C76D2B745B1F425E4FE03D2E03E2935506FFA360A33A473E6D63AF3C4D449011
453F5F8C999B622D87C0EBFD1569065EA02267E55B1C0FA30E43DB368B361469
80FC6EF9F63745D2CA1DCC4A31A65C9B3F4AAD5AC4DE671C8B6104F7BA6CD73F
0138A5373D208D8BEC4EA8D511240C9837268603CA211B3404B830F7035F2521
F55F0038C8E301E0EAFE4DA8274BCD624A175DA422E57EE3CAB8C9E1ED60A6B1
47C2E76AFB6422134A6A3957EE2745E5801E46753336264BEBFFB84703A70B95
9403464B8B3251DD222B7CABBA45A7C125095261606AC5426F1FDADA9877E555
1679A16C848EABE84A1320DBE8DCE07039AEC9C04EA9FA9CA26CC6D3429CB2E2
86C28C8105588AB8F72446CF4AE1C9147DF349E35612641CA1C99EA71DD7BDE7
956A6EA5C8EC5975B6B44ACA969B711CE54A3AF9C1E2AE758EB7547F025416E9
826AB5C67478E69207E8416514DD5A8FFC6C41E6C4AEF2CE721525659F5FE9DC
D95D3C4C4B64AAAB7708C0C6169309F3E56DB4CC644BDDC3228BFED2823232D5
EEA0CF5AE971C4148EF746304B8C4673B0193C281A616308AA15D90EB04E798F
DB12340BE3CA6063FF33B148CB55CC5D642AA3A1C385AA1DB0668B9419FB1A9A
816852D5C351BF148F1DE025EF21278CF36F4878EAA87DFBB53A700BAC62A7BF
E8FD5F2472452E94F823FA5E557F94E91404177264B0EF76DEAD499E43B62C2E
D83091E130FAFEF84A5638C85032D6A9E79D9AFB004A42169AF2AFEF047FB06A
D7AC23F1F08B083D6EC56AFB71EA4FFD59BFF7CEEEF3FBB002B7D05C94098515
BA6D3D81920B5611C845A81AE9D6891E17437B1E773FB5966FC4745934A8539A
B6A8834D8FC790D933E2773AFD0C818FE749E3FFE54ED821505D2E5FF8FC5110
84836E4C49D6F39100C866F9177FF4B2AEB66DE3BE13E602D9A24AA66722A146
EE2F5B9C59752BEAC20FD4F6C355DFCA45264BBD6296E70F9B1C43D62AB2A628
49890945B833B615A25070FA37692122C2848397E8AEC972512E4F4B561A14AE
EEFDBEE6E0CF27A4856CA62AC578069F2EBA436334D8E0512A404FDEAC453F10
76090F3017A447C32DD6624DB259BC6FEE8F18DE674AC64754D60DC9AD267F3F
65179A1B63E40EAE388BA204CB782EF6874DBBF92C21EEDDBD4B08842FB7BD43
6AD86BDB2B16D19357F06FF67F7C0688A1DA252A37FDEE1CABA0BFAF8B895148
E53F8ACEDD5DEC4C7459146985DF95152B1B4A46F719344521814D35E38C1FAA
3A2254471B810F03D87DE8FFAC20C5B06F60D1F49D35289D96C91B2F3EAEEFD0
BB94BA5408F78EC4505CDDCD900F6544D7121EB92C4DA486F18B9980F00B238B
B27D319E66284ADB38F4BCE624B88A767F04A0B93689C3EFAAB16CEA97FF61EC
914D5CA761A21D54B56F8097D2E42E0EDFB0689488FAFB79AC54BAC736683F08
606DA7567484DDD0FAF892B2E2940CAFE6010D4E33C279876EA0B72B383B7074
A7AF251391DDA242BBD05EAB603FD469910312EE2B5BB2D306452F80BC6C9335
EDAFC66CAD45CF06AB9675F3719709DD5EC217931C89604BD51AD7CCD7FF8394
CF09D21FE3DE4CE4F07FEC2106EEC1AE618321A56245DB9095BB851912F3A7CF
68A020240500071C41CCC4BD60163B4D194F96DC7A1745E9746BF352DD5217A1
070208D738B081C2BFA1C42E03BB975E8FCBD4AC1415A85D0196F267F699F640
20163491B3384131C0ADADE335B2FD68B1671EF08900364A592B9B94537AC4D0
780DE95932EB5EA712B7D5BB431BA7D710BB95CF6C7755A95C628A69DC966CAB
509848CA84C2B35ECCA7B26BC0FE2B001BF73FE6169EB4485DF791665C983478
C7C1E24038DC3FD26A43CED7BB5DA47F21E58E6DB6D9770A4E1D0DB5F45055BB
B556F6FD1F8D6C6B13E54DB84AFE7B23F5B7D2FD826FB60E6255EBC1592C5C5B
73B40B9E66BB218844A9560918B746E45DDD4FDFF0A4233CF6042D3EF154635C
A1B466372F0A99077917F2C6FF1444A607D8F76034554F5998FCA8996B7DFA26
179EA32176F2D4F453E437C1226E69D7BD25BD152F151673AC17B6B583EBE5D1
DD91DDE0FD69A97CE5087F26F3040647FB1DC35B7C041B548F632A7B3335D445
990507280433712E5F499D53484AC23901B24108487F63B6296F15F340EB3E09
8B640B229000A74A74D35EB0E5B191A3F47592BAE829F7BF5F6595A801BF2253
B0FD46C85F28ABED79E3C61346CDD2DE907528D5627641F730B4978E554F7914
C524B033D6BDDFF25A9A3B1AB5EC279D08FC687F139FF0C9158F51DAF60EC72B
80C73F674D0534635976BC110AD948B5DCD310A4C1A4BE3B79E7040F2663F3B4
7D8AA7D164E71B02F09352E3A23C7D33EC4D9F765B6583284282CC1802141CD9
C12951017008C0B63814324555B40D619BB597EA30F1B85AAE99BB6DD0A523E9
7B5D55C693B2EFD8A0AE1AC76810901FDB3C180FED865DBC66E987CFE642EDDA
492CCB1829BCBADFB254D13DBA31BC49D87043C4686B221C8491D2397F817BB1
0BA27A8DA7FD797C163D4354E2CA53C6030A0FAE31E830C81C29A5102AB2D68C
714A4C0B548C6488E16262211618D9E4B7A0AF5FBD92B7FA9A7695A8862E9D18
8A1157557ACF8E8FEBB0FF3DAB5E0C2629209ECE2C81BD97D44C5CB2E6096B4A
93A9B0E0FC3D3614E672A028C43A5F7D11A796A6D2F7F26666D77E620E4393AD
6B48131D208FA0762EB790495ACF73E757292124F63C32FE69FD8425CB471F48
B16BDCEDBBD1C7C0A193D4927AAFC98FC51CFFC81D80E2C0A28E5717CE377F28
97776C53660D51046D65B0DFF31A412ABE637426C331B1681605E8D02DA7465A
4638C37440C408072E990B140055AFE0A03B16FF19177FB1A7A0FA1D31EB1621
745EDE856BC5B285BCFBEED76BC3FCAF6E586B973F1C9FB82C880F24946E71D1
05EF7801F989A00BB2FF93C5F5937CACF5FFE6A9BA4929A1505388A0507329C0
910532C33F2D6B10320181D6F5608A118FD41BA72F0E644A81FB1DFC6711126A
A6EF187404CD90D3A6703679096D843026CAF7FCDEECF3DD453493FDEFDF85B4
1BBF17507245E9AF9E7D4DC7ED72E016D35D034F1AA5CDFD01881FCBA95EB04D
3D21300006B6219F559F37824E376AD7861619AF1B0F6AC0D3FFF60531879FC3
CE1B2F0BD949DE25205E76A73F34DDDA919B6B193A0BEECF35144D3CEA78079B
3E273D5BA3185CA2A71CF714C87F72082C9BC07BB91633DBCF5189BAD8F2B471
6EED4A7C7F5B2206E60EC1DFEF62AC3112B58FAB450D83B237572B3C9E262E2E
BEA3DCA1CD1514027F768C560C0E368A88B2A570BD9356756C9B4DDA77DEEBCC
4CF1B40F35A8079F0C696128B4BD366D132595C2235667FB5848608F19BE5BC8
207562E49460CDBC6A9B8C68F0C22F6A0035A517371397997C2D009DC5D5C882
3201168C32725715FAC5B17CBA193ABFE680671866A80B8464BC8C6550891C94
A4B2B51C132E8CD0425A7DD7C197E9890E84EC33C6577F7768DE800ECD188222
1D10943D62A23B37E56F3F67780D8C179F394DAF34512D4A3CE5AB8812D97237
0323442089ED350ADE86D246E756375E8970D301897BCFAC7D39023E5BADACB4
E0B55E3524DD4051D3D99FE63DD3CDB4C04EA9D0E313F81E51A2A53007E42028
0860B03B7BF7C56403F45CA3262DC9E1319AF10848F85CBC96F135C5B70F02AC
CAB09B1E5E02772EFBD5384431FB7BB388ABA3A5CD78C103B4F82F0CF692D57D
890DA94D785FC3A3B34CC1A49649BFBA3821DE5A63A9EDE57C065C4026369ACB
267F0E8784846A929A56765C7BCC21E4B04E03B435632F8BB0BDFB13559F1C3B
C2A78A904AD23D3FFBF1AF08DDAF1B6A48DCA9261B22994BB9C9FD2548718664
31421F3132E75ED0587C592982EA97C409B28D4E909F564C41994593064A0150
A7BD1001D1031577B5B73B7E04E8ABED45D7635223DD7AAF5A6BBD61D87E400D
FC662AC02130310705673FBE075EAC067A71CD955C0450ABC2FA6A2891B4AD17
BFE689CF0547B7E53F291A7FD40567AEBF8FC33013273CA351FF5B11285169B4
202741F9F29AEEC26FE81A5D7E01508C24A2DECEFBEAE098F8C5D87F40AA180C
14C052193B877D0558BFBFA86ADC51F998DFE3FCDD84D394181D290B1F7641EE
A3A07BF210C87858B006C535C937C202EBF28E1886ED3F8F1466C3C1BAC7284F
56CBF5E3C358BC84B216BDCA7F810C0ED5D4CD204270CCE76467E31734AB1B3D
AA2C3B47760408D1E969A32EB7A662F89EA51A6A91EEFF5F88BD404948D2AF94
263484B83596F2A5BC41582118C70B4FD07FE9848E46038ED9D402908D70A8D5
E306827BCCFE2D69E0E9FB6AC5EF188190F9942E563C8827CC340A4819AD3E26
280AE2FBE817D3A73DD4FE48E2C26061D15CD8A74831D9459D7ECE11172B643D
3D40DB85E5F96A9DAC26A1BEAC80493E7028A913FD2606FE49157850C07ABAB3
33657DF5F29C4079B244C0AB23DD90966AED93BF3E41F611AE2AD89375068210
9E3FA0B9355532F64B52938403FAA5AD12F02DB3BED74F159C7EAFD4247164D3
E4C6D62808F95DF9F322A4333D675BCA1B74EEB20EC0A265878F91AFB33E6BB9
E107244937BD1FDF75D52E640DE8742DBF27BB796AEA6A6C97DAD007324C01E2
E34A1BD447CB6497FE5F8E35A338F0D4FC72A73A8DD937244871C88ADD39AAEB
D3DCE7D182C491B975D4CE7CAF0ED49BFF2C8E40EDD71E5EE85238D4C15FF9DF
4628CC1770CC5951431FE01FA6EAE526FC3A533E2B0ACB1500F19C8CEA20D2A5
3D08066DCCA626948D0B1ADC7DFE0BD2F9A1984479F0D3CF44D9FAB30CCF4792
CB6CB93A59491754F11543C166BE0496F1488D9980D06DD4FCB94F2040505558
866D1A93F8AA06A92BCB3A225F547CFE2D7ED1313360B845D556CE7DFB1218F6
C7B7A70AB3BDE64CBCCE920C979763D140818C6285A32DFAE26DF7755F265DE1
D00339007581B13411563BF1A1A41D57D061BE2EF567582A571FF9E78DE0000B
0D4D6CD2968955355CFA9F75DE9E4D559DBCDE89DA7440B7489D3AEA31BF311F
B3B54B1236B93C401F27D2FBB798B74A2D976624123850F245BE968FB13561DE
E38888251B388885083BAC419B0727896E5EFE5448735E5B8E496420796C2FE4
E464BFAC31268037006238F23B5DCC700E5246A97DD18C2512B4654A515D20B9
D3BEBFC3CCBF380C14B299
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR9
%!PS-AdobeFont-1.0: CMR9 003.002
%%Title: CMR9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR9 known{/CMR9 findfont dup/UniqueID known{dup
/UniqueID get 5000792 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR9 def
/FontBBox {-39 -250 1036 750 }readonly def
/UniqueID 5000792 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR9.) readonly def
/FullName (CMR9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 49 /one put
dup 50 /two put
dup 58 /colon put
dup 61 /equal put
dup 94 /circumflex put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9AF72336CC4AD340
15A449513D5F74BFB9A68ABC471020464E3E6E33008238B123DEDE18557D712E
ED5223722892A4DAC477120B8C9F3FE3FD334EACD3E8AABDC3C967C61FF003B4
B10C56D6A490CE9594D57A2D431B9E5E10FE3D8832E227A7087611431ABCD029
85F4865E17E17F8CFBD2CADC97E0A8820E3ACEC873F31464466A9545E967E53C
DBDDB8478E69063FBB891566BAF88B7660A4405B16834761F041CCF7650AF955
F9E853AA9F5F4382E1FE7D0C5BB4023818A2383F91249D48CE021250EC9EEB1D
2835E18FB73026250B32A8849067D5E2258797C917F998F2D4121D96560C5FB5
B5D3471216639A8671B6DFAC5E3554EC36D9A72518525A795590C74DD70DA3A7
78BFC43E51D6F2BA52F17D4DD00D389D3983EC54912AFF73684A8A7E345537B7
E62361C04A47859DA084BC72EA53512DC54132EB2EE671793603015652EAFDE3
41C4B6B679BD60AEC5153EA0D2200CB1D097DAD770F5F31E6FC475A225995277
B867B731D5401E2D02B85BA85158C80FF7E2BBCC42B98AC867E67D25DB656072
55A0D32AB7AA483A5A9686CEA4E2B3031D90D84DB3E2DEE7706C91BA81CB8DAA
700E5F61E07D6998C9552C81B66FD10A10033D49EF3BCB0FF22ED0A3737523C9
8F851C61C4BF8A213BF6EC70C956AE48B5BD276CC0437C72BF6515B10739919A
F00F6ADD2798CB211668842349171A5AEB0664D2C44397E55A4A9EBDF54A3EF4
FBBCDAD9DAEF4B0CAEF7112FA828F2F8D9F633D37E5516AB5ECEA87342EF8DC4
3A50548490F5BC9A8A1F98AC7AEAD9D913BFA10CA86D73AEB5BACC1FEEFDCC15
B3655522CCA2C772E902FAB2A6FC153597D52763EB44AB7489FF061F7F58E8F2
AEAAF4D17F36CBFC00D3C653F335D14240C87DB4339DA9D30A5BD1F502BC9013
461B9DB2FBEEC01BB18990439A0E9CA6576BC9CF6B1A3DB9386C4A5D4AA6A5DC
CFA45FB75F22E10ECB72565DB441A194902C91427B4F676E531C661F7A2C3C85
CD534D1C89B6779B2EDC8E44667B992C20C70B663BFBF680A6CF4383EB7CA26C
4D1F06B5EF4025BBE65795F1EDB5CCB97050872D6C07BC2974F905ACDB7A765F
291365D6C8152153E7F017A25FB4476C60FD9EAF9A121633DBEAC32F62850223
D6418566AB350F90F4B35F19598478F76B63E347D4C61E203D4DB8ECB9889181
C387F4B663A502C638761D2782BB96EAC81A0108D7BD6938F67FEBB69218D115
D8E89CFABCE15C6ACC7FEB983332A51A6A73CF4E341574F366713D7FB29956D9
9BF238A87483D37E526A2EA2F101EDD34E34CB92730DCA7235AA0027189BE405
2DAB4AA021A30C28B26C50808E1E965C02F6212EC7C72F5683339425A7739380
A422E6191ED8453AF0CAAA424AE44DFA7CC5C2F6EAA8D73A5101D8E9517DBCFB
2858D0E8ECB7DC430EF23A9E4428CB7DED8D035D6050251AC101A2D0E884721E
2F21E573F948048BB8FF888911C508CC198BD750083B339500C426AFCD5634A6
AAAC1C7E91249667B231BBFC64B4317192FE07FE9DA0DDB5E517D097AAE46577
9555F29D45C67CDE9812CAD03F220B20519F2FF32DCA56A554D4296FE2D1F3FB
B209B5270E0E695EA5A0EF1144957CE045881AEB8D05D72CE57F4D34617AED67
0D3AF0472CD8D60933651626550366E300E72A9C89ACD475C2E2ED9BD44B472D
9DAFE943F8E02A6DC38E447EED964624C37C3130E48211CA279BB6A0BD59466B
42F3D89B5746F29E084E22CF58395AF0F29E55113F3A3F2F52CB3A6DF3D026D0
C81754B8E2E4A15F6943BE9D0087D5166060734FD07C4C57D7C7D90E8C9C1F35
623CEEE3ABAE75E1A18A1E3B50B7266BD2D8E812CFEB4A46B856885B185640D6
B9C22179551002B94282F57FB433B7FF157D2F0D240836B72AF4A331668AE5D4
E6B85415F4E8B9D2F9AF90FAFAA0A3866DF417CA5A31348CF9B41B8F5F4D2F97
CCF7ADE851B5E2E2F6E319AAF5792EBB9DA2C6AA8B73D889F3CDAA42932CDA7D
07A7E59183CD89520DDFC36E5D513BFD8AD0886046585F29B4D7F42CC0C27AA7
53915AB1167D292FE91957E94A57FEE2D49C20C9070ECD736BDEE0F046E60350
EA539DC298156A4E0D019E7D481FDDA6861E20678516AB80ABEC1F09B126BCB9
52E8272A06BB6DD87ACFC423B4A4FC9A3DC8DCAEBB807C5F748F1FF8B17B8B88
F426206BF1B7B7D239D26BC3CF0776C467A98CFBBCA5FB6145D5900137ED19DC
D002F10704AA680EC753C22E29AAB15712EF22AF73D80820A1EEE953463D4EA3
81FAF99518D4FD0F862A324FC44C4B9542A92C5B60CC983CC8F647CE5BDB4D6D
B92B380E0E5F7208A9CD91FA9A469548162C761C1BA05AC9D60B766764D821B6
B4E17F56CE455F06EA1EE2D38FE47581746C4C5FBA63AEE2B58E877D1A8FA83A
31C972D53B64E92EEEA147426A92CFBF76FC614119C6E9C6476FD6A069C803BF
E949FBE50B5AB1F1463F9747E8D353F7BBD991C4F90F920BC9407D8E24720293
846D052214E60390C3CB926D38C83AF697425D80C2B4FC4706615B905516B733
46ACA325CEA68FB21B2D17CF0B68BA4DF249368625CF83441EDBF2B86C957C1E
44CD722BD2537CE84FBA07EC7AE15C840041B9F7F3040072E6084CD55B301C08
A64A53BD4D3DC30DCAC6C152F316ABC59B8EE978793EBD568849DCC2A75A495A
BC83470D503F8E389F54B4A4A31624E83C601B43AC1E52CB811FAA7CA6B644A5
1AE0BFD4FC774C9C9DFC2769ABFA9C83F900BE2DD4010416053A1D4874E6ECF4
D86E44B4CAB15D53E5630C144B0C15B58DAAD785BA298B1893D1B09BA5D40344
6678FD2D17FF6674433C976D6DAC659175CED26139967C9B2B9CFFD78FC2570A
E5142141C2888DBF2DC8503F9137CE7CB21A1EBC2D65BF33FCEFBC85C9CB736E
24E8595CE934AB032CC70BD6A3B0F3BDBFBBE185512FDB7BE3D4A6620478453E
75D044BF770B44C9741E31985E6DAF5A318D7BED12B02A4BCFE60D25EF12843D
EFC9BAE2A3F2EFAD66D7858E83EB46BB09D2FF8AE9C43844A7001C86ED97AF51
C511E3A89A1BE349FF5215D1A57843EF51456B9838133846F19BE79AAA5C1AB0
5F400E5E8E7B0BF96EFCA3B8F0894BE589F2C9FB6C97BD16D38F0A237CD4F034
099C41F85C7E2C7BEC8E02C4F327306A53B4B48B26A8926670CEEF96F6DF2281
7C2DAD99EF8B81BBB777227C2475AE7400DC393D9C0445E925DB1E955950F7AE
53E9AC4306794239346A419F7B5DF4168382EF5956B81F83BD4BB7635B3BCC84
7D84D05AEDC02D14675D777CD19B08124001A4F4EA96990D96000C082A12F00F
7FEF793A7FA69D56D3A38D012168C5458B667190AFE80E02C816CAFF0A71953C
D80B085CD286027E2FDBB05452AA762FD7C813B2E19A79C74190E04E746C4933
CE1E300CAF5DD53B08110509BDA404EF07FA1BC5224BF1205DE8E0C3276A13DD
866675103B960C5F36644F96B4FAC16F5D6E91F74629B318FCCC8E8CB13EB76B
B0B7B90718D913A52A04732EA3667674994A325A7973C601A7DDD50F658E0826
ACB8E53D4914B0274AED98D7BC3B2B7F9D48A7ECC2F8ABEE05CF2C4F2B90360B
B7DF779EAF3E103D1D83EDBE32DDA873768D8C37DC10A5354A94B4153049AD64
FF3E0BB51AB91D7C0B4134D8731CD0270DAAF19BED9EAD800A14B65B68EEE89B
40DD624111670DDC7C030DEFE0D1B96420E249332445C155BA96231C88E70643
D526BDF3CA1E05FEE72CE2B881CFC01ED780C10E89F0828AD55FE29043BC56E8
2750A6DD15AADD54492F6092618F4CC6A31766B17FC60766D18C307EFC9BB787
39047DAD6B38419EFBA46B4E2C932F97451FE78AD75FA90DE409FC6DD46585D2
1941F5ED47A8FBAEF5A917A240959E8D9F9917DEA3247D9CAE6BF7A88DB4C4A4
F9F5A6DCE542420A032FF3392FE0F3357B51F884D6181583A554F75B1DF192E9
253CC828FF06B0D992D5316435980B044BB191508C7C45CD90F797F88856424B
14A5707459C50EDCF3E3D8D1667AAA83015405354CE744C66D9A5728F29E0085
6DBF740717FA0799E3BCC4ED7841588B496A5E549B953A7FD288B4A045DB611E
E3B2F35963FF18ACCB1C968BEEA2CBF52B3999AAF89A05320BB2E97F52CFE06B
9F10E3A79865A3059A957F97972D80ADF678A36E2B586C101FC6AFA4D137C13E
EE7102C9B8EF78CB057F8B7476F146E8FF5C897FD5503DD198128CFF7B5FB339
FAD0AF0EA967F77B07B367A4AC9F668F8BED99B98E87FAC750EE045602D76C3F
289FC9D97694C96AAC0AD1BD3FA94DF2CBCEA24B40F47B9B59E54EECEE7AC4C3
A3F5D19160E4C1EA830D57FBE10D8D46AC5CA0260F22FAA45236F0F542BEA9C5
5A88F878F68B36114E0573900C65E305462B22A3429A17C7A567694414DDDA46
5F30542B8FD4F00F6C295B2E8D3A986B953D96822DB2ECD48E8BB1763434E652
152EF3717F5E7FA10FF0B01D9F64E22C5DBD7254629658887BACEC0ABDE972EE
67299FB84A05B3EFE22B6976DB4CCA384232DDAE38C31623A4E39EA2E82C1EA3
BBB68F1A7DBF405DEC37CB7203A895C36A44BD2D63F45B3888AF91D37B510A59
3C921BB44DA620892AD87B665F69F6FA510B071ECC403CB2BE2F54B3969C9E88
713244BC97C1466DA8216DA7600C221E7E7EF5C789D2E12B36422023A03E11BF
2790FD6062FE6BF62F5010A92F0A104B76E255A0975E04F6F20F760881BDA7F5
D834D1D328B6EC19AA7D5E5678A84C74C82553DBE8BB5765E84F5A8789032143
6020940B4B8D45FC3433D356E28C25F42D0C19F911213D85951B2B00D01B77BB
A4C72E964F9D95422BEDE582A05CD52E03D28A996E6CC8FCD910CBAB728073F9
F9FAEED5470FFA55930447C5BA816F826F983D53EC9941EC8364B3060FD74C95
26D4F5CA753B574FD2FA4D1D333785241D8741B79E628BC852FDC35478C5ED9A
C1BE88C5EE7302816E65C12B58EA16FEDD4672EB3E24B6EDAD5DCE263BA8A970
350B651E5A9F3C281D85BC3F44EADD0D93402E36489BA5185E7D388974B0B700
70575188BB610CCA20F081E2CBDA13DCC6F72567962ADB342E02C1E763B673C5
F7384E24C6E1730A3A790D690A2103AEF88E0C1D4480DC9B25E5C8C9E1919C95
F83320179B4C7C4A26D559BFB24D7D596FB73758C9990C451E77FCDDD17763B8
9C30A9534E3CB6680D3D419D4B70B0B0A0D160FCCDE169714E373F65B7144CC2
DB9A44E041211E1517D3148E65A2486CBE5E74E625261CCF65392FB4F3091473
F9E8DF327D59A58558E5C9F7190DB577D5DC658F5E36258291C708B3D224653D
064BB6079F91293FC733710893AD1C96169B30CBFE4E9D52E7EFAE4AFEE68FEF
1AFD5E7E9DFCE8DE332B0FDC0514F9B3090AC85BBFB527FD8034DD33E9576325
A8769AE09AF1BA792447DDD932B98FC9486B39E0B04DDB3EFB7A30DA0940B33E
E27490E0E841E87B1C90E5248A91742ABEDC10F43A8AF0F9C5B4A4930B1AADAF
01874B9AC3B8D0DBECCDA6CD7E96471FAA15CB7F8A599C5746327CE392224C3C
40BD60AF97BCA6FF6FCAB2FEA114D7300B89E91C3BC92D5B3E2C83BB37992D8C
72F661EFD0AA034C738C019DFB79BF40651A1A34BC1EB9F5AAF58F8B3DA32645
24AFF8636486F08BC21533B5FF7391B0679A78DFDCB03DAF6BB7475A1D51DAC1
EE4BE9B986655D1FDB6936445EF99B58B303FE79F11275EEA96A9F6808EA8775
D873D1052FAC93769789C700F20EB2ED6D15676F6E563A769CA9298E463FC311
83281483B1C953370D196727A6A0E66D32D9480AB1B6DCA77868C1A2D5DB6483
5F31EB6B18EEFEF1CDC31533E69B0AFC6B30FC9912DC89BAAEEADC30BE14F448
1A6B70D36A5D9B01799BEEA686066114910842D022EB464A9A1E8F0A5628BA69
AA9A1925CCADD44703BC67A89F3B48E4680726DC4360274185CF3C8AB747A8FC
4B928AD62B092EFE48B01E33ED756DB696171FDB775396BBA138E056F71EDAE3
7A1E4CC272B8418114B0E81DE0BC43DB3C133167344488820A92DF10FFA26FB9
65FCA2C87D302E956DE6B4FE145145440C83DB43A68F8B29A592B127BDF49063
B7F11E155CD4CAE305525BEA56B7C412A6260426407BD892A3F2B444AC3421E6
FB6E6425EB5C3053C5644666B80405530FA0012B54557327C98E0F4F064099A6
4ACAAFC1870359C1B6FBE7606BB8A26026AE20C212210449905E628AF1B20490
8CE908B7EF3E3DB551C85AEB0F7FEB6A8D215B97998E5DD9C7CCFB2A9402B8B6
1770D4023777D4B45A73F471355353412C51D4CE71FAD1E0AFBD87B5F86307F3
10D0B94F1194EFFB64AD5DA54A4200490F609CA8B912E149F8217ABB1E9EBB3B
C4470E7365CF5E1E761AA1945044B225BD53D142F6588C50E0644740F7DD55E4
8F73201E5354A8BC78339211AFC4935F44701FBA043AAC4BA4698E9D7700029A
C79F992F62627C91EB855F64C4B251718FDA71EDAF082A0C7B00550949D617A0
7071FB14F05620CCF2180941341D8E60FC88823438FD728A4042AFA8B853107F
852F631518B61B234565291B5D5B89DA818DEE3AE3B68A2869DFA63255CC882C
3B16BBA08FCE3632E57FF7A07F857A1F0FDCADAB39D77960BD827CCC8661A997
648BF5BEBC0FD2286C2A112A8DEB9CCB6330A049170D5D68EEEEA011D3EF3EBD
855236B9380087CBBB6BE24191F728B7EAC5B50F7A547AA0989B7C7D3437DBCE
1669341264E290646F2C8C5A3ACAAC7CB63DC692FAAE13E9B40E8BD39FE16A0C
1660CE66872D061056C04DDDC265C024BEF8B7E3C3AEE76FE5C9702002C28BE0
B180295EE00E567FA2E5CD1638226D24A7C732E1BD8103B476EF5702768689C7
D4FCD47F2AB94A2B1FBAE6ABF87B09E7713C773FB65CA83F7318035B332B9F99
24A2C8897527021321D003AAD7C273E4BFA2710B9BB26C2CFD3D9A5D7ED1096C
552D50028AE2476FCD6D12A5D0A897521313ED1A3A8456A70C16EAA50A3E6733
6DC89FEC56AB54A579EF264377A103939D5EE00A90B4F2206D0023AF9491FBE0
800C6540FC945199E20E945F46CEEA2E885F6800B9DF042BCEF4291A4B1A62C8
6A7ACFF872B25FA3AE69E0093F3D0FF13A3313430C06F1AF94D500431566F659
E8C859A5F80F5BD2E85C8E32603D3745628E8FE6FBC50FA68F9C3811A2BEFEA4
5852CAE2AE5AAD3230ED050593BAD0A9581EB7B327C6916B8FC348F4C23E6FA2
00FA28AAACCB3091C1D83F7BB88672A53A2EA3B8C7C24374E400C57F0F01019F
E52D5C47F389D4C9AF126F4080F9AB8D1C8F470932BBECCEC72A9796F6E965A4
82057DDB43D68298A00880D4C2E2496F26F015FD83C5549215753459310339B7
6B2961EEEE74DA31FEC8E2BDDA42D4080A32372AC372524BDDA580EF6634ACE3
128C69D04D890DCA337212B109585C665AA83EFE47D5BABC2627A86EAD11BF7D
744176652C7F9497785A7A06A994ED8414BBE8B26E74D48CB83FA24AAFBDD507
84A90195EA3D77BCE8C2BEDDD1DC52E8164DF15D65B916EBDF3A8A76849653DF
AE3CAF9561AF3B705F75B9E5DFD6758DB65A2FD54683759912E0D0035CFBCD86
5D239CDECAAD9AE5D95377E0D3F61C2AB7EC99ED28D2B4A7B6004A566B43CECF
7E35419EBC2A47CC76393F4778DA801EA75B4C1FC38062AA77CC4EF0E6CB0C81
9A797C01F89BB58A957D3DAE33E4256B1F5A7D66C8989C512DA066D6DC771548
F2DA3B490834E7B4CECD9293A5DD581A3171DF4725B4AAE22A971E9E5544B2F5
19FB38556651C330566E255934EAE678FBD1B46D08D75394C5C2E9F820D2B1C9
B1598BAEF7CE0226917D674ED1819DA9EE1F6F67A0D65D35E3D0EF63274B611B
2F762EE335051B39B658BB0BD12DFC322AA7F265E65664191F1C11943BB76D70
D356FE5D145C73670D19CD80329D8AE47B8A922B0D8AAB4E42DE1B24F8DD0858
7F66DBDA32D5E8EAF654E12C2E333311F4DDF888CE31BF96302C60195FA1EC25
BE4D8011E948916F6829FDF3DD6C73C55A1E990A07F8B008FCFEF55C2C479FE7
C84BFA04443334F2AD889E4A3E230D0A9A6DE4E123C3FEBF42BD06F669C0CA21
87337E87C6ED736F2DB092C2BEAD2EC5F7AFBB55198C5C02204EA9DCD89EA75A
119F2282B0FD2150D8E88F7B3CC74903532BDE804C125D97F7149F4C3F33DCAC
5FED08DC51869E34C2490AF71BB6460BABFBADD0AFABEA8C80E083D70FB44C63
EAACAD82CB34C3725DA52A528B5F2D4216D751DD41D840427BD445817C308A3C
BCF0FCFC54C977481778614D372B043761D928D66FCB9D760D30908EECDF403B
CD3BC892094A5128E251260C8CEE481B4289A675DFE39DF546A3BFF3244C9073
3BA17E45256B973F431065DD2EC6BC689D4B4F105C8F95567F4AFAE64D32EC3E
B4B6A2A82F34478E7C279D48E8716D9C1F1736E0BFB09AEC8B7C4992683244ED
5A447102924DB6ABD954BFF51D758526655FA1A05A37C9CCB86751E5E5425BCA
9FB60CB4C8DF3A640E4A8594A046803BA4E509E24B79BE0F631C4878708061DF
D587261FB75FED518F62D40390A7C2E5682DA716B05A65B59B17E090FCC1137C
613AC61B6452571F9A33E04B6677C7E031912478F16B0E889127D5F0571E7392
8B5C8331F31E58AF3A560C46F0F9A0A0E9FA210EE25F0974A252291322ACF12E
E7FE8A738607329268F440366892C857A51A8D59DE97F8A01E890DA500847934
3AA76233947EA65F1B8A550DBC58BD7F145B7364AF5AC3F11EF27F1C85D2D2F8
6B2B420E9D7325DEB5AD1FDEF45CDE0864135B202DBF7983071104BEC1B29A1C
2AE7948C26408408F057DEF4526FBEEE7FBD26C61B2B0ECD5C73ADBDA46E862A
AEBB04D578FAD4737F1FCEF8C0A06538CED27AAFE197A9967C89826CCBE77A44
72AAE7BA1CCAD90A57AB912B6D9C211717CEBF488BE1802D61128023A737F147
60FC23ACF398BA074C1C31950A393F4F1720D25160F42D9892372CCED4FF79C7
9EC2E13B44602369AB74EF77341BF52055354F690980035348B6E61315044629
3F3A2B353C3C9A8AA0BDFEBF16ED33449F74C1407FB4E20EC3AB0A784A1D4450
8D578234BDC461D8F78E6D002A0798629E582CF001309841CAA6444E7445CE86
724470B9BBAD88635DD650F404BA14C3E9D3D5937698573BFAC64F18074762A4
4DE0154738DE06702FE57DB32CAD8A01491FB5D42029B507B793D871BA48F4B1
118179748A756824C3452EA74965A151E8422151F968167AFDD04F1A8C8CE31F
77E4F40F92F5FAEE0CB960C2EA94060D73444B05F671C32D5CF0F76B97CE1162
3A135F73EAF38A5E8B7E03679EF111847EA10A7FD8B824A77B98368C4AFFAF05
5EE87405271527266C495BA2911D14BCCD8F5C7D8D2C4CD24EF21ED49EEB200B
BBC5CA508A4D8FE87DA796C3B95E98BD530B52836BD4F85C700CEF3410E70C50
D8E043DCA87360281ED1AC2F481C81A5ADFE21C4EEE5743A2987E7E3D7E62AB8
CF53B590BC223BC5CE1B3A911B864695634ADB05FECF3A123A32C59ED9FC4D4B
E8DA38C5783ADA09DC1B9F273DE16E6406FFFD8D75F65BB9EE9F0739630CA3AF
44EAAC3063B0283D76A952E46FBE9F87083BADAA263424BFA6FD28936949E7AE
E9C0396AA8E4C852DBE87E16243BAE7E3479C30177CDFCBADFA18FD3A0927C0E
7E21CCFC4F95F92BDFBDA1DBFDE0E874B428EDDCAEEDE77A8C8405BE7E205E6F
8B7ACC64C540113CA0F5BBDEDAE58E030F1660DF9F7AC1D6DB92F2C0584F2E19
DCF008F2F691F1997B3F057FE05D4A2E577C11F59F098B78BDF5C0B4A6C3DF66
17FB7E54D9B02B488D41F547E0211BCD3913DE5739BFCF391F27EE66C113D36C
F60214F573866286A35F75C7E96C8CF907B811698EEC22FEA34847556B703727
D0BECB0250E88073D2DC5994C45D48011F63EB32EB064959EB7B93345473C4A5
AA2A1DB14FE0D20468D932919662032428E4DAE0169CAFF6B4297736116B1820
E482CF9501C5389F10EC1CD9DC23987665974109603771E32F2B258F3549B427
FFC71B8E0592914AFCEC59B2818673E89542965FDE42B070F4CF5E8D1BEE3376
B43617E18E85658A1BB7A4F258A019D5867A25716D63959E3CAEA71651A3FF50
E694C59DBA98C198E7BE8F75987B6C2072106CA708280E0FE630096BD4AD3CD7
190F46747D49779D45A932AC3E997FA20547BF36A0FC86B189437FE47EA7DB61
99D5263462C1EE09B7239DD0AB046E3575E5E89B64E156B8F01F6AE33851AA9B
C11FD2FB5E78D099A46913BFEAF9923844CB8F667473B15243529738A30A7003
717E7D46E5F3A37C2A10B287FA08960D9C88270174D70C5F70D6A0C9184272D6
9D0D8AD5DB1F4B4770178DFAF0A0829375589E0710519F3B42BA89685E5B6473
80618793A6F10851FFC62E887FE4987391A679D4A19ED225259B145E426F7A7D
A969DC8BD36D5940F4EEC7EA247FDCA2873DB4E7F245FF2207AA70A135229606
15182941AA3ACEE34EDBB008794CAF072C520070772C3C915134518929356C5D
CC96E20D14A4905CC3B13B69A1BE59F0AEC898BF598EEB0A7BF432FEE25B8EB8
084617E9B84E4C4A457AF096C2048946172F0A88406F4D1E07415DBD83BD58C9
6AFC88E7B06CFA049419CA831E814103B08D4319D19FE118D2FD1C4C0475C4C3
82428D8FF18C1EE1F705A880577F9666C11D10DAFCDBBEEF0508A1D1684F5CC4
CD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR6
%!PS-AdobeFont-1.0: CMR6 003.002
%%Title: CMR6
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR6.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR6 known{/CMR6 findfont dup/UniqueID known{dup
/UniqueID get 5000789 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR6 def
/FontBBox {-20 -250 1193 750 }readonly def
/UniqueID 5000789 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR6.) readonly def
/FullName (CMR6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 43 /plus put
dup 49 /one put
dup 50 /two put
dup 61 /equal put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DAE339BA29C1C6F656
1DEF13780383DAE38A868377CC7D396B2A05F341AEE0F8BD0A0191F51AD11A4D
2E927B848A1EF2BA15CFBE57A51E3AF07598275195C9613041F71C1AF39E61F9
EFD5F6512FBDA76E29DE6B508F62F5CF9F73F5288DF1C7B0B82C92D3B6358BAD
EC3CA20BDE55DAA7CC58004AA86B6CBF8C410D8287E88BF20588A39309C2B703
CED322F030AA6069869064486CA651DA054FF3F5E56534CA358B0829A6B954D8
9103436E6B06DAD1658BD4A95AB41343B01F5866FC87C4EDFC71F1477C98F8E1
1DCF27EF743FF90BF918AB8C4E5AC35841E2F745480E5EDE1C1DEAFAD8D0018D
2C1F1CFCAD9F6609859DEDFD1648A6CD23D8ABB80747F94899F17C8F3E6CA55A
E176F19CDFDAA0D7C920B3A72051A4745560AC81978C92459EEE5AFE85AB247A
32981139CBE352B248F4BE5F73503A084A3E91F05328EE521D9669E44E202584
5407E7846F9FEE3D54EA18FFB144BF2D6803BF65AE402034B3CDBB40DD24217A
3CE0E95E2717CACD603A958187C42B3558AA38D6B6390EEEDD396F96E6041FCF
6F8888221AFA87EAD79F46E0E32CAED91E6C8500879AB6E580C581E8C8CE9B68
2BB5EFE2604E8DCB2432D39D75EE556969F1B2FBDF6A4BC72D106AA7CF22C268
464027898B311613E06E1584707F262F71D9F49D2149306A88E02BC60BBD6BDB
EF41D90F19197BA9AEF32B5E63D5B9FF41B5602F9F786E76621DA54D574981AB
87A72081EA05D6C6BA940EFEBD0904EA4E77BBCE17E20B42E1722617E0F6EF32
F1ACDE9D758594E9C81049CCC10605A27C2A06872FBA9F159CB155609B496ADA
4886F478E44029B5E620DE8319E257697E93E1CDFD27D560E2E4D34507020E2C
D9FF06BFA14E056D81DF701FAC3ACE4BE6C098AE116E079F0044391EC1661F6E
7A93B9320BD7F91E8FD2E8EB3F5CAE997D5CDD35107A1D35302260D1499B8B65
39625B7925F97D917B66BAFEEA992873F07220714F192839948CEA080BDB9A03
77B9DD032273DDB5629CB28B5D8797EDEFDBC601823E038384C90C79012A7D96
8F27784DA15BACE21501C26E3AFA5DCCE81B52B0ABAF71A35D33103EA86F2415
A39A830D559C5C6CA7423945BD3DFA942B20A06D7A8D8671F9831DBB52907AB4
4E54776D29C6085CD9970B6DD21DD3EA8EB09C49CBEC6CDCEEB0BBB1B8827109
3BDE64DDA024D67F098D6C1998506DDFF7907ABAADA1C39C759C850E0C6F8E89
A392D1C9329ACFFA92D361218D75E115F70A47C53B73B356D703E9C499AAD098
AA9C8119EE9E9708A9EA3049E976FA19AD04210D5F6092C7903FD155113F3A3F
269B746560F70970AC9F8D09956E0E84DACE4112C4E7C7F6B3F0B63D26EFF95E
2B2E9699D16BC8AFC4AD9113AA3A974C9E82E877288CF71E9169D2DCC61AAAA6
C536E5604EF0716F6487292BBB677518504B52C63822BED3BD5FD14EB41EE6A8
AD4B6CF90D39F98E12A765B645CBA3E8552FB9A986390212CE119E7C3DD675AC
17BD006144BEC534DA2A860188619F17589008409C5A309CB83FBA70F6446B6E
2B56991B6A03B1DE10C621591CEE45BECA27C54BC8B4F1754A9E8F660812710E
117850E1BB6FD89BB13F8CE391C43DA89EA67E9C3E7A4697790EA26B0E4E2E80
DCA508873A7AFFC11B8C02EF86C2316E8D8B6BCEA37F81A3A87546705F070C3B
9D4D28C366CEBC1EE485B8E2357DBE46E86C87B9939DADA60888AA9F1B92FECC
CC1C198DDB594BB70A8FE690ECAC21A414BAC89BF019F34D2A130F485EAE35B7
2A10C67EA3A48A4D9734759CC93AD85C6A570500AE5AC9973FC76EFA06BF5DDC
26E20E28D16B50957EE01AF2653F8D860817967AA5A9BF9BF7ABCDA710E9F34F
4F0EBCC32B3C9C2971F6225D2DAA6A451366B83F32B2ACB83E746D365B2DE38D
C1AB7447FE7B37F9630E410E5D8F0ECE74DF46C538947B3A167AD9F3E4A7EB3D
60F5425AE75AC3A27D39311DA35696C3DC7282AF1532E7AECE63D13DDA0296A2
01487185FDF1875AEF55A36C17D6A8DD329279D229259463A2F05CB7A874374B
E2320E1F6CFECB9C1CE62FF468C29751ACD9754AF1EABE8E7696C2888914416E
235B6766F20FFBEFF285277B639A51EA2F2E30D207BC891B00F0436008F980E0
9EEE7FB375BB069B9E0BA11DA951A99D8E60B4F920A0495C247FA7DE904765AB
DB5C3B2D634757E43EDD6FAA4DB3C67F82D6853E1170F0B2D8CE496DD4E72B0D
28277BEF172F1402959F64527F9B640619F04416DDB9D05FB2ACD019CB9C119E
E544D24EA6DAC5C69785394EA50E6EC9AAA9E14B904EAF29A733C6D7942B63F4
85729686742F26DEF78DF0DA1CA7CEFBB684F4CAD99021A3B3D1FE03B9C5A4B1
BD04CAC89BB91B11952A2B17A61789BEE0C54B46C03FE9A1AE73D17CF94BA30A
237C29D414C3BCE8E3E2DDF83C0BD59DCB66C4D2C3DE73DA8378F3C6C8035D28
7464399857E57651A53E9C4AA68DFCA91B2376CF98AC5290FDB9BDAD9EF1604E
9B0A70EDDA1E564B6D2456E7BC722454ACA8C4950FDD44B6EB9AD01169A9F845
B06A0DDB7897C847A5B1F42258AECF3807AE936C8F52C3A7A0A85D68160AE442
FE81543DA6702D76AB6E8701F80DFC1D87C961E350D0E52AB2A298B9E5908600
7E14D2A87309043CBF13F69AEAAB1BC239DEA88EB5176624F6046664B1D2691F
FBB2071D3706F97DCCA355A6DCC4D09FD35DC078FBAAF672FFDECEC61050A120
10B5A96629041303FD01ACCC7686165DED6AA712FF8E5E85DE33C4E7D877C49C
6C469A90410BAF60BE65ECD91CDC2EE7AC0CA8BA7B53865F26092BFCAA0BCA77
B80DC51DAD09C93C8DD8E43502B4B68F3D5918C3492196292447732BA90F5AB4
9F5E1D634ADE1CCAAD028DE5EBA9535F6FC5908DBD2D643E0A7E059C8C386FDC
E72659C0033F535C0D7F6B98D0335552D0BF3C6E302B672A5EAADFCEF81912E3
8F54E6FB7EC2B325125159713D0AC50DEE3673B9B148643727E94C80971A2E73
5E1E13237BE69C84FC039DCE02ECE2668AFD047F21A61BB94A9F498C9FE5CDEA
B274B40728B6F6CA9B6C15BAAF92F465B0D7311B46545CBA90D874839443CCB9
3110F052EB247B24B45A3D2FA6FBC7EB2A4BEC2A5892914B3C5EA3F4F9B9DCBF
6F932D95700E045B49E4B1F2C9D2A42CF39CA2F5A2654E6E8E6E92473D28AACD
5E35C6705EA728F704F5996D286BED433F976AB7E018621A577AED7C0AC0A84E
A032FE1869F603E6F20386E3A190A30A21EA886249ECF8CDDE2C33D73BA8647A
3DCA7A8DD9E8EC8D9A415D126BA38B6771C489DFC419303EE9C1B83FBFB3A0B8
97D64F30E4BCBEC24DF603FF3BF541E00D5804B6B6543D3D2B661CC551D497A9
9DFFF535AF424B2F3150BB39AAE8CDB306AAD37767BA10BADB031DC2FAB16955
EE78342CCC0E8B5976BF98F215461A8C6F63EBE6E2F1A1104662DDE53388CB51
8B44F3534853B8095F3B746A2459C2EF800FB1EF7F235EBAA9731E3AB3BE4369
1D3636E3ADD5BDF0C34FA80E90D8A1DDE770943FD196E0A7C5F1FAF6970B34C6
4673AACA6B2B5C12B9608521AE736C1F4B97209B063D991300ED5AF3D7F27E76
68E0B858FD8BFF86581E2B9548C691E3E5D9EC4D39C9715CDE86C7D22223CCEB
8A38C776A30AF14912390A7546DBECECD7A687D4F08646E57A12C80DCA022B7A
33399761A50B8E0ABEFA1163EDEC3DFB5DA3248792EEEDD894872D4E6814B4C3
548BAFCDE0CABBCDB97EC6D1BA47F2E77CC1389BF19D73661749AC33F46A618E
A665A85776545BF9662F2179D7BFD604FA8EF4700591AF3AEC647E27B24B76F3
133F9198DC15C1AED830E737909E43EB91C334C44BA35810007A3888E33F5DA5
B3B2C35481C648AFE630CC3E08F77744E401B2934E407D1EC17ECE737606B076
F8DE8EF3344F57495EF49D11580D6FB28AE0B1422521B320843B13467501CAE2
3DB93D7BB779F73B6AA30050DA74BDBC3F8DBB30F32EAFD07734A151BB2BAED5
C9B1F790059339B64BB4146470F30928C9A49AE88906BD6FDB7431A4B50809CE
0F67ABA01CDCC2320B0B097187B9299E3D80CDD7BB5DD5BFA7B28D924C5633C5
45A23CCEE097C41C3759C1FA8DBA0DD95034BCA89BD23FAC18C70093F40FF2F8
0FAC5DD4835F2DFD40540E9A9E9FD951A8AF2CB766597DE00147B163BACFB7E6
EFDA4DED594F1C746D8B46A1145E0E4058F5917B3F21E9BEBDE745EE72CDCA64
FB31EF7A2E55265F32559480E2B6726D3DE26FFC97EB4E3160F117E890C4B2E5
8DF310E6A728ABA85540F571C024F8DD58E1D7827FE97CED5EB31547EBC36415
02B8C0E10B7E37D816F01D56A364B8552CBFAAA95BC4BDDCFDE91CE0EF005B4B
7AB56FFB47A093AEDF0DE1EA48FC8103CA3CA1470864D2693E360006D05668A8
AA422CCCED20DCEEBEA5CE0DA1EFB00FB93E922B18124FA11A88D0F6E0F719DA
57603DD5DA42E1C56C2FD9E5415AA199D4F334C151C1157E75C107FBBFCEB706
5F4EA47A29B54ED8CAEB8DDA2F53D2A703B95487619780A52DA1270011648A28
AA64338E04AA5B92C1EDF3D8DA34FA6D227A0325EA6F22E9B38B6338C657BB21
CD4C582DC04010330F62923F817E4EDC6E5C0E6500F2A975A8A95BAA30C4A134
BB31B5AC45A2E7F6E9CDFC810D41344C4F606049445F8E93D74271C1E29DF7CB
5459593BA28AECF64D903D3E4D77CF5C04B06DE44A41EE4D9FC769854503AC85
69E4A5106E84016DE3D59865D4AB30BD6C9E45C45DCB5408421CC50CD6179C85
34E55CC70FBD8FEFE9F1D5160664981716E3BC7F24B6F54E0323D9BC4B692971
24419EE62D8B0BA726E2B4294A9A76F328B8101DA29E78BD5C4AC383350FE196
4D42DB1653637D19530124858950C22F1E9CF5BC07D46B7A58CDE19CC88DCD2E
7FE4EEFD8AA6047E919823C8CAB2EF5274F45E861E6508CC11A8AA90AED2403A
B2BF1315C2157B3B50A3685205D93E40906EEE9DE5985405974BCE0B84BB37DB
080A45C5237B269B93C0A7CF294A18B45464A41F604C494CBEF829A381155CFD
71CEEA54CC39EEDB6DF58A9896246B09F95DC6BC40BA6916AAB5ED3D24F66154
3662F8978FC63DA9280FF7ADB09EA5BA79D3B66E0C88BEC1EDD78DA93839073A
A4D7B0E627000C4ABA76C47CCFEE92E319315333A5584A951E34C55412049C4A
A5569FE65A006F77B416E0530AB6A8E7AD6C72340AD4CE25937158FABB2153EA
281E1D840206F5DA38E00815E9081F81DAB9FAA8F4DAB305867AC84735DB4F52
A36129929BD2084A8EA37BB6889695204BF7290B68D5E722540BF8A276F8BB6D
451D582EE59D2FF03F6B97DDE05FA00C3D375D2D0AAC8FE298F85CC067B15481
48D70B6A0354C705715B891915FE8EA45244677B9FCE81E72D66177E309F3F83
F744B9EA9E55C3B30DEC6E5E03B3988FD526A82A5E8E1DC79127FC62B2FA7949
B3AD3148868DE22BD4B5708E32CEAAE6ADEED1F463EAB9692411E18F8D6BF391
126B2700B4CF3B59D02E3F8795130C96285A63FCD1E0F647ACB1D35E9C58BD01
1DD06BABA00CA4343BEBEDBE677E053E9732B33A7495DF51782A07DA07F5646C
770C957AD915CC70BA8E08BE7A1F4E6BA5BB9C603E38F6FB0A2578471C4D02F4
283069856D926B9076EC73AA39CEB0A061AFF1575C7093FDAC9F89C3DC06EA45
06F3C2A3BC9FF21128B10CB758DF0F099B459A5264A8C24C098110D2BA1A8532
8FAE146A91BA7D033F591AB1A94B8A6FE0FFB610F698D216D58B4EF6C87B1524
8037CBB7E23D8550A620341C6625A1A2ECE7CEE2598D66277F857231A36155E3
984F147783E9B93975AC38A29F2FBCF704C8A04AD84C3E04A12D2321FA56811A
5B6744813CCC187968C5C26BB8D3E6615A912FA5369C01CCF8C0DB790593B190
1A90CFB5339B8771F325C5FC448D36C7312B11A15A8635BAB59CF3CAD176131E
026F6E141B2619EF7F3048750CC9291397F141591EEC8B612D6656DD34DB54D6
DBDD303CED74BE76664E7DC86FCFEEF2001C9DBA56418FB61F589566A47AF36E
C94671C5E8939AF9F4D53C0DE7142B7B63C86AAFA65877EBBB48C64589AFB2CB
1280AC099FC48058855CBDEB6C2D2A0D092267996591DC3B5EC8252984E9B27D
2E9EDE8CD8303F0905DBFCAE497DE1B755B924452CDE11CF4F20893DD6FF7251
427F520FE00580DAF1703FD968E0F8ECCDE618E1EA5820EE6CFED97C78864EF6
26FAFEEE194A268F24249D44829AA360D731C34DC285501E966A959180718F72
6330E4CC060588A2F65AE64A720DCAA818D49D4440F5D0B6C1F6C3A107E12445
F1BED2D3FCBB87A9597F01C7332AA79143564056219BF87D4B907A04F77621AD
054935E883B2B137D3D1C4BC792E8335CA08B6D83227F35736C41312A0BB077A
60FC6488C5E02FD51A10AC113D4EF70038C649C1677B2204A77F2ECBE9B3C341
F4126BECBCA61E3F3801F9188A3775924A62D30FB096B440286FA655EBA00A74
9A4162904BEA07CE68EE76018346DEEE20839C9A2FF71179B58E1D4AB30856B5
F5D97295A097174467010B15D733AAC5813CAA633746B430B1AAF9F997FDAAFD
436844D1A56B8E25A89D2CC4BA6EE7ABD167818FD4F6C747E07B262C99EE2C35
323F0B471586CA50F54C6381B052B15B0C58C19DEA82C0CA29F00400B727419B
2379979CDCBFA966AD513FA903160C571C3BF1BA239540B11EF2371A3880837C
6D6CA2F374280CFA1586427AE975A2AEC34244874E4D441DBAC6CD1828841C91
069AA87FAE849C5DC7C9EC1B9876E59F3CCDF8BB23D939F5348D7486934BFB02
CC5A22541ED352616830A510DE7732E5D8F7E785BBD31C2BC9D348CE5632654D
2C1740F89D57FB2AA1FD8FA3304EA03F757BB8F498ED98E48485722E78D97B12
A05F3A28438084D1CF90AC4C3FFCD7B3365941C45E1E02CB13CA1E99F7FA1D00
1C9D489D5C95F019AB4CE89FA3B6604473DBD2CE8E278969E0A0FCBCE68C23F6
9381882443D3FC16966555FC222F3FC4B1207522201AB7A15A7A6F22CDC9D392
360BF4C95DAD35770E0AC7E5EFF015F2C74ED7391F40EC94B8D1C163B5DEE5B3
911A20C2625AD3B24BD94D2A42405E655DA47D3F94F882CA2F479437B4E0BE71
8AFA4482C6FB270F8D05B4599A01403DAAA90C01DF3AA7C2BC7E66AB6AA833AD
FB6E5EE13E45CC7CE7E200FBFE639F9CFFF5D08512C02764997FD28368969BFB
0876F236EF6189BE73AD827332DF1B2EADEAC0ED3B939CE5BC3CEC78975FC636
44FCBC2CCF4396AC7343EC62E0E4F3DFFA2B880BF31D93ADFE201BE9CCEC8BA5
0B9B919E05B851E0909968DA259EECC6AA0743F25247978CC09C28C4F878E29A
5070E4023BCE95FE0ACCCC01D0EE219FA8344E8F6D7D4347563BF8AC030B9097
41F24D4BC9494915A82EE9FD37FBB6A46BF077B728FB569B1258CEA5F51F36BE
4F4D0F890D782E44748CA3FE8C8A515998371D9C7D2311F192B4B7E7C68FC6EE
3F7136714C282A2570FE591F247A08319CE9EF1E43274E4E57166E31A2ECA506
85350DA31AA4C33C9687F5210BA225EA1007C444FBFA2126769767E47A967884
9F68589E4BAA9ED32A7A466DE35554C132810C68ABDAE536D9D884352F28EA02
8A555D2CE11F30598F44A65E2D86B43ECCBDEED9E4E5B5B7DCDA20EAA09D9FF7
422FC91F2201431A9E8FC624FF44D26C0100183D77BC7E6B1A6CFBD3FA8BABC1
AE4CB0FD382E26BE0A83169B46D91429DCB746A0326243E212F802AF6A56C709
6E70C6C7CDA243F0BDAA8832B2533A7133035259FD4BF7ABD4F214ED51BAC2E1
7957997FFB4B643294EA147956179DDF4B547965B7FAD4A2C945BB5AD34E9EA6
8E8D0F03FC275EF35E355903931EFFE22AD407ADE0D5E3A1BFB73F80E1FD4498
4EF2FFCFD32426347DF4575E995DF7A85F48CF5F459A5DB240D3E0D977F15E90
E8CF5587D57B1CD53C19D9F5F97DFE60DE288CC9F2884BE6631E2F7BF2F30B01
DAF0750B1CBAA805921D4EB14B5ED71344E54FDA43CFC4A5152E84C56BCCAFE9
F96EB1B83B81454F680D199B0C04DFA27A56DC1EBEFECE6BBA2E6D40A9E8C83E
6700DED3A8F62A7FB3887F8D26721C93A98830DB6D00738F68C771B6F0F27F15
CE2330A3DAE5FF6BA6BF90C7B9F2A4C486FA21D7D86A392919BD343BF26C8B07
0290559D32B14C9229B1FD8647270B7E6AB69EBFD3283A2E5B68AA476C98030E
179FB09D14D12D884534C22E43D5FB2C69BF2387F81E45EB45615A40B00B873D
24745A97E5F1908881633343D14FF4BD82F96C190E0670AB994356ECDB71E21E
8F2C2440EF97455684883D05FE465A99C13279507AF1E51850404FF0DBFA702A
FDDA99C24F3CCB78EB9B26DBD16930A335B93C745F48AAD37DD9ACB2688E481A
3FBA0BF4D8B3AFD0A002622F9FA6A7642DD8119D7833629FBC8C780254EDBD89
A9DC008E790FAD4D674E7B77B8BC36D7FFC9D5F1F5CA83F78EE0CB3A29AF4D7C
C34E6D04293CF4DBA0DDF229BED30D888E8DC2D1326B8C47F03E64CCAD4FB42A
6A6B60526B6A8BA81963835856522AB4206EE0A9BB409489DCDF1E5A3F9608B7
0F5B824E1B84442AB654D3007E00643FF590900C929F29CD3E6AF6AE8B0A2799
25FCA913967A1CA150220DC5AEE8D6896917
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI6
%!PS-AdobeFont-1.0: CMMI6 003.002
%%Title: CMMI6
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI6.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI6 known{/CMMI6 findfont dup/UniqueID known{dup
/UniqueID get 5087381 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI6 def
/FontBBox {11 -250 1241 750 }readonly def
/UniqueID 5087381 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI6.) readonly def
/FullName (CMMI6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
dup 98 /b put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 114 /r put
dup 115 /s put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFB83E8A2A6085DA11
61B1632328B94B21D3CBF2E7752D441A2C9A03F6681FDAB37C4B67D5857720F7
0C4BCEE266586738012A2237A85FCD0425DA7E8E8632543F5BD5D50F9DBAAE69
9E053AECA6027559DE42F7291EB381D866F1293107553809861D43508C6F2341
5E4FCC431AF4A9B3660386AE63E877DCF5E513D0D5702B98D58B34897FEE163A
75CD6F5A2196F91CE5060CA5E72F9C5F79D18F242EEE58135BFAB02D5CA430B6
D1B9A376849751A45E52577B1810C4F0C7F6C8196071D5B08FDB731C5384CCBF
03B460347E0CAC959E4A12620B6C2ED62E06A241D1637F418B5599A7FF3C1390
7AF66A00F7C31B4EDF249C56C268EC9D546CD0489DA51B734C8292CE7B3D9E30
71448C85ACC64FA99B2DEA91AA4CBCBBB9DE20833700AF96395DEEDA3FEB7D6E
D6E3BE4A62CBFA18BD0471C14F3A2FD025C88E8166A9830C5B5B94624A3D6482
D1A1D83805D0EDAC1C79EA858A523D9FA3356DF42BC01886E77F6AA6B04E4E3F
AD107D861FC626F0A439BC3F125D48649E5101BF79C71507FDACACBBB4C4335B
C41A5C15ADF1DF69E1D68C3EB9BE30BDD5385F81D26EC8F2F206C1C7032B9EB7
0392BBCA23B4693686AF8D2E1ACB2FBEE81D75667CD1DDB906BC5B675660ABA4
E63429F16623F20B6A040E4942107CCA26CF6C1F52DEED9EC7EB15BE4F18F2E3
9ABDEEAAEA9AC41E9F20C37C54B33F609F5835AE5A1EC9D674DC50FAFF6D3511
2198195590F62B3B8A6FC8C3431BB8895A2F910F0361062DE32CDA9A7F41E761
B09BD8545CAA2D7124B5688B54705AA52E4716E36C0303FEAD38E0510B3CB496
6C30B115C37E02043D47B4ED796C671E30360800EC13F0F0FF3E0DBF5A642396
EB0F39A9DAF0974678EA1D041F08BD73867065DA91B044EF2AB15FAA6546031E
189936C1FD302BCFBE55EAF369DBA4895DD0996BF7292762551A86C8A3604E9A
8AD29E38BF6FD40172051EBE7C694249F3378ED0139D37EEA3ADB66F3A80A1D9
9C3655F054CACE93BA4AD42DC78A03F42455ED1BD5C122F234F21ACEB8FEFF9E
3BFE0DB2DA6D368478299ED63912A234ADB1DCCF1E519AD20772B71F8522B5DB
24E9658BDC1333D76F07F63D81F7A51D12C445ABF698092A24E5E5C36A52206C
0C41F7DCA529BB0A4D146DB6B4B341459FC17FFA357CA5F93DBCF30B61374613
4846D619423BCAC59B7EB40C14C70ABD985754A0094C98350D01FE9FA371B0F4
38884690DC7700C49236EF68BD6E806E8937AD8B77648F552C0C907007465A76
1475BDD3FBE1CF69C706E703226471C249A3448F81C240ADBE4B5474216D0235
6B0816BB6935A2704E851E20C002F85B653BB0700915B358DDC168ED3FAE3D91
8280A5CA5C2708D622B03DC47A70E5FFCAD5A7C8D9AD563857BBEF92A3BDB588
8B5B55CC9B960F20CA4AEB598DA8488004DEDBC9671488011E836D9D8B6251BF
256D08E6F1808E9D498449DF1F18E48B310D561D4DD3146C2BA64D960E66447F
6DA8B07194E3BFAF662C00737BB7222B55A5CC206A1C46F252ACF93D2063BABE
2BAB874C01AEC438D3F86AE37C9D7FCE4077F5B5785E12C1E0B685134CE2E8A2
2E4DCDDAED2D53D13014E428FAAE22447763D4693E82600F850CA4A49E1ADC5D
C8DFC16E97B9F6164095CF7F31373B591F815621F45DFF77BFBF89EF60C9F50F
0C2FBBA4EA9602E197B9447FAB6AB57B19B1C801DAB66BF7D263F6572B9EEF88
E06744C1FE197B8EAA71E1EB67716B7CAB30C859A2D1B2DB95ECED02B83FBA32
E62F97EE4403FADEC936CC8DAA161F7B509B2723BA2B735572A80D7D087E6395
6A9D34D5963E3C6E37F307C66D1CE551D2F055BFCC7360FBE93ACAFDE2B1A849
37FD373F62BB23C1A2E3DF61C9452A8C995B03D44D6210A968C6293B4A3BE662
C7B0B59E6EF6D53FD293B2C290436B0C448E7D15A63533DE321643E53C85EF8B
060C434E46A736EA617EA00D185323460E77B95C49070B035194A2E7693C3B15
104ED7F56FCADABE49F27F9A576B354C574B5BAFFFC57FE9AF02FBD87B8874A1
24C53826659BEB1EC50446AC26EF3A95877ED3D81D33A8BC1BF7473FB9C11ABA
0F27B38EEBDF77D3D3EA63AE6022DB0D4F1125DF274B86EF0A4A263E108D6044
7A885F5E87362293A53F457CBA6C911D23653DA7CE4BB7D4FF4481AB97C0DD81
C13515F0E3BF8A7E8DE2CE69B25BA9C185D9BF31A65DD290B0D4FDF40B61E2D9
AF92BC6468B3F5AB5D5B88710C489ACC69198D697055B39AB3DE8B3733825C5E
6E763E2698574381A01352A7042A36EA96D17DD2EEEAFF04ABF7BF7D877B0FC7
B6BA51BA994D431F472B6EC4B4C327399576470A1773BCBAC61CDBF0F95DA6A5
0BE5239B7E9CD39E1E4D27EF6695D1FB56D4CA2C2370509547D6D01273CBE6E0
66A696C35D2D0282CB8C85D7B1C51453A0AD0BC80E1D183D11AA78879643D9D9
A3D0B2BD8EE3EDF29483CC5871426232A20CB058EEBDAAED85378B163425C270
B0F7BB46B7D1B89CF84E6A06791195FB17F11F34A2548FE424DE10E376B39A2F
DD9B0BA2F2FDF3ED4AACBD0D60E67C0749D6DCBDE6E79041398DF3FC8D9B6CFC
693B870683CC425C52705902DFD324E157C9829F25B14A057AA92AFA17F156FB
0BA949698EAA0657B03D9538288D887959EF24A427EE7EDE47F304A1A6A715FA
2966273831B5B3A9C11021C153E67A73FA606FE3233C3DB217404C6AED6A4C59
DD4C2A98B31AF5604D8DE8354448B4CEC66022E756B0056CD32E9B002ADC712C
0545C2C16D9457E271D98A4ED7DDE01BBD1856F5C3DA28794D2C7951FE2FE6D9
18643CEEC41CA4A3464D3D3A102653CD6EAADA59CDD44918523B8811C2ECCABA
AC0D188F5E07B37AFD56006B10B32EDD179F4DA693EEBF4DF5425D996585F21C
8780A4D23D24FB0618C12DE65CAD42A0138E28A100257978EDCAD168C55C6F07
78A067F0299890356C2A184820A554FB07448395ECE36C45211757552E288ED3
7DFE46CB92EB2070442AFC85864A45000C4854D728096AD3D4C552EFC26DB6B9
C340358451B50AF9F1B35C2E32D495DE85B5848D78940270DEFC07A14D960730
878B5B55916FB40FD805116C9C2AC8C6D4645DA67A978F1C6FE705EC188DBF7B
FE7AD6769F2EEC4A9B05306D5BCD6EC3A240D6A29ED07D1D82E697DC8CC391AA
015DB6BCD1DA5C9A5A7BE3C5936681215E859E9837027D108A54F42AB24E38C2
4A7D8CF3264AE049D4B1AF48BBC564BCC88AF19D37DD81CCC431D0C554DF29A6
94ABDF8126EE4FE1DFB78559B9BF36FAFEC9791049C865694F9E2FFB7A308FEB
EF0195FAA6BFE7A081B65C5125623903828372F117EE17E588B2FA26DC9AE37D
9A6F0043C019624D3D87AFDB4B90C46AEA78919CEF5D7ACEE316F30EA0229742
55E02E0E2533CAD78CE9BD6E0260A695D776ABA229D89CF9BEA92CE0397821A8
830A557021B3B90CE0B07A4B34C24337FA3FA4A3728B6E013BA01071CA7FA667
6FFB4BA3A28B5D5614ACD4E80E00938C2589CC6CF885A260AF7589240BF8987B
20A19FDAC73FAEEDD93EBCB3D46F735214164AFAF1A7828FE96E2BF7CE1EA46E
FC1FC4527A0ADF2B81CA51E3D96F3E786511AF00FDDD9764CD3178362CF9DEE5
F05D100EC21A301F40FEFC3EF05AFEC140A9466AE68FCFD6CAC1A143BAF2B7BF
D0DF808F0CF87FE2399CD9D2DD424227CA7D4073ED002CD555FBE8057A797B60
313D18ECDD779FA7289D4E7BF82D95A7535CE3F0F4164AF239AC666653736654
C13E436B526EC5A1DC97E1D85C4EB563C7061AE1E81F0B38BC45B17C15FDB0DA
E5F6332721A925D4DD5A97BFF3E3F11D4F4F43BAE4E73A294D314527397F03CE
AFD12DDF9D07DAD8D6C8EFAFC2F52E20FBF62026810C0C31A1EF71FBD612654D
C68B7A24112F0ABDD20EFF3DADBE447AF9CE568F873ACE72B63283CB26B89BED
4B3315F26084453B1EB0877065A76E7B704B27F93DBEB365574A78E92FDB4B82
D6ED91A1728F571FC9CAB636A6E81D0C1C4F5E3F6F4574B6EED48BB61EFDDC80
1831E2AB9327B37881F0CA5D5265575F210BF4BCD8653B4193F74E3FF65028F9
2968B8127C68CA2919DDF529EC882EE99901146CA629A07B4DC59E7868DBE083
6E546C5769655EF6628FE2EA78AC891D130108192053D5056A7BD06C09592AF9
6310B3586A2609DB94CB0079550358F5547B9FBB2B77917A327EFE3F972C7263
54076627B4DD74638C3105FB25DA246484799D5326EE80503F18672B893289CB
1FFF8D3F662FB33E93025D86803551A8A1DE363D1534BFA3EF968871B19FB189
DAD841C177E2AC98B6B69A78048221C5EBBBB86511939D3A9963B3BF021185AB
0B26CA7D0A779DC2F7693C7E48286BD60EE46615E31B93FB0E6992AE20C792A4
72AD6FFAD6682D0F606807D7AE63A6280B5967FAB889DCDF0F76347CE302FAED
A59E1B1AB785D9D0ED695A0D05DD3DF0EF0B275AFCF9EC7031E1357E99A3DB85
B4D137567875F7580E2BEC96B08C97ECB40876000B610E0BFE81E7884C9BBAE6
6BE9C2C612475396BC10EC7FFBD1118A7971FE1971DFD0CB677ECA65DD837B5E
C7D36FE9F20A15A941F1E77C11093C902DF5B7639580B9C0E4AAD13518E1901C
1162FA095F301848770C6C618E371A0AC3463D0D94221EFCC0884B21300194B5
97E03BCD5C4878CEBF352EDD1D2173B56C9B6A08BF3F33419DF226E1633CC5CA
A88A57AA85E21657569916E9B4B79E51B5535A57B2D6FA3EED1D0AA32DC0165B
12F8F5A681040B456D8DF175AD6053A2954F327F4EB4CD453A056FB1701242C2
59755058640C62632C764E002CE928E6B908BB137C28630A3CDBC7C34CF2B643
FFAFF20E345A86F31756C78A8EE2B9B1C5DAB2C863B29A44190770FD90BC6AED
0C25942BBD6A370C21650947B49AC8EB6825BE65DEFAFDDA32007754DFE0273F
B995B8986E505F95E58A3F8873545DDA6F3FFAADE992F3FF7B2DAB76D663280E
CF2BA18BC8871A7C361AA3600B192948CB918FEB0F2900AF2BCF169576828325
449CBF0C7AEDC299FCBB061F491469B9ED1D56771A03F9F202550E17FDB15B51
4772B2F06E6AABA4027D13E8730999532DB2475630D2F8EB98242E36F5B45A94
2D8083014B63A806BB9A01906143482C614B5CFBE8C5354A3F2438B2160F6DC0
81AFCEB201EC67F66DC5808C907A3C6CB664F444D24095D9A11D4978A7B57037
87C67552FD59F5713D0FE03462F9A1A323BB3EFF0AAD61B1792CB109CA9AE4D4
D7F7FBD3FB91258DCFFB4634669FA13E03C0AF699165311CBF37D24378022787
87D1320ECF878F859149B2F994E700A32CB7253297AC58753E4583A08A1F83D5
CBFF10F2D26D71CDB20E1C69A666E9C4D23BB0E6BF1097FBBB204EB736E61FF0
C3FDE1986938F8099694B9F998B3C735770FF21F73B1A6B750498BFD21184F11
5E6AF0F1FBB08EAD436C4AADE1E6B815F5E58988C113B4B2335A340798BFB201
40586D0BCD6AF5A08CE9AA042910197F47D98CBB4411A6D435A46F46B3964F85
032D7F8D880732276A8FD24DA772F642F06C9F3EB4C9090AE4A3AAE67D8768A1
7B2A57E15B7FC626450372F40E3EE28D8D997CCC8CC89C644461D1110740407E
F6D884A0503E05AF830994AD0CEEA924D935749F6EE9F2DD65A58ECD59229918
A303C90E19E9C411FAF24AD5E9B786178F8182692CDD508A4755123B4A594AF1
A8E7287456C1CE2CA485CF4CF9DEE5238AA7328DA204816F98B7EF49EDB30875
3CF8C48E0465BFFA8F2A1CFB6A8F165B63CC80F54C669D02BFD9A0EA0FDE2B40
D69F0101AE4D2C10185AB10953019FE7D373BF40C2F6D4E36693F118866D1267
12BA7987ED4313E8635DA02A4FC1F7815105F8EDFE8004A8801CC1AFA8D123FD
1768A6C39E838BD489C6BEFFD3BDF650DF48D5F8D99DD5A2E8AD235F2CAE8BC9
C13AE9B214CF3FBFAC7BDFA54CB6E675273330608BD35600775FFB2A96FF648E
DF55A78B43CF54CABC0DA8D574CC5C5C62E9D658EC62035EA5028767749E48D5
658212BD39C7E76ED0C6F3E0A1D138A0DB8BE574987AF1E43070F1F12C560009
F48993FAC935EB56A5793BA13C28293601D268B4880F9BC33D553FF3B6A7900D
37900BD3B4B558C84BBAB09B4BC2B14D32E49596DA090E586E28D560903B9744
7D014EF2A6AC4F711A025DBBC841F1C1C93BA1F8327DFE33C803A0993050D590
C7AE262261DB7D04B9DD91F89927161A69E14BB2A48D29578410E312A4793101
B6CD65B298988AB798F45B76E1F58BE24DB207C7E07014E17525B436D41FDB28
D1072CBEB526E17C72DDA00ECDD06394940DEE8BD02CD3C81BFD12BE0568A459
0F53010A0655942C932905FEE87183CE357887E2ED286DC1E89F2F401CDDDFA9
B418F218D4115043892882C09F2E3749D4671E75AB1AD01C78F59FE3F54276D2
A91512C21C68180CCC0E147E834002D7799FF393842CE88BEA714672E1952C9F
7CEF2FD0115B0E292079909A7775769341A7888CE6063537ACFF225B4F396972
41BF46C599D278906F3BCFF81DF941BF5888DE8A53CB0A2D71610CDCDCC1760A
7844F89FCBB892AEA853CF5D967648995559EFE852C95D2EFDA2CF063500F88D
2C83B615618831267BD8F5438DC53C6433CE7347E9C55E103B450EBED6229219
20E979C00B0B9D86345FC3A8EA2B049B7E148A7AA1C859AFE93381DA74CA578F
8FAAB28175D5B57F6A74F9869B2F530009E953913C6925D0045CB2E817A17742
3C5B7574E9BF3BA7B769C161C2496EA2D346B4E19E434120FE92A0ED3F4A9ACC
A8BFE55F04D17DF035D01FC0B06182D8C27B6D32F36551B9AA56D61FB6A34254
D0DF918C6716D8D05B973C8BAD5AD52C06EF3C6503D4E0F7F791511C79AE74E4
4B707612149D583C5D96E534CB45F1E7CA5B23642B1BDBC881FD8E4F66CCEE96
7CC0509B5CFB0B3596682A81E682DAF6AE58F605FD7A1F414F62572298AD8491
B76D0A23B4AC731FB8E7682F506B5CC02F7029827FFD866EF4DBF56E07E7743A
D42CE65B38EBDEA193CE5B172E87DC88452C3DE192E363EB9DBEC4EC65F53002
BE9E94180F73B53CE1E8EE9333DC86DF5FB2561FA1F9B2511962CBEFACA739CC
38A286651CEFBF451FF6568CFFBA8AA68555181147C1CDBA18C4F5C77BA8548D
2B1BA37E05EAF7F69879C3ECBD02783028CB1A8649842EB71023F89CEB36CEEF
A9B04E9ECB0577536B88ECE7C1D81B0D6D5A478F8E92DF83D194759437088D7B
E93C6AFD0CC6D568E60E2F1265A6613F97A6C4068C8EEBA70F6CC4E88A80F65D
EA7B498395390A74BA57221B86611D3EE5DC4632F139CA8A15E5B9D2DC97088D
7CC65197CD93F4803BE4246394F40EDC2CB4904BC273C597F13C8DC680245A3F
F1AF2D7BCE5D69E9CFC81E5E9F46927C5F55C719AFDB2CB1AF2E4D55B0E3ACA8
6BBBCF253CCFF8F02B8542F296CED0EB8A06A88549DC959E22C3D6C48F310452
22B32C44B046A61A4F7F8AED613DCD3C464DB2280D56E517CFD16DC32C83EACC
D3E936D2F3A883B265444D818393E30EE3AA59E6FA73DDC421F5A0FC8442F89D
CCE98189ECADC080F1973E14012C2B87F6A8289D7E1E24B79433A73BE771A305
ACFE83195EFA1EAC827EDBDDA678979C87FAA5768355728EF195A9456C7098D0
9D501CC27070F27AA426B145218C9315AFEE5B4BB37010E988DF32E2D7CBB3F9
F236403EC9325531A6CF39B45B12328C9EDCC6AF76A0DF223531C12CDEC349D2
325D6FAAC3C41E378245A0E017C3352B9CB7F2A1E4AA3D9A44E39D5BCD4C4FB8
7316BC327ABA5D5F5FF14BFAABD822D9433F0FC61DD06BF1493BFD06A184A94E
7EC0C67DAF6DD7825A6CBD56048BE3943949B1CC8EACE2424FE4A69CB97F313B
D84E9C59411BBFE163267D4BE932D830CC8E42E2CFEE0EB76A036B6D9FFACF7A
F3C0EF69030754FB5C0DB9755DD7292B4C730C54C0F76DBA3E6C934A72101EED
2901A35F0E97C666A0F038A9C215D92BED63C96741F3ABD5F9F2C4B444B6919F
E7C44D0F515535CA4864DE403210E35DE285BDCA6D19C77582D4C1390006F9DE
CBEA7B882AF38F42B1571EF3731FCD943CD830226A248408018582EDFEF29E9A
04669AFE475D7024E86F51F136F36FF82EC005C37D0878A06C8A1A0E2801FBA2
7F360C9B5ECEFDFB060714B514D154B576C81EC278EB94E8FC68CE178D1BFA1B
26AC1C5A44E467793108D4E49E5CA0015252171C713B12D88D0B86DB58B1CFB4
00675D6E2BE0F1EB91E8328FF2FA37500BD3EB3D6054212C9DDDD847CA0E0E6C
1589A9408D6E161CE3EE188433F534F55FA15A5FD78414121BADDFA38DF6A114
FE13BF1FC74FE98DC02BB29A2AD1B11F89B86C196B2906882E6A1E837B16C830
BBCAE6BD5C96173F9CB0EF1AFE56D7DC07DF3C56B2C60AAF24D32E8525EFCD94
A639FBC8BEF2A7F0EC7EDF6B738AEBD0971BAEB0624FB0E4980653F0170428AB
2363374D473E0A0453BF680DCA1AA0268A2FA1E4ED6ED3FBD378158CE203C1B4
D6A45384C8F756393F0AE7D17DC3FA88944E084DFAB0ED86DAE230D4C62A2772
CDDE9266D10AE5D1E15F37E86450151934379AA3119D0B255086FCA5B2827C57
7E3E22E543C8EDB3E72DC30BEC41A2E990B5BCEDC60EA51EBDA239D59E0A2247
ACC8336D2C68148F6F90A2B7D1959B1D9F2AD707C30733F919CFF59C73A46A17
F444C8F16525E9D3837CBA0F6E342C5D9050D2E505AA097FECA115630C6F4D62
A788B64D57B5359C714F7AAA6CD629A9F2EAB1A536D6548B2E9308142D867098
AF47889BECD932CF1EFC1748E2B81CCC6113F3990A7AA3F60A15DC4E19D3A8E0
F02B2D726B82834033489B2B87CBD836A8297E2A6EDE38CA63BD02197181D9DF
EF82327C98478C7DE86CB58F623E3D2E89C049797A98F7A8ABA147F9C0F1CC0D
651A18B4AC9D07570C8994167327A44F1C84E0FDBEBBFF74F5244E5E51056CD0
382E465ECA1A53CE2824461657B27BA8E1C824D0F01575259BB3BBDECE62EE12
C902ECE85BDFE763C2615A2D2B7D90FC868635617BBB0699D2B3B13F1622B80F
D99F010849E44D60F05072EB599CB6D3EE0E7868464EF04B9C181484A0133FB5
F252A56405113E66882CE7F1E0A868797E275C766E77B24ED238247676DC8048
31B2C11505E20B7A7515C199A3C884D1D621ED4D4182B00AB34D2106EF82779D
8323C5FB94808E670AD72C9C0ADE869518B204741AA362878E46CFB244D7A59B
D6700E6046B6772FE804B09DA74E62E1675EF3C00DFD7997DA41657EB927CE65
C05623C06192D8DA67FF5BC33655F171568D1D95A787CF802860EA0EEE85E65D
1DE4FB759DB095BE28D4C59E4D612D86C309BBE1AB3476B294CAE4EB5C71978F
F13E38C4F1F6CE26DFFECD535CFF373ACC2756751554163095833316244E3833
BF4D77853D817C0664A46F33BCBF8D356811B299AAA589592EBDC14DAEA66002
AA1D3341970F396E0E09C9D188E9301377A154B31F1330B124AB800BD24641D3
8D48845F23E5D92C08F6CF5547460511B29B4AFCC44E31284E70D34150412A1D
877CAB8149EA595E0E521756878611AFB9818C338FF65848DC7FC377160E00EE
D9C6A170C0FF492D97EE686E6F4CCF450FE86098AD3FFCD175BA9D37DAAD35C8
04A5983EF70B4E9D088091D6D1EFD43C45FF18E2775800951C2D92CE87839D85
FCC56EA335D69572787A0C3C3EBAFF2B3A4D0E118C9E13B9F759BDCD0F57322A
20D600E734065BA61597D34B6DB9B67E7A934189B396FCFF55F068816A1DAB3D
27B58EED857509FCDB25838B58F68ABF12819050F6FFBBC0ADE73670EABA9CD9
A07F96BA006F66CFB72BB5E0917959C9D7A029236D27F3CE086950E54BC184BE
5A33ACC6CB109047F779C6B81AB66F29FD06F98E6FA26A7963FB77494436CB00
0587056A34D6AC879767E5B72CF1FC94DA3F382A57DC9E86A41AE09DE9DE03CB
11A5262F527BE7602A7336ABBF9A453915CDACB8E5680A17D62BEB2CCC33ED92
3D53F45810C2D01499782178A83C5514B999A7C9B6D34C084753424DB1636C91
33CB54450017FACE301C5725EA2C660223AD47C3A46580C71EA7A2EEBB89B192
AA790642DDA30F199765FDAB35FFA064B18D08E5EB044CE6AEE7867E8ED6DC24
BE26B1918FAD654D69489822F8428367B6AE0FDC52FDB09C4DE3748B4F039DC0
F5399157C47E8AB426B955E8B2C3CB4BEE8A7B7DE95333EDF5696B21E5AFFA7B
F5D60E2D3BA82CBC515A0671BDFD4B90806A607B79CE817CEDA30DC6F7B53C0F
15329EE3A99137E9243436E1359D9F7C351DD2EFC06D1688F83784CDB031D8B8
87B58A5BFEA15FC23FAE7417C1EEA310EFBB4506B5155E51D5B7C28298FB7D05
794C59CBFBCD926B18D84BE8A0F4225E901F386757B511241A9EC3ACEF5B9CD0
AA7109A9A52A1F8CC5D94CE8C36681EC7812F2BA5B7E656B20BA0146896539B3
C98AD481C6D41DF42CF6934B7CB3E7E5C31C7C7F15D07E6B60BCA34E0483FA4A
7DBDC67064E193ECCA95C238673C5022C8623AA5E038ACBCEBA693EB254140BF
D0FCB3DCC5369600A36C23CEEDEF21FFF1A41FA833D03C64FCA8F79677307592
13F5153A6D765D2D77F9ABFE641885A31B3A49BF1F2F5DEFB6A888AD711B7332
71F571C4C9595737316C9CDCC425FBE44527EF6A4595DB7A3002B802D3E5B323
4DE0AF78CA2C90C5494C4F722B889A4EC10DA81AF14167976EDD99523F952024
0D1C3F5ABA6AD1A104F15E740404E3E4DDFC38C5174865FEEB76CC4FA90FAB53
0BB2D857056AD3EA5CD893945AF23A344B4CBCB2E1A400DD139F3EB3B745C263
8833F4E9A311A96CAF69A125880722383A3E1171868F2907CA4988277DBCBE3C
2408780CA0D45000FF6BB9018D5C8E85E6CD0EE405C490BDAF33FE97EC1CE2DE
2442B1F0ABC97A0D104CED6C07A6D383AB228CAEA5E21C7FF35F65B13CC92170
9810EDCA0D941172C24C1B3DD61ADC4B02BA5CEAE767D04B892DF99498A6304C
ABE7303A6223F77073D3714E746962D29B1293A0EB79F99B13016A3792776577
FF88AD93E210A5BA10C0485DE4593BEF3B9CBEF11F95BCE4AE35C67442EE8E60
0B55750CBDB6C3780EAF992E16C35325CD0EE0C56E61093BFC1FF1FEC828AA17
E50AB3C21C00770AF7746CAAA1CD323D1F02DE26D1DECC520C3B62AFE14ACC24
9222B4777B467845F0BDC8CD081AC0DB6A1F730962F63331EA288E8F6C1D34F6
D1C3E9C356EC50CF2ED2E4C1E4EA2A501C757D371CC19CB08E1C86CF3FA02B92
7DA6B7394A9690EA27FC9D93ED852BF958DD55
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI9
%!PS-AdobeFont-1.0: CMMI9 003.002
%%Title: CMMI9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI9 known{/CMMI9 findfont dup/UniqueID known{dup
/UniqueID get 5087384 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI9 def
/FontBBox {-29 -250 1075 750 }readonly def
/UniqueID 5087384 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI9.) readonly def
/FullName (CMMI9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
dup 13 /gamma put
dup 14 /delta put
dup 18 /theta put
dup 27 /sigma put
dup 58 /period put
dup 59 /comma put
dup 60 /less put
dup 62 /greater put
dup 66 /B put
dup 68 /D put
dup 79 /O put
dup 85 /U put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 107 /k put
dup 108 /l put
dup 110 /n put
dup 112 /p put
dup 115 /s put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBD07FC5A8862A8DB
7E2B90C16137614CDAFB584A32E50C0935109679E31306B8BDD29F1756946A67
7A7C2D9BA6FAB9B20A424AA0E6F4BA64C2801C2FB5A1156CBEED0ACB95F697B8
BC2A6E6AA7EB1F9FD8E3C9B1A16697EE1F0E7400421A7765AB218FC837A49365
82DC6B2C877A7DA84A81E6126EE96DB25C17A207D3020A045DCDAA064360DFFC
E3CD50E21ED239D2A6450D04F879A26443ADEB6A20ACC504989876476C7D1A74
91564FEA1F4CC2C8C8FDF666DB537F315AE1886C73CB5B00E67E7B398A6C018E
540EAEE98BB8136C4F044EDD63C33431D2CF9740F051DF365A4045D9D8782112
7BB5D494D9235BA98CF2F30CB119F5A904C32AD04C960C43FC1F5FD8DA7D90D8
93AFB59F3FF4F796481AE2A7548F948FECFC6C127C4D3F159B08F206AE8C296D
EE470DB2F879EA79475E029D22D7A8535C09A18689DB0609CC233E5199C02756
972CC9C94D9FCE264DEE5D75C8D651E4E2D1189AD9588CB815722BB5EE3C379A
6F31C2E6AE1AE4CCEB29766190AFA20EA937114978752189F1A9F42B39483149
796FCFA123BA9CCD1D9BE28289660BCAE16C40B5B504058D55CFCBFB4F4E3D94
DDBF39F157E63946534DA81C018B1C01B9F10DDB55E0A5C2B3985ED1977C039B
D6755EA42CD09E27751E159C30B93F376DBE61CD3AED34BA36A768F232EB3B80
E3E6B77C4A48D408217818E398B83D995AB6BC871F20991DF57313D6EB0C793D
0F28088EBDB7F38DAF7E01AAB3476EC24D7BB38A9889A7D3038D930FF4289B83
F54A7BE1E2D98A3822098D2E4D067A0D400C20C0B2B4BBD74C13ED1B827490F9
ECF48F8C3994C1C5AAC9CF783BFA4F307528F51EAB55F961808A42ED53F00C97
72A432EAEDCFCFB622389BDA707B6ACC9433B065CF29EBFE93AD14B8ECD5F47F
F073F11822C49B8BE924CDFA6348C3A75E9BB9BF3F31C41716B34794B28CDAC9
4DB8B087E180A9B3B17680F73D9C12C8D86A922C948093629F5D7F542ED882A1
692F4F6696865E53E3E2DD43B2D5E8C989CFAA5CA5C4C5999045E170BDE9921C
BACD6F2863F5553EAB2BA2D4A9034729EC0C4201DE90DA89B0A27C5A5C974109
4E37BFB3F46B3A506169FB0C68E1CAFC844419A8D261A1FD86A3BB78E33D5FB1
CFC687A5975987CE45155E5FDFAF0CC5FD5568CB1C26212F92E88255F0549F59
41B33125946DE43436BEC00804063FBF03EC796E3361B1C852EC3038D107F80A
9198968265D5488B26D7670B22C2D75EDFFD1B7B4AAFA36DFD94640C9D0E2D20
5BCA18683EFB91834A3939AB8EB60E2F09655BE003582634C52770DA9668C292
2E02929D812EE2B0CC65F020064AD5BDAC5F5693B30508F40ED8E20E87149BD5
8DD41AFF83FD1944804017DC5A04512E593549FFFAE501131CE2FDB65EFD0B8B
33809CBAEE411B3941C241550B9C30DD28088708F1C0CC3125CBEDCD985EAD28
03313741F67DB5744A87B381147D5BA70AE1145C27F794854628D87D6C1ECCA1
749E3465B950175D3C3F40E344297BD92D3190041A4392033A79BEAEAABB8DBE
CC14E39612F43721CFAE6F79074429221CA588AA2501DE520A464DE157A03AFE
3C082FAE7628FC0C57FFC61D0330AE6332D20FDBB09BF36848FE05E782D6379F
64F9C82C45402481B0A35989027F9756BF5A79DA2D96E10F39167ADB4305578F
90B509B6891338FA1D67DCFD61804AA6621526B2EE4769589A2646581712AC05
DA6E98D16494F07D612743058F54FEE516BD89A8EC3E03F9D7F905175D3412C8
F7329077FD6EB25213F3CAC94BA0C3363B759401B6EF7548C7D709F3241D030D
4EB46A1AE81863C412BDDAEA6084C37143A4C5E41BC646315B1CD09F934186CF
49D1D8239E363A435307030BD79536B50B723A39DD763DB539F24A10DDA12BD4
E467339D2D6DB177D6FC539FA77D2DE4118EBAC161E928749F7C753ADEF86117
58619F1155C563DF2E11ACA8347908B98113AED58FCD0394150EEC94B7F986EE
88BF7171D208D8F1774B1DD478F0C2958AE372D257E7EDF0F6B5D6059CC4D5D3
B00FCBD2E9CBE79235B9A5A3E943CC27AABB58728C95C7DBD4F4A1F8A4DA99AE
7377B0CC0BFBD454794398AE0D5F7281771FFE87B25A819F36E692286A42D776
01794A43CA9BB30FB8FFDAAF014F909A369E34C2F6C75B7D4EB9DB0580E33F46
19654443AFF8384B95600B86FF8E41FEFD032355626D60C7507C058EF832DF41
194B48A36F11082D1DCF4723E21401E0C7447AABFAB4639B26E3D2730E348F55
53EBFF39CDD03E06E2FA5FB379603C879EDB7E1A10F89695C9C47DEEE52BE0A3
F446F187AB9D7E93E6F9387F21129034F36DF40605D28FD526AF82CA9D232BE4
412567F06B38ECCD496EF40A7B243E46C9FEBA4F1BF4B1ECA029C5EC239353D6
C0B100BF7E7DB33BD1277DE104F15AA19F37340A777741AD1AD693BC76DA48CC
C6F83CD84591ECFEE375979972B0FAC4C10B625E4BFB261B9FFFA83C31DA0108
4FFB6377466E9739E0EB64424BD9FC7239C7DD834EC6788A0F97FE714AF92831
E1BA36A8A9E24739F1DC82DC26CC3CE28C210AA7C569B19E1784D663A0CA4E81
AFF43E86D6F5F63778847700072CEB77A4EB946DC1F23DBC00BCE773203F76DF
00F0B085F31420672974DDC642D885E95BA6BBE43E1CA8ABF464D9881CDECC7A
E98E31B9754C9B72A8BD5CF6D4D214DBC3BA7A0CDF6635953F5AC1E7639C4A91
C7AECE4C75CA3389C348F656FC2CC96C84C85A926237B6504DB51937C9CFCDAC
B75C31ED570D180757884E27757783DB2D5F35ECC48C496CDA342D49AA947BF8
2FDAD2F19DFE8CD1C76A8FA08F33681F3E12E229D7DAB45BE3A3F258B5ED4980
F15340CF20D965252843E026803E8AEE736EC41CCA82167401977AB719AA2F50
0B791EEAA82027B3C712D2EB9D14BF8F94FBDE2227609BCAC41EC08DE2BAC023
28352F913F7DF08D4E1C66E83F764578B22B4EB7191E852B91ADCCB1BCFDB1F4
E63DFD152E86FA9DE9BC8908130EFDE29CC4401339C05B5B9764CF8EFF14951A
C6C13AF979546996BF22F2B96D3D585B90CD27DADEC78914DA48432C6ACBDD42
20EF583FD41F2F6D6D10C3DF7DD077304B5940BB0462656E306CBD91EB9B756B
7014B1884A36201EC582FC9345C386043DD2818FC301EF78791C1D7854F8FACE
5DE9801DE9F59D5B4271E003AB897B2EF49501589D681D59CFFD9B03F722EEF4
74ABD29997515DA3591496B62666744EA76DCA45504F8075C0652D6779DBEAE4
90430C2945FBD60AD53B51DDBEFC7ED703C418B4B244C8FFA5A3C1B7600C5A55
3EBDB93C16AC191C3A28EB2279BD3F0D67C826BC6A73D3C0AD02262368AB4621
98A1605F2887BC5880E1AF2780330E0FD01D7CAACBB0F008A42C427F38236066
54799594E515B289044BAC4DADF8B3686B4372C5110201221FDA923F131E07E7
93C44BAD406838BA4D1C277EF74098B8C0EDC41EEDD58C195D7DFF5FEDBF96FC
19CEBC6C3006DD2CBF76916B4298BB915663C2F61AFD7747E03A03BD7280197A
9DA590E3D081C6F53DBF94E8D6FDDDD910A70AB18A0F6D48A590FFAB314D6CFD
E3FB20C1F3C91063F00726A2C13A3D48323F9854839405E5A29D66A43E6E2B84
A8B3765F1D817071D4D6FF42BC785C2D11AB2B9452F141696CE19C6AFB9777DB
107D6E22D8CC6C26440BC48248AD8805C4329D46BF433741CB519B21663392DA
5DC7FC9BF37E5BC396BFADD7263D09F6B4D69594AB386B7BDFCF3BACB97A0E08
22013E716E642592A20136CF9CFD61D4E515D80E06A4CB4FC9D9B916C93CEA95
B83B98C48CF36C1D02291D4F5C0419338D64E33C90C90EDD2BA3B96D70FAFE0D
403A060CFF448D3E28A9B1E3916018465E86095BAAB4706CF7ED350D7C554789
D7F4FE5F180767DE8739259E68CF142040BE1E2E8C6152DE3417C1FAEA7584B6
20781DC4A9796431EE713DAC4E713C839D7A4FDC8AB6BFEFFE767AFD8B67FDA6
943AD387E5D3BCB09039ADB64ECC2BE2620C6EC269E708DD06C311F450099E33
AF46AEC644222E7DC4DBB9371EE12CFBC4F9B27AB46AD1DA96CE006E1DF8291F
A550A93026CBFFC1087B134EC6EA76F5E109CDA58FF47338A0039A786A575F70
B8A03A4F9C8D07A4C856C77D9BCC8E3EAA740172D0C2D0A15BA35C9E5717D7FA
2691774DDE730BB9D7C70D7AE103DB8D35F3728470C76EBA0E670634E1A0BA84
2FA102BAD7271DF2680D86A4CA6FC353869987700E5E3FD778165456033D624F
E9B3E80EBF431ACC934AA0357E824B8AD73E222B510DE8445C55C07C8E5DE46D
E478F832BDDECAF2EBB11941DCF84CCD887043FAED9AA90D12BC8CA9A0C8D94F
8D3BF1F80B14B6CAE6BB1C6AA405AA64BB94D5A82CFEA548BA070796A02F9642
87326D066101435AB9EB40BA9EA9E61B363F5F5E3B924369796E8B78DE3414A4
2B79C6A13ECB2F34E6299658D07D2B3DEF3D4383CE009A927F0EF5C196652842
D96B857AB5E905201E7E8BA21A5EBED1FC6863BA9A1A6E5390407F75055E2EEC
512FBDB3E82CEA13663F1A1944DA072C765D8CED06AB461470C5723BDC1271D4
4D1D049D3EB131743F1EC9A6ADDAA038ACA2C41D139DC6A84EC3C61AC7F1E559
6155CC2F49171F6E07CF56D721D9728E87FC7DCBCAC46455A3694C765FE807E9
9CBC2D304AF37E0F28CCB22F239541B53A4D24D09C662559267467EA487BD33A
0BEFD4899B581D20582930703A868655C31BE935364CA6A95FBCB22CB714C040
9718824DFE97929D0482430726CCB5A5307957DD2432A9B6271E849148DEB76B
FAA290FF6D0B18DC5B76407852E81C105EC6CFAB0F620C6DC9DA555A33C167B1
430A8BC338BFC7D75B7099CC906AD923FA107C74D3FBB719D77A4E5A685FF9D8
56424EE4AA074434B809D894ED50F6A60A035C5223EA25DD8983B9B34210DABE
718D7B2BEB293FF1B63CFB1CBDAFC69552963D90F5E3FF533A3FDBB626E9FAA3
F3C119E5E01C7BFF832A033C3515BF049E29558B1DAD652F2888E339E67D15AE
95F9BD14E3253DFE9072B24C0E7E85025B71096AF51C86AECB2921126A43156B
EC812B32B1164BD9B2B947D503C015616DBF2024F5C8CB3236C1DCA653D661FE
6B1C19A22D272A176B7F1B7F9E67AF40DB0EFD4940E58B2A050249CA4E55CAF7
6ACFD84FB46FEF952D18552B3972D79D808B4C263B8C7E1BB647A2D03E102867
630D5C3F2C917F765A4F6FB8106BA6A9D0093E27A4CB6049C2371287D94B5111
6E7020776EBD744C6C920464BBBC0AC206033E8240017F8CCB112596ECD7CAFA
89950CF43FD87ACA750C03A778A37FBCE9C82C2F5ABB135BB02DA8E8C0D24475
3BEA9D79372D0022FF1ABD378C151417DBC69FE5C9CA38D23A3900E34BF924A2
90777ACDC37930B67DD44A2E76DDBD9B89598D5F626BFD325A978D277265DA47
38CFAF16E7FF1946E15F41CA73F7B4B02E5AE8FC4C37B115BC567E4EEEFEFC34
EC8974B1465AE57759EDDA28DD38A9210871D35D331AE1BE6097C3EC21C770C9
B25D040B2ECCC3AEB1EA1BF99E0C2C0F192C13BB9152CFCF75332E03F9CEC376
9B8C285A35F53655BE38713E09AE34BA2DA9C06FA42A6FD2D00CBF2AFD2BADB9
1571629C65DA38A431710CF5B01FCA68E8B8569922FBC3F9B64A5509B6F677AF
1B97E91FFFEB6308AB68AC58F9BA43DB5E764021E75B56170EB44C2C0A7DB86C
62B8982256D3621EBE3DB3994DBF5C5A14CF34B4AF3BD5697F8E3203085DE9D5
84B0598169760B925463E93DC87CE70AF4C2DF0F4287D2F2069847BCCF7A37A2
AD451D5ACE4DBCCB2E14D5DF38B226952E7446BF87BEC736EF3D5AE793304618
D66D3299AB9F9CA1D13F134FAEDF36750046E27706C7CBD8E0877BB6276E5196
BC2A355D109C0253644918E1CC11B717DE6FBDA201E769812752888CD66268F6
4ACF4A9449378F9F9923D584BA1B51F33663BE7A306887BC14A37E3C5A4654E6
531D6EB63DE3946BD8BA95CFB037991174F36D61D842071E6625605CAA350A24
FE551025D10871FE0E2599A63900C8520EF4911C53A03897C8BEE152451708E2
43FCF4E700C583A5E8DBCC03BF9CAB864DBD19E1760945DEA0EC0BA38BEA8256
D3A8D4F70F6685A99C6BD2BA8B412A26C002D76138CFCC7DF6802931E5D97BA6
0151F6A4C572235B4196B22B7B2D14B32886DF0D2CA8A277ABAAC53B63F64CE4
E4C088192AAB674497E8AF81961359C389B51F4A257373D907C615030BFBEF53
DBD99058FD06E352450B658478C10454AC8FC0232B70D5CB916981978053E358
99D322A07294748BA427FFD1E45C909171017B52B7C742FD77A8560852D819DD
8DD53211A14D7B2FD11E42941722FD3985D627FDAF87EB57326A0D290B5077D1
8A4230BEB40523A8565F95E0D44F036A571DB698EDD9D94FEC9512369E5E5E73
A3CA5C142617944F4F99C0697ED088ACAC007FCE06E5A6EDE7D0E03A3399DCE5
362271BC31533866BA79FD1FB3F608B22CCD4111FFB1BA35D920A23AD157C6B3
C3DAE11069D5E46DEDA7158C6478D8B8C0D9DC237CDF0CC6633911673C43FB79
E4F9B7F27495201E5ADE66255BC2CBE9D9F237DECB62A19D62CB41A1C92432D2
07F0629E913A71B3F1AAF8B8C5AC66D3C8605A48F8913E39C859E163DB1DBC8F
0ACFEE80A40B6172032E95A76B752B873FB4DF23CF3A655AF1A1B88C8DC156C6
190DE72973950565454C0A188A33395FD3D529A88F2B578356DE8EBBC12F04C4
5B899F667D9E6F3A4EC6DD8DE71FD4C2E2B6D56823EE4E0526679D71FF1B868D
F261489F06F97B010CCBE640E2F57BA3DC3332B329F7958394BA9777D833AB50
005E8E9232547104065ACE33396772B0E0BD66D2C6CC54DEDD071E444D8C95F8
6F88B31E20FDB80F77C83151B7E25BD3736B4F9BDC52EE78C41E9475E5A6D94C
D348AB42F5E36B4F167D29EBDFBD43B03F77EB296B06A36880FF17D412E77EA9
F2E7C25FD05E16BEC6732681EA21AC3FF6893B93FC09316A370CDDB86D9E6087
F6042C3F9ECD742778389170F5F041329782FB9F9702F7533E51F355F71825AE
2BF4F8FE50D413AC9A20C41B42537FDBE8DDC5A5C793D3760C1EE13716068752
F0AF10812250BEDFB4D7133FD58F4587BACD572505C84A7D3802D27443175FE0
0D89C3398B55176D8642AFBAB5CBCDFD6220C8488564B4306D74A58CD2921AAD
73CF803C754DAC2F30A5324886E273064FA51781D5BC596BFEDDCE3982EA1AA2
62CA7BAA1B16C6EBB99B2AAC4E6C9CEFB3D10F19987045C4918DB239E6E63D79
5F44B9D097118D081153AFF96E5EB39CBFBB99A3BE30909F614869031358EB98
F07A97EA78AE50375941B2474DB46AF3305F2B208D45921F93743A6CB8AC584F
6BEBE25ECAADD5A789EF60C9F54446687E7B030DA3E5243189F02BA46BFD28B7
DC14822E136AC7E40CE20458DDBF356488045C95907363864CD6943643BF0109
EE027A3091C11EA392EA91320EBFEA3B857370AD8EB86D73F035A476F7058222
E8CDE78CA1AA9EA69A8AA6EBFF3E67324C567B914134DE042D6F8F18A9373107
536E8D90189917D343F5299024239E2EC1D2D177D82E97F8A614D2BBB0E55396
D3BAA9869A0C70147753E076B7B3627AC4BF0EC971310C9E947E11D1311B45DE
5BF7E34E78760F8A25C609012CBFC8AEF7E7DF68B41BDCE88DE54162B260CB91
C49ED99825BC8E9C0DE9599E8F9F8AE662449D3B57B509FE3AE55865902C743B
3754A3A2F61C5FEC5DD89072F6A6708A2EE664643888AC42C394A630FB950DF5
FD1CFDF3B43BF9A1BC3C352DABC09D118824D248AB38F8CB3A21EFCCF0455BD4
6BFEEF92859123FB7D62E428A3895B80C096228469FB3E983597014E579E37C8
51923603F3A1833A671B833526CA6A78100075BA2BCC5AD4392DE94C1CB660D9
6FF05F1D5596F3830EA44F6C4AFB39B3932DB7AA7069DDAAEE2714FD629E136D
4B44981841C10A5F219389D670E5126CE6B700F7EB63D0EDBE3E02AD0C99A2E3
C918B506A127E851A7FCF927959AA30F625E8933A056A4C9A0D071DFE32C78DF
120FA59E4782035FC638F656AEEDA6B076BF9A68FD56F90FBF8E66DF92C4540A
DA43C691A9CD14D0B1B80506D34B54D4DCBD2B61764ECFBDFFE946AF9CFE1FB6
FCA63A5E3883197E3CCD63C79007152C4F4DECBE4F160F270F32E77C0F9D0B39
3409EB3A4323645F469B3BA0DF8A3A672042C2FD7E0E7E5BDB58E3A1D2BFEB2A
7BA8662396FFC055F2A1E41992746DB249D4A7FE0164B93326FEBFBDC9B8C8EE
E4F649E95924F08BBCFF45E153285884A6E9F5127906529510593F4739CB5188
EAEB32602DA2B5FA880CC594FFAEAA8523F3FD6FA93D2AC10CE3364A7BA220A9
F843218F6C89EA5FE63FF9178B2CF7273591CCAEA0395D2FDFE43B139EC00424
33028A1E5CE55BBFDB101DC3AF5E021C850C05BD86BAB3BBEADB042DD9983CC7
BC78F9C8C5571E25FDB685F433979BEFA9B95B540DB84EF970BE05112879699B
410B6C2F0958CB4762C87BBB98551F5A2A41442033EFA596E837A615B0364173
18CC507B0B98EB5E6B11E32332499B71C5AABFAB29DA193B6075552345C7AFAE
F4FC6B09511DC6DCD1507754A0A2C190DAE962FA723CB207E7D450FE5F212BF4
067F482853CFB6FBDD272760BF1548387424EF11ED3AF7A8F9FD5CA748DC111E
F32CBECB39EF000BF490E7C402EE6D6A43DB4D72774198C3C0A4BB45D40167A8
EBD78DBEA2B5E72CFD15C58BAF38815684C8D25DCE82A329A35B4BC4107688D4
BBBE07EA05A3A5BB42ACA7989AB2DCBDE7CCC7F6D609349564D2AFB442E4EA1B
5B337848E3565E5BA5AC088BCC04DCA14936C8B1F189B8C3D67709D081C4F9C4
FB1CA890AE567C92B0AD4F6CEE7B49D1A933F83F4BCEB371FDE8460D8FDE0348
6BB99628F5F238D44780D8191F26EF0C79576F97A0D65DCB194443C1DD5F96C9
94F3C1C8FD5750E27A38561010632DF566A13CAC3254DD99D0E0C6EEBC6C6B2B
9012F5C2D8A3D0265CA4D4D0BDBB10D65BF854F6427AA309AF9942B8157F83E0
5BC1F84409975B86111B4481BDA1E82A7799C0E8D5B7D956A7CEF96686AD53EB
EFBD0105483A263E3A99A0E63068BF2B2A694892D62754ABC3DF6D0107F094D5
1C05B3C3FA44C4018F3F7858535D547D7E5EA2A40982B36000954E7880FED4EF
D79B47D3F2B5F4880C66CFB25A57F7F52D3CF35B1DEBB45B6B5A144D5C0284F3
C0A162AA806BEFD552E707F0353A611EC324378009A41A46955F30A76C6B24DC
BC544E1A6602EF505679F85CE5B00A4A16CCF3AF00E3C7BF7E0FE37CDA9C63B5
6F36AC4310165A0A158F1FA6D38F8A0FD00617687696B5623EEF30A7E7309A45
0DE7ADDD05961494618CF43199246948863D5402710AE86A12A04969C499159D
CDA38A6E71F474F6E5EA86A402496B1A62380AA198ED8D73ADE7F627014E8C42
556F8FFFF251CB6532CEB85D3C0DAF878DB3E2B547E6DC4408CF6433A5D15F8C
7655C20AE5C333EEEF908E616AF8951B56524A5296D0C4F070236BDD71D911E5
CC965A61D732EBD1AF39B0F1AC2B533BB207824887DCF762FB485136F83E4552
96BEFB4FAC63B35B36EC0C684A4F928AFC51CA9286FB31FD44E78F6F3518CC97
594EC4BED81945CD6D2CF114231CBD735C9D40DD1590227329EA3875C535AC90
80EB8CFDA5B3E97811624850276571E8BA1DA783F942D1CDC6283007EF5B9E5F
3C64D0D75D1F7F41F77A86D692293FA5C752F2D9AA94A09B1F3160F09C6D00A9
B205CFDBB48B1DCA8F248BD7EFCC7DE1E31B391D1F46C20F1549A929760D0335
F74F73B074931F3CF1E24027A866C4480D34A10C8E3DFF040F1907F08433B793
DBC06C5EE988D1B906043C3E03D8D4FDB233338ABDE20BD743B3544FD7A3B666
A0363CD93E115E42A590A1CA9478052A1E920ED67403645D3E9A3635F63B3F7D
3D6760E95312855692818D6A6C7137FC4B2AA89DBF371F08DDF4C90A22256E8B
7AB4F5583B59B5B7D1FD4E7BE04D91F7D548B4B5E2A4E925EF9DFF929A66A21D
D093851A994637BB75ADBBE6CB12E6CCD1B765810491D76CBA8CA5E73726C7D7
94854F3A73135C352F2A12B198543F69787A6489BBC76608539C631753832C48
7B93CC7E4876542F981082FA0C9E1BFCD38A535BD3F5FF8AA8B242D9015D47FE
508D4AF5E3B65300F77A248F76CA570FCC73F7FDAF6571C22158FC6A9DC95087
0C1B21541338AA50B8FA3C4E8C552B45D692D6F8427FD6DD195E59D5B6AF8F5C
F273A1B3E40F195D846EE747660E57E5300D53D02D8C05784C3EEA9C1E1064E0
862CE754D39D892B9DC613F73DD7FA947890823FC8E8517D5A727194144093EA
5588A983168C77CEAA5334C151CC5FA30843E5D82CD5D4DF5C5C7A6D7D48AD08
E6DFDF1B0423853843ED14AED8937C1F28F812B50FCFC3C477D72CEAD7EEF8BE
D89201E90689A9F5251293A6D99D4284CD8168DFDE53DE90FC2B1A3F1CD96B8B
9BD421C30E37B8284E016109757A47AB4B964428C9545F47BF7AB267C12F1B54
2917ACF77AFBE2090E83C6B806BBCE251C5F2B693AAD1A791623B84A41A7ADE2
9CE6A41E1A9A95384DF113892642356EFD0376919EA92E4816DDA6BDD2C77353
49B3D68487AFB73F222BE494E6EED4B481626A977CEB6CF6901BE42779F451E1
9489B14E4F07F1F22A250609FD5AB0604E6A46DC40360870FAB769E48AFC39B6
9C1FDF786573B6B415A077D518DF2702E870FA6614484323DADA8889A32D0B18
7E73A23349B7F485F2592B813AE4F2A23E37F76870DCE12785549BB402D03B0A
7AF198A9FC0FAE117A5E8550DE6EF1A0A78E2E6F81A7351F612F73E9D39E2D86
DBC06DE31D279B8A6B104C431F5E8B4A68F15543DC05B9D6345E640B0CFA844F
7626FCBF1716BC831084A94D72DF674815F5F44C9023585DF7B28966FE8B51AB
1DA221996698F8AEFE963527AD3FFF737FF57E6944989D4BA49BEE494B62ABF3
09B154F250B34A79916D3CD633F4429D9EFE7A8D2E48F83AAB0E7CFB310E62AE
A6092047E703749422CBDEA3FD183A71BAA31FC3D8BFB2FABAF8A9DB196BEF54
4781A6560759126C4D5B0275FD08279040FA40278438BEEABBA84EFF6C306CA8
E2E728D4939724DA9212E747F8E535C7E4FA968ED8DA31BAEEBE732284DE46DB
B3C42918B93BA35FB54EB45E23466A024695F5195C5E6CA54066424BD6572B2F
1147058E7D019CC666A5E923C88DD0BC9F65F03931A98A864418A5EC139A222F
82D11BFE02A1B4647BDE8145759B0171775FF993743F066EE8BB0B04B96D4E91
11D963BA1343DABF5716F077823B2C96F35562C16BBCFD8DBF99C85AAF3A2346
EA2DB83AE4C64B475AAB18B94518AB6B435EDF608301FF43556C176C79EDF936
EACD432AA7FDAC65F053E7F25A68545A7003594E111725E488920895936600AA
0BA1A5F41E5DAA14013CB97C772F3A9788D06EDDA645BD8D1984A05D491C12BF
CC2E672CCE2D39847B8A12C73BA930F0C03724FADC5CC240442DE16DC26ABD31
42FA20B5B39B92F1519C8E55E424C5C70C1BB4827E0093B46806B408045592E8
F478C5A8D10840E05A5FE646FE969F1C54520BFCCDF9E8825097CB596B7425C4
0000E8F0B28A5FD44F8985EFFA5C66816695C4E897A127CE636E101CF1792A17
DEEF47736EF8B4C9C265283B9D81E70C8D2950674603AE7298FCE653C08C6DB9
5ADDE6B96BAA8CB73EFC5DAE85A42E36E69FA229DF4CF95816A976717AC67B3D
7ADDB3D69565CC5B9E7C10760F74B08D84B285D169400674CF081B1FC938FD09
B22CB1F855DFAAFA40FA282C9B229CECCFE0B711004053080A47F5667353C2DE
DACEB0ED80AC9BE60302FB393FC437C90DEA7586813598BD53D31ADE1F7766D5
FF5CED1AD177EEDA17D6A75C50431CA8677CD42242F86DE6405230D664C54896
35FBBEF017A6D72BEA698103091DA53E70BD760C431B228679B582A498C367D7
9EBAE7C6FF6F844A452A9C76E7C8F5F9A4AD24D5C88100B96BE1F84E624B80E4
D46D559E886D36EA6EC30EAAAA427707CC06D53DAC4D5E711DECA1947CDB6B36
E9AC29D6EF7CD7FE558880456680DBD3513823E73BB0A08244088C3BF2B2ED8E
E1EE57B49C3EA0C4FFD8920C1068CA285AADE85F28BC5EAF7BB403DAA9A40DDC
AC42290C0EB2852134418D902AE5B41540F49F69FCD9D40F028971C891B92273
8A47F08EB7DC6FA0346E08696218CE1EA3E12A42E2389542AAEC2E389E3FD019
C924A351D0A664FB82EA34D3D2C941604FD9168F0B19F4D57E9B2CEEDC3480E2
E7AC57531D896A66214C035E13F49F4B4ACBC0F175E71C6D88DF86C4A575C8CC
5BA2DB86AE402241DAF693C6FF63122272AE92C9C3B1B47CC69F6678FB088B65
E69754B883B77B53355D67822D391ACD87DE799D5F3F9CD5AC4877696D1017E6
CE9E7D52DB2A27073ACD65D1BF8116016C1ECF22706FC76BD55C621266BA4077
F2045F3AC97A70162BDD9E2C27B1C2C5F930F0DDDABF5D5199AC0F80A18377F9
DAA2834756D73310FCF76ECE878E726C67CF3BA967434295EC426F135E920A51
DE28FB8FEA0015CC4DFEFE3D2A38DCACC0127A97EA49048CF53967609C6DE8E4
B4F7F924B4A4D57177BE968439B11EFBE1EF7FB5ABF16C900BC334CD1E8A06F9
A2CC5C85BEB8DC9FF1F2805A298929BF3A6A92D415AA61FF30CF7D921287FC8D
2E5170F9A425A3970AC93574E1BE4EB8C3686F3D4F3DF2FA75F3CD3CB3ACD5C2
1A72B07635B465D14A812F0897221B716A59903845430A4CD5637916F05ECAFE
5CEFAF8D3A75E4597FFC0EA78A109973A41F6825D81154A03BB159BB0239D961
73FF967659AE561E1CE316F2BBF24BC2B7C31FF94B0B007B4A6EF4AAE7DCBC28
5F4B3A95CA95B512BDEF4106AEB8406F7B29026DE8E07018F66DADC3FC7E7ADB
58297EC9BCCDEA58B7C3A4A3BA8162CD8D210DF5C898FB1309F1D19E56265DAD
653F59C57413400A3525F52E6655638BDEEF7DFC88932A3FF4E57C6EC718EA3B
CE1E9CA01C84D3AA8475154CC7554CBA76C7EE078327FAC14F77BC07A094804D
BDB746253F02EA2086EBFCC2739E6205D21AEA12BD51D2A6616C844905B3DD38
75FEB6BBB03E3D12C974A7E3494446EA443F05D03D3590B38EE929905BE9E0A5
2A7E50AC25232DF7F0C468F984D1CD120A795F09304C1FDFF6B9BF0D8048FB34
0B8F60351E6659B486F46CDB507DE5F7895262CBEAE15984ED29931BD7594E46
FB7683DFE84307234E30ED344E861013DB9B03F768D56E3954AB594747652E33
1DBDB87FFA301298C7C98D9D24CA0599D5DDDF2EFE07A1A7995610043BED3A7C
A96BDA596FE507259643C44A0E7509C1DFE6461B8E57EE5C992BC41B52444CD7
EFECA4D37E559F75AA65A00901892691AC7A5BD2B9F1A83B61F43DB809AA54A5
C6F971087E98B0885EEE04560D2E8FED752A63A032B327C270712652E93BE6D8
C94DCA29BD6477C1299242EA0C3E3AE91C26890E52B31A99563A11795738F4A0
59EC14B369A30D7B641A301AD7322F63D963DEA5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY9
%!PS-AdobeFont-1.0: CMSY9 003.002
%%Title: CMSY9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY9 known{/CMSY9 findfont dup/UniqueID known{dup
/UniqueID get 5096650 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY9 def
/FontBBox {-29 -958 1146 777 }readonly def
/UniqueID 5096650 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY9.) readonly def
/FullName (CMSY9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 14 /openbullet put
dup 15 /bullet put
dup 18 /reflexsubset put
dup 20 /lessequal put
dup 21 /greaterequal put
dup 28 /lessmuch put
dup 33 /arrowright put
dup 50 /element put
dup 54 /negationslash put
dup 56 /universal put
dup 59 /emptyset put
dup 68 /D put
dup 75 /K put
dup 76 /L put
dup 80 /P put
dup 82 /R put
dup 84 /T put
dup 88 /X put
dup 91 /union put
dup 92 /intersection put
dup 102 /braceleft put
dup 103 /braceright put
dup 106 /bar put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A580F0834F28818EBF
F29D3B2C7C9AFD969BA6D3B7429E222AF78F6DE00CE2C8008A5966422936DC5A
DE549B458EB41026E123FE75E703E046F665B7DC78298A145548DEF8D579E008
39279A5208EAF898A357DF3FD9CE4450811F20B454D86B2947BEBB11EABFC62B
187B12458E022CDBAA6EDF4A89D79300F635D8CD973E35FA8D9B1240B3D30D72
4F30444BDF0B51ABA15A181A3196A6CDF9CD1D38D64C83E745A767446641991E
23EAE067609DC2E84B44D923CC98407812813D5AEF0EA21E560B31BD77D735BD
E35EAA564A570DD3294C703E16BB9F251D54407269C8B23DEAD063018D6EB748
4204A415AAC8384025FA922E7074FA7B8A6C31FD3761E7B2737D4D9C9992B7B6
DBD0CFDBD87D42E1A451FC5C7EFAAEC65D10D278470DDF42DFABC836CF15D042
6900E0DCDD36E7153BA186B8358E74F91A1D43D62EB0B821C0E97FE63F1586D0
98F01E8F6B6F2A435343A25CDD80D3AEB42DC8E5AE02F8837B84EE5EB508B02B
6980D2349984FE1A0D3ED12355D556BA483CA078B7921FB336EDAFC22AE05C1C
5614F5025B890009272DA8C838B81913C872A54F7E932237FB1BC2CE5D64CD04
2D320C8E2E610E9EE36EAC7C28C833F8A14048E751B61D0CEB342CBAAB34D104
311B421B8CE4D903D2E2518BA8B734E2637E2CA55426C4A87EEBCE637F8D71F1
54626C52083262A5A9A3B49142948BC1AC0B7698811AE81FC3D3B1C14E6C274E
CFD6C480514F3649D7725A0A14C82C9D537B1C5A9ADC816340B8B4E484AF55AA
905EA936A83FE2BE788D084469008F407447E0077417096333F163CE94CD3098
4B9712EE23120829AE2695EA63975492DB2615214B11C87ED0ADB776ED4BA0B1
40D09D1A617D4F57EE1A9B05C8D5F42AECB9C6AE67757DE6307B1A9C467123DA
773239976AB0EA052B23F263031ACABEC9EEC7A43ACD0DC2D7AD66664FB0D937
6A0F463A173E8B90B2596DD323D2350435D9D31B638112D70492F44769FC0C6B
40A291FE78AA598CAFC19E5AD195BE7264F0EC29305D36C7AB8F2A733797D75D
94C8F7AAFC49C13C108F514745A394F460294C6F3F44162BBFA878F773A5115F
062E934253B786DA2B9A6E8E843E06B97075BE99F21B330D6684998C5C340B72
09D69B655097354CB682D42120ABF5109E5522ABEC94D05E7211DACE8737A1A9
0BD3EC16F48798E67C7C85560D79366504BBFE5F7F5EC1B05B9F68F98149A02E
E53F321C213456D802C01871E9024F965258F71215F40EA71057C15E349F06A3
A016BF1B7E44DC4766FC92EE500EBF7C47D36B1EA34981EE6FE38FF4903466A8
C9020B91CFC731642003AAEB145EC0F13D6281B0838BB4236C220F6F467F7DCB
C79BB9CD5B6A180DD2ED7F94DA6B5CB833E62E898BE832DF601BFBC8148F9430
C8AC459F23EA2536E301C9DFD3FFBAF4D01E7853B60A69B5D012DCC0054C0BA2
1293D3B4EEDF7C5C78118138544A60FB1A500F72BA39E63EF5D97D68369850E6
9B6336DA577128DE68FEB71877360D97204B5F3C06E808BF95AA6D6013524BCC
85CBA9FD2CFEF383645E7E960E7AD471A6A3B8B8C3A0A0B8464836499309D82F
52004FCDB68997BAD9E4B5B881634FE1213283B6B19308BB67F2364F7ECD5534
467EF07CBE71989FFCBC6224417C0710EB3EF2676B9DE846E7FFB1AA6608EC9A
76C31724A19ABB2AD08CC102F5DE8E4E513F90A53F06D440A66B000CCAF6AD12
6F4B161B56FA5FAED65A24FA183B84F4B45407AA69624068EE0E3E47BBE973CA
C72137823F1D676131C8CD5070092CD73FC2A93E0480310E21CFB14C031206AB
411694AFE7B639ACF35C28705A115E98BC69C66F6C58E9E79902453798D76267
29B780AFB6B895B34CBEA51530E8300569EE4D500527BA294282FED81F730A46
6ED19AA5AD45852739882216EE937FC45D75116BBDBA6FF4B4423B398E383CCD
A7D705B8BA85076133E823300C3EFC9EB9399575F5F6BBF868265304B299AD77
B6B4EEA04C83E163E8CE2BFACA65F9DAAE3AD2B0F8DA1F986E6A12DDB2AFACD2
217E37B093F46FF3E20E587A9490401C2833F5844763FE2C528E151214E8CA95
018E1D8D47C9EB5FB4F0EA2A6D064680DEFD2C5489298F83B58EA7FA8CB019E0
671028C59C3E007DD86CD247889ECFA6AD6DA2433B02180DCE6ECF9E495D0976
D063A61B007233DED5E3F351D790F26D4011582735A69F37E7CCBB0AF254B925
B378522B748BD9BF152E2187DEA12BB168C42AD8D67D18567393B35DB2AD8403
5A7093EB59FC276525B8796FE81944F7F03349BB077110E182A61754ADECECD8
A5255DBADB523F3DC251A7D97F17DC76281CC632FAEB382A972D60A15FDDA57E
2F42AA338D889B47F6A3C1FADAFA8D11D63EF8D0C8C0FCE61FBD8AD34EB8DB3B
722BD86CE5B1268F704ACE82A39466DC2D96C9849B9422567FA5E728B17FAF61
59A77E9B3289DB807DF54D076139E3DFE176C3131FA4540C1542AE5AD6200FCD
B92D5DAA77DD4D3022049B6EA2A037FE96E0CEBB1608C663F1373246FA74D70A
BAE7BD37F3AC23E003204FA8270B4514DE1FDC5401B69CBC98A67A5CAB5505F2
87C242B6ECC86E88EEF44B9C79DA5F88CFADAE8B4CF437A7CBD5E0C01A9BC479
E92EA48C808820C567E74D62ED7597FCEC53DE9A0B3EBB9A3FB50AEACAB82BF9
2AA56D029357AAE016582592972ED01C0ADE565E87607F17BCF4983E3321F606
ED664B9516D404B277C2C1B0F873D469D64A9744D9C1897125FD471E71BE060B
A3A617DC8D812E184664BD83EC74EEB5197611380F2D859E1A61A14404493D04
B5537C04541E557CB5039905F37E72B762EBD2321633E12C38C409338AD5AAD3
1A507BB2B8F5235F0614D0CEC2BE44CAD504C9B2CD3E45437A493A33B9BF8A1C
3FE66B1E673449A54E8E3C3470688E94EE4404C888583F7C96B43A592D586D25
8AC1F206EE5FBF3AFF7EDF9BA91EEC6BABD573D455E0AD6802E7E23A662D4F12
FDDA00EA054CD331DF86C099C4BE8AB4EAF5D8EC1BFEFCF50302BE61E6FF26D8
1E88C544570E8D6F7D875466C70AA91D6CCD4DF4BBA34FC67191D1692D3FB76A
66F114152956A5E38345E7495BEB1A389B7D0A59624ABA784F77C1BF7728E556
F9D97D71858D61624C22C6914A3A995BD75922A2C37EF2CA91F923A4561CD3D5
2DCEACD9C3A65A9FAFFFA4822E79D6D89D6366DA6362DB16FF061840582DA35D
E4EE8308040C2DA5F298944EED470D6E4E1FF58DFDDA96C20C85E2DF2652E12B
2EFB8F890D301E8CE777678FA786E552A62A60DFC369AF4BDC069F5457FC86F5
1FB1A38A2222EEE86FE1AC9A8227663AE33217C1F381115CCD04D2F381A27E97
36D356DC64615AD63E1952B37AD4F967317D76A6DEF039CE8446AA634086BFB7
7B0B34F595B61ACEB346F51ED10ADDB7B852B5B2BCFE416D0435A7CAA4C9D9A6
152D9AD938F39E9756AC752F1604D884992BAD768C720C45479F5AD8E53A4832
1B44D6109DE4460A662DA6081465E2BE02ACBEB52259E046767DA24E1416FF44
D5AA1D303CC4249510D703CC6CD0FD7DDB078A91089FD86ACE1721F875F019B9
82D7C5B2530567F2306F47DE90EADDCD12AA1C693B1982827DC36A74C86474B7
0A8A2E084CA403AF654E2F8488806B943E38ABF544ECD45FECDC441DD970B180
FF3FFF1A50D5E22216B240A527F95DA1E43770A3867F225DD2A8AF01A965E06E
A063997C4CDC0B16B52F9B9C8B0DBA94F88F26A7A01E596DCF8F33DA3DA5B02D
2ACF771F25A1372F521A80B93DB0337886FCAC0A2E8FAE0D7E1E0C31EB43AE3D
B4C2020F322A9857A9EADFA7782CA70DE7421B9A83DE1873EED8D096701370B7
7EC33B9C104E9CC16DF8C80ED24D1F91677E355DF037621ABBB75E09ACDBEB82
30F1AFB82FAEC4D9E2DA93303F72C1078679EDDA35ABF2AB38DFF091AEB273CC
5A7B29C0164977160CA75F62BC20474C7C1F127AE7E4DE865FBCEF852698AB80
B61340CAB6F86017FEF570104E46B6FB3320E78D387CC58DF1C4FAD8570C0126
B6F54AB5BCD47904A9255366AC9C88576456D3CF605822269CC65979EC3CC740
AE3D09257BA3AC7A364A7F5EECA3E658AA20B53423553C416D98FD8100D80A30
A1B19F029B7473070D7C60CDE51BBEEFD2B45B1C82F4FE32A5BB6BB5BC32BBB8
F600ABE893B83B806A5435AE2B40E5CEA9068C6ABBCE73C9B3533520439F28F5
E171DB1DD90B2EC04A1F36767B2B97D4EC0FBF217D4E80ADA5383BADCD7E066F
5F4B23738A14F19AC7D765119AAC9AB6CD0A8AD4EAF8955CB9F5BDB0156CACFF
236D24E8A12AEBA549FAA9D7053D10AB7094B5D9B86FC7375E245EA8D7FC64B9
859A1A37C006E0449AA8DB8B89730348C71C7E014A2EF8D871AAA856407C33C9
392720173DA60850938D0537564455C3957631AC8F8C0B3B29BF6163828796E6
0944C3000B990715188203B32BC4E3FCDF173A4A9C78753AB7D76BB9A4C2DA4E
3EC638753D6FF6356EBB07D0A9E8D3F50EA5451FB6C836B9E5EBB8F1331C8CA0
B0CD271AF316502CBE87F652B5ACCD43176AAA32C6530C69E77E3C85DA496F3C
06980ACA739DECB5D986622AD81F204579218660EA791774C2D11878DE23F858
BBC4ABC7EBA01B7FEBB32BC914FEA8E5720731FD43F8A5CC53954D13455827EE
9C7BADAE8322E77EE7413D6C86E6D378FF8044F50F529E765A1CAC29E8B1D91E
CD40F70F2D4890E0FD04502933212D5AB176DB143831958605C1667B8841E770
CB4D513DF0C3182C23CA653A7A714B2A8DE29D6B203F5A9481E0CF3FF073FC6F
476B0B205136DA43650A940035A970584DD7D06B7CDA8E960186158B75FE3917
9B1D0FFE45EE1606C875DF635B80F5A9E5B67A6ED748F52A53A710A45AC20BCF
FC96755E685A3B0712D5E09D860986C61C631A8D2A505C57D57C1D4AE78C552C
DC5C9EE15B82A4C3020331B78FDEFDE53974C391F375E8118EB7B2D23DFA3F15
389043EB6F33842C82B896073760197B13D3DAC172D77779DF517AE31BAC43BF
5BD6F75B59AAA59C7EB81B776FADB720282DC06BBC9C33AF5AC0BC59F6A0044E
3898A4B5868EF32BC4F980DD863E8EDF6DE3E753A7B3E39F8E8BCB3D3BF14EDE
3395E73BD07440FCE88FB28A96878E823C1E5519650F2054EC2CF733EB8AEB0D
510E5659A3179C3FA8E31EED621BE0EA648D76C370C3CBD8043BE206F28699D7
5871DA483AA5D3580CD55902C85DB9EF5CF5D3191738FE64DB42410F5AB8ACFC
CE07E524BECA5633B082F4793002A4A7215AD1BA31159A30D72AC60EDD0B2BAF
73C9934C85C5372B47BCD3ECEE463CADC05CE8352EC1399ABE2465AA53E5965E
79400336B1F5D1401EE2DA5807F9701D1086DE505F6AD4E64DD4F3E5E90CD64D
FDD25E6FA03B679597CFB8C5C1F03641CEB7B9B40787E70BC6B063621382E3D5
1287365426E44A2EA208C26155CDF782F404CA7B3C6D379103EF4A51CA3F1343
22B04A0B55CE5A7633175838B9E50480E9B80446CD3B541362E7A10BB3C58A42
88C0FF580B4A0296073F5B6505E4FCCA5D4BA2F7E8D59BB04EC9ED4E664BC2BB
8754777594DB26DA0985663D321CCD13FB261BE8A771470DDDA783493E452A87
D0AD01AFF8EDCB7BB159F1408FBCC52F126C46234CE6BEF241B49472102598D6
91FF2DCBA2CD0E6658A61DB3591EA02E4DF202954B655C5A3C34B14CB60CF9C9
2A6683AB282DFD79B33FF3A6AA524582F174F11A5568159083496B242ACD2770
0ACE8473D363AC11250E5DCDCD3CB2281B71FCEB8AAC1367D0714796AF3BF01E
80BD4B05A0A45E6CFA6C672850B9DF113F5EB15923ED885A0E4488D4914B62A2
FAFB6A63F8AF0CF0DA498E1BA68C4150B6E59CBA80BD17026FA09920006D2075
BC6F1010D0A10648A20D8ABF8137BFCD6A5DB3606F6B3CA51E8A4645D32E5966
6DFF7537F65DA4268A86BCA5791C21F5FA9F4C2F1F6C1AFC4D4BADFA63609C4F
5F5158608E6FFD9C5BF00646C3AAB983DDA5E37A9C2EA81796B161A06201FB6F
8EACE87008EE7A008BFBA69AAC04D73A8C0447FADA0249D8861ED405537E23E7
BE68C4349FD64A14E3A53D6C6484E704BE4AD5FA0269F56D3B752A070D9872FD
A5CEE543B413F13CC4CFABCE885BA4533EA0969FDADC14DE6846B330552CFD60
A75BC8C9DDA76102E48DB6B81975A1F3FBE182CEF410841CC6164AFA0CE51FD6
8E8E6F0971277052E21126909B5EE51508306B886E945C11DFFE1C91BD0D79E4
554CC7D6A774C9B98610A1E49C3326D62F157CA9D89B56699F32DBB9D49C716D
CBDEC052133F8E18E8F3D7A59008398AF3E4E1192CFFE4D0B7D2ECC8DE2ABC1D
4DF7F2EA5EC0DD756CB2FF9F95FF10E506463D3037BABD221C08506FA603DE1C
DC45A5998921C4023E501DBA494C1F41C0955A761AC3D5B13A88EC4F0BF40756
BAE8645EA76027B8AF74726521DC129B9AED4BAE67A511EA56EE9D0D8D30C7F6
FA8BB890375A263A0BC4E9CBBBB8F8F8613A43B10E964F8CBD6BAA2B0BAA70C4
4CFAF6EBF4882B610AE13689823D37B046FD26DA85BD96B896CBDAB6662573D0
2CB87D45A86A016146513441BF7A748F1E9C2AC7172460EA628BFB22F9797905
F6DF6749F13C7F234A2CE4829D41E0F53EF3C5F52165297AAC4B5AF4747A9F53
60370B4C0110DBB42C25308F489A856B6664371FC2126BAF4710790021255653
CACDE1B9ED6AF5C696C3D8BEA4698DD9045B3004A5C4C03EA994A5445C9D4EB9
865266850047E28F2D82A08617E9283FE637CFAE4F7F261CC2D616A8C746EF23
7360553A6B434201944C04B1522533C61F615A20BA3678AF8D4BAD1FB548D82C
72D41699FB96EF40ABBABDEE633F05B4445BFC4E6E661DCBC8EC473BD2BBAF7F
75F7FC86CC7B1F3A2343EDEDF6B5F7E98A0BC4443E21611F4D807FE7F597A37A
A4DAF8A8E6D04FEFB320E0E25C61E156A72A3E4A69EDA04B0E3B72B69FC19E63
AA33A682663A8F37F4FFC1533CCA2A80DAA675DD723A7E13D9DAE3BB0F5F3E07
99BAB9B9BCFB29B73FC76EFA02F4F632690651DAAEC2B3688B636F0FCB156047
F8EF7239716BE5D3DB2FD1DAEEC11DC2D65CFBEDC1C950CA737A04FCCCA509C4
7E47664E160322366F70CCC641B9B49192AB839E0AC609AB2FDD3783095293C3
11C56740FB50D23AE9FEAF66DB13F35367B562F15161AA270EE44713881B2387
7889FD10198AD4D750390811714DAE7A8DC6F5770224E93408F8CCD4F8712A9B
3C583C983D98CCA7FF9DDDEF8AFA292781B1D7089336CA631413EA0728353E8B
3650EDED7ABB6E5DB5B85014A3A9C4C76EBB664A5B3E0F3CB2ECFBB6294F5C4F
69EA3AC8C071B122B129A28E04FE989DA9670EB6246806A516517DDBC52DC001
4C027D51EF1F98506F21E63D57FEF267B913F1ED4770D892239222F3A9035C35
FFA38D1AF3ED9A8C02235D7422695D30A2F801389DADF34CDC489EEB38089B6B
026D884EE1C24FE5785C383B988FFFEB5459A1644CA44D353503AE117E87F956
393DEF6C47D4E1C5B1A33835C9B8E1B98809DFEE43C4D6DBEF1C2B1ADE4B8F13
3B5D224C25927433D5738B0FE019CB88B1F373E4AC2BDB5BD86887FCFC55DA94
E610926C5F6FE954E0D7B1D35B1E1D04A56EF39F058F7945E5E28E5D55D65251
15766372E6F0277D8600B8F007005FB62AD3C3AE43403CEB8CEDE1268161B9A0
3DDFFA68654EC7DF5F7070232519BFC2C9C4031CF24EAF36298E46CFC0018ABB
573A78C271861565CA746D4F1667F2CC880FBCDAE2DFCF164BB944C5F227B5BB
96526768BA33610DA9AFCC96BB51D59C946E05361A8B2CBC0F420209A2ED5CD0
1ACC7E1D0401A7FCD4D30B20DAAA10AA02B9A6E6EEEC07FD93D19F9C0A62F656
94328781509A5C4F020EF1D81AA3D7E7FF5CF266C34948AFDF91CEA5FD433B46
0F57BF6F0A58B150095AE69DF2B4F2D2CB257259E13F7CD347BE01D5F165A267
50778BD5D50DC855AD6700DB46C84B3CF54BAAB62AC43A3765E25B73FD1A9E54
BA48050F82C8259E762B94752F4BBCD1C6FACB59977813C238788F637235BE1A
ADABC28E2069639FA92B766ABB0059E8D079EDEBA5E4721C0B068A30815055C7
16B0974FCE7D352FBDE6EB1E0CC8F842EF5F146D57D0287D62D1A34793E173D0
32F5B807D7FB46F8517795ED6B0B70583CA833A591C067AF12E2929C741C8A25
6C944BBE27C67630FFFC449253111FAA690D4DE107CCC21DCE943E8B785DF3D7
82CC5EA81803D7396E927E4925532684A4BA480BD8BFA2EF6A803DEFBF6C8FD7
7EB3AB82A045EC6C811BDD830B2CC75BD5D56C8CEE1E25A833B742AE2CF5CD00
26EBDF5F76FF8377DBE6E4E4EEA0AE1A8EA447C60343DEBE3E904FF1F6CAB70A
0A5A1A72EA11EA272C5C8B83FF8F16ED7860E2AEC71F28FEC10FF237E38BC8E1
0C889418B427B94C60721B38442B82B0C7994F08E46D6D51A6825F239CCA29D1
F154B5013E91DDBFD5F146F1456D35FD156F2F1FE17CF2B6CFFE425CBC32982D
41DCFE5E81447E71BA2D27EACF4E9E7B6E6FB8B36B060465D765C969A14050AD
299485BFA34F074DB2220EF8F846A68AF7D343E04A9825F31A9820830F362FB9
E5BD60D0ACCE9AC8CF537E468CBC47D35D45ADFCD296F8C5FBDE147A957A4510
FE04BECF0A61868BDD0877BBE33375C75EAB42E93E488D98E6DC7067A481F7A9
A544ACD961F6CADA34285BAC5B4830CDE902643958D4D4F1CB3CD419F6C08AEA
21E18ABB51AD2561370E56C870E5E91BFFF09B13BE3335E5E4670684053E02A1
990B6F850D089FFC3C869F3BD89081CAA44649A5D235D704CEF63A045D1463AB
FF37AECD697175B807364536772EE335E5D514AC21C31BBC1D23528049A4995B
E70FDB20296A3C756ABC965BF2B5D9DB7608136DE5C61CE65B54D797E3BAA377
61219EB566B03CD512A3F0E20E8DC881821DA7F3BF0318ED9C9EA97B0178CF74
DFC862B0324D20F5A1AB563DB7BF95144CA1DB7CCDDBDF3A72C87096FF5B6FAA
F3893A987DA9D0A45E313CA484E429D2F6DB7950AB6E29148C8A20F83663DADA
0832558FE387FF9A1B33BB10B736CE07502047554E8E84166FA8501BD058A92B
AC3B1B4B65E51012DD9C9AECBC311BDBFD98EF86F0C13F4410AE110B92C17740
56615816C0E767D066E204F510F1A4BE087D5387C0C1FDAFDC46E7CDFB520C94
D57905F74F4C14DB909847806650AA8ADF958001C718E5FE324872E0DE007B83
F45477F3F95EBEC2CC269985CA3D06FC49F72368147EA0D68EFD7E4D92FFB5D6
95787D68DDD79824893CFE9864B4E755FDB997CA68F9FE6CA050CEACDEB6857C
A4347F711D22A47AC9478450B1269AF41E89415502EFC112CF76BD9620D53A0A
DA22C68636838856DC83FEF2C31DB11B1D970B9E34D1FAFB1069B39BFE127A94
86BEBD9F8459B0C00CD555EFB43F867684588AA0D6C0E48F1D06588B6147E987
DC2871465497F606AD7CAD9A6D2BE130DC5B50CCBB439BD4449FD0AABBB5C437
FAAE7402274C26E51E040B2B7C0A39126D018D99B1102B1F38F0F0E918A98AE6
96F0735EC8F3C96A89433EA840CE2B842729CC2CE2BB7812B11ED24403274A64
84DC1222B10E496C428EE0811D5EFB554EFAA4B8975AD3500F7D6E49783E9F23
95A302FCAA01A7C5EFA71F49604D03192BF4714C4C37777146E43BB68F14D4BC
92016C3035068100713E41498301967B23F9CB7CB54E408F974AF4AD8B47F19B
428FF1CC0100F0E48FB3F45EEA88C02C8C1B42558905B543C6FBC50DC98DC67A
15D50FF49D89496C9EBA2042DE82D4E5900D3F117E9ED9A1E6E5A5F1A429A5C6
1014265EFD9206DD21D8B89425FEA56EEA091E1A6DE0F9F955A3F77080C5CA23
19D08E57B13D3947AE5C6B44F17FACF69002A978BD1D04D9FCA800BF5B51E08B
94A37F18C0C19F4AE712F98AC03BECC76649F9E331278016171D9DECF0AB1F2B
5C97A5E45633CA19382B321F4800012774484DA4F04E06BB4A1B2295F99B195A
4CBC2BD700F92E85CD922327633ED4323663A59B8BAD5CC7EAC86FA5C63B51F4
8A4FA42042D245B1F299F0FE052CB472158C800C9B6A9B34BE36897FEC1DADD0
C20D71850D59C05B60173D5F0E3C4B4EA61B7DAA1FFE1DA4C02EF6EC790B4A95
00B960B44E24AADF0AAE46513D86C272D2DA835846B83D195CF7619B826DB7E0
0CE37C59F1D2C6E5E63D226C2EBF1E85394B145D6CC213F6124D253E0AC39C81
2874761180DFD417A1E9A3E44C6FE38BDA18B0D8A654BCD2CB51229FF13BB84B
0FA7B755DD36C4A307E584B13FEA9EBFAA1E57B2FFF706E2A0E9D17D6121A3D0
66117E330B036835A9D283115197435583B0F4B34D618D2ADAA87638B875C41D
23CE6C54E46CEE7F6B8F327C36735B4440C28560B2B816009FD1951D20C0AA4C
6D79F32537754F3D539830F2559C7223683A75205CFA4A9B1706F0E67C20B160
A1023F692249430BFC962C507638946B22E9E70366DD116A573EC7E4476BC21C
076D8D76591B847976C667E8565C0B0235DD06367907EE8A72BE3D9EF825178C
F049D2C07AF50CC88FF7169CBFCF1709E033A1C761F1664B44C5069D0718110D
246833C0091F4198EB218E6770C19E8B3EF6AACC96E1867E8247B0A90CB494F1
CBB60D1CFF6EDD9B0D0EC6BEE714BB28614CC1E2E85A3038002ABA753AAFD236
FDD824E7C7BBA585689B67BBB4B5B5E938BD543CF05CC802291F2DB423667D27
DE890770074DAC4978D6516B7B3CE5DEA399D9C2D5ED93B216DD3A59CBB46969
497BF08CE13FB29A5535192027FF0C66CC4B489C4B9DB39DECAB465958B46A68
6B7B37BC1E02B17AEF2794E5CA03B0CDBDDF38AED7B975D6DFF7086CAA612CC0
6A2588BCC242E589C031FE155D1ED99F3FA67E967F37CD63D8E29A1FFF14430B
BD3A1954092F22434A956ED3B62A4327079EC4935A278477EA467C32BC36B187
2866BE814FF6D84D2E083968FC2B240702C89846CCB5BE803AAE1E6FA294381B
273B6E422AA0134D7EC6EE9448566D480FCB98B3135BF4D928F66027A666DEC5
171DFB2DF62CDBF30AE48E4266BA5843CFDAD7745D722382E7341E95BB7E6BC3
17C3D7AEF9B8B43A1CB5DBB3B8FCC46829406AABAD096F53036CB87F4658441D
D8A4CB1ACCB974D98A12A8A125353D52F2EEA8AA70A9E2B8D8FA71FD7786B74C
B415489335753044D5F3030D95C6EE3802C859AE1388B73D4D0D495BFC6C88D2
8BDC6EF5FF837814CA93E6A2E33A1605EBFEA722C9FAEA7CE0BEBD927FD116DB
BF0AC415B84A25EAFC023503D0DBFF401F008BE5AF269E6FD2A224B65157EE5E
ED6158387B03BD26721F369284230EAE7D5E0142D5A4A38A97F0BE2204A87468
DC15606F76310C7B7847E0E037EDA0960A7D65F26CB8B48F33253736619F664C
0C1C4ECA5C1D7440722C9E46F7CB75373EFCEDA023576983F6D5E308F466CFD7
B792E552A3A7E58FF0CFB8073A395A1BE8D11D2FAD4DF6E4BA75FA45839FD95B
7FCB35F77FAA88FBCEE52F1809907A8154649D42D8BDFB72B9B84AF21AD8A1CD
C634E443C08DC05F01D84800E30316700CB8EDB11CD309D1F0EE67923BC62F71
D6132D80EB6316490C2C2C5AA8F14C0B13537A1FF73F6FE7933729AFB092FDB0
F38D84685EBA78F62C677FCB6E4FF523C89A8D7F7044100F60A27EDE75338549
9DBBDCF3E9C13596C8BEB3F08F071AA63A35A57A682C031D462E1819CD962040
866E9A490350519FBE31629C912818A045F1211C8BE4814B73E5379AF13EA70B
B90EFD42555D467D590D6EDDBC6CF1EF274731C270024CA1BA09158212665682
BE8630E7EEDFB3CC2450890A7418C0AEF431DD485F9689E66505CB654B937BF7
DE1D315C6033720800524595C5BE66F36EF0817B944F2CB04F89BD433FAA2B8C
0C0D2345505517F5D494D268ADBBBDAC4D1BF4898C6E7C7CF2E2432A651F3333
FCBF8F9768DFA183D36F7D9C60CDF41BC1B2560E2289A8704372CE7673D7F6A1
D3BFF06D26C63DFCBD65076FCBB079E2B42F1B7FF9AE0C4FC678952D47F3BC5D
431A4D608B514426E2D54BB1906CE6B973CF205716B572D2E96610588C653849
18AA2E8CDB72A83AF538EE645C13E10AC3D53CC6CB7F5034AB6FFF06EB5F9EF3
A592747B798675BF2D626D2100D578F9116F0DD1D94518B010EA952ECDF46840
FC5CF2E242DE936ACBC3144AB0DAA06145291DC26E7705CC66BBB568ED93137F
C3548CD1CE36C9A1FC8F9E79D88EB8A040B313BA4194C0FE537815AB15BCF7CE
29323B977B29D7F2156DBCF2941C5B876FA48C53E22F431D6BE8303CE3D68B99
80C80385C9B720BF9BA87C3BE3B12FD84EE67BC86E27C267E694B9EBA33E1CB5
B8BF35A9534E6677D038FC4A33E671A14D557AB3BFDA413DE2B37D43C851B938
C5257399060567E4BCCA2E94FA9002F139E20FA15F00B50068F8F9E16ACB0FF9
3EDD16055DAAABC217FAC5CC88BF512DD361C1D2677F77D443C5DA0E94F89A52
20CA14E42EBF9811729ABB237C50C25ECF0112A48FA40B46241CAC3E27F76999
959D20CAF7AFFD01309841CAA6444EBB75F8E8BF1032F65494018CB3C7F70746
91A858BEAC3EA9CD82D09AD5A10548E1FCF21218615209B56E59DEEF43424BE6
2B731EFC7B6ADCC883408629D2EA614989F37E8AA02513DAF68021008C34677F
5EFA13AC4315BCCEE26D15D91F780E03948708387DD30C7B3ADCAB60ADA95D42
09446AC1EBE61FA3A4A8D5F8EDB05023EDB46FA5BF46FE2BA82E662234A60451
4A0C29E0DC83DFE2D16F67425DBCCE77D0B4566ED9A9E818A5668507FB28524B
4953B14A945A8197F46CB9CCECB40AF65EC567E3356D1F3E134FC17B51420882
03548BD5DABA056E069970E31240DF57BAD872F8A91466AD80574E9F6960D8E3
7DFC7F4FE790BDF65E992D2A742EA99A1288B04CD37E83C98F2F5B0F7B90BDF2
A9D564FD5814876CD03478F7869D44FDE003A6B9AE1AE673AE249644D955D88D
51F8AB09233E515B4546B447413C68DB6F76998CD1E37665BEC7EF29A7D7B40F
7362BEBAA55D7D174C76B8C05D9DE67BD31165C63A52E423B784169EACC5AAEA
C34467F4CC21564B07D19FC73D6C86DFE353A208FA15B7C73108E18F222D2413
32A3F66BD8D16D1E37E1B32EDB81DA84997D1E387FD81B8DAD9765EAD2E01E9D
CEEFCBAB79CB70401732740B212F2BC3248172834C3073457F326065032BB1F8
0D3CF169AE908C0386FC64BD8C6BC1E0C032C51CB5FC08987C2CBC7AB01F6502
A60266DB6765AEA474FA4953A6A387A4E30E125E0EE7E0D6199C2B223ECB8EB4
D048FF86D25F2290FFBBDA864D956E4A5B55D7AC76B733E822E3957930489912
84FA0948275787CCC4332A68A710F0D9710F7B7C32C4742BD1417573E1E58CC9
33A9C4D35A54256C2AAA45720F65478E907F8737D7C6E3F7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusRomNo9L-Regu
%!PS-AdobeFont-1.0: NimbusRomNo9L-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E152A40E590419249F2E4
C36159F8E54B532468E36965A38646781AB0B7F6A3E851FD10CAA49ADFC1E546
2FD2EC6150DC6E19523050F6148348A561AD8D2E2721EFF8A570CB33460A745B
926C889304C09753C2D78FB0CA95DC6DE5B8C524752C83601E7E9F73DF660674
F05AD83A166DA9BE89F22FEABD4B2665960F6FB5BC32928E1230C212E5D69CEE
0B3311A1738A11747AE263106916D8E95F25B25B4BC6AFB03B79ABB95DDA518B
41A49458111D2A1433C043627EF9460D324FFE22935F4F6DA88B8B91AE95B34E
08408A34EC8EAC3F65B6AE3E3E2524867EE9D29068F81E4372F4470BEEB4D6BE
EE4DF956BECC0CB77F8490117B22B2FB75C938ED0A5E208D88BC38B2AB8B9CFB
F1D53084B6F43DF336481ECA0AA2D5317BC83FC0E1D4DB01D0B7707EEF217E94
A7F985102DED27D8E8B009F7EF6DB91B91E78BFAE7BD688E10B3DC9AC77CDEE8
47AA4DC8EC78241E593D26EC7A60696151A2AE5325D736E99E01BDCBDE69579F
92EEEC224B6757EEDC64A75455BB665DF42A0E4CE7B99BF3E7D66F8FFC8C13F9
D7A1FF7A9D5FF7AC43396779F11C9B008C33A2043D48B61B88B03104B1425F09
675B559CA4302C001EE80D2B739CC0FD1023BF4F1FF9C01E892E59CCA7C26011
B8E0B6D29CC29FC72792FDA5E7D5D88EF98F9DBA960C96534C399C54865EAB86
0FA2E0D6C7C44B553EAC1574D55E7970744D4792FFFBDCE6FB4365BDBC2965BB
2E9EDAD9E0EBF0B620DB415AD98297F5AE83D9C710436657E74D26E83957C745
89834337035A7501803947F6880B70E56A3A404C62D57B849D28804CBE0F5884
435A0E12DCC9BA414ABB732BFBAE237001F557DEA5E972BA0838A3C7C9EB75AA
4A050DA0A529BDFFBF9011C360564FD17A02C18860AF6B86EFD4E2C125686C9A
5E114E95C71FC89A5DE9C589BFE5AC0480CFF716345265D2435EDAE67CFC4801
5BC08E7A48D683ACDB91E05F469C0C8919D73A5D07A1CCB173E30E76680ACB09
02A40A3E11916198BD69F1A26E88330F50692D0D5917E99E7A01B327413E24AA
E98EA484E45897E6AE4D6997B6E8BBF61C9406E916D56985CB2BD297E8ACFC6E
CF2D2281AD84696B7C6CB584BD85CC20BA14ADD3BC3E25DB91124C0ACF22E902
3CFBF04CC40DE331991E9075D22AB5EE0E849B340050E6C417C664A782D05549
DB2EF572F193B1C12B4635C2B358747046DE5858EC32B3B2E79D42750657977F
ACDD2EE5A7C9320D907438DBA63AA05ED410FC7000F53549091BE71BE45DA4AB
A315F95B724A60F17C70833E889CFE7EA206A7ABC4393CB6EF47BE3700BA5638
6831391809EF8384AEA8C22735E8062A9F9101ADD125A321FB65399CBCD9C9E6
0F46FBF271B2B1EC80832CC054BAB5CA80D4561DA0A380D56D5CB3D90AE89A19
48CD824EB1E7AC6127A6DBA3E8EA40F00ADD89749D77EC0EEBE26FD6EA5D8CCE
F7239681B3D94898236AE92FF3912E0AFE84B6C7E08134C158B640B4AECAB5F2
A90028E67D33DF31B461A2846F83D90979BB22618E2A17C5D159FB59D5177E12
EDF1320F596E7A4C379329ADB367F92BF2869A9A97398E0C20F5F017CA9DB7BA
B3BAB72B87A7B6BF4FEBD03132F9075C271F2054078396DF8403DC91461325F6
12CF1421F3099CCD799C2C099492C4F071336D985C0C360B2F5A5877FD00B6F9
2E5911DDDFB31D17A60124EE8DA6CBDA94196D7ED42804610E4F730DAF2F2D5A
B767C320C62543E26534314FACAE006BA2064623902C8AC479EEEBB609E8C3E4
1516CE412CB410BD026231E22A9CD0F664D769E4E45CBB75B7341F06D8E37285
BEAA9AB71AABE3CBFE5A348681AA246047CA29CA6B442FEADE254C7582D32D3C
71B5E645C82E92F057EB5F859BEE23DAA95C575EDAAF9896D6C10980A09DB34E
084C8A754E31B618C6991BAA856CB86877044E10C2F189B284E3195A2DB6B910
2574E2461D2FAE65B7321C0093A2A34996C0B77123503E9EDC623DD02C44FB76
3C550840BDF969582D226510EBF89944E59684EB2E2C463E69702266FBCF8D1D
4C0BE400495E227B9CB21C8086F328782CA7294DCF3ECDC1A62714143A4C1B98
E5DE1DD554FBA60571188A58F0354A6B9EF580689B78A0C8515CA05A35832616
7E0A90F68F3C306AB60AAB20872FB167673F41E8E87FF0111F579CBD0DA68B56
3E35D2EBF9F28B104082E36187373EFC7A33F62D3FE4A390B63DF7AFE49961F4
61F60FC22BA5E56E162DCA06BB92B6784884E693A6FBD71CA8EC3A02D7040920
276A065374FFD037E05D5CA5A876F164C0D3EE7AA28F7FBA63B665CA594A4AED
F97353E84178CC13DD87BE8CA181B6DC65C72C512A8651F4BF672493739E6ECB
E9850679C209DBFD96E72458EC8813C0E60E562EC0FE00D9FA073B4409F76D51
A3CF5FD031669F2C1B4D84943CC2883C985AF53D6413E9C429FF6A4451E6CEFC
0011A1768768D62E369DB231C5452EF0633D73C071CE25010CBABAE66FC5EF30
2D3DD8E7E9C34E86B1E5EAAEAF4878EF4F34ED4190C6CF455E70942C9F1841AD
2789D310A7D0078A2C7F72F447B79B56CEF076F862747EF4C65E28D88040FECE
5AD4930800B080388EB9917A08F07A79E8943A542D2FAB07A3CDE9ADBE676554
E490A12A31E96265A27153225C016DEFAC153207B79B87015A90D7ADCAD3DD0F
D12DDBC962AD84C41928C2AB56AC6B8982016EACAE2DE72BB995E19933CBAD88
0CFF39D1558AFA51A6FD2B37A5A2A141AE8FC1C6DC11538DD052B2D4C1F8E158
528E4D43485B8EC351812AE0F9BEB91AA774B3174D266F4912C7F4C74C9148A4
56405A6BDEDF5A05CA7FEEEF9AB34EE9962A91108EC93B1EB47FB8D258B4AD90
E783177665F923C14E20486DD4E6A6371094C269702109B3AFBB3B069AFFBD08
D3E39B474FF720FFAE83C9E5F2AE35C299EC97CEC47312358EE206CDB0264E6F
E50D327F1EBBA3392B6B3D1C56D8301AF7209ADD55FEBE2CF59F4B25A81BFE49
589779ABC6471A36BFA728B0E6F223CEA5C7CF611EE32B2425551E7F03D504F2
7BF98F90DBC75FB32BA54AA1B3BE277E804C6BA17F299172AC3A4A3FC7DD2BB0
FC92F90C932DAE6267B6769E220FE3D432DB422E10FEA808F4A6A5B49B42DEAD
15A6EADF5564363AEE238D66A94B5DCC9E1D79921F64D3F02D8E0939A0575338
8097A7D6F5DA7AFF9D13B5284D5A41DB446CF77E1B7ADE41A21E532C662F11D4
D8413E0010F4D0B09C50CCAC0C564DE2483270D3C6373A9D5A1C68E826D72AE8
8756684F7136BCA499CA96BCE84A69C8C9F386D2A3CF3054345EE5B0C3B87747
DE12E66488B1D88BC91FFF704C2B1CE3B846C6E1CAEF0B91C99F9EA3E2D05563
C0F7F71D77DE7B4D89F5A4A17DD3E12BF8023AE63E5758FF302C10135A4A0EA2
F185ACD311E1BA537E64BEB7A59BF9C7B2D91090989CAEA19974C7ADF3591D22
5FB7B5F8ED8660E767A3BC27B94F0C08F74447EF2E73F72AB27C838A1EE98403
3C16A3CFEB9E338EF0D7B0FA721D7D11990750232B646E39A66E89087CCEF846
74972C820FACA78A9D173CB0DA52276EE252344EE302CFB40784639C35BD97A3
35C7336E49A1AD47F88E64B14102548AA33E45BC2757A125DBB3A2F26001F79B
D11779E4F1B71C7CD860252ACFC5659C3F26D849FE1A648EC838D41D58EEEF3B
0455ADFBF4978B5A3FB15D26AEC3CBA4C93BC979AD0C9185231B21B6CCA5A472
E5AE21DDE0EE377C8B1F40A8020E0C31623F54C192264BB885F1074598CDC2B2
C1EB058B45BE336D69DB86CC255A7A513C8705E5CABDCB58777D3EB06764FF13
B34B86F06426701E16A819EEFAEAC7E06C9CD499F43D24E8A1AFE40E6933244B
839FA71A9FCF98F4F9501DCF69FCDE2B5104AB0EF3B88CD94B16BD7E1714C6C8
1DC887F5D06809E85F1B4DE6FC0B0215E25017434D65499F029D2AA21FAC0A8D
D65809D672AE8111EA56F627EC8A046F067EAE15CDD011119EA28A3A8FD3DB4A
A171CE55BDF2DDEC151893F3AAAA5335FE86246F4E02372C09780A2703376556
6FA25CA83E4821E28BDA2DC69154AE8F923AFBB3DF0EDCEE55C349CA3FC67782
4837D7B6871A1A1AE6BA6B44F8E7F5204636FD3B42A7D0CE3A43E800448438A3
2854611C8F28D918F58498E0716885F3BE4700253BC14B6D888BE6D6EBADE61E
E02936485BFC4D91535B51E3E8A909519CC6A77FE63F815D1719C407870422A7
88376D38EE77897BE33AFECD711EAC3B5B2820F473A00A19C7B9364D228E2BDB
2362ECE7C67E43BD132D1D5070D16F74851DFB70C11E7D2B38CF15043DF153B0
95883AFC159C3E3BCC2DD7F3624CD94DACF40D6790E98271289F082BF762ED2E
A0F00B8870DABAC3F6BB897AEEC6587535045C0ADD7604E96304DE3BFEB798E0
EEC9AAF6E17FCC7E1E789A98CAA198EEBE1EBE7966A6E849A6D4B8224C70EE20
DDAF7FD77CB534E74F590AC18F55EAF42B6D05A62BFE5DBD73A7339DEE670AD4
F65F13F2A6FF13CFAB286B149298ACF4B2AAE41F05B4B3161D3FA8402EA51C9A
B784C23C7DF74D34E0605936FD59B8FDE421BA5F0409713AABEDFB9151163740
B30857EC5CD2FB4E082F61B6460E26878C0F200B28E43F47C36E5544A1FC515E
BAB1515A4CCE0A21281D5F6222D69985FE10FF3490B7ABDC12CD6DD4E5E6BCA8
64F83907A3D6948032B16B0FC43E933086CE90C76991E9440832523D026CF41B
95CF028C078CBB337CD2DFFF7AF3061783031EF22638E2D05705FA22B75784C2
22D8232F332E7DAF2C1434CDA3DEBDD58B80EB0E55709059B14878F5ABD07785
F78D79AA45F961871BFF2446D6AD6C2364C82E28AF55A4B864B822E4BAA46A20
06D05159B171C9034E2902E2075E4568DCC39FEA98A63EE771FA86C424AFA310
36CF63963449B77B313FDCBFCD14EDF201D830BE920416DB03580FEDC3E27F10
E4A8501874BCEA002D2EF2893FAD08BF5BC9E0C486A0A43757F6AE29273EE850
8443345F1669CC593C7BC84889CD1A588B6532B8F266DAEC03D1B5EB155884C3
0E61E179918A6F4BFDAC3E01A37DA1E458F5BDECB74E06D6C8D1121830718F50
F0A5FEA87F838389B6EAA560D866FE829E65B28B454D4167112E4187BBD549CA
783A601DF1BB925D7995378B5A3F48C646536E36941A16775C18C72C87AB3572
6B2BAE3B660D3C1C3FD8083FE4AB9F43FFC960BAAD11B7060B802ED3599951F9
1CC47490B961ED2A1BEE0F3F5F649DD6E635381E9AB7F51135AFF881A649B02A
30FBB0FC0EE1ECB3335952F9076C2AFBE1F11712E2B13C8F71F05B694C7382FF
DE8C5BB3FF454B2C31CB7BA76413412F7046CE9105D53E26ADABB48FAEB2D268
2FA119D72F24F7BC44E71C1C08E252E05E49679E6C7AC81F42E9372DE5AF63C0
71BE326992058FC36C23CC0E87EC9BDD6E05AB2263D02BD3DAEA01CB260400EA
4C9250BDFFEA47AA88871A5DB1B309254E644882F9B783B885AE1050E5D336B6
1E7F371E0B79A5BD5B4C39DA12D4AA8E6BC3927D9FE66B9534B2977D39D0F733
043FFB8755B0C5FEF82EE241981B2BFC9710AB5D721483791B16AEDF904C7D35
31E5A7C532AFB667C699DEEAD1CABC24B526ECDC0ADBC6883D041246999CC806
5ADB2F601B0049FFE860BBE381F1337D7ADDDBC7FD985C1C6F97DE415782E85D
775E44AA566DD528C7B25FF4BE5874B78292FF9BD80DEE36E3FECAA576D1BF80
F5FD8E7B961873B5C24B1B36E33A2C5297448577D98307B9068C04BB7886A08D
4DAF42EB1D530572B98D841A968C8DE9FABA50C10A66ECE811CA665B715C5CCD
0EF7833BA8FE300D91E4B83444B94A006DCA88355CD574B75AFEA18EA3B3E13C
FF1A9C5115B023150E534110C35937964B5B1CF12450B4D6A808DF5A131CB94E
7D2E8D7D0980FCA1B8EEE277155C3FCF646CB7619ABD08C035ED90AC1DC521B1
A61FE7C9182A333C7D28348325980BFF5150A0CC3FCD39C03188FDB731BA5DFC
494652D84D1F68FA1ECFE0987B05F6BF8D3F29A8376CEB267F7E8F2DC5C97E84
D64474DE8F2ABA13D74859EA0012AA558846EE351629326F29090704D06AD419
9C2756226144423FC23E671A46753C16FF891984DB3C510AAEE01123CF687FBF
0B408B31EAFD095336492ACAD09AF227918DD2DD2EA5B9891F3828B1B642B95D
88C7CF6DCC924A2BCD7FC61989DC798351E5887C989E252F50035966E4ABB1B3
AD90EC607C7859E34BD92099E1AE77B2AEAD762285834C049877A4729FC7697E
EFE344F7665D5A2EC5D74FA1FBFB1C177AED502F9F054D68CB91DE60C705B5D3
394AFC2E2FC73EC0D8693A9561AD2C3F9E22AE212E7A8703A70517C9FEA4120B
0F246AFD8C531A2C1E7C455D56202340AC6F056A4EBFDF8A78969FF3C019A9A9
065CE2D6ED0B0595025E8457E76B185F51F1E6ABA6DB507E3FE84626392881BD
B3FA679BC7C18315C94FD71A8D840E925E55D614EB3CE7829946686AD4B2A90C
79C0A882F4C7E0502A0B8604C3901CCE462BC84468AFDC5ABD9517246FB11BBA
4B1EA9628D97C48D7BE16640EBE2BA050C7F811E9A566332913B24D064CFEB7A
264486AFEB519CC9448D90ACA032DDDFC1FCF3D4B64BE2E8831C28BE115D37D6
B9ACD4EDF2AE65131112BBA8A10A743D418E1D967FA5973B378B6A21389CCFDC
5FC3256B218D42E34EEAB9FC64006B5CB38C7A63446A08C0899A47E6E69EDB17
BC82D73A47AB686252261FA7F2D2151A145089E51E73E3D5FE30359E7B394A3C
ABBB5C11D1BD742F522F0C974BF795D871B9EB897085D901953BE7867171FF6C
0F17AB7D217A572B558CBC4E42DBF8B6AD859AC26CD3281A353EDD5C65E5A869
812DE6216A67B1F3DBB27205DFE8DB5130B143531A6211C413EF459365574CCC
CD23AFFF1191328D6F31B0724D7C794C2C508CDC1427E834713E5B769F93E241
59295BFC51C77536946106FA1EA6AD815CB61741F6CB16501BB396425D950FBA
2ED4947A44B3D7B1DC1C6A7FE6C34C48F7A781415187681C95BCFF7D7AE01EB6
0395263A0F759F680A19FA5401F8F0748C75C1972CB287C714BFB1BC100B0551
583AB353962E07E0A90365D9AD96F95CCAB5B3DE616809BB7CEBA63AC71B72D7
D9325FFD4F1C0A36D2108F362824C843398B56666B83BB2057F463FD55427D26
5834EB396D83A80D893BF3F5A696EE868AE581A5E409045548E2659729FDC47D
D070ABC8F9F74EC968993EC4516AAC676750DCEED06551AFAFA2C597E8854A48
F76F412735B390266CBA769CF4A5112DD9F1B392EDAA637B4E4E73030E15ACB4
B2F537DB64115A8A24B436B6D57670833F82D8085F94711FB034E81220EDD7B4
2F13DD134CB3466F5DD1C515F28E5FEBD9103131864D261FD830A503B1409F64
587223CBAB2425C461BDFAE1AD42E8AB26F4FB688CC3ACC6E5F28C88AA8FA5A3
8A2A7BED7CE91AB3830B682067181E6D199F1D2F43F92DC94F908F67F7AD292E
4437C8ACF9CD74B1477B93807D36B8C8B29B24B3EDEBB7657167FE15E393C3F3
334854C52414B4A9A49D84B0EA77761540BB421439F600F61C14247E0C1EE3B7
AD2CF5D7821941B183EE68CC8103526C7DFF028D8BF8A909344E65F5271B585D
FEE85C0DB63D8A3D8F82F699AAEE07AF4676078E622C7B91F23476A295ACC8B2
B404BEB9B5285D0766709FB16FE7363A5F3F655FE4E57750ADB98E617E948F1D
9FE2D71961D3B095DFD0730BF5E55503608A92DFACD3E50CEBA1967F2258F1A8
303DAD8BDEEE89F4CB3F7468BB0E7F7F6525C086DC7EFB997A60E059D5A19BFB
A973D6A218C80AF10042B24BBBE788FD5182DBD883E8BC5E61484084013A7074
2FD2F0515A62DB241248D4EDBC5DCF39D8E6BB078AA738FB22CAB1E57CB24C0B
EBA6ED57592ECBF980681A910CA7A85588D7E8B7F24D3185542DA6218503AE15
3EE876FB6133581595F46276B70F2FC652EFFB7F764C9073D93A1F12067C1BBC
A743C7E07981398AE9B6F49E46B11932EF1A8418E82C9B64B6C1BEA193DA0D57
CCAF23C404AE461DBBB42CC81E4ED7C14DBAB63727F9FE66D30BC427660469DE
0857E4454AA6F6C2FFD235E47595EB6986213CCE3FE132472DDC781BF8CA9558
3A8FE6E189C6289E3D5392707641742E183C086B871AC6F43B3E523AA831B68C
A4A458539868208E67F562772F86B6F63A33507560FEC3E93883CE3212081A32
A27E91FA346A157205F1AB1FF6D7D7D9F5907A28BF0C673D74937E5BBFF6AF0E
04259DDE8F4132AEBFB3BFB3C725DEFF5FCE637A77099CED9101C012C65E9CFD
590AED396BA0C97C628E501ADFE33F7635632FCA4E41F9FD01D6C4EFDB77A63D
ECF4171FEAD7E5758E561189623188B54247B8BBE28F4203F00E8F66F15D2B2A
9D775DFD51F55968F63A8507C386FCB705BBF46AAE7CE33A0443FC6BA3315D4C
717CF34DC2F50D45D391FA8209DCFC2A9550B81B124C8D80AC2794670C5224F6
68BF08EDDA7FDC54481CD1B3B8E5E961900A78097806D9C84867CCA9A60C6583
53CB10AABA78240B4B2DD4E81260B9CA5CF15AC7A4784BBC4A4AA584C9ECE4BC
4910FE5AAAF3CB138D7D06B8AE8DBECA497861D2C3FA1D3B12C4882576D22435
D7BD02BC88E404B0FF676EA9A32CAFC6714C640C9427BEA91A42A60CE5823F0F
07A4A9362E8EDD1141457D3986FF918E929AD47B1ED2CF77DCA6D07CAEDA2105
7E55A609522A90C6B26829F47188271A42DE0CD894F6C4E1DFC510F3F11106EA
92CB671E91E9A79844EF4A375D514815E8045AA2371257512495CD7BB61ED5EF
64BAB3365353AEEF2AAAA23A64D503B99809E444D6CB1D1182C58B616EFF3CC1
055B8922B90FBAE01918A2F3F5B612FE53E00DBF76F20FB7DCFE8503B150609B
91623C34286E9683B86BD5820C14DC70BC806577B1D0D8DBAF27482D37C5E844
45A596C33AB9318BC623848F3F2536EF81E4C6E81238599D72EB6EC454BFCB23
BC99F775F0AB50370CEB930BF3CF4373445CF9B7F579A6BD06CD4FDC90DB4E3D
98CB2A31732934F3A143D7314FF04E4343AFB053B0CDED7C65079EF470CEF7BF
F895CED0B90290CED8F9165A5AE349C47279D0E4240568731D664ADA178334FC
4B720582050349B2F0B0630A0A9A58E882932ED1E4292517107A32A50C899AF3
32256FCB3EA78A9EB74B4B091BB5B674B00CF08875D41594E6DDDE2D44C7385C
C38494DCD832CC908D152F98AA0C452EB77B9EB60B483802A7CFF4AEAE4A852A
3DB40FFCB5D7ED335ACCE729816CB5CAC2DD85E88082FDBDBDF78CBF72634EE2
1C5F80EF5995AADA157E95D0CEFD2AB58A58BF7E6140C140BE9BDDFD6EAD6F4C
89DFE0D414B4FA2EB8E25C29B36441C4AFF7D31521604BE019A51F0F398CC12C
5577D303F3418A96A505538C40FE5F6D36987BE3BAEC19F15730E478369E2FC8
051CBBBFAD795DBAE852CD7A582157DED66FBFE4308816EBEA2B0102B6447D38
EABAE9022575C11609D28BA3FFB93A05476DB1A4225BC64BAB45C223E8646BC2
22F5039BF604ED1CF85C4F643E3573EC221845DFE5938FB7167F3934266F5603
E88D93DA65FE8EE248728D0EE1112BCA80B5C0E6A72844ACD08BF7E7807F78B0
CF4FC3099ECAAFC00D03CBF19015DA3F03FDCA050D830CE639F87401373886FF
9B0E1C102ED5F1C98985C3DDAD5EC0C377D5E240FFBE512E605E4360358B21FC
1E12DCAA4AB0052482B8BC22F699377C0734BFF28EA3C1EAF4BD1F5B87A130F5
005909B91DDA2DC1E85E36F8CB88ABACCB2742EF7F6773DD8865845DE5781CB7
31B67A93E4553C8610D9DF31C42A62BF096B816BF1E0304A2F8C4D62B260CB91
C49ED99832843A5AFF839BCAE33C080159EB390801A8E1C2C436006F41264F0A
C879A6EC854F600E719A5053B56AD34E23DBB0363C9863D846CAF7AF85F6381A
20E2DA55DF7841344393D10DF07A4337392655DEA92CA19C0ED69AA6601A552F
EDFF386240167A0873D5ED7F103C233B88EA6B87A944994F80D00A051D07A9F8
17ADBD19F0CB351BF6FF47117E5E9AFBA770876D9EEB60089AFA1405FE2DE257
D768E49696DCBF9034D0CAF5DC69E296AEB122E13E8606DE1E39E7A87BDE750B
7E8BE51524F3653115B193857784ABF24129418CAF9FCBF9E2DA481A98E64529
9466F042F7A5179B5D974277C87CC47548CDBF7D3D9E17C61480884DE37C9C0F
E84296BAE3FDD4FD1E74329217A502F991D2A0770F75F610C8BF474DE746185C
B03B64665D123E1A58CF9CAE6A7DF9AD571A20C070D97B26B54A98634665EB2B
46DA69E66A375D6EA5C32F2B1187C6E28932A2AA69343C42E2AA2D2851AD78D5
937133075AC1C07464552DA1751DEB1533E5C1FF7C18C1E5FC314CC4B84CC352
9E1D681C37EC7134780C857789F12122A3D4A40FF10E14622C4B3C56764CBB30
6F69009F082B0CDEA793ADD905E3C05F981D27699B899D1A72D10FE1F6B722AD
06FB556EA67882AB0AA5E4AF287350B0376261CAAE246F32282A9E5008B8A980
D1A74CB4E7A7CDB74ED5E18A4CA2E1F7412471E198A333D20D4CD01885C2AF1F
A17CD5DC6C38DBE7E9723D5DB12B55DEA614613231330AE3C852F9D90DBEAD4F
FBC7C446AD7AD4B729CC8A83FE931F3FAA1BF233A9BFBA245E8BF37CFB4BED1C
16575BF519FC93753331E432ED6E7DB302E9AC30AE90D2AE24504F2E921D2557
FECA656288D3D2CC767E174F6A512DD66D9E2897EFBA44DE18F50B21CB12BE7E
D0FB9F1919F1D51B485C14694FCC28F76BDCD12D7454FCDB41A8A3B9DA2BA595
B36F064B42D3E6E178A515500641A0312969ED30435544899E9BC247688E408D
37A6DBDCA5FC26042495A2A35E310DC55C62A0513E17199BF8F3DC54D583F164
8298A224A31E114B11AD245CB4591CB4A7D7E0A5279A13BBC9515DBB6667A7B7
742F31E082F80C7C11DD39ACDFBCDBBB7C76033D3A5E5F1CF8DCCC3D76950C29
821505B06A633206D5608C6F491289B2ED8AB3BD623964F02280DD8F9D5E4911
4D6A42E2E17D824AEAB18CBF56EDC90890E886DB1A1EA34655638DBD8724FD43
3FB468A4CDC006086C28569B60D22194104274CBEFF9851064844733C00B93A2
0AFA18C018A278BAAC6E0292A6288BF5DD668BDF76A5F47448AE3556F9B2E1D5
DE3CA1DC2B0BD7BA4814770D2A1520B85DCAD9AAD5FC3302CFE8E96E88E3EA00
4267B12D0379B06C9A97F3323B31FD097E63BF2C125AC3912B7F4DA29BF8D7A3
30BEE062744960FEFB6A044D057742873677B68F2CFE135285945A8FFF2952D0
67F189A9C167AB5474C2611F8160EC05EC07CC257D17D1EEE0983550462BDA32
273DDD9B524156FFA050FA89F4A77815AA4C2085763B85C51CB2648B5BDAF9AB
2831BEA3C7923916D121430D11E87AA64153795DF2234C63A6367CAEA1CC29DB
21F2A4A82340D257110AB63FFE6305F95EAB9585D2EBDFA90A1BA07E1517B5DC
89C3C0C669AAA7FF1AEB27DA5DB5D54319657AD9D149800CD50661950620C1A4
D496A2ACA42FD5DB0C39392E35E6586AE29D40263E24FF4AA72AD911F09EEC71
6FCCD0C16C2ABB959D75C0207CDCD62F960FA5001A5955246043C8659E0D321C
B85D560686EE2747AA7D96542F152AA1E1A9058D327D4C933F30D085D5A64A14
E41B9183162ED6E3E08CC2370FE267830C2F08E04DF77CC47974591E738821B1
3ED00B964840D47585D8B395542D5E4649A76AC98861753E97CE1C0B152DEC28
942BA83E08DA031BAEA84F9EFE1E760903FE55352806CB7F174E63681C9719E4
647316A1B53E5388B0CD80583CA71D25705D10EF11F43B4B3A378FBA190800A3
5543DD7A971E21F685F095FC00FAA0D875A11DBE365B0D9D06379985E2205EE9
507E5639836DBA757E62B7BA04BE023F725217E11B40F37D4C5A90E30D8F7AAB
BC463AC019C4F52279C4BCF26B032A686FEA57543DB77C28D25DE427893298B2
3C271ED84D662BF87743E758D3364C30A79666FD919D83DF85BA4F4B14D6A770
44767539C2A2697C2B8C82E274A0A0FC2BC12374310513792F8B942525F0647D
47D0E9415E05F80DA2BE0D8A1F66D4720DDBED534845B4427973858471D88DE1
61E8D53B4540BB895DBE6B3E79DF14932BEEC3D1CCF1092CE4A0CDBF87771CA5
33E55A8A143080F70FD1BB55518818AED5DD98C3F054BB2DB0A60E2C62445949
0EBCF6D7475BDBF26D243E874D9806D590861D17D08567C0A424E7514B5C5668
7243B63D2471C2538F51A354BE5F89F798E2417E4427A85F4C1490BB477EB06E
120542B5AB8ED6B2115CFDEFDFE3D3E2FB855CADB2B20D1F95EF9CAC30822D4A
F6E9B50724C67557B49FD36F3C602D86269470B08D8961C227C63DB2AFF09B42
A36EA636A9B0CDA1509D95CA8A85A9EAA164A4716C53408CE73450462AC1FB75
3A41D8AEF0DF67893C1D06F5D55C721319B911DB91692758F1907EC08F5E8ADB
0E98A9D66F7805A0CED7C26E24B09A5F46C02877AECBBC38AF8A403D6A88CDF4
E0C8D41C64B9B1DEB72F0E9058E47C381548A348C48D19182D79249080AD244A
961CCBD9E0117A04277C8B701D81BF0951FDC6C238657A7D1B2B33AD8650940C
C040EBACD5BC7C774D53CC63B57F7C9F113E32A41A879A41C90FFD91A30625AE
7C9E1E3501B8C88DA538A026643E1D0F81D86C38ECD6F2F1B685A66A1AD07B27
D100F8122FAC36F59FDA74470FFBB1E556A0158E03373577363B63AC1F2C1FE5
7279FA18D58528239FAAD38A467B4BAA464A0940121E20F202321AE869EAC1AD
C2C15FC944F563D6D0AB0BE71C67406AD33743D1EE99FE61B61EB70F31F47216
6B9895A082D99AA1DB78F6FF1593E4F836A33BF68EEA18E6E060B9D8AC407DCB
8D72862D87AE072241CA7FCBD84FDEB6DFB276F9435C2234F3CC6854E83F577E
CB92816587D025EA6DC0D3F93B8642971372C29B5031608CE05EBA2FCB5BCE94
E2B6ADE9E3F0B4DD2A2B49E3E433C05DB2CFE55E19860FEED8228107631AFE7B
5FFEA05997C54C512865661C1D1021B2730D8E935B53D37E8F1E2F6CB2F6CFCC
1F1BBEE243D11313D6EBB9319DF5778878790722A0D712FD2FDC3A784CB8008A
B9156E6321C532DE74EC422D7CBAE78005C8BD017B134DD2036FC1A58A965B7B
B003D7FE7A44486FA0DEFAF2F9578D36A2E70C857649054FC69F8D4BF6C5E91C
51725CC9428EDC8E01E4559A9C3DD8F6F3795F08AB34397B5323A1E695CCD011
4C8B49875196489903BAEB958166DA9B714448521096B1240EDC18A069CEA146
7700403A1963C4A6EC414E0B3A1A6C53FC6B951CE935ABC955B8194B519C5A65
4B57FD48914E72FC476A3D4019D08C25E598B9A764FFE70979C4696B5B05C07D
62E428A3895B80C76251C8A93855793FE2798EE5543D775A3A54F98A822D60BE
DEEBE8D06A555B642D686CB0F0DD3CA419BC2D30998EDBAA07A27A116C80E837
DC740E86068952F0A57E9DBD8EB344D60CB4A26A7064406723ABE20CFF6C5FAE
1737D201B78E67D77FA48CB2EE8097A410A03C9135261C57D69CEED6B6797937
6BFADB43F77B33721A6B27396B359AD39D9BFE1996455987B10A305A872F9EF2
C32B53258B9B04291A3970A7CC5972C915FCBE3FBC8272FF827C1C4854CA7EA6
FA89D6C59AAEB4ACAC94D02659F83BD93DAC136D4E54C04B4540C339A8E8B413
8364F7495FF086F3642E6E7A209CA9F026949BEA6F017B33720BF6623930A2D9
64C77FB50EDDEE2C8FEB44ED1B6E0B10EEBE23B5D3EAC1B0024E13C0CCB25450
1BBF4FFB52696436B7118F7E76F7C27BA8B531C914744C4CAA43A8117C0B9DD6
DF82B5C4C610882FCB3FB67B47925900278C6C485D0A6DA4A267B12A56BC4239
3BD398095627A31944C10E108665DBADEC977F6E7846D73CF8FBEA9A1804A05B
350671BA8D9838EC6FD9269FC73193F80E6A3646BE383B662A116A53A8DEBFDF
7C552A117D2FB796965124AF855AF2CFF8EE38436E7C68C48BA1D5C5D3D6FA14
CD280E2C9F9886956AA4E16CAFD37A69E3B848F517AAE9AA5E1BE2122703CD98
D2E11AEF151F68A98B0D9D30E483480DF4CEFAD5870F29FF5C730ADCBACC2CB8
7218E964FEF527FB93791CC72A95339C7B673E722E13256DE567C3D7A6DA4247
50AF8261DD0E25E68B3ED7F80C944959B74F094EA62698848B0C6E066C8BB57F
64C803D89E764E4677099E0D66EA8F369480927308B2B729247ADBD9A6BD6652
20B600BE9FDF96A78AB04B239E4EE0BA0904B7CBB3F600AF76C0F80C8BB5E7D0
A50B3355FED7F162F341C92BA5EED916F9E60D3EBEFB879BEC4C9000BA1C1859
0A9C8CA1A488CF3A274564E06FCF7D9DDCFAC243D3A5F958A84085F8A3AA2AAA
7729380EEC1C415FE3EE0AAAB80FC2B96722A2D7B5F2DFCCEB35A8EB174221DF
E570F10247223C4F40C139AB896CCA249A2E89553F8E156041BEDA0DB9100ADA
3AFE74221DCC98CB824BE6E3FEDA248248457A91624203BC9935CE4672E1FF72
7EDA4DB5C687282A10D31D881F6C47B5249F745379D6645D0908A9F5DE65F7AE
355C2A5725781435C97535A6E4F812454833BEF05947F6414AFB850F042E6165
8CDD33BE34ED09BB1BEF9525DBECFE5A994A148B5E561FC8B7FEAB73C6F9FFA2
CA867C2CB50BCF32D8C90E4435570615F8826DD8F9666C4D9156AA78257458B4
D8C11AAB997942759F3D106BE1F02DF96A280ED2FD18B021DBB1B9E34E488F6D
4120137695A8BEDF9EC585918659FAE0E757B49F4639C7E890FF26662BBC2003
235CC9E09C943CEA0BDDA08EB6937BE5560A7C95EE34966E25AC33EA5F2DB715
E51DD5E8C60C75AF7CF1B5E11748BC458ECB29DE44637DB49E963C1BF9B8CE00
E9D4608221F1B9B0E14247EBD26B2E77E6A66024EAE84D334BA6EB4E7CA14756
9CAB615C61E1FFA0ACDE9AA2B85ADC328CC3AC493DE8C2F022EBFA14A2976D8E
3609AD4671A6A97BD8C6807C21360D0C3F7742F47CBC2C4566D2D92796D62FD8
134707E2BEFF7F1B444111BCA4EFA5442451D874ED7DD95F14008BFE21B9216E
742683623F2EE2587AD0D3D3A48714EA217B591D115579FA38673F9EACCC45B9
62A67731C76AC98678B54E6E3A103EBAA74CB9EEAEEBB91C50FD3E2EE0E43729
7DB82A1C7F8CFB1943537DFDEAB03839B3A0481192391FACD2C83A8049E53992
37AD01061BCDE92EF88DF3CD9B962A65FB0C5F68F3B5F4FCFB4ED010744C0D75
3396941A903A9AA56CC4B72BE2093426677988F8AC9F7FCDE0DAC8BAE67A0308
0B4FE69807BC5F37C37F75307C68061FE700D477D9BAD0C669DE20FF823A10E4
EB9325DA0807D0B38F8E2BFE149C3EE06D1BB6833EE4517BD765EE9BA27728AA
ECE062F1DF68BCC50EAB2B6C8E7EC2B798E2E8BBB5E3461B0FA00E3C4B798386
E997BB6A8F931D012BC2C850EA4685566D9C912ACDB47AECE3F9786E47398891
C3990237284A92B34FFB6273EF4FF4DEEBD602766DB53F7E674C45DB5DA0D08B
41F88D683413F6AD82422BA835F84DC63083CC9EB1E4EE71E76869D9DEE8754E
BA55E7D04BE1F5D223235A92C473887682D1A61E6EBBFDD1993749C61F9EE36A
63E5C5C401100FE5F36F6CD5776D5D4394FFD34D01DA804C1DFCFFA6C0836907
99E74186FB36443542B37806FF6997477DF405ED8CCF9AF5C40C54E191ACF53E
6C76BD08A1B9DA081DC8252FD4CC8F5326F1FB988F302E6F42A792BFB5004B54
A86380FB3E9C641E7B2888D9BFFFF9DD25D895707492FAE73A0B683B7CD41321
FA3CF2A7DA82088F2191103A6F5E4776EC0DF0E64A71E5E5C01A82183CA0A8B6
9E06911EF416A5AF889342A77A95025CB0C4D800AD244B1A2F4E805099DD2012
9AB225AAD6D4BF59DA6B3E21E1C68CB1DDCCE4C2EE12B9170DDB5E7CEC1939D3
FA48214BE458A09E61A081F9AE1DA2042D8D121632D5D3B409549B5B7E3B80BC
9F92DB2A18F10055EA8A8976A8E1D7EFBBF370168027AA4BE6357704EC95353B
1C8847B9DB9A44227E2A983AF5B99F1EBD47CC8A95AF23742F95BDF40A5A577C
5120FE5D0E73E8C35416A382C3EE7FF9556131A9686B7978CC68F0214AEB7980
7E16DD9736D9A6EDBB1BCAF4907AF5CEA6A56152914DECC3C214720D42DCADFD
58BB480942D45D8A51856A1971612FCCDAB61BBFBC53FCBD98028D52FC9E7D46
FE706692D991D70B5EAAC7A69AF1E1981C2FEFBC83C89B632188A9E564F2C1BD
80A09FBE81F4D69B71B00F6DACA16C875387B48D5A899314BEBFEED880C0B5E1
926ED3098DE3DDBBC75AC54F48DD5F2168830D14D37122B23822A8FC09DFD763
CEF65487EE6A28CEECD551D569560F66A38EC348BFAC48967961BD82B9931F17
4676B3094D7548BD0A4FEB5A1B3AD6914D83221B58B5B2265FC642A26833B7AF
4C40312204C07F85E50139D09F4F5778EB77D494DF31CBADEDDCAD14B0A80030
CAC6C0678D4F94ACAF028B2B5D061258DEA1FAF277F6F61F7FC5C0AADC75C645
544B159ADD62395AA445A22E47A33212224BFBF3C3628250439F58CCA838F2D3
58EA005AE678EB8FCE6FBF86ABF67D73E2539ED456E26BAB215EDE278044E359
1D0FFE72CB6749B8AC405996F07CAF2136C252074FD0C7A611E297F41AC843F7
89B379DDAD21CDDC95B40EEDFAACE60FA7FE72EA98DF0DCDA3C005836D4C4F15
E365A9E89402CDD9D95C785DD44543E4B4833C62C5282A123FCA8AF011DB32D5
B5240E3D195C2B9C04A71C44CA4DFECF36FBBB3FF7F46290642464F431CD4C5A
38DA4F0E47FA9DD440A57C74B6C1661F6142F78BA4D97C507CA97CE92E3DAE27
9BCAD3591C5C5FD20522FAE006E5BD78E25C416C776AF69C12C5AEEBE40481A1
2401CECB711F5E96AF34E1ADEF0A6B6E86FEDD1162F39DF773C4449FABE4D8F4
BBBF26855F52D14248EC42099172A8DE532C9F64795DD66E92B4FE9ADFFD20CD
BC04CAA6E1417BF4577EEA41965FEFC500051ECC9EB424DC01EE2AA0BB7EC357
21CBA24721E4DFDEA448A41BE8A17760D0B319F8E3EECB9FF3994E4C488D31E1
273A9000C8130E90FC2C90FBFF7C0042C552CCFBC586A7824C157CD83468581D
1424DD9B5E23D847199D914B2095AADA23D334FA0D09BFD9EB9AC9D35FDF2A15
DAD8800C8055818641743AEFC95B6AAE6FBFE3887CEFF1D9BFBFC0950D6ABA05
AE684DFA27A9371A2F1A7720D3363679FEA1A89A68DECADCBFD35CDA5F756C3D
3265B5BCEAF94D46680E8E65B802D9EE0A7194AF227A5EEAD307635383DB537C
B265CA74D314CA14046D3FF570C728843FD408714E8E7C016E49EDBFDC8120F3
32F80985A2200BD23FF9DEF6E3ADB48A9075EF9DC858DF1C2A86212637D4E91B
427361680369EB9BC1D7AE1238401F8E8AB10745C600B37FD6ED09D661A5D049
64CD1DF88FE42EC6E6D4383BCC41DF69CD3765E2E4A8353EC4D8A720AA873BB9
7E1EBAA57B76733F32EE7F36A232A8C0E75FB6D820FE9E6F568F271B5CCC82B3
D052798CC0FB6F49F01608AA405BCB3EC2B4FEECC7F8F63F269CFCE6B2DEC6C6
519C5E02571FC1E887DE2826FA5E08FD463EACA5C21C4E0C7FC4B6F8D0EA87ED
415E3728746198490800A58B085B9AF0B2294267D906B36C6B5577B0CE52175E
DDCA847B6AB4B052E3EB8B75140EF68DD90F587CE4043678E763B1495274EB7D
9F66C7461ECCD7A68FE83712B724B7B99100997C7DA458C3E7EF7566232A6E51
A0017B7A48B20A2DD76739F81E18024EB89BF6BC9AD620DFFCD216CFF07D82D4
EC9D820765F19FFE6A78109E586CED1256F1DBF0BD9D1711C55D8551E348AB32
2B525B4B5034D5A5ED4DEE7E1EFA3ADBC23FD92D5A6642FC4BCC900C4EE5BD0C
B7941C3C88B21FDB3CA6379C50F6519E6A52FFF5BE9EA0938DF4FAD65BF2FB61
94DA9489E4C112D707F94332F075EAAD963AA6D6F722CFFCD1EB06DA33B8DCC0
0022AE734C31A5813DABE00373FCC5E851936ECB322298115745EBCC034857FF
D3399A846061AC800CEDCD0441D0E1268F656391FEC5494FBA8B3BA18E048216
0FC90FC80380F839B40D200A023CA5C8B065FE474EC09BD90A984EC2CC8E2DC5
DB5B08648F42596BF5DAE7B51D8506E0E600651BA488E256362C4931EB9C16E1
E5574AF7981F801432AE5426C24525A2E0B0BBA9E0A9668F6080F339EDFA6520
FE0EBFBE4B089758F9B72AB93E31F1ED9919152C022BA31713685334317FF3DA
E0644E270DA87925CBC5FC69B3F0D93356A284B4491362AAB94899D390F4C683
D30F879753B6BDE75FE6831D51B4708668AC6ADE4B46E5477A0BE1A5CBC30DFF
518EBF695BC86D71647B8F6DE3CA946CD90E0A07FD05E3CE517E1A1F433C5F4A
9D584FE76F1F25312B41B125233101E9DD53534C36E10C658391BEEEDD606FD4
5A92A5E0313BE509548C1EFDC137E2F2338F154E46B0812808DD4E20B0C127E4
BB038861850E4DDE34B5BC9E0B36921B61B94CE24419D941C5BA56257152A746
F5A7EB8186E12FC8F69C2CE084F248CD6BD6A1AAE8C37F98287B11EDE98EFAE1
52EFBF776D0B06A53EAE4DA2888C3E18F2A482D6CA33D810C8C344BEB8228260
3973255CCCB9CEED562D1C42E822EDC904311E20190674EB127855B884943141
516CB9D84639041324CC0632E251267BCF5F11E0B87928D40CB904A338838733
0BDF079AD1B5E24FE244947AE6B625A336CE454331ADEA2C0A861E00DB395371
BEB308F62DF15888CF697ED8014F0A0D54BC7A1D366247A3B3DA459B72B2224C
CEC9BED444420B50519E55770924E494BACDDDB49A42C0A975EF44797A09469E
659CAA19D2DA05A7ADABB7809A6B83175FA7ABF598A41D46DFD849DB708208BB
BB80B582A792AF52D0FD3F3539049BBC1DF4B5395C7A4BD9EAA7467F563C1AC5
D4C7601FB8DEEE23DADD8B30BBBB3E1D6643D972CECADA4D24E4DF5C3288926C
6E2957CBFCD8A917E74131DE2740293FC7CB4D63423D14409281E1118F8D3DB8
0A31C7DCB5F10CCD66ADEC9B5FD0AEEABE5DCBDA66F40750A819E3677936EF60
00EBBC2E34CDC4E4CD4005E1B8C550FE723616E319DD1EAA899EE266411C35DE
55FF0C99408230664737E59CCDC6F6E904BD0CADC6388E68650C64C30D10778C
CC6541A3CB67BB9A3BF36665834C9754F8F95B7770649D605C6FCD8F527EF7DA
882E28D368CE1AE6340946D2A11E524FA979DCF4C401289397F10C78793A6D49
52CCE49E15DCFC537A77F57694EEE7FBAA60B9A36694643CFF661C3727D3AC12
21C04A609CE77F62CE16D8EA9A766B34693BE167604383313936678D5A8F5FF1
859D6D54ACA6E0C88C1D1EC4B9C39BEA5F8D5F8C59BFD667F08B2B43FA033175
4CC5A687C22D117A1D0045CE89B80B8DFE2845505CC452458BBE1D98DA13CCD6
10AEE5AA826B0805D7735CE5C94C6A78B68AE0F57098B4CA7CB50A646A7E8C8F
0BEAF8AA74C6383BB0D146C7E09971B32A211CE36D3A3D89F68B6894B08FDBB5
8CF19D463620F2FA9E98DEB782F5127009565F50E01ED58EC7B28C4DFBB7F081
4559689409EE42443201BE45970C6ED441B270664B22F1CB5D10B4D1CB3BD1B3
0F61DEC20789FF64AEC8B699B781E00EF81E43A6704C68A082A12E9C21B70A92
6AFE8C49C597C43C8C88930A6F8AFBB3787F184C78F243B797B2B3EF57EA23E6
D703D8BF754D8A112DD297CA8974B231C66D79108ED57A8D8E5746D7920DD853
5B28648F3CB316EA01A0C3C1A56D8F56B009E95F07C8687473C07F46718C8C6E
D842DB472F38B3373576F482A60CE4A863C787EA7CFF2D1C610195FA32E68092
82B9E4BBFC40C5B24F5D361D2A070C2F071FE36111685ED3F991EB4D0A75F0CF
FCC4D00878E56A1E66AD2538E0A2D812163A1558CF2C55E363183430294D8C98
A2FC7DA87F92D7BE1988905EEADCB76D9B453DD29B480CA5BE145EF8E80E9A28
B907B2CCFE583843B7C69D44F79274E963AAE2D4BBEA6036062E859D1C5BF626
BED03FA2B9F901197727DA51CFF0E36D2FFF3FBF35D7F9CEE406C76144DA99E4
F49190A3D1898C19A8A532468A4EE31497A6E8D02F3D5136E578CB2EA03D73CD
354266307E4E196C1D37A5967B0A1861DFB82602DB1F5D77FC4746716F5E4217
DCDC02C44AC62F82063CFE2AE7FFF6202BE38AAE3580F918EE231E023B9222FB
D46F94540EED1EA7754EABA8A055F8A2E37080F05ADC5BFDEA11806D32E43723
63D90B53BEE435CCD2BE586DDEFFAD3A0283C70AF7E72E1BE07A639D61012628
1051584663202CE577E80382DB4A9971DF1142363B3EC9962646E5E5FBA54ACA
26F5941E4168F70C51A274682320FA22AE7717DA91D159A66A0B0B0CB57F80AD
2BC6401022263FB30E7B72B0C7C83AF8EE91D55C2F6835494F951A3973B99013
1152AECE76F5BBB78658F34E38A42F33831A19BCACCE559AC06FFE8F6D227427
D872061B3852B74B952EFD3FEE4C6DA00B41923DED1DDDD964836B7A109EA897
731D19B47E7C2FE3F01C6072ABBED932E729BC5A31BCFFFB68DBBA9CDA5A5AB2
39DAA64874D2BAA6B0FA81EEBE964C71375E7D13D917D9BE5ADD94B0A857ED96
1B73DAD62E573CDF8949C147B53F619369D05B885C473C97BF898BE18CDB3DCF
E2BA10E00A36A5914B5A5A211FBE587873EFA441A4A060FC2340DA067F70193B
C44A2FA4E969DC1E3FEFE3937E3D682A51E6D64C6C85C8F07C67EB058ACE4A31
97A24CC8FEA7E4ABD4DD02A1FF839A44308E5AA09A7BE401A592C4C4353E6CC4
C66E382ECFDC10F49C514CFD7DE9D93A7A9ACE9F56B1616DF4261EEFF6FC4C3E
74D8FA86C7D1E9BF6D087FCE7BD5E64583FDE377A8E800BFAA26ACD32FBD3564
1A650FA9CD42BE55F5B2798371C721A4D710CADE05ACBC678720DE99950BFC50
FBB404755A25DC9214661B0429AD6651C0B86FCF6E6DE1D53A02AA8BCA6AB4C6
BA544D2A3D15352DC0715517D5C803D13568700FCB04D2C22EFBD4295CC7EE21
86DA654A2AF3F2C54C87356A5D3B4AABD8B212A405B19C2F3F898B39437BE672
A74854F04A752DB2D384C51328696171AD5EDED91C83452D7584E169FF8E3749
76E541216F8CBEFD2F8348390027670118516918C3A842411785C16A4C85A70C
0EFEEBEEE0140AC03B70ECC8014DA35059EBC2FCA5451D17589131F879590297
65B683569A2BD838BD4EF37A00F51444A5939096554F9B622221086EA14AB706
020050FC60C6A0684EC97C2459B62256B5D99FB27AB003C2D50254E249BF31BD
3D3E117E1ABE07C2B899F3BE271EA0733F1DCDA3B5014BA6121364B5B0892ED8
17AE6855D49A07B83D878FB8362E59E3ADCCCFCABCF0C63315284AF97BB0F613
A0E0DA4F9DAB5E55E0EDEDDE9922D0A826B9354EC8C541C4FDA28E5D984E7E83
175FF3C9E9EAEE7856CD0F5D65AE9CCAAD3330408D5670B8E8D68AF5D0B48415
32800C918ECBD2E0B0D6DF34887AE57C85675CF04B621EE963CCC026E49CA090
D20C246E65F8F0DCA1278BF62DAA04EFE50FAEAA8CEE214526FD49B59C335505
DECD9EF413343168723DCAC49DF84B17697044364ADE808078B9FB3C26B2112A
EA087A3135F8EDFE4D902B642E617E8C1F59D3C468C9FD72686DE9EC3211166E
FFFE0A7D6E9A8239F8E8711B8F87A9613D7A1B330A35496E5BADED521533D6F6
D065386A7FBC93AE13A36EF17CE08722DCE6A5762E702491E85335660181736B
F59BE0D9E6406B011453213D52E2BD85F6D020C2CA09D37EC7A04148C5D923EC
5984245B43C2C5914969F16920C71750F6F05478E5517EEDA23F481DDF016D54
EBC9A644BF54140E514587CE28F1376E4875DB6C2EED0170C92F840C9E35C73B
63108FE8BA00DA29E16053C4AD1E00014D0207BE41059AF8F77292314D12B3D7
4380C04AB65E5A9F03652691B9B07AAD82B9E38114070DFF099B6975EFD7A08C
F19682AF448E530C58AD8EE472B30BEC0286F1E17B42345A54937B1EAB74565A
647CA47E09005D90807C1F5402FDD654BA655EDD82729434E076B6C80765CCF7
3F9BE578B595E9FDFD2D932EC3B9A7996471C9459DFC1A40AE4CA3EB86332850
AEB3C19ED49DB0F44D5A0EE7C0A4D24F4795EC2F372D0294381DAC2ADBF23243
B4E1378D0891CBE77AD2732F682F2ECF547BBBCF7C47E2EC8B411C5851376895
8FD5829090C3416B745A4857B1EAB5AACB740FDCEC460F77AD32947F829801EA
D6C9FA7EEF9ACF77CE53D72091688A2F9A9EB16991E920C13E95E51AED9017F7
30E9258C0DEFAC1DD1975A516E87D26151E03B13E9159178AA5DB0FA665FB173
11658C424EDB8948F09A0A26C55B6EC54BB71EF4219EEEE76B8A0C05E3B93EDD
1529745F9647E4A4B99BBB42CE20D711C5C0810C82A800C68CCB66B2D4D8986E
E05A1C0009C184F7357CD3ED0CA104CC23AE5AA5019C6E861DE6831F367250AF
45C1CA22C3632A896DBC041BDBCF6CD246022A1DA9CAF5540DDBD3337E994646
A2EE7C457B2DDFB5D7FA7277B4D26D100F1C7BF2E67BB8ECED53F317C49A4373
19F38D8986805BD4F8A0F36F6FFC05A3EBE3D09854DFE91017BECD2BE22E9F64
492272ABA4EF8AE4AFC4510A0EBC8501F8C63F0604350F0BA5757091FE689AF4
CD13FE9AC89FFF5889850CAFA6D87C0FA165CDA89BD5216558922B9964AC0BDE
4BC4463B960F1935FE48C1D2B1B24BA8005DF69240000323C8AB6A421372596A
F6AB45671213E50688E48153AF733A4143FAD478C4AF04CF9EAE00F119734AC8
F61BFF601C58E56F2031E37F0A538BD5DC8972FA46D60353A8236C19F06C921C
0627272B7EDA4CDC78FE2CB3717460A4771115ED4689FE5051465B20D0F5FD57
3CEF8CD09D043B27DA1421EFC7DC1914A937C5D65CBE51E28CEF5792A15E609E
97CEF6231FFDC6A791D14D7CE9558966661F2BF12C2653AC9B17E363031FB7C1
D2ED8D7DED937F19786008E889B3C6666BCE4E3B2E6EC4FFECCFB940C95ED43C
30BA9598E58219930E50F03F0C2697D290AD1C6BCE7D2F098B4C06154AD43CED
97BCA410F93794765CA94D4EF5BC3E04AA8745B8DD1EAB1B144A3D4EB8CE21AA
4F87832E4621F116CF79D89E21BB4776FBF92EC3E76BC9DF6E7413C86F9B2873
AB9ED219EB919A36C48A3D4E268F9055163F6DC681FEA752E97C5A0636363ED1
B999AF65D8A5484E792A6942E13E8E7E0048E3633DA4CD8BF5E51B639A2CCEFF
1D51A29B24F8325B9EF750B0864252C8B87F470B16F2A3CBEF57E8B2BB1672A0
6F7A0C1F573F678EE7CB4713E3D08854881D1C7991D592134478A0642202B0DC
1235B6EB3065FC4D6EBD5EEB065B9A7026F7B2EF26CDB12FCC9EF3BACEC420B8
603F04502DE9AEB17A30E897470FC68A1DD8AB680D3F1BF5DF13288A9C089556
7687C7BDF1E52C287DFEEF0EA394CD23C7857ED20DF5E9BF5B2147D5C94030D8
B1D2B0EF3494BEF638403FA9F5AFCAEA05564BD41EE0276290319BACA7D44A51
31BF6D687E7512E0C7D4F2AC56F11F25513538E881AF4AA01CFA5833F587C5BB
3AB66AD771B745AC1DEAE5818938373482F9566B2EC74E20D08F21C09F917045
4B71D49949C3EF19932A80E810C749473594CF55295E0FE70873CDEA5FBCD886
C8CDF10B21BE4004F765C5CA592E8DEB3A1CE4DB9CC65B637AB1BDE21DB9CA50
93490C2FD2815ADDB9F07AACBF93BFAE5ECB6F07A933BD7B9D5E971D1557B285
B4394F74C44D084F4832B9AD8836CA243247480EE33715340DF66557B3960F55
1F0C95B29C431F4AC8DC62BFFFD1B6A58A2CE43B13DE62ED808076115A557D17
4BC36988A26333BD5DFA93C9556F4BC3D926C21286991039E4426880F2DC5FCA
283364B7C88B42C7A04B201A8199A772261AE788839FEFBA16654A3190DC2848
ED6FB8763E23D14A9606B14329DB68C05F67779CDB1F653F82B16FC18F025432
943DE92B3F9D9077FBB518A06CCA79E11FFC2DD6316D745850635E6EEBF65993
08D0CEA3846B8FE36E6584491BE136C7E124810A365A9D8E21D969D15B487A08
1CFAB395FDE084D65422D18EBCE76DA1378D791ABCB4E40AA26782518125A31E
5273283B2808856B63D16320BA667575FA72D620A4A0BCE9C89413D853847B32
CDB57DE6869FF2F4D22C1275940F088C0D28816F06DB65FC6A8542A51AA90C76
2F08722D6C9BC4E4D4AAA6B2C0B8E70471457CA221575FD4C8DEC93852525822
670E549C821AEA305CF51FA5E536CC8F4FD125681B402792537A5A5016ABA881
D1EBA541A3FF51817F42EAFB11CA714490ACCBD3FFBD8F1DB9E368F0A1108325
DFF5D950DF390D625CAA70569B211AA9AB81ACAA607DD9D6E3FD988017007CB6
FAD0CE12378043B1E456EE80717397F562A2DC523F8933064E265617B2B0F37E
363DAA7AC3275D3DEC2EE758B252630952BB1E02BD103D387DECF58707E1241B
F20448A1E91FE3D8761A5D7A9868747280A2C4ABAA6EAAD6DCC8D2D25F0A5632
E1EAE2364A1FAEE8455584B1E4DCBC8B4F31409868566A423F78D603E4E809B8
6B6191FD7EDBB24337546C8E40DC16C6AA664EE830F69CA64D6AFFF4C00C1E19
7DD4B87AF13B1E78A1794FE15867FB81C9CE767B9CCD489CD8681B441CC8CC47
72C7F1B81CDD489A1364CD6FA692783D6041A470FD7B0532AFEE1560BEC11159
15D52D2F4ECA9562C3975C308697EB17357F1E4B4BA1D391DDF7A0A426CF08F6
58D8560B39527B7CA466B3512704D9B23F81F7BE2B33393454209CA7912ABFD4
613BD0DB2A70E5C0D6FD35AF0602FC673CBFEB4D53BC2C6F7C5DB3BFB5CF69B4
5C0EFAFB9EEFC35D04033DF9C7D95A28E2CBEC02B95EB816BB56F9C8D2D8A68E
D66B8FF66B39BCF1DC88F6E2C599EF00D7DA2B9AB03CF041F02C3A498E78BCF1
5FEA745D7E8A47D5B6AA1A94B7BD396B25DE6D065CB6A832BB1189E6F3532FB2
1EED3BE0F408860883A0990273E09FFF84A94070C41E93943FDE0033D00BBDDA
5D20E88ECF207EDACEFAF6A2DD306971E48F1BA4391CE705B07F7DDC091C5FF5
F1C05B1237C7D04A433D0A20E9EA433CA0A7331FE9F0F7505EFC1CAC8FBD2BA0
BE78CFB3EBCBB2C01D0FB2CE44921AC975B70BDCC68B023AA3650B0C37988CF6
CE9560038FB7983E998A712E1E613A8D241CD13F1995AF504B3D1C99CCEA4EDB
69CCEA738B4F177B44A2A254154772D0884ABC325CEB60F77B4DD1C4890F902E
A304337941F4D3841355BFF69FBDA5027454C88C88458AF9D9627F2BBE821261
834C2B730A2C4AF814A1DF71262F9AAE0507DD40EA24D03C719463E7048CF430
1D7BE319ABD4A8A49D4E33671D9AA9C6AAC5DEE7069C4C65A4BC57350A1E6CFB
F93DF388B1284D8CF96DCCB47BB309050D3B6496E4785E56928A78EE779A2BA8
1833151C95DDFE571070805E98ECBFCCB9D8DA884F3015464BE215FB9FD4A64B
643BA18A0A593A920836246C2B91EB18FFBF31AB6ABAA639C00A851844DD7AF5
AA9AB481B25B48450EED2D767F3F7BB56D9068B2B298ECC9F6FC2D33877288AF
B46BE07BEE0A37323F67190DCA9342EB8473A704E86F5BE426AC090401BF0D75
309A30B9E0544CA6AB5B25EDADA43BE6F6F9E295C739710F5B8ADBC2A7270414
F7C9DC1C3ACCF0C334F6A2735B6A81CE1D9493121AAD9349CF436BD0A5483EE0
88DDBB0B4FE67EFA34BA79B24E29A2D5437AC52252283BFCDB8331ADD82BCE97
BAE8A45D492FF8EB1509BB311FA9B9CDC9BD664A238DCF905298C0E7F8A5BFDB
375035D88CEF990BE6437E84666836561770227FDE3605EEAD652E6D5E754B9A
63B35160F2143C1227CB813274337608BD8578B2D2DBABEFC7520D59416E3BC0
E0FF98EE7AFEE18E4F3EBC937EABD16515A4C0104FD7A1450E4B3C26099B4354
3105D87BBCDA1971C7DB2F364F9C2E82D61CED262CCB761DF11D2C48437938F4
BD7CF4193DEED5A7F885F3AF01259A46EF651ED8D86F5431F822D90E68D1AA0E
1E0140FF52E388CEC6B2569F751DC7C32D1457384E3276EE1D0545F608156ED8
D681B96D8AEA4CD36EBB1CC46A09839BDA146EB4647872941760E7CEE40AFE20
68FC61306C232760E07D1ECD82308BF25C01142DA61C431ECA7922112041124B
34DF82BC0650D3594AF3FD6733CCCB734D9D6954F7096B6A2E6F2F1F61DF42B0
92148331B4B82B2FE094E1FC3737ECCA3F270D367C50C7D8E3C246E6281D213A
7A59ADFBAFB79E70EA791C91C555D3E6DA61FDF90223FCE0A136E7FF22E5DDFF
0AB03B9386E4707F4762E1B1EAD19985CA95D9C6D025C807AB2976AD8CCCC458
5C1C8F7F7C1407CD4FF07683B4444EA38E79062F6925BBF89C130599371A8F30
B1B39DA9125A63AD709AB77E31A17DF4385E17E1309D51DFC71C24817662DB69
F9DFE6DB5F0D51942C9B4D3041D777DA0A8465CA7380B8BD1BB37C7285A14EBF
8F2E5DE82A3BCF5EDA2EC342E56110FF8ACC5A4BC2DFB17849BDB17E34169AC0
3490B7A3256F0C2147B13D704CE8FAFEB6EE61832E62C6283F9205A54E10F652
295A09208C422ECAE034A47829CEAAD1503D07094B9AE9F0BA8606E7E51E100A
8A3509AD7C9ED4648F0E02CEC9743023FE14ECF70C24F5811B536481D82BCA3A
6C34B4ABCA930C9737DF62A00B00CC1FEA73A4BF402732E2F076B0FF725CD0CB
AE681EE11179FF17776F39B459EE7B08693791CB064DACD6204539FD6D931E10
77F87886543F425DD4FD19B2DEDFF1CA3020834C678B4478BC2CA3F216A8B022
C452DE0132729987B9851E15F8F1677D663C9D1BAC11211433D9DEEE584C92FA
D26AF1CC74967C51383E8A8EF4799B7EED89825F0936BE0D460129D4E0DA6F84
53A180A89DDE5FF97AA54AAFCB77C834CF90BC523FC060C106A18C706C9DC0C3
F407FA4EDF156F41C0455F22CE636C96FF23291FF901F6DD1DE53506FEB7358C
700851F6F1209B9080E59F3DDC498C0243EFC2FEA7928446DA0929B779CE09BF
5ADEFA913014681D1000C3324F082F9B9A55B61C0EC6C043F5FB3D0EAC0723F8
97A50F9E5F6280DE3F2481D8DD1D01999F98C67ADD53F1382A6CA37ECDFE7500
DE337D5029E37C12BB8436BD0C1AB9021643231CC582674ED33AD9C66A243A50
941EA92242BCC9579C51E346A94E252E8369198CD288C48AD9BF40400111DFA8
82A7B35F4882BAB893FA49E46012F02ABF9CF0E669E0E29C392D32093990FC8B
94BE46336C0F01CA6F0C2548960D68018F67914C389276B354BB677AA9A0D0A1
FBAD8CF4505C45A38DF4EACC00E995DFB53DA0F1F1E0A1843CFFFB24378CF251
A753C87C6EE0F1E0B755D5194F80A3176976880EFB613FFDB7CF159233A3C649
16F4A5299D952351E8ABD4EAD1A1712305533E6EA140C2C694137AC0A29619B7
1157199839226CB0A75824A82C95A0BEBF7EF46F275CE1F16075BB0146504D7D
B0883BD1AEF81B25C4EFB203983C867FFE6A9C3B53D11B07
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Medi
%!PS-AdobeFont-1.0: NimbusRomNo9L-Medi 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Medium) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Medi def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -341 1000 960} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E178732AD0E135F772215
EA7EB7EA7641D31502E1BB9661E7B0E875AEE90400138F2AAF4A8686C73EAA44
E5CAB467770A3D12E9807BAC97B24A8EFB0E276760F4F51EC7123C43BC6F8DCF
9A2F496A9172813FB461FD870763306B45670653A9780FF409B734CFA74C12CD
150B03344295918C4ED893FB620A9499404B83C71152BF2F2DBF769000D116D5
EE264C016EE3E1241018F59544CCE53E5AEC124CF6C59A4D7D7D511ECC9AFD49
6608ADDD237358D7CF8B4D1C5BD1158CDF2D6469D9BD6E6D9762ECF34D1C3C27
5F69900E0D12AF9B21F153585742E999870BEE3DFF6309CD82968EBB40D9C269
CD4306654AAB6734151132DE4194072485FD082FBB6DFCB3FDFF9E1FC88D9483
8AA64B5825293978C70C9EC095B18352BFDC34B4BE9C939384E3281BCC6B1808
A6B61EC4E47BB6AC14B105FFA7ED6AE99A1CA0B360D1A5C24E0FBB55C66F5811
A5CD0625654654651979A8C4C3612054181CD300CD42D1D9CAAA589118D6C7CD
5EA8A9A0C639D5539430D40318F4B739DA281ABF2BE2765D44F45B218BB192E1
9EFBDDF7777E8730FA7DC0651BCD5D68EB743C51D9CED55403021D45F77CAB5E
7E892B3D1F875DA86C030A2387487DBAC8795749E849EC93439C9E22EB20D11D
07DA0F09EE9356D55B8D0D8555F1B0EC98C72863B376D3436E10DE2FB1AB9453
DADA019DCB64F6D059AB3A95B28B94435004C9A8BD3FB80E2B9DE0E330D03622
3AD965B4283E6DC880A2130185CDABC053C52693CE3F50557F524D7CCA9BE05B
FF9597ADF5D1C432C00C0B0D8EC2CA8436685B4BF3E2105B89FA6CC787B77637
248796C2F43872B3BFC8011159C22EDB7149AD8932360A88A223CC638BED257E
04908032ADA750F17279F7331189C322CB5ED9B66E502945BEB1EC68B1C7BCC0
2322EFD669C229B28CE1D0CBC0005FF967D0A4383E29538AFA13D41D484D739E
487D497DEAD8F661847A5D82D77D91219ACF666E565292384728E58E1A489054
8C3E34B413A6A550C499218E7FCF43694CBEAD016119CE85515F5EDAE3CD483B
A0F32743E7A189708AF0CB6FBAB22AC8F23604FFECE038C838472CA40ADEBF08
47AB1D450E07F9D51828D25DDCA679E3FAE54634A37AE1A5A778365C5A2C8A27
64085AC775AC132CCF27CA164C4721F67B63D52E388B17122F15E5DF391674CC
B6C9EDE307D79E390068970FE0AB210337558544E8CA59BEB03DBB65661FD48D
5E16DA2E1FDA727A13AA52DC9F2827BAC1ABE9135E5FF8F322DCFDC3AD492EC2
E938F27CA41A26E44E7E264E1D3304B68A5E5B13FA0E2C36D1BC7D0CC690D105
D3EE27FC27E2337EBF82BC30EB08B9D150900EC9C57B38834DF8ADB373CBCFDA
AAE5494EAF576231F91345BEBA6ACB55D71A535C90C33A846F2663B5445A2A3A
9166B80818F6C1C6315FDD85228D0313BE7D3D4B6919AAB1D5E606F44C60B792
84F67C4AABE257DF33B4EDBE4DD888AB006B1907E24A39D02878AD7EB271FA1E
C039EE7178EF77F80D59A40F6A2A7F7ADC3BB1F9D9B22BE5A2E22002F0206D6E
47AB178CE72CCEAA9F816A55544AE841FD08C8B001B4365100BB79253FCD09AF
E15B7C4C75C0C00F4549D250A8D8D0B82FBFDED75739A29DDAD519705EC0C3A4
25F84078E97512C13EEFEC631D2B1F265ABC4F71643449475261A75A8C17EE6E
339E5C3279B78C4BF98B23BA5E8FCD80D6A406BA3A705E8B1275BA8E9E8205C6
155EAF3633CB439446AF333242F316A00A621DBCBB84ED80EB0F10ECF433D4C9
901B0A5D2888B29FC66B4FC576AEFE70105DFA58305BFB1B83CFFC76259E2586
0A372E417C1865E2E3FBAD3BBC137FD522CEEC5B7CA9ECFB1E78EBBC6C56A8E4
48153895A30B4A82AF5946F8BC31643A74F5D36BD724808357D4FD1813801BFD
FD760B0F05CB4E8623072F9884ED79A75221D2A3772869EF6FFEDFCD9C2CEA3A
186DFAC1138901391308AD353502AD3EA9660E33D4589CDB05E48EE2564259E0
3DDBEDFCFBEEB35AD055FA06D20693B88721E5EF326085013459865498DFAE85
A17838CAB6C86BEEB5C5F9F025F0FE2A069914903C74B2EA642EFE67E03DEC81
05701D74E8B2860B118C8B20D0E508C6BE908DA1DA339D66E56DD1ABD23AB236
BFEABDCD1A36C3A3C3F213DD31EB4E2BF4BF01A9580D0F0800921140DAC0F9C3
48EA2B5DE623338326FCED59380E334AAAEE6D7A1161558E0103D69F95627A6E
456099191DA14F1A843F3E57F890B955350AD5E991D31D41B2C395D4B43EEC22
78DEF6B3A25590A17A356C334A0F24E515980044DC9284D0382A72B7358E7AB1
99DA8D9AAF6B08868BFC00C6AC195054BC20ED3F9090577AC6AE8666214B5E24
D140C5A9F3AC96CC2FAF398972089FF79F635B544499D40AA653B38BC877D4F7
5476D5E23D4455050261F7E096632B3ABCBE035D436ACB5D36849122443B0648
8D4A131FA21DF4E26B7446A22E6A471E525155FEA406A352724E567E662C07C6
D13BDBCFD5666B36825105B822DE3029DFAC2B53E18F0FCA91D21F521084F9CF
87D841368D84B7C82EDE8BE1766EA68BF613FF8717E269B34672CC443DC8FE80
04D281ACE7FC8FBB074390C42B298A500C6E34DE1ABF186F24DBF6B44A2552C2
0E9CE5864B08EEFE942CF83394284794F9DC98E4E3C8252A45F1B3D83C153C1B
DAA7F723C558C5E113EC2B66E063832CE329E6F4BF32614E0116CD08A59EF71E
DCE994F63EC07621F0F58B8387A161F72C87517DA7F5379C8A989C16915E134A
B0128425530D60C32A7960282772F823C54683497A00C8814F1D6C88F0172543
1302229DD210395B09FA69D12F6571E16E020249051FE747C937D27964BAB4DB
820ED044410FA6801D7B9CD450D013537F40B5F9C805BC59EDF67B7EFBA226CB
F6D563F679741BC7A8D68DCBC63E272C56A8B50E81F53253549A5BD518AFD4BE
7C8431A12536B4640FE61DF82B5E597B9C27B4140383A667BB1C52FFA3450E4A
D1664CA415168A8D3DA153B199A800BBA9D7712EBF67CF3FC5C479B9EFC32A85
A01609C51DB5B3628E247CF9730A2A1A8F4AEB40D68457BC8DFDB5AE320B2B5F
BC1C84EE98E7C1D1B59EBF6819CDCD5AA02A78E55D632D76749359D01D5B3785
00A07601FB68B99B11647A94F66E819ADF0F26C3AA8CD7D20601E7F35D732E5D
9743304F5471D0A835AB70940F904DE037CB8D151387FA46C657AC6B3A2B35C8
015C1A2A55606F382C7C09B251D699914550A31920DC1269D70A0D88BEB87C84
630C8BBB5D7AF413ECF1D03F574982E471CB048B2F78857C87E574E387F38BF8
BFCD4D6E2A4ABB3E2E2089A27762BAA59CB1D15CF34E426E865DC8BA20896AC0
E3068C8998C57753182B91D1E7643224AC7E434A9E953CA3E93D8A5EE8F7E2DF
46FD7FE0CCFFD8C4EA06E793A80A32481524AE4C1B0877E8F1633C58C6C2778D
8100DF5DE4037E437115C0D0A7238555FAA6247BC74D15A6A42C89543196FB0F
DFF3CEF39070403F0162CC8BDB0FF1945905F39B8D68433757F1C924DB90A3A5
27515C1BF57555C8FF1B0B24ADC077FD350CB7A63316DFD21A04AC84035D71D8
F68168748F62945C3E6252887196B9B6767B0DED2F367718195F72C5633DF533
0FB6A4002A7E4142552C6F04B8C4D49411CF425E31B7CF624E7407A98232CC60
83F9B7FD7565F7AB7CFEDCEDA26298F739D55E1AB926E5F1230538D96AB2484E
A11C46174814D8306E06BA24BF10780ED60ABD9581F43AF0F247E2382685556E
5FC2A83E5FB7EFD6F97C047D79D01575F8B37260EEC9FEFF583903D1FFBA9A5A
2AA3AE147AEBAFA9C51969B172B9DDAB35E4E2EC20290103A0D490FD73B29FE7
8BDD84408EEC483038FA56D82C88CD6B07FF869846B61552C23E0A25BE5FAB84
E7BD020F04C0B5C318E84BDE489F725F11D281AFE58EEE27FCA2DD7E6ADA2469
EAC3500DC7772F6BCC973ACC25A562CCFA0A31119E9B5D1CC4D68FE25B63D828
589518507A3BA3576EEB0F8F901CCEED1B0FFC631BBB7D56CA2E838290FF1CB2
A73D5E566E70CEBEB837AC1A6A63C471FCE09BE8301F5461D581676F61C50AB7
EEADB185393062BB5D2F1AE9CC13EF0C1110B54A25F9B69B45F3A645ECE9366E
0689124BADDC1EFED511AC7DF243AD69592451EC17259FB04310414797C3FBD2
8EFCB73500DFC2FD657F1748F28CBE526D90398D3840182F35ECB41DACD0E314
B4FD088BD3BE37C6A0F1F153E753FBD2644FEAECDA641AD28761FAF86CC41BE0
BB296522E1D1A94A301D3ABD60906E38CC403CB95277E0D9D788E9C193FE941A
FDD9F34D5E0FD9F46EE3AFEC10ECA86DBCD687ECDC735E2A086AD06D9A8664E4
78B9B632A6DFA87BDA41065B55DD40C4DF8D976A9513CEA5E573AE347A830259
E8027AD192CD70B47133FA98781A0E4BC14A10B559FF048583DD426681539CA8
8C556C34ADA4DDBD69CF494FF76B0BCB2E8CA743D708EA41ED4E7166CE503D81
D22EAFE6109D5B6BF0AF4B08968F3689CFAB68FDEECE7A83E002EF84ADF3E399
64B1A781FEE449FD012D9218381201A629E55B69CB87E5018733433E202AB93F
99A80E76CF38AA5D251D7EB2F62611EF483C9711133CB513E37A797E8D824290
FB20999BF8DA87335283DBEF0BEC7477C9C7843343C79A46FADC577E846AE02D
52A48C90844543D1564C4C19ED32F3E006A5A3563321F84133C40CC6E3F4AE84
401063CFF4A63DBE38C95E951D267AB1B52197507C83AD74BC63F2237B769A9A
52C6F3A21A57858C0E6647B1775C137D363E6B88C0E0DCB41FCAE6373F0BA4FA
E8D8775F09D065CDAB5010B279CD7D96EBAED5BC0B485C010B144DC8C46EBACB
5850E2E542CDC60AB1C8BBE63B428BFD2E4E4A4502036898871E083AFC812260
0105A3A6446B65AEF087A9048F867B04AE38E9AB67C44C3AA5D733BBE98D184B
CF6A5C4AFD15904D68C140C6CE231015D80689D34FB2A24969306D9A13E0202E
609FA2ABAA3605A0A0A2FC41964E125793B2FBD4C400B7F9CAF79D1D1A05B564
5E38C7734F8DAB6490E2041D5C0C7D76F922732ABD5043297EBB8A0C6FF4468F
4D1867CAED334C6F5D74C6F451A89A00191F37F241FA4D0C0DA6A7487485A275
D5ADD0B1D0E004FC3414502FD8CF52013B24CC4BA785122FEA311E969BEF02E8
96B4F3258BCC00348516B142F1C4B5D94BB96F2F91453BFB636FDEAC3D348C62
A9ADDAC9D00D98783D070006EBD10E2D6F6D7744E95639A19A297E550A75E045
84D6825D903840A7E4CD862C801BA339F9242E9248224C16BC186967EF58E730
A7897A7B5A09CE3C260E16EBBB40108A19111823FA96D9745E9413590B9E21D1
D6EF96162682F9947E1A09FED9A456B812DF3E9371E73E1F032660685070D6D2
68FEBDE0D37ED339149ACA27757BC78EAF97D383375F1246E0EEAD0BB9490605
18DA2725AB90AE28F457FBC82D32CA2E4FEE85329EB3446EDC8FD4B03C22EB4F
AC8598F34C58F3E09D9C3116247808D6591FBBCF547C3700C9AA2B61F4275D2B
4373E9282366F4271032B208BDCA40F4AC20B6471BB237E6F612EB54E966F8BE
EA7D5047DF9893541E7DBCC773CDAA6F61706135B3C6BBBC9C8395B1FA4C2F67
B3F476BD860A2B46225D1784130F1E76B3358654893040BE5CA59A93129BDD0C
F9DE39021EE2080341184E11766E6B6B7225896120E2F2FC35027E60C38080D3
6A130474BDBDA9E950B8969E4E7A93AA015B423AEFF3BBAE3404AF40A5362422
28AFA61AF0CD1CEA2EF181A0F0E3854B28930F95E0558CF3A66A20FE7A21A055
4EA68CD2276F23985B0041C332096ED8162AE5C575C80EFD0638B2AE4201F861
7D411C52FA68837FEA02572D861C7A2D64046B33F8938B203F342A5D39EC2EAB
20A47BA58EABC9C3998F1E97A66B2E9B937B85DFF647EECA7E9ABBD9C2457A29
046D3C0EE07051DE16B272A6BFF40804017D7B6CF27E58047D37D089D8251A2D
36D01D8979FC192EB86CF25655AD3766E3C6249A80DEA0FBF992AE99B4B94316
927EA08E3E36EF8B3531D0C1A29AD20EE7A504D59A70664FD3BA85774C31ED24
4A176A480D508DD34AA7143F57D6952D17C30E3B542193AD8CBF9C1BC3B9C835
468B2E8E763415D05329F5EA1C7658FE0FA56CB0F26E9D8E493F4C89C9789DF8
0B94018F1B9C56504EA7D8A83B734C6F09BC60B67F6415B7F43ED1E18A7F5024
895BE50431866A4AF3E762FFDD42AF06E5DDA7F3347CC0D290E52777D0D7A41A
7F933BCBA6BEB815BA062E41061465C24DAFD7253BE7A57FC9FF815B7E04662C
35CB1723BD256A0A51E5DF5233C316DE99EA37C8DF21EAC24445378B768521E9
6BA2D78A7A60106462A27319823E615344765CD7DAA74D1AD47DAF882B8125A4
5DEAC68FA91ABC1C9032C843A0E607089FD531D1ECE4458D8573761532052971
BEFE67428865A57CFA5CED6029512A6281DD6ACF4DED114F802BFF8788DA9851
10F188E2538E35E109F3267E886CF72989F801D0B8A4B12721E619A33919D671
9AC9C2257EFE8025A77EE3FD66EDA1201BB29811725B143F935D3F4FFDB31FDC
40C05D38F018C18D1ABC614DA8C5DE3657D1A80350032D19862612D96293A337
BD182780389CA09F38B773F2A3EC4464C280BF794EA774CAD2ECA4581BD58ADB
6AB154DAE79CDA52743A4AF692E07EC8648BBAF792ADBC2583F795C0FFEDB117
119D86DE3BE581EC223B2E08420CA5A7BC5DD0C1451610AA956E22BCD5AB6777
7E28EEF2FCF7E3C4F57847EBC5AF87C86FF819AD0834C9B7DD0C08341D55CFC9
40B88FA9C09F411132EC6D54CABB0468A96366B5B2F5C9C7999C479BAF2E1950
694B5715C52EFAEE34959A0FD994D2DEDE8EBF3F64D095928BA18F7DEFFFFA76
B640FC05A08046169186702A6823B13195FD884DD681F71BF2430F208782A53B
7D888C92C6E4677E7B9C335167EF7528F38861F2C51F5CFF635F9B81BB9F60DA
FE12589D767C4A5C46A1425D4AA970CEBCF1CF4487E0A932F402C2917ABDB770
33EC82EAEAA4B12721E619A337A14CBB5D65845B48444847FFB5EDC71EF643A6
39794FF3952B71ACA16423ADE9D9CA2C158E282FC19318E7971376D6DE7CAF2C
067D3E20863EEC7F0BDF2FCCCD0BCF24E8919BE0A2BD35F169C61F9C95DCF096
04AB88C535BD2235770077096AC9FFF055B087C94886F0C838990E66EFA460C6
8893C7CF4E83F0FBC6C42B59B6750886AEEF8585A632072D247A7689B6093C28
E738D0C557EC9CD1DB819396032ABD4C90337D1E536A1B02E243EF05E6DD785C
4AA570392D483AE830BE0C1FB62E63ABDFEE4DF997633E5348B80B793866C125
0E8B0A34CCBE262E21D5B99A4FCF98032A2E4ACCE98C520D91F9F513C8FDA627
BC1D36A3A36ECBAA147B52F03C21358AE26717F9D11F8349683C88C85056C497
6A1C36BCCA9279DCD4C925CC89CE4178ADA8E19EB34008E425231B64233FDEB4
8524C17BB4CD163A51EAB2ECF6C2B3F04004D9389D396B339BD81267D36C0798
F5C481E2D139C12B31833685258242CB84997044CB1395A056C4BE731A8E2411
3B3B90BA90FA72367EE114890300144579DB486069113FFA623E458C7B5654A6
120EEB299C276199381D18A10B9E3A2A9EF7D076CE18B7A4DB26CFFE7AE25FC5
5513581EE4243EF3C1DCAF85AC656B612B600475478ABDEA9AAD23CA95738A68
CA5EA7DEBFDCA169012753A32123FC4B22B458D160C6F4B8A43A8F79EABBE56F
E0E96745696CAC8042136739CD8185132C796CC2F65308D29E01C7933A960D08
95586D84F0FDF527FB93791CC72A9527ACE70A43A42ED19F8B1D06278E80D3FB
3280719FBCAEA8108A2649D2CF8058F3B8759EB38B7510BEDE49F0512BF2596F
40DF06492BEC78C972A118456F7BBC8C48F3EA9A604891D363EB3342EDBFB15B
2FA8869C9F35C2080B67C77970366689A91795A2DABC3989D9F94102E53DD9BF
D2DAC26AEC69DBC170743EE1891FE5F27C2AB6D2B1D91BA27FAF9AB7A3BF0802
C422F6AB4EE9EF216EBEEEF11FA0EDC125DDDCA53222D4D01232590C06F4AF86
91733BF4866C747C90ADFAB8AA771AA1FC2888EA28F1BD481E68425ADBB15688
432675144D5F164208E827A9C4A9B70C5F69ADBB6BC1E81DD5A5C2DC576BC3C5
2DCF35C162569B8A51CEC1E36C2E51B2AFA83620A1B8A73908D9B7BB38CAB575
3F16B3CFE82404A98EFD32F9066EAD37799271B55A22318B57269F2071B0544B
2F9B23FF5344C49C4E5D1C7BAFD0F130B3C93FBD3D57C765FF01AB1473ADD88D
2B433460436E2943ACC76CF697A2E914B9FC9122C8E67455C9782D9B3F0071E6
3AC8D3A63C1EDF27C851069DDBBD724F9200263FB24EA5A58A66F053E0D0B44F
B5B1620F5F87412D4004B4571896853134B5A2613719D5FA5EC0DB8284F992F9
4F225592C3708042ABAE0FE58370204E90FEAFE0A407C7C23BA5F5E684764A0F
F3187E03FA8E4CBD97E59325DF7370194220011D87AA5F04DE9D767FB1901DE7
CE1A8A0168690A2244E27C67003C1D7AF9996D09587C4C0799B8DF16A8054324
88D3CACC5851B632F995DB32130C3A625CA33B2B75AC8BD1ECDD999219ADC8A8
4AB125AB8BCD800A6DC35072A7A673A69134C0B5A2DA912150F56EC909D4C419
FE71851D31F54E6002A72C4FCAE909BEE5103EF0D1F9C896E42C9FDECAB15CD3
6995591ABBDE27A28609A92942B5CF298519A207691FBCE0045C8F1475B75E17
6F161583446293F2ECC523986F03D08EADBB9EBE4B1D8ACE1C1B15E51A6CF714
5AB813EE686DB1391D5A73C3F4D6641EC885C706597C659CB61AEE2D0E5F1355
F8EFE6DCCB4249EC05B14D3C3E4E688535C269022126DD209EE645C006C08BBE
94190F1C4129E3A0B0D6B6E832C53C325B9CD2B5E9EE0E182B3D53C38881E1FD
87ACF2908DC38A5DA916E556F89103DF3F9ABD1188942CDFFC22D48755EBA5A9
BC77AB4E4D5F38F03AB6398B18895C9FC35E1952A6D115E313E311E51AB47DD7
E690EBA4FA8B0D525E849EA9BA1D37934D9868546DD62FF8FC258BB9A71A9F20
F8A15B8F10C68A8E825698B756D2B9BCD39A773DFE36E73AB7FED9496653778A
BE6089D7DBE2C6A8C48223624B5109E0FE9CF57C6AFB258F73816CC190CAF25D
9965CF6D413F33844FB0C605A3CF549017138747FFDE1079E95CA6EB4F6ED576
7302E550DB091052DC526F99362C7693B0EDBEA335123FB2B7B7D2EE4508EC7E
FC0FA3FE65CE18485308E0C7564614AFB57F6CE25D9C8450031909CAA0496554
BDA35178AB80D32C3FC350AC7C97F99AF1D3CA0BFFA1FA478FC8901A0B672A65
805ABAAB6A3786687B4D79B0C46F3155FF98BDFA9052308105D729FA3DABF20D
287178EC0E91B06F159BBBE9A3ADF77EFCA149B5EE0AFE3B6468DC32D3E7897C
A1B2F833B6A30EDFF44C64E88902FDBCC6187A65FE2715A43C743589C85EFA9E
F86E779C74772BBC029A6D22BED3B0BD51E234BA20951F4EE2BDE86534515A1D
75CA9AFEE5936EB0ED4BF25A60BB28ADA8E7DDCC2507CCB096837457888FD4D5
AD663E48C7E0265037A107CB0CD46C599A4ADD3728FBCDD89AF2EDD76EA55A7A
765D8CC769DD978532A67BC72061BD45FFCD0BECAAB67E4CAAF6DC875F7B7281
45D99A8A4EA2811AD7326AE12B896F411E09C15B0506D1F80553F7BDC1C4AC24
7E5219877A6FFA564BE71ABD4E08E648010277D9EB1ABD87F62376C476B5EF22
B9DB0559D4EFD4D82F53049B667134173EC3157374BA74064BCA91BB66E9002D
608A92E6B860CA6C30DD728D2C2EAF63D8895F74BB7E183462F00ABDAECB9478
3909A6BD6549A52A6A5E8765AA43E6DD79CE17C31ADBEF74AD5D7BF9C9232C30
53A580C560D47FE817134E09E94EAA00FDB48827997E0909A9FEB5C862D9FD08
AF403FA8F5932ECDBE98C22F07E6B27D950888FCD7C028ECE762C1D046A59D2E
2D31F4B4AEF2054421E956EA798A9BB6C5E0A1295DFA75CCDC72B689BF3938FA
5A42D06916CBC7539470C763580F1FB370A2FA4DE028A8861FBCE5947BF14CB7
4A936E2FA261FEF1D0C9E46F404B266173FDC0490C3D87EB0747F5988FA2321F
1EEC3201D7486F94ECC3FC23E1B58087CD200BC17E21C7855A85D2E3017FD680
FF3C0DF477BCD5CD0404576ABC114D16D854020F747874407C00194BE7900BCC
E4B9C4A119C63AC6039BFD94F51E99CB6B641D100817DF9285212139FAE0CE77
A32D939975A057C559B1903405EEEAF0ED84EBB1C6FEE9C35B6BEEE4A4A62860
0AD1D58249A83FDAC64590A3E6AE93F77D84ADFBA50CEBE2BE28FDEA4D45203E
084948B45F893840660FAB579921373A31E77C63469FDF72B8CB09361DFEB783
EEDBB1BD9B4766AD6408A6508CDCD5F9BB7CB78278B9A9DE98BD68225BE33F86
2BB01C30566CE439022AAFA9ACA6288AD76C080159EB390801A8E01D1E47111A
57B150A5B386F7CAE837DF1953B8970BB44275079E2763A9F51586CD024423D6
693DE7B3EDCE6B001B849179745366CEE82FCBE8E81A3C277458AD03DC6A01A2
37EB374D34190FF6F4C9503149E5514B919B0C7D8C0E74CAFDFCFA1F8D73226B
1658D1858CF4AE069BC8D5168A2ED64AC351114F4546BB917307766C4D22819D
7C09E7BB5DE8B67198544DC63018054CB8AE786AB20E770A0A347BCB3C08C522
B580EED46331E568D3032E8683D733E5D21DAB1C96ECED70D0426FED065C24CB
8EC16C71B8E86290EF7A6C25712E48B697102DAE785F09CAC34BF888CFFDAB8D
34874576D1385EB32BEF400C2FB78D28DC71FBD245332911D542FF47A210CB31
ACEA3FA83827DF49578AE036086809B37B3862A698B8FE7699D0083D80D1B3F7
8C5A237374A807F216E2009FFE57F6CB0CB72BC26EF0ECDD2EE48ABF9EFB538C
274E3C64685888A61CD2FE2A3912758568EEDE2E732DFA6BDFB4C1D0D8318554
2DA6218503AADC0BF0054F72ED0CA0451E5D8A813AD6697E53A43F30E6F0AF6B
7A776C63DADDCDD47EA7CC5A25C793F81161BAB356D5B375B38AF2C8B806208F
4172A6F467EEDF1F815029DE61C11A9CFD15BB117B5C9751B4E6E5F8270F2DB7
7C82023CC78F3E4C90C32549A28B382C57AB5288A594B9437176290ED2FA27EB
EEB8B6540E7EB3B2ED04E094B94152280E083CFBAF0B39FDA4E43CB02C9E0C18
A6CDDF2211E8A92492402C43865262C084FC29BE41E3A5BD58015A39001FDBBE
B5E73310943FA78256402B2F7CBFA762DD19774B377C5C3631D65C55D4827C58
463F0F662A8AF0A7043E617C4E9E99607546B39CCB048910F3D70211E567B582
1BE62AFDEF5D7BC2C908C46B93419B9A6F1851A29A2F8385BA91BEAAD154EC3F
A47063FFF3F46D416DE4318230625092A537C32DE1210BFE3CE7DE643FA30023
FC58F293B01B03268948003C7C7EC4C86D6FD378051A0D5716216F57E6498014
114B0B135AE0214AA8591A9739C57722E200ADEB44D45E53551383137F464150
D390E63D23EBF909C3772B458C092AEFACB35C87AD21C6ADA3552D0535716D26
78A1568A0F4F8DBA708AAA2C2D73ED562231D19C05287689E7264A11BE399A1E
FFE6AA02EBE529146BB9E0D14D166437952846C6EDA2A2DED66BF5952BE904C3
104E28F1BC902B008B72B95440914969A1F2D001A5D7C9A8DD908C31F206BD4A
FA8323B32617FE09DDABB4DA5C9565A5FF83F411657150619C0C7A674CA870A8
DC75BFF94595588E8942749F90FDDDC8CCD31B7ADE7D90470AA749FA585DA48F
AE3535115200C6D6D2BC9DA0BAB7DA969E929C070D6FF769550AD34A047DDF4D
CAD48C79C13C76BDBA56512222EFCF4530BFC8481C361522D9BEC6A0A706A2E8
B91298F103318B37BD96C9AC146B7A62925850B9E600FDDF8F7304AFDDF88F35
E1F428DBE74E704276634E66D02209A560A1C2900D93C7D84334DDC6B6B7F51C
9ED833CD7DC284A0205D94F0A305E4EEC6FCA9445B9FCE63171FADA0F762EB50
7001D56A6AEAF280A76EF82F79EAC946F8F2859F031D291A3BD9FBC615EF773E
C3501BF2BFEFA1DC9B82074D8BD9B9F89BB96F3375F4BAC0137BFE9FBA65E1F5
886B2EC89F12ABDE8DEA2F8BD4BC4F62DC03FF5F39222BC8F30502098E8DEE7E
777DAED7073391618FAFDAD31E1035B43304239E8F00E9A6B13A3E53D1F0D2AE
A8C40190167BE5425BEBFCA827B0BDD26D8847034B2113CF3A72DAF040563376
E45BC33ED9222E7176C1E7423D088B04BCF02926F7093F8295291C172486D98B
3E03859BB1E0ACBB24B738DEB7E4370E2DFA3C80BB7D7E09A12CFDCAE0432930
CFC34EF4FEE60B89596FC8F4FEB2C582024503754847E28D80D27D406A6DA3E6
70E6D13BC51C01FAFED3D47621376F2F2FA49CA1AC51B9CAA30D805089E1E96A
A5F1C7D8579C4D826EE445B809F2ED78ADEDDAB3DA4F96E2A7FE57C3B179C294
69CD33D9A16897A9B5AE6E69B40D9ED106E2C78E4C0E2F008129872A0333D548
B045656A2C8760B37D0AAA39D610AD4D7A1CC4D12AEA15B928B2F78DB6B3832C
31E0D294C0106CFFBED9D2EE977BB30BCE49F1B8D2CD124E3BF00BE48C470B0D
866758ED3E511913DCC81A14E98398F14D15771B66F0630494BBFED0BA28566F
01A18D466E40C5FEFE679B57DC9F4E79BE368D7AA1E978D4C5714622E75955FF
3E78C4575D810E7E0506C712066F741D1858EF35C722DEA4F0B30901535E7614
532F3A830BE79F5E0824AFB010DC809783AB31CB4CDE56731504E1E19462485F
52DAA93B465AD33A0E36DF59A04CF9590827DDE99E77670B9D077AEAB21EB469
5A333CA9075F6D4DE902F8B1A029035FD7880229014271364B9733B97F1812CB
D1BA0B0C2EF1868C9094A07F1D0D766D717841E47248C69A180D3936894DBD46
645921824091DB1B6A97E165EADCEC56B987CD81B204B2FB83E1E7293F39CA26
E62BBE22F6378E576D33AF150744DB916CA7E3533C73FA145B8325EC1DE26F3E
CF01941C2768D80733E456821FF981702745D81B833EFA6D2412BFB5783DB3C0
F6D60E34BE594B65D769BA77B378B00586F8A890443897F479F5C27BAC92012B
73109AD6ABE2627EFE2C9B08BC8869F3E29A0BE2811E476BF93DE35FB61FDFA5
A4C78E426D6F68DFE42F76B1CF58A41ED7303D15E633A518E3E329C40BFA2C5B
3357EAA72243943EB3E77E6CC38DEDBB2DB8BE7778936B70F9C0C450921A63AF
B753A6A3C45155CB08E45997CB2DA882A00FA917AE06ED51F6CDC70DF469EB03
6B3B72AEE0BC7452F0CF36E83244653377E66908DCECB140DCCB262C82D1402D
B1EAADCBAB6A4CEA9D7F5BA399D6EFE43D6B7379099BF2AB95F9E909726283C7
C60A1D9E7E800AD94DDD4591CA81C39C30BE19F50ED90F26FADB09436108F0D6
B87BFFD6548BBFC1CFE611BB91418808DA11FD6D146785233FEE99B4B390C2C2
36024AA765AE8A728BE453BFB2AEFA3156D8D1833D20CE8233FAA260549800D2
A614F80AE97FD0C208F7EA25F9485074B7981A2B5468AA3E8FBDAB58CEAC9E67
2AC3878B2EC8CFB51FCAC2FCC1428EA40C0D32D86960F31001FC7E30ABA976FF
6307B080B20D541B671E3FE7FA899A10F89C27D8F3F5A060F459466505612B6E
BFD50F8E6D0780D87E5C54F6AC6A193F9B573C472F744429992114915DDF1A5C
9F019E7E7C23ABEE8A2946ADA87B8BF4272F77CDB489ACD0FE5A2F6587288F86
A18D480618A38CB5F7F2E01E1434AA29ACFECAC1191EEE5356F2A6A906DF98C8
B98DE38740A323433C5F4A8F0E5088E7717A6B3D01A2FAD816F9EF3F228A0246
3EC9F49EF4BC3147E698FF54A047ECF440C5F176742968466CB428D778F74B78
B5404D4AA2DE115F55068731FD47303BACEB03BD6228B406BE76DFA227AFFC78
A1ED6147099197D719B542773C19E897EC24B9F5753E6AA2B40D3C800C9E3159
AF1C2CB35E1F6770830FE65A9E0FD3B15C0CA9C3CFF9958C0120F5FDBC70A40B
5551A0DFC909566136488A62F646E215C1CDF7962AC8AF7AA13F8D6C39E9D913
191C5A1C3A267C7227DD5EB863629BAF9FF882473AB8B9012CD7908782CA6C7B
7A4EE55200654E3375C56A8E4FBFCC2A09AFEE48B1E2652A90D38F7C90BF2F04
359231BB3434D635D333BCAE56490A85F80519C7ADF9CA2FC25EF507256E1351
F5C90A1AD171CF35E905162C9B513AC8A70AC40CC4E4E9C9C7D47CBD68F67097
F43FCD5DE852E1B21D53CAD8D435A6A0754CC39F35AC5F1F43608F0EBE978C02
BADC2A881D7638A147FCE32B2700A00C87824C9309162B58DD511A2C85E72947
F249B5B71A32A9F0DA07E945B809F2ED78ADED4F33090310E032D25A4A9998FB
3D31129C629DF825DD1EE514D77041F132E099A8759FD417BD67E75A5C09979F
88CE71E503A6C946D433D2DB5D513BC179B9C1EEE2C6BC5BC93242343938777B
F8BB18D05E66C0F6F4C6270EF1401C5CA02F4EDCF6E94D058946C7A994B7C9D0
3585C208C24FCDE2D03F5057D7802DC33D4979DA274ACD445B9691C83F9B284B
9CDD484EDA149E93BB8363B2A9464A246FE25A8304F71C1FA2FDDE18C342568A
681A18FD5E0F571C5A568E9FB6A9E110459F63852A12B461141E8554A6D145D6
E303419BDA9952B4CD80DA0643B85FD378C2C287675D7315DA328B72631FBE28
D8E40C2A3161EE7D7DEE3946BE446E0C7C39AB202D3DD1BA9C39E566682CFF3C
E58F1D37B07915FBF17ED3B05C3D67DD04330DE48260646B7EB29511147E9B4D
A309E8B7738BA84C65C5CB8FFAD439FF1D8DF6429CF302DFC453BD92C609ED5A
54AD4F71EFF23BB170792A1F91931A5F5A0611FDEC2C3DD197B21E73BB87D2A6
94301C07E508258FE433C390470E429A2ECE0640B3BED9E91479DBAA3962798F
08E47A82D98E151DBE7DB96604989914F6EA7EFA8B7D02D26EA8AD4A1C1DA499
05FA9B5F27BF8327C9FE5514BEDA0203FB51AA6B90913EE835C3F7F18004AFDD
1825CEB017B47C1D40D2B559D8076F0578A7022DB260B2E973B138277B85A917
2BDC88F35057F8125C9CD552DAC43B07299A7EA427F0C2C528B80097806C7F13
516FA55EB396874A1E61A68AF40C47FF601572619557072B995C973A8E1CBF9C
66FE967756DB5A6EFBDB2E9585BDB4DE77ED752134F229C9D26CE02FDB0AAC1D
0015ADB8548BB68F1235BED676EAF23BFCF6D3113872304F9A5C8286AC956805
B48D35F70B35CB2F1FF3773852C196F2E6DCA8AE16A4E67E66C8075A568469BD
B7D3FB16B7B92B6EFD8A177579F6CC537EFB7E483212364965E5C57AC05CDC6D
E4872975C6D08FF9EEAC99CDDF9202B169D3178982B23B23BC5753E00558C696
E146F5995227CEE17E36E780C8AC7DE00856BE4A23AA68667A4C27E09E93BD67
E14C706CAC2F4F2BE984788F85C941BEB9EB6A679B374BACD71775693AD994D6
F250AC9CE48A7F3F8BC5E5831393317B1A02B2AC82EDC5CD141423652C42A5B7
E84ED279A168D77A9E6C0ED76DB0C1B020FDF24A10AA295A8FD006B08EE68F2C
3D06CD9E6FC597233D5D3FD63B8718A23D8AFA3F0F2D656A9F436AF4339823FF
9B4EEB730DE1DBFC4C08FE17E2EE638F327D006C8EA3BEF222EEEECAAA356F8F
90723D7816A214F29997AFC814E1B566385A822F513195166BFB1E044DFE949D
289CFD527987FDAA4B644570F1AF95D6F5861709D07655D4E5163345040384F0
39695B1A8D967CC5488727A1F807DFECBC0DD381CFE39B1AC19CE241922C8766
0E7D5B6954031F99285728C6F1555BFE9A91F93EEDD2B3AE0D629238125AFB8B
018D87E1F5C08E5CAC012179F4D3EDCF0267A48E5D2474EF84DEF8A61F211815
AEA5307BA5A18D45C0E32CC19143732487FBBFE21953A22FE2B58A8C9A841425
24C4808BABFC235684ADE852A7CB0A11529EE30B60996C4E4DA07A9770D9607B
40358DCDFDB80D7AF07B095CF18639953AAF8F77C85350199952F1EA4D68B4CB
FCA56ED1E8F8CDA9A3EED78179B13A49D0691C6F703E851B746244FA9716C83B
36A2ABC3AF267EE06D621BC36CA649172E3C0D04A555C3FF9905505CECC0D140
6BEF7860C0DE22AD1776BF3B5470DDFC7489A0F7A7BAEAF5120FB09D45AD42B5
DD29CF46BC063A61C95352724E592E071F5DE493E3AF79662464FCD0B05A6577
A03DE99BB78A9813C7B2719D47F6F532BBA523FB1E65714407ACDAEA11484806
8B70815DA745FBA282B50E18346DCD14B21954932404B7851795F0C52F576400
75EB8513DE7C40C2DC6A7D04E1D91A9A9472F3E4D79B9ED1A6408968F45B3723
AF5D393F1BB70C8AF5E305C6DC20F61F3746FE42E30737030102F0428AD7729A
E9A4A1C77205435589588FBDBA5B853691221BF1CFD2FCC11C434078FE9E0CA2
42AD4E18056CEC4952227A4E43A6163A01EAE68A0497C64D337BE982557411E7
D283C816CF6509FECB05A8426A66B2E512EC834C9EC37F3EB6401DFA8ABC47D4
20C0649581AAAEE8627E2DDB712E746B1FA81452BC0B91F4353A4AD620D2D7B0
368CEA452FFE6DADB47CF054527865F95AF8455F3C51F71A5D6970C289D6F361
66AD45045093329A532039EACD0772C174DF01BE3311927D4E8BCF6DC8BD4944
AD7DB5166A00448554114D6BB3B017D7176B787B41BF4BE578B25F35F91264DA
390CA29AEBEB81E0D6CBD847CC66CF7AF9A6E86EA691FB0306EB5ED50D479A45
092A4D9EE3B9E7142F87596287C88EFA7F6D5C7108F5BB04F755EAC6FE1449E5
479992B0D1DFB15D6826F49C36CAFDD2079D901DE467E12B5A56509AF4C487F0
88D3AAF81B97953767CB4CD063C3F1CD4ACED8290F5FBDFCF5C575319E50A603
55BEC68070A93B429C58856D8D97AC4E87AE52D37A6827BF6C3FEC4FDACA06BD
D0267CD933BE5FB3D3205058A14A7EF08A42A63B7693201ECBF5434554A26747
F5E57BEC2E8F288A43C85E909A1742DA57680EC2EA4773AB8D3ACB2BC1154373
1619E58DE300608788056AAEE55BF329B168CA0E8C9B00D805E0A8E50F91A710
D45B20F61BA837430D0BA1F4396BD9C19B7111F09BFB2E92177870EB11E60695
4B3A36730EA42422964FB7FA305DB33A169CE4F3B7A072134870154E6D01638A
0EEE22B1C135F3D1813CC616281C12A1F3D07D7FA09DE73BE5D263C8F2207CF7
E4C2343D53E556E7040A73C9422119BC37CE3224FE9059C8EE7D2A095B60BAA6
6F4CD4DBA2D6235AC77BC26DB55174085D27F8D6D363D9E2BEF66E60DE03BBCB
6EE15A4E26F539E1DCF45B685A14990564A3939E8E68BE79AF2D4A4994D2F8EC
F22348AEB6675426C3B465BEBC072405B37A95F0253E144ABC1F24EA39CEFD70
58CA8DCFFDFE177A880081DA3847779957FE699CD9F0CABE41CC7CCDAAA61094
DD655BAE15B146F5C0A27B29852A574ADB613F7AE8C953FB0C907480F05C9A3D
45D77D34E5DBEE308653EB2A99FE3EC1D8C873473E09F9302D8726D1C450F69A
3D69B4E699B96646EC7404374EDA9817F5D3BD39B8831CF12E9CB5DCCABB543B
2CB7B72AC9DBCFEF5A3E3AC969106B076057E2D1B4BDF4025EDF4D60CA843A0F
110067A7A93382A60BF698189152AAA4092E5D2CD38CE0478E194260FF97654C
D3F858DD260914A8DE0DEC49B4CD6AC18DF88AF2AB0B8AA4884FCB528E0D71D2
E8E93208DA679E6716E1649184293F4A753A02D3CC3F41C4B3A71A1586A6D425
B979EBD844943D7B5C2397CD387463C727036176F48D7F8D76583D716815B6AF
236D4BB6CCE198C1D935DBBEA3197323AB6AACF8DFDD3E2333DABED5F47E5055
7224389B666D10557E44A2EDE392F11131C16CA16619A49E27CF4AD8FDD2CD5B
F5FAD2717B07EC5E5553C018AE60D87CB85931DD2BE801EB2DBB632FF040592D
C91C36EEE43CB415399CE4584705B62805F6EFC1395C1E0A650829484CF73100
3EFE8FF71A7E4DE7AC581C115A21A6483AF48E122268495335C589B6B70A4E66
D2C27A2363E7E158454695C20B478F3FF320CBD8D93D4B48C183FCA24A536511
F20FE4CA880A40E02401DE554D0F9EED6C8C529B93561CA2946907B26006B5C0
94045978396D51FC6137405990987989EFA8581CEF89BBAD257B125D7B4ED2D9
831BE3546ED6A14B76356016E0799FB010E781EDB70A6EECF7BAA86F931A1856
93BF332894B3F3428118ECCF3FE05A8EF137C7B1B52A5BFB3EE86240E63A7DF2
FB9B76C1412502F6D156341732750743885A346A6B4B0C05672B2E4463E2FFDA
A654387DEEBAD59E947C0D867294A94F5F8B20F268C1BECE1763F36B74D304D5
3EE90B7E087F65733295C5061ABCC582E4DF4D0D7E1402CED7A53B2E99CFDE4B
022A4B71874CB7B016FDF9841C01615B4AD77412B1A92F544A9D9B7BC5746CB5
72AB722B2434213B74CA39A94DA58F99BE962CA93816E74634DAB9E65A9C0B5D
2A697B0AD838A8B8E7040D401013F33311E52876DF84493F499D3D3D6C7BA2CD
B2290972BDD1F95071E0837B29366F2D2E61897DFB8DE3722E05208A0929AD30
C657698416E1781EDF4430203924F8DF5911D3EA8D0CB523C10776A994C716CA
6408FCDD3F15B0C6DE00A7170332A54D8FD7D1420EAF7FC5FDA7F188518F3301
41E66D08AEE9AAFA5AE230ED6935AE5C1107D77349F726C0548382B9F53D0E60
5FDDB8CD6F385A236997D8A23C38F6C701390274F4A2332536BD9A114CE9FD33
ABC6207EBD3CAEFFCDB1735A9F4304140E0EFD0751B3C60A15E86C50ADF3F8D0
E66C1E9403318F9E35AFBCD3E805730457506BD0A218669FF52E7F407DD01EEC
7D145D27341CC2DF2206A643741E0F315E3395ED14AB29694B200F9A791C3360
6BFD9491087384289341917187BA0F6CF273418470AAFDAF70B82763EC40A603
916C36407EFD9F728636D89AD98B6CBF5ABD4C6F197D522EC1FA8F714B41B78B
1F750534DD6DBB9D80CF4534ABF609F14362B37BD16AF156122A18ADC1F3CF25
A855DC26BE9BD496EA331A9BB233D3DF81DB1D09125F5A31AAFFC121F97B4FFD
B9EAB6FE1D3578867B705161337FD3E6F8FB7A4B3E4E23718166F81D3FFBD355
D5B7FCD49928FE43E3810501488FE588E4F1347394097660500901B2CF8FC689
D75E112A95221792E647A6F737DB60B900ACED97A14B3655C2B2D4C59FA32BD8
36EC9F1BDA6CEA02A016A305AC3F528FF5E864A51CC0421E87518BC802C9B2FF
99FA7B3841D40140647415AC1BD3E2A438ED1F1BDAF4D6E5613AEA7AB35F4094
5616EE298B3603515974CD864579C2EFA2738147A0670CD9A4E778B7171B945C
5AED7B128DA332ADDC4F12C86D27E79BD870511189868EEFB39CD6505E7121AB
C0E3C4F174CF73A40108C69DDE6ED058EAED7965566FA4C445F8BF0577A6BA3D
11A8F8152589DBD22D11732706A01D99BF3FF6747B132993FBC155FD9CA90642
EAAC8D2E1E42BE6E4DF403CCEDB12535CC796C07666F38EC04B4AF78B53BAEA5
13E7ABB83385D1A4D0E87A785B3416832E18714A909DA1990F48ECD6BD2247D9
FE414721789A75CF67839B95FDA41EBEECA38DB5355BCB54FBF592684BCFB35C
08CAE24FDA90D90C27BD72727430511DBA36C9E6698018D982C7D13DBBA49B51
DE473A5AB0A31FE629F467FB3AE2529D4BFE82F8AB1E5FEC61AE26645BD2FD75
47EE1328AF9EE7CA2C32B5616DA320324AED7A482EB4081A1D09D584B9F1A9E2
7B050950C24080F1E7116D62F72F2D1AB5A9D3ED112BF57729779AE11AC4ADA8
20BECFE33D1DBF9CAB31ACAB94990B9E3278A57C9AC9FA9FC8A6D61BE83B5363
9657679711562306F2E0BA0D3B02165BC8B9B84E682AC40D0D47D1C76907A2B7
40A6F29699B3C2321FA32A9C4877DC526ACBDE6C68A5666194A4F6B1FBE2E289
0DBF6EF1777C41BB61E6C9DEDD47EA8E6E683E17B3C432B736CC9E872A81FABA
9EB0DF8B418219A3A77DA67F6FBEF3E8B10DB7B4BED177542D2A2BE07787710F
C530F97749113E235A33CE1C90895A8FF669A906DD2417DE43C0EDFD68B68807
0EC6553AE0E069F179786E38D8F7836C7F57700AF4F924EA8FCA381DDEE12B62
29DBC3BE5144AD02EE83A494FA35E36EB5C69F75797A405CC089B0771973E455
4A617EFC355400B8E953F59015CD7E3D0F2996F89B9642B20893BA854460C4DE
FB8F005902C454ED2F7FA8C39E699642418C44316BA27F4CE8448631B218FC03
A156A1461D7F8EB6B468A85B51545134FFE827AB71B77A7BD826DED1EB9DF747
7A180FF3003A75D24EF26E473398A5CBCE7A2A6A67CEE5EDA9F7244012896E05
ACD6480BB9673C63B8A06E8ECC61A28B4AD06D674EAB22D7449FA7EA00E87759
528052CC3D32A32C5C54B6806EDBFF03CB484A6F210812F4042044BE61EFD1EC
A8CFBC1E7371F02EB1ABF88BC8AE9A1D66BFE2908951F3D3DB4F41F4F6D96449
9C60DD18BB290F50DBEFFE2F36C07F195AEBDABA3F27B23EF35F2A0E4588FE2D
32AA9D21604FCA580B34FB4E2DA0D2544BF66912D97F66F85DC78C601A18AFF7
60E398BF5002B86535A44964C107F8557CA6C69765AC830AAEEAB78D645C7069
FACC4BD8ED6A6B0AD1271B57D7437A1A720F87F86BA0EAA638C518BC7A51928B
20906C8DC586A02E53F75FCDEB23D976209243B6E5EFDAA65D226FE4158DDB57
718DFD7B828E73C1904567F56CDB92A7C7AE0921EAED21A09D105A9574EE48F0
D6509EAB92BD4FFCD6BF440F55807D0072C45BB744FD6477365CDF9B6A32D842
D3280E1946078DEB38993D515BC5417A531BB1130ED417742B5F0776B2953000
2F137CA28B119EEFB489C47683C9C5225D76AFE6EE28760B6F831537EC39D8CC
220CDC97D8875ED4A8812EA28B3DC412AA47BA3E0E84722B8BA5F8E1306434F0
84137F464150D390E6EC089EDB68D49E9D1ACEDABF55C1A7A5330BCA70804CBC
DD500694D1260F45334CB56B63B9C378E04CBD980D95F35519ADF35718BD3EFB
60AD270AED4C35E01A07CD5C0F5B59E1A02FC74ACF8A1EC7B8A26A39E58816C7
A848393C6F6289CBB21BACA1777D317020E0A023A3F331E6D0DE97675AB8D8E9
9B138462B555353F91EEB08FCD5FB467E2F3AE647646F6BBC8F8C2941BA35774
EA04B70BA936AD0C0D393564299F515A0692831BDC124617939C2F26182D8A60
86FFCBC22ED580BB68D5B921DD6411
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusSanL-Regu
%!PS-AdobeFont-1.0: NimbusSanL-Regu 1.05a
%%Title: NimbusSanL-Regu
%%CreationDate: Thu Mar 20 10:08:51 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-Regu
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-Regu known{/NimbusSanL-Regu findfont dup/UniqueID known{dup
/UniqueID get 5020902 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-Regu def
/FontBBox [-174 -285 1001 953 ]readonly def
/UniqueID 5020902 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CC5A3208BB6D768E7
B58CD9BC2B6B7E110693C5A88D680B7290DB121996E3B7C8AE3C23147280F8BF
D8C60B415552700FF0E44C2257B467ADD5D550F61EC34A76143393E0B34D55C0
8B64B48E5F1FD16E16B967511AE15434B7F755BDF2574191E3C3DC528B69B5BA
7DDBBD3C7878FA69ADE75011A2C0F02F5707E86FA632D1269281D3C265B31F3B
F3145052467647AFE18B9D763FAEE4BA72CB9C385568EE5BBF5854C278F1E3CC
475C6234E83ED33345268BE52F0931B58F302EDA0D5751348E7B7E53D4882FB6
9343BDAAE87E48F6E82024D8EC1FACBBA36582092CCD76553B0449A5090774EA
7242123C53B80F2E927B98DF2B36C403D1FA1E9F8439F3964DC9F89A0CAB5AE2
C907309460F097AA87BD156575D6C73EDB2B40C015E67734397ED14395C43394
7A0201C6B0F652B035FD7BB82ED236D0F7C20048AFD83A56925C7A2898B46270
B440913E4714FD89697B3E59F5BDD5A2AACF6630257957ABE1A63502A3081B6E
307A534A9E238F986D4C866AFBAB7A0B1B5A6E99AA0A56DC1FD7E8A39CC45147
259AC7033A0C58192CA82FB12E09F309F75690043646193AD92D2368F345771F
01CFD21236BA52F74E36CF4B94259CDBA2EF1D61AD93A2B942A9896B0819D20C
59E440851CB99E89C887FC62FD9E7F88F54E5BC157D81A5FBC70699820C51BC6
27D7755B195C0BAD8225A6F3EAE0A5A674E8AF6B11BCC69DCF5FB89D8BE0E2E5
FE7E2588F93F583E4E2F6ED5457E90B902B02F51D54B9F0BA54291E687F4A7A2
08CA5FCE0C9F3B954247312EDA3C532D3DCDFDCB56FFE03B36DB7D549D4203C6
7DA8772A2F732A15DE675D3212C28DC755E3D0156A777BF514112ABBE4372ACB
97D7834813E1850F90CEE543B4C09BE1E93742EA98B8CACC09FCC4D2595EECD4
46C942EEA60211FA7DBC11CE869D55BF0C7EC6AA747EB2AE2CB3CC2DBEC936C9
540CE2E08291323B36F6549CDB97BBF9F0DA429CA9C863B629410885540DA6C4
9AAADB30C39051C993CB547BCD573D6448DC09BF7FF2D1B108ABEC2AAEE4060D
182ABDB3100AC627E5C883E8F42D90D699C8028D4123472F211C8FBB744D7E3D
C626ED03D8517D69E1ACD26BE4F83FAE31122294816736827D138E4F4CAB1681
236C1654E01231EA7F08AD0E73BBE1BE19A7AD6DA63AE0C7F5A360A53BB35268
CC90125C7545D9D59F5127F0AD964AA66DF020F639832FAF9C2CCA82C01120BA
6469960C350D3AF786666EC14158728E0BA2DD8A639C28E0A7EA8BBF608FD7DF
79C7B5DDEA05C8C3D6FC70177D1A9EA9AD056F0CE31AB535A22FF7EB33748071
6B28CA5465E87196191BE975E7C827B443B92E15342609FB93598571C63AE16F
CB7CCF15B8921F38FDB6F24403EBD6D6BB66AB49962AD578E93B235E6180B4FD
4920794B3F976477A04AD21728815D3185C74C8A1DF224DD3EE5110C18BF691A
987AEFB1DA55E4EF631C48E3B2431BF959A66D710C206B8AE5E988B7929BEFDB
CAA93FCD07341EAB622A755FF5608562153DD6A09E462ADBE677E6F550F93921
299E8A99B0B72E990A1D84831236FB6E9D0A187FD36BFA9D85C9CB0414FA7B15
EC02E8C08C8A4F71226A952C5164E68A44344BC4E6810FAD9BFD3532A9A515AC
5D6B5F8B5A1402C2C4DC011B043066ED02AF0030ED0D0769FFA19112C97076BF
F950438DC37B172FADA65DBF0C00EBA9A358B189F80CAB3A55341E4AB7C1A7BE
4066E1E941A608D1ABEE882F8B8E7E3B735838A7FE08025B5CA3639451BFACB4
AC69B3D95585EF78B1D0F72CE3FE6E475E5D061105933646FF7EA81B5026C7E1
EF4FDDFF62E82B16CBE3D401AAFA43872E4318B5DD3FFA3829D1901194DA0D8E
044A65401A7354A7986F49C5A0C4D34F5073EA1EC7BD55CE9295AE76F09A53A2
C536A9B27AF6D7165530550BFFCCA0B9F9F4F6F48DBE6863CB533FF32A5A3A5B
45E4D77DEDA2C3D32301ADBCFAAA055A4A032CA6EE62D04B060453F94317D02D
74E2C5E09BDDDF3C1D6F6884A5D19AE93D67F52670BB3F47680B76A496FE37B3
4D462E79BDFB28B4401DD4CF50A92E6EEA7D38726F2A1891340BF1DA9F49EDA5
13D1CEF48B82A7C1BB82D52922DBF4C40C70EABC75384D3ADABDD441EA5EB5A1
FB8672C93391EA1B94B9F6A175C23BA379CA78EF180A8735FE346921EA3A8BE3
B681B60C3DC06E6F6EE438B70F364B68B8A1C5C467134F77E3A886527318BF3C
52E6A856A4DCCE229797E00370564A13714635D584AC2B67D8ADCF36807A9DB4
2F37725E919EB8B8B37BC83FEDE5F3BE6A296B83949892103BDE83A7C9A11EF4
BCC470825801201C132F1811D97BC96C36B7DFF3BD741E3FF0F73EA60E753349
5A955209117909433B22029ECC7E145615C080B2C2E07F57E8BD5D23814746BF
0ADC030290B016C537E91A165CA6D3538F3D745C9514B8EA32C2F322737FBDE1
BE19CF8161ACCBACF68BB3D32003B14DA6365E63DEAAB5FE3805C22047057F78
85CFC38A25DA78172E6A805A230765818830A20C3EE5CBFC09D6D7B8743AF445
683C6D487B9FC36E69B32230D2A510495CC45A312852266543760E2EC8EC027B
A5A003809B696B70BF8F272D4699DF087027EC2EC8DF034C58D9A13359952E64
82C75AEC00751BAA0083EC54091A7E46E3F2ADACDB66D339BDBAA77D5512FF96
31FE82F03BF91C8F2B06D00B1CB5158AC5667F8941D3436CA10A2C30C030EFC5
2777E56DD79242271DDD88B8C9400FCC195C3ECDBEBE066E9B37D70EB627552A
13A59CA8F577CEEC7D5A1FF6B1E2D48E81F56E044B37BC6D86BF99DBC5AEDC55
73FFC0AA12C132A972A4ED7D9F701C4C942C489220CE54194253932A4CDEEA11
BD6233ED5B2611D87CA5CACE2753F1F19A3D6A668149B983FEDD407E9C70AC1B
775414D4E010E77F7F9EF46D8854E8D69035A983BFB76751DD48048508B859C1
B096E9A4BF2BF5F5528EE862B92E718274E550C9B3876415767A0A437E1761F6
3D8C1831C47C6C2D5A59A52E5DCFC3AF86ED7E8EAA2D845B234EB51EB6B64070
47F1867A60C8A7C77821C282B9C53C4721E3E2A9C165D39C743F96D80E7F2FE9
2B58B7FF1651F1D1D1990FF38060DF33D775B4EF5EB096004DB15DF1F48B0841
8A7F2B6283676C5E79ACBD3BF3D45BC30CB21AC527D8F2CCA7789BBFCF5EF39C
AE7FFD61CBD06BB76D6CEABDE57956350C209387C8F1D6BF9DA90B9B3674C94F
232CE7C5CCAF46038CE53FD1B5AC6264A083857B973E7F1A032A029C0088253E
B817A0BC3BCB9EBB339F3864D8CF6D02930135957C488371FA7934399BFE89DF
65557064F9271E10B4C4847758EE99BF58700FFCD6E0700AC8A5B0BF381E546D
AE8BBA567328CB240D4945E9233124AA4A6FB2A166D0153791212AAA2856FB99
8776CA3C99C5439A0662335A67A464B81E338BABDDDA757C7D1C535AF25DBB3A
83BB8ECB412F4006FA658E920D9B673E2FC566A5E8035D67EF9C283FDF43EAC9
4FD948FD32A290ED1BE3D706AAEE5D2D9167FB1C89CC4CAB7EB556531F26A9B6
8F299D6E490B6BB99126B2926F2F189265752DED3AE76273941B24528F1B86EB
D6C45A154DB799A9C8E2E05BCDDB6DFE0F875B563D66812DE87517D5F5A44819
24BFE2D053A0D206D1188F8298D0B0E0287BEF81F352B5B8E1872E4B03A3A438
DADA688C2A2050F1DB05FB4E305A2D85A3A9F92E79079884AB7E59ED22D14DDD
2920B94C71DB5F374B076CAACAF6E754FC89BE0003EA40B7D353B524D01C80B4
357BC7E33629872D74C9ADC658325B830E2F7D080CA96008ECD9986AD5D94E4B
7E043FD413E5F5DE04FB0F82C3119172C11ACA3493A727DB6CC6FBBB7CF1F25C
B05DDAEDC03E33E1553BE9D86BE442DDDD81E42423C97EF56ED679EE3076E34F
B270197D5A9BCD6D3DF31199EE853A684467C7A3DA4BC2D1067ECAE8058E1021
F58077F3B25056F97A92990CE9877485DED9FA5E757A4BD710750AE5E3B09514
83D8B2209695FE300F1D22FDBC364503F4F6464249A722B8E6B6432DDA808DAE
6CBA55481EB4D7FC2DAD6F918EEF0470879F2F2985F0BACE9E6237EB1C7D4E61
02581064FD8AF5E2E5D318672729F6451C8CBBF16CF19505EC2F70747C522538
665CBDD973A14C4B1AA8E14D170410F5EEB1306F74FAC7A6246E021930887E6E
7E15B4C55616E5CFD877C6F4B5C9B2B1F9A5D2E9FF84B8FAEEE43FC6F497D3D2
7E001D461B54C721985E5405EBEB2B3E66BC4632BC0A24CF65EC8CF8BBC1E093
EBFA8509764472ACD76BB831E87938DE60DB8D9B09E7CD78F9F5D7200518E25A
E6EA2183FD3A0B5FE3EB526F8E9CD016383B8900582E48B48156D4BAF42DC5BB
1EC67FB1AFD2E652BB7F18D8218464EEC4C85507A2C481FF7D42200C840295A2
AAA3641172331C5716B1393747785E53F67E7DDA9DC666672C88AAD5582FC89E
0621E9E9AE54CFDA161B965254B4355184773CD2DC55314BD8AF1CEA63F6D256
CC935741A9D68283AD1679E3F896AB2B3EBDCA4CE1B99AFFB994B92DAC6264D0
63311CF6CD46E43E35EF97CD506845BAFFC3722B0CC9A1A4E4B216DFE1F6DC79
AC958F0D80486B55B7C71AB9B41D3102B61F9FDC74D06658067A8D625B71D8B5
98E7E3E6B5B249374930EF875C67DA7195503F496635A04B004E419317126124
03B57C50E71676A8611B46A329CE10EC7A9BB746BE0D4CA139C7ADE88BF6D1E1
9F88F13CCFE9D85D7AF78060B754FE6BB185A9C70B97DC9A85AE94FD8DDAFA82
C8ABCA210BE1FB309B0DB6AD25BA839A627F26F526DE58FD9E4C456D6E963ED9
07C70B085BDDFC046334CFFDD5EDA548B8C187D0F26606F91150DB7DC5883231
98B318471C22E0E655DAB0DB58F757C7AB1BE37CE6C32C82C2016158434A189A
CE0F0E307E7434A92836556CCD005B5115F4D1FD128A48CE3D05DFE409A9581B
DE19EE473AB0D637E6D8FBE38645945FFB8189B637DBE76FC1504D9735B8B0C6
A6F44AA20A40C2307531BECDD042450095D1469A59AD5A49CCB86BF08A5F29CD
DD1B144AB3052690907A48861723EFD5D677721580A761B58A17B8CE5B72D441
88593BECB7D4EA3B76F4656FC7FBFB5D702371A8983C51D15164BF49C20D1B10
F41E8D145FB208B1E0F42DFCEC5F686CE5EB0825EFEBBD68CCA1AB82334582FC
D949CE463C7584322A57DFEA4C3012B9D38615FDE53FFA9711FFB607370A4550
817EE98D036D2DA17E044889C4A3B6C7B70C6171B825533159F3E2335A2CF789
0BBFF57837BBE25EF63F2517F2C9056A1B6C1C2527DF0D0A66F1D7D592DB8715
6EBC03FE1112079E3FAEE2088B5E4302740F7AFDAF79526449F903CA9E5271B8
4318E26C5A57C07FB3C3A1D3DC976CC1EF8D2F524FDDFCA18E8974024841A6FB
46CF60E8A608E8950E3359900A92CF0D56EC924DE64FE9658A4C0FBBEF0F8463
E26D2282BA01AD8CD0A77F6EC8A97CABD42A3BEB37A26FFD609C5DFDDE6030A2
7DCC221CB3BB725137A172C42C0716730C03046C92694FA5882BA9FF735EFF42
63031C88BD9F4603520053B8DD287A066861879A3B1253E70E40610A274C5AA1
FB982E7974B7F6757CD1FCCDD011BAB250AA60FF0CD52FA52D2EEEE685A28A11
5306B6109BFC822D1F1711C06469C6F617A51BD7A709F813C5AB4ADA09FF2F94
A4A9FEF8DAA80BFC80B4A675786E98F529F50EEA527F0B1F3254CE6C0B1C43C1
11B8F09D12320A40E79E0FB7C037E1F0600B3B227C84BD49ED9B2B8337524793
CE885801DE9A9804FCCE2BB423702AF207133A58D9013CB91611E42834553EA6
7AA27F5658BD07B26C0540B92DD02508B43C6F09066C8D8FDD5CA8274277E8A3
96B5561AC8E80B768293390E44AFA54144A88158CF23F51486D9AB634E8C7B80
EA8221BC53316FD5C232AE3C4BAB482C16F36D1866A89278AB665693D4EBE8F9
8FA219996EF62F4A364B92F527288CDF80DF0F5C7925B61C2F95B1F65E4F7C4F
8892FFD79E1FAA6236A4E4CC606CE16FEF59F24ABB056EC076F3778D58E6DC79
40319D5E09091A96889EA6D412B281AD4BF5E2E0A2D388A00B612254F0A83BCB
25F93DAC2DAA1A8FA95D48EA349600C629A606FADDC2D169821E4C9BFFDCE30F
F14DC9492DBEBA3347CC2362880449FC3EB1DC6E31B293ACCB48F2F1778BC36C
B38E61683433C8BCAD5E8A1FBAC70E4D08BF267422D7EB0001DBB4D511B70F1E
F4532A0C6DA9C8E45CCDB6320D45B130F97B84B7089395DED367865B962D9949
06A2091B4E017C62A118CB69C7B6161033ADC385FA4F7DC5CD5FF68EA930835B
86C2E75A2C64BB32559BCBC1131EB6B5DABC7DCF7308B722EA8E09B157C8435D
BCFB6572F9225F8B578D342C762A8B082EA9190D3EF5389B14CE372B65009C7F
CA7481D69FBA4891B8CFE5C606711ACD734B640D5C4B40990A08B1F745D54B63
180453D655C8BFF063D032DEFC8AF8BA2ACC6FD0FBFFCE0E9C80E5745ACF3800
A357D92BD13DCB7C5967846DD7485506D80684927A42C41839ED7E1C735E2CBE
78CB800B48B2CD57E4C0536B6D2A254FFD7C34D4CF27D23105389B2FAD5ACA70
A25BB5527EE27A08971E20D116C82835FC4D42A0FDCA73FB9865AB46D380E5AB
B13F62B1D8B4DF5FBD3BD4812CFFE663F9D47C205D4D6BF20B6B094526BB17E0
2B90FBD5426A0014FACD37425A3F0C66B6F8D1C50195B4C989AC3C2404917CE6
8896266ECD37DD94FB0344A36B47492ECA837CC95128DCC4F3BC418E3B998921
2224EB664DC95378EB2EE4EAB2C0BD4B84EB6B9F509991DA66BF2B0E74C1A135
B260839C24F497BC9AD2EDCFD30BF91C44BB04717D10D95AB94941EB58FFA401
56CCC3FE54A53F2726BB1757B6F07234F7432692F71F9D2A1221FCAC88C2E0AC
E4C311BCC4CBE43B427BF0980FEF5D1D80554D21C2B16223782F64929DEF2326
81B62F709FACD597F50EF31592F59A26D9BE83C1D178E6F2AC2DA83127E5781F
155DDEE88831C74FFB76B4263ADD31B1A54AB3F709D1ED968A26B08BA22DB081
4C4B79772CC1285B121F26E2C55CE38C8B3A86DFAAA726810A71E63567153E08
B32936B57226D871C48E0BED1C77C14F8DA09CC3A0FE2984A0F284E3ADE24917
8F408A1EBE598BE1FD4F4E730306ABDBF088DD483B4837C51E1366AD4165D331
9C7EC344F71BCAC7E68938EEED81A1601D7B62A4F0FB10469E4BEFDF9B3187D6
61C6F257F35E4F0D5EF8C123A6BD6E4EF28F4722C598D50BCB51CBE5E8BDBCC9
D27E27C2C12F17B80B2226F833CC6630F7EF5598835C7F0946A9609B91315767
23C3F77ADD1824D20A189DC41BF33E0FC71879E2F00CEEA39612E86306CD9FE7
E12E4D21774E6D8BF7C9971B9BAA698D96F784BEB3ABA2876FBDFA1C5F4BE70A
004C02E0A27C3829902CF3DC18A1DDD2174F69866C3E68BB41E3F92EBB23C19D
C1EEBAAEB9852902030A3F680D43CA7DDD5ABD8A59632C52C7AD9B7374F43F0E
70C9B6C6A7A50F5946D9B5A9122C342E5A9E61A838E1F4BBCE92FC030CBB4481
02653F60FCBAEDE6E472A94C043E8B9D2858BD4581EE3BD3E12D106DFEF29C44
8EE9071EA31C75F775C17E516F7F04CBD28DBF037B7C03A695522A7967B09402
4F01A0E28BDDCC5CDA972D7B44097962545A863984F5ECD12CE5CB06882D25E1
B237892A4B77B80497F0620E1B5C90818D6CFF968A7BD4ED07E425A9D380F751
8EE57E6C91B48217CAAD259ED52BE3FB5966F205BED5028486A7F8164DC93AFE
EC7BDEBEF45E37555D6E5FA8D17ADAAA741D883860E6E68267BE61B41B3E994C
81163E1758C638C468D5F574127D546717ABC29441CB4DDA6BC4B721FF7E51CE
414E11BF0A6466951130E54E8736D9086F5B2188772050403BEE287EDDE9B4E2
63D6DA15371001791605AC1355D3B9647B0C9BCA35501E3796ACA40F177FE00C
FAC8C6A03014EA351905254CA8CFE459E058ECAC86EC94C25485961154B3D8B1
A092F8451C88E6EDAC1CEBB60C4965334D7657519F4DF49B1A2E982C4319E6C5
885D8006DC8A90C2CD4033F5BA0753F1ACD7E1F9648889578CB3CDDDB5B7A872
5044B3A40092E7509721E7C10644A418705F0AD67AE24D3B39773FCA9E68B9F9
0B3146A9FB54C5E21F6B8CCA281375F7587CE37616F20BF35FCFAB68BD14E616
ACDF41115D1825D13BEC25F68895D768D13B63EA2B71F11E062D61A78F9E698D
8506DF16CF209362D33DA83BF438E50E1ED3017C523B07EC1871AE6645BCE34B
6E5AFDC897AA98088BDA5174605900798A559211AC0291616E89BC9FDA4C40D3
AD076CEFD25BFD74E29CAEBB11C6D4E67F79D8D4EABFCDE043E892CAAA9F7A56
EDC4BDF4CD83B6CFAD1A60806AC94D1E2C8BAC01D356B3CC7AA8B2459AB48CE9
E6325165172A3439957367E774003CD6437D39D2C537058B06F3515D550BAB10
3FDAD0C937AC752DBAD8DE7B1DE5E3801C97772DF1EC7FD849BC5777D9CA0F0A
1BB724F16423C2A64EB62331D9A6DA65FE59ED26572CC7FAA4EEC21CEC9E2A40
10E08B537D301BB82BD18CB382C8D2DB86CF050D3B9C9AB8D1B528496D579AF1
77123BEC678DBB2B7F252367B3F05FC9BE12399BE34EC027E83001171FFE1744
154643DCA8FE7B577F60F55E28D2D51F7214FCDD0927DFE6A9038596809A2F81
3DADCEE109883C10BBFF9CEC7EB41C846C112B50F44D441917349A35DB8794AC
E0CE2C2F80AFB2017E9A068D7CABCD24243175971E997E81B34B7F91DD88FA9A
CAF0DA6ECA58DABA394F1AB815D68271AC03A1F5BE250D27352534A1472CAA3F
BD94A1809143676F4744586410E32EC60C27D8E3FD2B7C591F7B32331BED6075
DBDCE25376C687179EEC65DDD351277D704A387B631F49E82810BF77BA6AA975
A5F2AF1AD36ADD93909E029919E2225ADDF3100F5A500471C4DCCA9D110CAD0D
29D4CADF2357C5BAA49CBFE1C139A6637AB3C49A63DF1EE2DA85658A33D93E08
443D8BB5044FF6E4A64ADB9CC308C7A609505BE8B644BCE39895DC77C55255B2
E8C1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusSanL-Bold
%!PS-AdobeFont-1.0: NimbusSanL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Sans L Bold) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -155 def
/UnderlineThickness 69 def
end readonly def
/FontName /NimbusSanL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-173 -307 1003 949} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8D62A63193C4AE94C086C1
552833DDD8F116B5DF33205AE709B3AA63DA7BEBB165B67281827B48FB5EDBED
02A1A5C0784FC57D3487DAA59520BADA1BE3FB9795669924321CE4F466CD8E3F
7E8EC2494AEE80E2DD7A48A6861AF5B9F0CCAA4A2FE2B03498EACACD6B9C39C6
A8F2E39E06BBB061CF2EC380A32EFAD0B790974BB5CC3DAF0992471456967362
77DE34813F27ABE99302F86BB4D293A37F84667E7F3DFEE4CFE9D1A676A5728C
AEB5222FF50DA97E74B2CDEBF725FBCA7015A188891C8A376B9DD8A642C4B184
B1BBF3F376A6D6E31EF1C8354DDF8039CB20FAABCB34D4749B3C8C8D6972CEB1
06B8A5AAE3AE40A91F1F2B1155681A9CC933F87528C99A2B0268B43A3E829E7F
3BD863CB52950773BD9B0731DC4992541D7DE7A055CA65DDD2317F1705C20D1F
93291BCC254CBABA425C032B3B15050D41DA14FFE1B3D684EEA428095A01E931
98D4F849B239AD9D79F4502F0271AFFB0C297F2F347BFB9C137782646F648F77
0076B85F5A929FCDEA2703333F6918B8F125627F8B505C688E30F258DED1AECF
2C86EDCD88C29249A8081731737195FAB7ADBB54743BD66511194DEE2516959B
A20701E2D97342248297425491F6C9471EC9A98E630D734DAC19721F0B324432
C8D7A0B751453F89F7008BA37BC48E0831EE3ECBD8A0A292D63CFC890B28F695
9E29AC3B4DDB78A6883B9272CE34A012A82ADEC0B6B641E3940A438A098CCFBF
C50544B94FACFD9D7AE09AD0632015F81D2F77FC6D80A42EC11D67D8A91C376C
13C8E3444CDFDE4D2A1ED021410F4D6A4E97804AE949BD913094D23108C9D384
56F11025E2D24939114B6BCF579A0315C52F3CA1BCC2860FC1A0B9FB8A37AE2F
C20C0FD44D215FC2AF737FD0339B070D54E664021240071C665DE4170DFA182D
4E385685FB41A2D85888B1149E9A766CB4F309B4E2BAA28CF1F8CC12C2D462F1
A71924DC798B57B6D5D13738CB2582F75CA7F1BAE6B9A8B0E31D2AE2C7723DE7
EF1E262B77314B252928C6699442358D53C590CBF6D0C1B406F3DDB54D85FB94
F4F66C7DC21C22595CDB358A007D8CAB42412D8D6638AA0D62613C595D1E9AA5
448AB0EECCCBC6EDAD098CF976BE53A8E2F5D2A4BA6EDA8B1095B381096178C6
DDBDAC4BEEEA9A039505936488E7E94479E6F02D75E2FCBA18607B510B4ED51D
B6F8520C261ED5549FA6287B240C140D3234EFFE4D089D9B450B8E946967403A
D3AE666EA92F348B20011F78FE6D542317CCB82B906D58ABEC0C1485BB092E90
6E7424CC62AA9E61A47258A0C9B8A990E9AF27AB9182812F516DAF8BF9F0F7D9
86B1D4352D3FBA9AE6B0AE4D83681CE09B1BAABAD5DEF2C0EBBEAAE575B67C26
D06A35A0D394EF1A332D55D86418FD79975C870E6D88A5E7E0269BAB29E63CA9
1A99D4E55FB18F6C6A2C175D46C65DE37427737C529217CDFFB40C1CC5E799B3
728AF8D6A742D6FB17DCAE007F67FA45EF0CCFC2AEA3B4E47F70BA2D5AEE9FFA
E5585511048432F2E80E18174791A6E15E13987EB96A2EAC896063C7418B4BCF
C127A9AB30BC2073A5FBF9F7673E1A4D816B85DADE28C0C67A74F8126AE35689
E82EEBD48F301B04F46631626586FD77921C79F575FD55F8C1899BB3199B31F3
0DDC42416A75061A2EA631B0A322D4E4B9F225EEF68B82816888826930854328
CC6563095F56B93D56DF696400ACD04765BC79375ED42D633CFAF4907DDE965A
3959752BED492B8DC2BB83AD101DF51A51B1902F650D61A0914635854E96036A
5A06BC8FCE74076177D517BF6BA575B98AF83BC7BA75204B9571C4E7C2331C05
67543D7D8C43583DFF737EF0AB7CE7E6D852B647B75A7F9F7E8468E708F9176A
A2BC6B2CE468C84CA3A11BA5B5CCB3F325E51FAF09B5F38C119934FFADECD16F
B3061E4445DD5B88906B59DFE804795EBB850D2C87A69A63A297549D01CCF8A9
2C81D0504D7CF23B6EADCFE52D2A9D0C4C94CB706120B5F5641CDE18C45A24E8
C329CD0EE5FD19B8B0E204CF88D6B87D9DB81659C255392A89742025378CF853
F6A8188534F35B49E1153A25EBEAC76FEC601CF4D10F65DAE3EDBD2325C6E607
C1EE5D38720004E4858B624AD50EF959B465EE94D92CFB878BB725B0E81E119B
3C1DC388C75BDA5904DFB6386ED196F743FF57EE7DCC2FE096C4A16A25CB7A54
3B33ADFBBBEC29E29CF2347AA6E81223995BD023F95E71A2A3C258F7D7BE6DAF
E1F3D2CCFF30C54E6609CBF4A5DC01AD6F3500F327B50EB05B489E8D9049B9D2
6877A39D29FF6AACDD72D4849AB5B7000CE1B55B2F5B035ED70817E8C999AEF8
2993A381C77DAE71C9C8EDA1C1E01FED1A686EAFE3CB12F40FAA3C0CC50C7A25
9AF32F4C81D9B39470D9993CB966E7D491B5803E4E32D24FDE0B7C56732957AC
35E7C9A9B7B8DD2F0B8D82752DF19FF85F3ABBCA8FA90637B2F1EE09B02354FF
0785CF2080B22BA58A66E60561F8E36881E4D5DE87BC69EC96D61BD7D1AC9B89
51553628670D822220DF7090617026A84C36E58D3D29D900E34DF22CFAD7EB23
15F190D4345AE2CCF62BD45A23D3AD37B2CC8E6D1168F052EB8536E07ADF328E
D4E535A986EC62CFF42BF070F142AD945AD74B9DC7E53B0B78B1C186D5A9C518
082D756D394B8D39B50BD09D78B72E622910E696972F2553ED0EEB16F25B6D79
8871D0640D0ACC03CD2BD48F18EC823A5D48784E90371976C5FAE1625D62879E
4B5A7F10378A9F30C739477EB1F5370DD1D26E6DE100B060B7E57DAA706609D0
33D80A82CC481EAD70AADE0E2676CAC46031A8204CE22B0906EDEDFFC684F2CC
E516A901673C3FFB17E4621145D1DDDA77BE41E745F20E64783500D46EA7DC05
D42B1D6A2AC0C7AE3925BB9317209E37FA2725A0A86C028FAB0F20F238C85528
B8B7946ED4B2A7B7B9AA763F56FFFFE98E8B960C5B9422384915F6481B9AC0E1
3B169DD71090499B415AD8AAFD99AC0AA4FCE9C00A5845D1C7E8F51710B4F1A4
DBD8E6BF4935858F00E6A27320CF515B7B8AF90D0682E89F0DEA5FB293F86FD9
F644C0D8C8FB99DBB010E78DD13AF37A8AFB0869D655CC9E8B8BB20FFD9430E3
FFF709683D46BF7288C1771381D3DA8A12D9F442795179AAD932C1B7609BE49D
684E162BE716A84D6131A8394308DD06BC0ACBF3400DB1B1206F189644097A36
2399BD8C3EEA746ACBA5FC9B87A40860605FC048EE22B02E4EC8DEF7DDBA734B
187D6F48F38DC5E7D697ACEDB4305C22E53AF6480AE86AC85AE6D70EB30D8EDA
1D69BBA4C7F6456725DAD91678ABAF962F4BBCFD8C21691C46ECBF38C38E26B0
A4FF1C7B574AD22D9AD62DEB412D8EC172A6E60CC9D92B9E89FE1A6FCAD90C56
843464AD51C07117D7D6D347CC1C09DE58642CB0326229028DC168AE63B11D15
A49B6E46D8EC621225A259A2C4569E58941EC067EC4C03A2F8D4D19690C2AFC6
09817A83B8CD7BA6EEA79B7034C1128484ADB7FA41251F40E3E00F45773DC204
80C8D6BB75756FFD8F5C7EB9224E8FC35C43DE0D5A4F0514FF307F5ED154EE1D
792890D8FA0E198FA27CECC7A2DE2DE9462DF4721A71DD6E4F3E9E694D6D5649
F5E6E4336D2219D23B611A302610AD7CE0DC20FF7AD70ECFB5C62C42B8B0B6EC
4E1DCA47451CC8919DFF187A589F11E89869BE371938BF65DF1F1DA5439DBC80
2B4A9D803BD635C05B896AF6EB49474FE6289109FB4B754EB4CB28BE158E71B9
09954466C7032C6FD3DE6ADE20EBA3FA90A30C4993CA512F527FEC90A0764E90
27D61CE5938B121AE9F845F1C42E9EAC8E5E51949710ED727C5D7E7F360A82B6
99FEA7BFE9B364A389B0435866F54E0E55D9344A4A39AF1799994DEBD48FC3DB
71B5DA1F4C5BEF5A5898473308AD08EC8E03DA2C33280ACE467AD4A2AB571B26
EB4B4AFE09E11A01244745CF5C9DE9CEF6282F29B195ACFB381C8DB1572BE0B2
5CC9A930C899EE6BFA7E310715327AA223DBD798C6556C6E970FF088A386CB77
A060B529FF519061D19D1AFE2ACB4D3F6A4DB719E4FEDBA7F882054BA0E6B528
F4213907ED29A192447C159A816D12852E2B90ECBE12C65CB262B817D7C33783
3DD53B75B05F357A76FDDC3D01D7EFB91C0F6EE88AC486232CA6612E23D24F35
3022546DDE81E6B4F79EC50CD4ABBBACB8CBA56782088B266946B79BADE117A3
CE61C8E630B470CDEC3D8826E86802F571301D867ACC718B35E05681593ED4F7
2131F263EB75B1547B4DD04D25A140AEE1929CE43617B124FF4BE1B4BB80D8E3
719E67B0ACBAB5DDFDBD497EEC7FC185DEC0C5287CBE61E9072516A093E5578A
8739E190ABC992302A8E601D13AA387781337A4EE5A95B9304CB9EBC3A3D3773
22FC994DAAC423A4B40357D5C6F51F1F8ED8819E41741EBD5CFF2A4FA545841C
4379F02ECD0ACEEA511B20D4D5F72565C43F022989D17CA9AE42D8C2D8E0955D
009995333DBC8305E2D7B929A3CCC0066047253D42A7FCB3C1780A0C4E8BD60D
6C5A002691B4826035454EB98F9D7F73D5EADA826DF6E43993D3B05E305FB06C
893035B2C0BC715F298ABD2AC20D3632772BF8651FCE784AD5831E4602A32970
A60C132A8B43EF2DEC5CF2ED61C2F9C77266204AF421F2CF3CA262052DEA0EF5
69A91F21C6772E261FFAF7CBE6791C791A0005560E62BAB252E0098BF7DE48FF
A7EB2877AA136544BF2723FF4B483C9EAB59483993169243AC5981F77B988950
69ACC060A22CD373872A8F72364714F7CF503D8C2933397FB31AB0E0721BF6B1
BFF9AA0C526A8E5FACA8EE85B2315D4106CFABC41D135BA324F4022D08BA44B9
7EBAC1E38092A59E959F574594D4C8C603A42000EF2D6E27FCD3A60D773DEE68
3E120FA4ECCB3438BFB4EC245A48D6B73E260C27D7895C1B89540EF31B9A74AD
59A514F54313F100C4F6C277C2F16B6692E841CEEB349F4598830F16FB075716
06325E15DDE54B05423EFDC21CAA2AA8E7733830CC6630F796F8CE5A3C8B65B4
A77CFF536FB08CC7B372E99E3F2EB61ECA6959C311A3BDBC1983390F37178BB6
3CF2C0A5747A6C6EC87168C57650B2FC16943470DD9D7C48150591B14E138D91
FEC3FD0397C7EDA10C345F5F68747E05DDC8CCFFE441EF3EAA6B75992D4B60F1
CF29DD0ABAE2368B94CD3662B513FC83A36F2D86C86B60C0F9029985F2625EA0
B5B628A08E7A5971998B3D4554AC20A4B455D0662DBA9CDAFB5EED52EBF1AEEE
57D4DE40F63679DE5CC174D9AED7F0A85A6E2ADCCF49B06731EE262D6846272B
AEC3CE31A5C0FD05B2D610049E1CEB83CF8350244EB0457B81ADE60AC72FFE8B
EF59CB75934CECF47EEE4EAB8B76203EA87CC9E129C1A6065F8C834EAACA821A
C9F1545289753FCD50FD46178004BE2F21C36BF9D04A88DA358F5881148E422D
BEDE0AF5CD890470AA5ADFF54C7988E6C56C2062C0AAB9B0BE1F418380801941
90ADCCE50CA4E3413A1A1A35B62F8D27180A72F03BF4C1D6F00CEDD7484EC6A4
12D81FFE71B814A2ECFB64B25E994F52631FB2ADBEB835E67E3B4C2D3E93C971
B19DA3E86F16128BC1DC58A1E5042EA7DE5B1AC104F3BFE202191D4AB77C0052
2256B8484669AE47D6BF1E8A4678508923FB4AF9CE6DBF5949007FB2D0557A88
D362014EDFD3445233A038A39F0F20D821F125DD9B4396F2684BF4963FC18B01
4180857D6485705A16F55D895A66A025AF7FF70168200E8D99B9931168DE5DEC
F910B7CC3367E692FAA534A5F317B391909F3B136F0F64F8BADA464131FEEA31
380AB18053D6894D6680AF8A9A4EFF1C5EBF59EA66354CB1AF4137FA5D299725
DF4AA2785769C94370B4E3C12D5D684673BCEB1C016B7C469D93B8CCF13C4D3F
2E703CD25D9E066031D4383B2202DB203886107AF158F4FFFAEB738D25F173BD
86C842D1C91DF84A0F042DCACBAA9B054E97386886ECE5A8AC55F5D0B33C60B9
F702DA2B6223EC60BFCAA8E29F309AC14FEC4B241DC8D2AC65DA21D043074AE9
801932C81FE35CFCE0AAE0324A4BA2EB1A312F0865843DE50F8AA35143992377
87DA9B2DC9D1AED22C2EAE8A436BF76BDEAACA47D04546EFFD1AC386043D6E17
8810E70370BAF7C1B52A067A884BEC6465A5814897382EE634241D3A427F9B1A
D26ECD535E46C137084A835CDBBE0B2718C044731B6DB8007749D1B605F39741
3DF96878DBECDD79FBCC7A4425EDDAA7F49257148F05FF52FCC382E4873E0065
A9F726733B0736BC25D02CE66AB3D69B90BF97B72A12C91CBBDB13FF3DE31109
B39281A3A4B51B756F93C58A259860E29451D98F0B263012F9F288321EF3842F
2C9362414E03C6C3EE7BFCD2D8C6A8AC5FFB96E6B82EFD33741743178CF16F2D
4E2880EB4A142EA2CCF76E2AB18FCFD76548FD63B8AB41F3EC49852384915273
A4D397105BB491AC49E08AD9DF0272752554A4ECFFE07B8873D2E9C085BBB027
6E7DD887B4A4D21B7A2FF499333565B6755CFECD5A7D6AFBE3357B27903484CE
3F5D8A621A69BCC42ADF231AF58032B8A905FABBEC1B28D204C9F508DE64083A
A7CD0A8F3C0EEA6E6D9A06D0ECFD7DC1D74BDEA77930F422822BB15D1BFC89A8
565E74F4E7D247EAA5BF1BEC53DD019DFCBC3099ABCB56722BEF7F9C9D4E4602
EDEF6492A8AB391237137B5A5F8E0C72577F941648A1EAB4225390F130D83BC8
D134CBD393DEDD4A99CC2F0BD0358E73D500D9A5CF19043C6EC5655BC753054E
1A5ECE20913D3B458713583686ED9E5C94260E09FE875A6D265BE53C340FF2A1
0826D60E299972AA41009D168D5DD2C006D33E39EEE344BAFC62094361A996BD
8C18BE053CEE56108584D0F2F7B0AE05933EAE2CF8F223E470C0C8F6741A5C45
AE186A2F9E899153F7F2F9E5AB5817ECEE3B272FBD24A46D9F5365A783EBD5BC
945C595C9B5AF7158A098CD4C026A95D677617CAEE4CA4B282C8E1B9BBCB9558
497A66CE72491373354376AEF7374AE1D709F87C7667A58DE4AB7B8519C0DF7B
5A381FF8E1C160FADE7BEB1ABEED9E395F1F1DD95ECC8B4432266F91644C95C3
052ED84AB231B88E71B9D3FE88048DAB5228DFE4900074813A6BAA4F7CF2CC57
A84CFBA77156ECFCF0B9E78BC0358E7EB05B2A2A877C99A2BF9C4A75DB0DBFE6
85EA6305AE4903D01C0D17932A73500C7463DD797D3131E64D27E44A0246B8CD
3C9A2750274BF28E51AF4A1763D5CDA42962D5268E351B333351989A17A96D64
C45F6DCE11C90A03AC912EECBE39F726A1BA9FEE50089F30F3C4AD4AF9C1EF1B
8B350977EAD3B9A24FAC75A6E0F08A1B9C2DCFF9FF07EBE8217BE06FE5B911F5
AD7FF78DB3B33A27309384BB1A7A26F87958F958B10401E58A1B97F91D2CBCF2
C7F013C70C389D87B88FF0658726BEDF26F171C5F46454C42ADDEA0A13DF0F6E
329CE3538618374AD7FF4E83A08486E779A1EF7CFE496A9B0D8B24A78E678E5D
03584BBB3F4CFCCD65FA2517348B3B449177A2844E4E4FFF9A396B070C694369
D598915414B19F8F9A2FCF96A2FED65A9E0D792E8C5BEC2F9FBB43132AB57767
D019D452E7CD9233AA5B447B67656D8754F3E1ED5FCE6DDCE388F2F00295FAE7
99C1E4E1A006EBF8C62F432DBA827C9B41AE77342EB3F9C0EDA6DCBC66574D1B
3D25C43E7F0DD106698BCDF8B3ABB8A3FB18B6A6E1CF95A6A8A8C62DA2556394
A4D92E98FE8568E2BB46D4819B160CF2AC36BFF5FC5A09D6ED1AA688CFB935FF
635B80BCC4B4542D460D7158A42FBF8B0C37678DFB7DC9081FFDF90586807AB3
8A8553E4B5F8DC87B932896960D8FD0CFBEF937D58EC082FE134D63FCE5E5A6A
299480075F37256E75C026214FD89E878548430A29188942F043B9215557D9C4
818F6798333E1036BF46A22331207CF1D12258134D3358639D2B50025F62F33F
A29306EA95FB0DE2794C4387BF1952C287E1B6C4B978CDB693F70E8397961599
F33EE397593F4499D6B7B6E0580904A27F71ACD3544B49F7E37E9C181A42B509
26D7C0CFF0DEC2604EF52210F34362743E2864BBF1A695D15D2540CF94A876C9
F80B65E064DAC055D267FD3410321A22EFBDD4DECC2C7E505CC6AC674D25C328
EE16D1527B5003F22BA2CD16591D73C4137A72819977A9C13394689F9A141507
9402E2BD9735E68EA0F445C80EA153550D6663B44F688525187480503021184E
137774FA958C0EB9CDE40AEF302168D923B1A9D5B0F6D66020301DA1D349AD4A
1044C543B3CCE044D7F9455866C7670D6F1F897FF90B864BB173A3096360473A
024ED229B884ED9C759F90805413FC8DFF2FD2DD10EAA2190E974956ECFD98AF
B36FAEA9EDAED8DEA77B533D00EC5E0D97031985CE75469510A2454CA357F02F
3574A25EF59EC7F28B41B30DCCCE34D1F731CEA1FFA934DEBDC5E37B17F78F4D
E4F817514336EF0C8443F9933ACD2938305FB763678ADAE3FA1E9ED450025111
B7C98E662E68673E7FD6A713E905AD2F4BBD8B13E9454D9C29957B246D94B126
17ABAC3722E8D5E407DE57CF36FE8CAD17D489407C3B6DF2286FBCF3E1891FCE
B413D6B6FC84B873CD212A963AA85A32327C4886824767446172DD2E1BAB819F
E4664741C4BD094B8ACB1383BA390FD1FE3E6D83738550EDAFC646E91BCB710B
500C93211D78067924AEB6F51A2F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (paper.dvi)
@start /Fa 136[45 3[45 45 2[45 1[45 6[45 45 1[45 45 50[45
45 46[{ TeXBase1Encoding ReEncodeFont }11 74.7198 /NimbusMonL-Regu
rf /Fb 172[43 5[69 7[52 69[{}3 74.7198 /CMTI9 rf /Fc
205[28 28 49[{}2 41.511 /CMR5 rf /Fd 251[58 4[{}1 74.7198
/MSAM10 rf /Fe 213[58 42[{}1 74.7198 /MSBM10 rf /Ff 171[35
27[35 5[42 46[32 3[{}4 49.8132 /CMSY6 rf /Fg 167[111
86[35 35{}3 74.7198 /CMEX9 rf /Fh 146[51 2[24 22 105[{}3
41.511 /CMMI5 rf /Fi 209[23 46[{ TeXBase1Encoding ReEncodeFont }1
91.3242 /NimbusRomNo9L-ReguItal rf /Fj 161[38 32[60 2[21
7[38 38 5[60 1[30 30 40[{}8 74.7198 /CMR9 rf /Fk 194[47
10[30 30 5[47 43[{}4 49.8132 /CMR6 rf /Fl 139[24 29 29
3[38 54 20 33 25 22 6[27 34 97[{}11 49.8132 /CMMI6 rf
/Fm 139[28 36 2[39 1[46 1[23 40 6[40 33 33 41 11[52 5[58
10[63 1[58 3[60 1[60 21 21 30[44 8[36 3[34 40 1[49 11[{}23
74.7198 /CMMI9 rf /Fn 149[21 2[38 38 9[51 51 2[55 3[42
1[65 1[54 3[53 58 6[59 8[38 2[43 1[0 3[51 16[77 4[77
6[60 60 1[60 2[38 38 13[60{}24 74.7198 /CMSY9 rf /Fo
206[25 49[{ TeXBase1Encoding ReEncodeFont }1 49.8132
/NimbusRomNo9L-Regu rf /Fp 134[33 1[50 33 37 21 29 29
37 37 37 37 54 21 33 1[21 37 37 21 33 37 33 37 37 9[62
46 1[42 37 46 1[46 54 50 62 42 50 33 25 54 54 46 46 54
50 46 46 6[25 11[19 25 19 4[25 58 38[{ TeXBase1Encoding ReEncodeFont }
50 74.7198 /NimbusRomNo9L-ReguItal rf /Fq 172[33 41 8[22
1[48 18[33 2[33 4[17 4[22 39[{ TeXBase1Encoding ReEncodeFont }8
66.4176 /NimbusRomNo9L-ReguItal rf /Fr 105[33 28[33 1[48
33 33 18 26 22 33 33 33 33 52 18 33 1[18 33 33 22 29
33 29 33 29 12[41 2[48 37 2[59 2[26 2[48 3[44 1[48 7[33
33 33 33 33 33 33 33 33 33 18 17 22 17 7[33 33[37 2[{
 TeXBase1Encoding ReEncodeFont }48 66.4176 /NimbusRomNo9L-Regu
rf /Fs 133[33 37 37 54 37 42 25 29 33 1[42 37 42 62 21
42 1[21 42 37 25 33 42 33 42 37 7[54 4[50 42 54 1[46
58 1[71 50 58 1[29 58 1[46 50 54 54 50 7[25 3[37 37 37
37 37 37 2[19 25 19 2[25 25 37[42 2[{ TeXBase1Encoding ReEncodeFont }53
74.7198 /NimbusRomNo9L-Medi rf /Ft 5[37 3[37 4[37 9[33
6[33 73[37 1[33 33 24[33 37 37 54 37 37 21 29 25 37 37
37 37 58 21 37 21 21 37 37 25 33 37 33 37 33 3[25 1[25
46 54 54 71 54 54 46 42 50 1[42 54 54 66 46 54 29 25
54 54 42 46 54 50 50 54 5[21 21 37 37 37 37 37 37 37
37 37 37 21 19 25 19 2[25 25 25 1[62 22[46 10[42 42 25
1[{ TeXBase1Encoding ReEncodeFont }85 74.7198 /NimbusRomNo9L-Regu
rf /Fu 133[44 50 50 72 50 55 33 39 44 1[55 50 55 83 28
55 33 28 55 50 33 44 55 44 55 50 6[66 72 72 100 72 72
66 55 72 1[61 78 72 94 66 78 1[39 78 78 61 66 72 72 66
72 9[50 50 50 50 50 50 50 2[25 33 5[33 36[55 2[{
 TeXBase1Encoding ReEncodeFont }60 99.6264 /NimbusRomNo9L-Medi
rf /Fv 134[42 2[42 46 23 42 28 1[46 46 46 69 18 2[18
46 46 23 46 46 42 1[46 11[60 51 55 3[65 1[69 5[65 51
55 60 60 20[23 28 45[{ TeXBase1Encoding ReEncodeFont }31
83.022 /NimbusSanL-Regu rf /Fw 24[50 109[50 2[50 55 28
50 33 2[55 55 83 22 1[22 22 55 55 28 55 55 50 55 55 9[94
66 2[66 72 1[66 2[83 55 1[50 3[61 4[66 101 17[28 33 45[{
 TeXBase1Encoding ReEncodeFont }34 99.6264 /NimbusSanL-Regu
rf /Fx 134[83 4[50 83 58 2[91 91 133 42 2[42 2[50 83
1[83 1[83 13[100 13[100 3[108 19[50 42[91 2[{
 TeXBase1Encoding ReEncodeFont }18 149.44 /NimbusSanL-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 157 107 a Fx(Economicall)n(y-Ef\002cient)
40 b(Sentiment)h(Stream)g(Anal)n(ysis)254 445 y Fw(Rober)t(to)29
b(Louren\347o)h(Jr)-5 b(.)270 532 y Fv(Computer)23 b(Science)g(Dept.)
272 619 y(Univ)n(ersidade)h(F)n(eder)o(al)f(de)478 707
y(Minas)g(Ger)o(ais)185 794 y Fw(rober)t(tolojr@dcc.ufmg.br)1606
445 y(Adr)q(iano)30 b(V)-8 b(eloso)1488 532 y Fv(Computer)24
b(Science)f(Dept.)1491 619 y(Univ)n(ersidade)g(F)n(eder)o(al)h(de)1696
707 y(Minas)g(Ger)o(ais)1439 794 y Fw(adr)q(iano)o(v@dcc.ufmg.br)2815
445 y(Adr)q(iano)31 b(P)-5 b(ereir)o(a)2707 532 y Fv(Computer)24
b(Science)f(Dept.)2710 619 y(Univ)n(ersidade)g(F)n(eder)o(al)g(de)2915
707 y(Minas)h(Ger)o(ais)2657 794 y Fw(adr)q(ianoc@dcc.ufmg.br)345
943 y(W)l(agner)29 b(Meir)o(a)g(Jr)-5 b(.)270 1030 y
Fv(Computer)23 b(Science)g(Dept.)272 1117 y(Univ)n(ersidade)h(F)n(eder)
o(al)f(de)478 1205 y(Minas)g(Ger)o(ais)287 1292 y Fw(meir)o
(a@dcc.ufmg.br)1594 943 y(Renato)29 b(F)m(erreir)o(a)1488
1030 y Fv(Computer)24 b(Science)f(Dept.)1491 1117 y(Univ)n(ersidade)g
(F)n(eder)o(al)h(de)1696 1205 y(Minas)g(Ger)o(ais)1488
1292 y Fw(renato@dcc.ufmg.br)2605 943 y(Sr)q(iniv)n(asan)30
b(P)l(ar)t(thasar)o(ath)m(y)2658 1030 y Fv(Dept.)f(of)23
b(Computer)h(Science)2856 1117 y(and)g(Engineer)q(ing)2685
1205 y(The)f(Ohio-State)h(Univ)n(ersity)2611 1304 y Fw(sr)q(ini@cse)o
(.ohio-state)o(.edu)p Black -152 1442 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -152 1442 a -152
1442 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -152 1442 a 0 TeXcolorgray -152 1442 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -152 1442
a 83 x Fu(ABSTRA)-5 b(CT)-152 1645 y Ft(T)g(e)o(xt-based)17
b(social)g(media)g(channels,)h(such)f(as)g(T)-6 b(witter)m(,)16
b(produce)i(torrents)-152 1732 y(of)i(opinionated)h(data)f(about)h(the)
e(most)h(di)n(v)o(erse)g(topics)g(and)h(entities.)k(The)-152
1820 y(analysis)g(of)e(such)i(data)f(\(aka.)38 b(sentiment)24
b(analysis\))h(is)e(quickly)i(becom-)-152 1907 y(ing)f(a)f(k)o(e)o(y)i
(feature)e(in)g(recommender)i(systems)f(and)g(search)g(engines.)38
b(A)-152 1994 y(prominent)23 b(approach)h(to)e(sentiment)g(analysis)g
(is)g(based)h(on)f(the)g(applica-)-152 2081 y(tion)30
b(of)f(classi\002cation)g(techniques,)k(that)c(is,)i(content)f(is)f
(classi\002ed)g(ac-)-152 2168 y(cording)19 b(to)e(the)g(attitude)g(of)g
(the)h(writer)l(.)j(A)c(major)g(challenge,)i(ho)n(we)n(v)o(er)m(,)f(is)
-152 2255 y(that)d(T)-6 b(witter)14 b(follo)n(ws)i(the)f(data)h(stream)
f(model,)h(and)g(thus)g(classi\002ers)f(must)-152 2343
y(operate)21 b(with)e(limited)h(resources,)g(including)h(labeled)g
(data)f(and)g(time)g(for)-152 2430 y(b)o(uilding)31 b(classi\002cation)
f(models.)57 b(Also)30 b(challenging)i(is)d(the)i(f)o(act)f(that)-152
2517 y(sentiment)d(distrib)o(ution)f(may)h(change)g(as)g(the)f(stream)g
(e)n(v)o(olv)o(es.)46 b(In)26 b(this)-152 2604 y(paper)18
b(we)g(address)g(these)f(challenges)i(by)f(proposing)h(algorithms)f
(that)f(se-)-152 2691 y(lect)27 b(rele)n(v)n(ant)g(training)g
(instances)h(at)e(each)i(time)e(step,)j(so)e(that)f(training)-152
2778 y(sets)20 b(are)g(k)o(ept)h(small)e(while)h(pro)o(viding)h(to)f
(the)g(classi\002er)f(the)i(capabilities)-152 2866 y(to)h(suit)f
(itself)g(to,)h(and)g(to)g(reco)o(v)o(er)g(itself)e(from,)i(dif)n
(ferent)g(types)g(of)g(senti-)-152 2953 y(ment)e(drifts.)25
b(Simultaneously)20 b(pro)o(viding)h(capabilities)e(to)h(the)g
(classi\002er)m(,)-152 3040 y(ho)n(we)n(v)o(er)m(,)27
b(is)d(a)h(con\003icting-objecti)n(v)o(e)h(problem,)g(and)g(our)f
(proposed)h(al-)-152 3127 y(gorithms)h(emplo)o(y)g(basic)g(notions)g
(of)f(Economics)h(in)f(order)h(to)f(balance)-152 3214
y(both)e(capabilities.)38 b(W)-6 b(e)23 b(performed)h(the)g(analysis)g
(of)f(e)n(v)o(ents)i(that)e(re)n(v)o(er)o(-)-152 3302
y(berated)g(on)f(T)-6 b(witter)m(,)21 b(and)i(the)f(comparison)h
(against)f(the)g(state-of-the-art)-152 3389 y(re)n(v)o(eals)e(impro)o
(v)o(ements)h(both)f(in)f(terms)g(of)h(error)f(reduction)i(\(up)f(to)f
(14\045\))-152 3476 y(and)h(reduction)g(of)f(training)g(resources)h
(\(by)f(orders)g(of)g(magnitude\).)-152 3680 y Fu(Categories)25
b(and)g(Subject)i(Descriptors)-152 3800 y Ft(H.3.1)j([)p
Fs(Inf)n(ormation)f(Storage)h(and)f(Retrie)o(v)o(al)p
Ft(]:)45 b(Content)30 b(Analysis;)-152 3887 y(I.5.2)19
b([)p Fs(P)o(atter)o(n)f(Recognition)p Ft(]:)23 b(Classi\002er)18
b(Design)h(and)h(Ev)n(aluation)-152 4091 y Fu(General)25
b(T)-9 b(erms)-152 4211 y Ft(Algorithms,)19 b(Experimentation,)h
(Measurement,)g(Performance)-152 4415 y Fu(K)n(eyw)o(ords)-152
4536 y Ft(Sentiment)f(Analysis;)g(Economic)h(Ef)n(\002cienc)o(y;)e
(Streams)h(and)g(Drifts)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -152 4873 a Fr(Permission)26 b(to)f(mak)o(e)h(digital)i
(or)d(hard)g(copies)i(of)e(all)h(or)f(part)g(of)g(this)h(w)o(ork)f(for)
-152 4948 y(personal)f(or)f(classroom)g(use)f(is)g(granted)j(without)e
(fee)h(pro)o(vided)g(that)f(copies)h(are)-152 5022 y(not)c(made)f(or)g
(distrib)o(uted)i(for)e(pro\002t)g(or)g(commercial)i(adv)n(antage)h
(and)d(that)h(copies)-152 5097 y(bear)e(this)g(notice)g(and)g(the)f
(full)h(citation)i(on)d(the)h(\002rst)e(page.)22 b(T)-5
b(o)16 b(cop)o(y)i(otherwise,)g(to)-152 5172 y(republish,)g(to)e(post)f
(on)h(serv)o(ers)g(or)g(to)g(redistrib)o(ute)i(to)e(lists,)g(requires)i
(prior)e(speci\002c)-152 5246 y(permission)i(and/or)h(a)e(fee.)-152
5321 y Fq(SIGIR'14,)g Fr(July)g(6\22611,)g(2014,)g(Gold)h(Coast,)f
(Queensland,)i(Australia.)-152 5396 y(Cop)o(yright)h(2014)d(A)m(CM)g
(978-1-4503-2257-7/14/07)22 b(...$15.00.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 2040 1525 a Fu(1.)99 b(INTR)m(ODUCTION)
2115 1633 y Ft(The)25 b(need)g(for)g(real-time)f(te)o(xt)h(analytics)g
(is)f(clear)h(and)g(present)h(gi)n(v)o(en)2040 1720 y(the)21
b(ubiquitous)h(reach)f(of)f(social)h(media)g(sites)f(lik)o(e)h(F)o
(acebook)g(and)h(T)-6 b(wit-)2040 1807 y(ter)l(.)37 b(Speci\002cally)-5
b(,)24 b(recognizing)i(customer)e(sentiment)g(in)g(real-time)f(and)2040
1894 y(enabling)31 b(adv)o(ertising)f(on-the-\003y)h(ha)o(v)o(e)f(the)f
(potential)h(to)g(be)g(a)g(break-)2040 1981 y(through)g(technology)h
([20].)53 b(Early)28 b(e)o(xamples)i(of)e(such)i(technology)g(in)2040
2069 y(use)f(were)f(demonstrated)i(in)e(this)h(year')l(s)f(National)h
(F)o(ootball)f(League')l(s)2040 2156 y(Superbo)n(wl)k(\(a)f(premier)g
(sporting)h(e)n(v)o(ent)f(in)g(the)g(USA\))g(where)g(a)g(well)2040
2243 y(kno)n(wn)i(manuf)o(acturer)g(of)e Fp(Or)m(eo)h
Ft(cookies)h(took)f(adv)n(antage)h(of)f(a)f(third)2040
2330 y(quarter)15 b(black)o(out)i(\(and)e(associated)h(T)-6
b(witter)13 b(sentiment\))i(to)g(embed)h(a)f(con-)2040
2417 y(te)o(xtual)21 b(adv)o(ertisement.)29 b(Another)21
b(e)o(xample)h(at)e(the)h(same)g(e)n(v)o(ent)g(w)o(as)g(the)2040
2505 y(adv)o(ertisement)i(for)g(a)f(Hollyw)o(ood)i(mo)o(vie,)g(where,)f
(based)h(on)f(the)f(initial)2040 2592 y(adv)o(ertisement)j(which)f
(happened)i(before)f(the)f(start)f(of)h(the)g(\002rst)f(quarter)2040
2679 y(\(and)16 b(associated)g(T)-6 b(witter)14 b(sentiment\),)i(the)f
(decision)h(on)g(which)g(of)f(se)n(v)o(eral)2040 2766
y(possible)24 b(adv)o(ertisements)g(to)f(run)g(later)g(on)g(in)g(the)g
(program)h(w)o(as)f(appar)o(-)2040 2853 y(ently)i(tak)o(en)h(as)g(a)f
(runtime)g(decision.)43 b(Examples)25 b(lik)o(e)h(these)f(are)g(lik)o
(ely)2040 2940 y(to)j(occur)i(more)e(frequently)h(due)h(to)e
(lightweight)g(and)i(easy)e(communi-)2040 3028 y(cation)e(mechanisms,)h
(such)f(as)f(T)-6 b(witter)24 b(microblogging,)k(which)d(mak)o(es)2040
3115 y(people)d(eager)g(not)f(only)h(to)f(e)o(xchange)i(information,)f
(b)o(ut)f(also)g(to)g(con)m(v)o(e)o(y)2040 3202 y(their)e(opinions)h
(and)g(emotions.)25 b(People)20 b(w)o(atch)f(e)n(v)o(ents)h(together)g
(on)g(tele-)2040 3289 y(vision,)d(while)g(tweeting)f(out)h(about)h
(things)f(happening)h(around)g(them.)23 b(As)2040 3376
y(a)d(result,)f(opinionated)i(content)g(is)e(created)h(almost)g(at)f
(the)h(same)g(time)f(the)2040 3463 y(e)n(v)o(ent)f(is)g(happening)i(in)
d(the)h(real)g(w)o(orld,)g(and)g(becomes)h(a)o(v)n(ailable)f(shortly)
2040 3551 y(after)l(.)52 b(The)28 b(analysis)i(of)e(such)i(content)f
(\(aka.)53 b(sentiment)28 b(analysis\))h(in)2040 3638
y(order)24 b(to)g(e)o(xploit)h(the)f(aggre)o(gate)g(sentiment)h(of)f
(the)g(online)g(cro)n(wd)h(goes)2040 3725 y(be)o(yond)f(adv)o
(ertising,)g(and)f(is)f(becoming)i(crucial)f(to)f(recommender)i(sys-)
2040 3812 y(tems)19 b(and)g(search)h(engines.)2115 3899
y(There)27 b(is)g(a)g(gro)n(wing)h(trend)g(in)f(performing)h(sentiment)
g(analysis)f(us-)2040 3986 y(ing)f(classi\002cation-related)f
(techniques:)38 b(a)25 b(process)i(that)e(automatically)2040
4074 y(b)o(uilds)e(a)f(classi\002cation)h(model)g(by)h(learning,)f
(from)g(a)g(set)f(of)h(pre)n(viously)2040 4161 y(labeled)29
b(data)f(\(i.e.,)h(the)f(training-set\),)i(the)f(underlying)g
(characteristics)2040 4248 y(that)23 b(distinguish)g(one)h(sentiment)f
(from)g(another)h(\(i.e.,)e(happiness,)j(mad-)2040 4335
y(ness,)d(surprise,)g(suspicion\).)32 b(The)21 b(success)i(of)e(these)h
(classi\002ers)f(rests)g(on)2040 4422 y(their)i(ability)g(to)h(judge)g
(attitude)f(by)h(means)g(of)g(te)o(xtual-patterns)g(present)2040
4509 y(in)18 b(the)g(data,)g(which)g(usually)h(appear)g(in)e(the)h
(form)g(of)g(\(idiomatic\))g(e)o(xpres-)2040 4597 y(sions)k(and)g
(combinations)g(of)g(w)o(ords.)30 b(Sentiment)21 b(analysis)h(o)o(v)o
(er)g(T)-6 b(witter)2040 4684 y(real-time)22 b(messages,)i(ho)n(we)n(v)
o(er)m(,)g(is)e(particularly)g(challenging,)i(because:)2040
4771 y(\(i\))f(T)-6 b(witter)22 b(follo)n(ws)h(the)h(data)f(stream)h
(model)3287 4739 y Fo(1)3317 4771 y Ft(,)g(requiring)g(classi\002ers)e
(to)2040 4858 y(operate)g(with)f(limited)f(computing)j(and)f(training)f
(resources,)i(and)f(\(ii\))e(ei-)2040 4945 y(ther)25
b(sentiment)g(distrib)o(ution)g(or)g(the)g(characteristics)g(related)g
(to)f(certain)p 0 TeXcolorgray 2040 5066 997 4 v 2048
5122 a Fo(1)2077 5153 y Ft(There)18 b(are)h(three)f(main)g(source)h
(streams)f(in)g(T)-6 b(witter)l(.)21 b(The)d(Firehose)g(pro-)2040
5228 y(vides)27 b(all)f(status)g(updates)i(from)e(e)n(v)o(eryone)i(in)e
(real-time.)45 b(Spritzer)26 b(and)2040 5303 y(Gardenhose)19
b(are)f(tw)o(o)f(sub-samples)i(of)f(the)f(Firehose.)23
b(The)17 b(current)h(sam-)2040 5378 y(pling)h(rates)g(are)g(5\045)g
(and)h(15\045,)f(respecti)n(v)o(ely)-5 b(.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -152 -69 a Ft(sentiments)23 b(may)f(change)i(o)o(v)o(er)e
(time)g(in)g(almost)g(unforeseen)h(w)o(ays)g(\(i.e.,)-152
19 y(sentiment)d(drift\).)-152 182 y Fu(Our)25 b(A)n(ppr)n(oach)h(to)f
(Sentiment)i(Str)n(eam)f(Analysis)-152 302 y Ft(A)d(possible)g(strate)o
(gy)g(to)f(cope)h(with)f(the)h(aforementioned)h(challenges)g(is)-152
390 y(to)e(emplo)o(y)h(selecti)n(v)o(e)f(sampling)h(algorithms)f(in)f
(order)i(to)e(focus)i(only)f(on)-152 477 y(the)17 b(most)g(rele)n(v)n
(ant)h(training)f(e)o(xamples/messages)i(at)e(each)g(time)g(step)g(and)
-152 564 y(to)g(creating)g(training)g(sets)f(from)h(which)g
(classi\002ers)f(are)h(b)o(uilt.)k(Such)c(train-)-152
651 y(ing)22 b(sets)e(are)h(k)o(ept)h(as)f(small)g(as)g(possible)g(to)g
(ensure)h(f)o(ast)f(learning)g(times,)-152 738 y(since)k(a)f(ne)n(w)g
(classi\002er)g(must)g(be)g(b)o(uilt)f(at)h(each)h(time)e(step,)j
(after)d(a)h(ne)n(w)-152 825 y(tar)o(get)f(message)h(arri)n(v)o(es.)36
b(Also,)24 b(messages)g(should)g(be)g(selected)f(so)h(that)-152
913 y(the)19 b(resulting)g(training)g(set)f(pro)o(vides)i(suf)n
(\002cient)e(resources)i(to)e(enable)i(the)-152 1000
y(resulting)29 b(classi\002er)f(to)g(be)g(ef)n(fecti)n(v)o(e)h(under)g
(the)f(occurrence)i(of)e(drifts.)-152 1087 y(In)21 b(order)g(to)f(pro)o
(vide)i(suf)n(\002cient)e(training)h(resources)g(while)g(k)o(eeping)h
(sets)-152 1174 y(small,)28 b(our)f(algorithms)g(select)g(training)f
(messages)i(by)f(taking)g(into)g(ac-)-152 1261 y(count)21
b(tw)o(o)f(important)g(properties,)g(that)g(we)g(de\002ne)g(as)g
(adapti)n(v)o(eness)h(and)-152 1349 y(memorability)-5
b(.)63 b(Informally)-5 b(,)36 b(adapti)n(v)o(eness)d(enables)g(the)f
(classi\002er)g(to)-152 1436 y(adapt)21 b(itself)e(to)g(drifts,)g(and)i
(thus,)f(impro)o(ving)g(adapti)n(v)o(eness)i(in)m(v)o(olv)o(es)e(in-)
-152 1523 y(corporating)i(fresh)f(messages)h(into)f(the)f(current)i
(training)f(set,)f(while)h(dis-)-152 1610 y(carding)k(obsolete)g(ones.)
39 b(Memorability)-5 b(,)26 b(on)f(the)f(other)g(hand,)i(in)m(v)o(olv)o
(es)-152 1697 y(retaining)k(messages)h(belonging)g(to)e(pre-drift)g
(distrib)o(utions,)j(therefore)-152 1784 y(enabling)20
b(the)f(classi\002er)g(to)f(reco)o(v)o(er)i(itself)e(from)h(drifts.)-77
1872 y(W)-6 b(e)14 b(hypothesize)i(that)e(adapti)n(v)o(eness)i(and)f
(memorability)g(are)f(both)h(nec-)-152 1959 y(essary)20
b(to)f(mak)o(e)g(classi\002ers)g(rob)o(ust)g(to)g(drifts.)k(Ho)n(we)n
(v)o(er)m(,)c(gi)n(v)o(en)h(their)e(an-)-152 2046 y(tagonistic)d
(natures,)h(impro)o(ving)f(both)g(properties)g(may)g(lead)g(to)f(a)g
(con\003icting-)-152 2133 y(objecti)n(v)o(e)31 b(problem,)j(in)c(which)
h(the)g(attempt)f(to)g(impro)o(v)o(e)h(memorabil-)-152
2220 y(ity)23 b(further)g(may)g(result)f(in)h(w)o(orsening)h(adapti)n
(v)o(eness.)36 b(Thus,)24 b(we)e(tackle)-152 2307 y(the)h(problem)h(by)
f(proposing)i(selecti)n(v)o(e)e(sampling)h(algorithms)f(based)h(on)-152
2395 y(multi-objecti)n(v)o(e)f(optimization,)g(that)f(is,)h(we)f
(propose)h(to)f(select)g(training)-152 2482 y(messages)i(so)f(that)g
(the)f(resulting)h(classi\002er)g(achie)n(v)o(es)g(a)g(proper)h
(balance)-152 2569 y(between)c(memorability)g(and)g(adapti)n(v)o
(eness.)26 b(Our)19 b(algorithms)g(are)h(based)-152 2656
y(on)c(central)f(concepts)h(in)e(Economics,)j(namely)e
Fp(P)-6 b(ar)m(eto)16 b Ft(and)f Fp(Kaldor)o(-Hic)o(ks)-152
2743 y Ft(ef)n(\002cienc)o(y)i(criteria)e([19,)5 b(22,)g(28].)24
b(The)16 b(P)o(areto)f(Ef)n(\002cienc)o(y)h(criterion)g(infor)o(-)-152
2830 y(mally)21 b(states)f(that)h(\223when)h(some)f(action)g(could)g
(be)g(done)h(to)f(mak)o(e)g(some-)-152 2918 y(one)f(better)e(of)n(f)h
(without)g(hurting)g(an)o(yone)i(else,)d(then)h(it)f(should)i(be)f
(done.)-5 b(\224)-152 3005 y(This)17 b(action)f(is)h(called)f(P)o
(areto)h(impro)o(v)o(ement,)g(and)h(a)e(system)h(is)f(said)h(to)f(be)
-152 3092 y(P)o(areto-Ef)n(\002cient)24 b(if)f(no)i(such)g(impro)o(v)o
(ement)h(is)e(possible.)40 b(The)24 b(Kaldor)o(-)-152
3179 y(Hicks)f(criterion)f(is)g(less)g(stringent)g(and)h(states)f(that)
g(\223when)h(some)g(action)-152 3266 y(could)d(be)g(done)g(to)f(mak)o
(e)h(someone)h(better)e(of)n(f,)g(and)h(this)e(could)i(compen-)-152
3354 y(sate)f(those)h(that)e(are)h(made)h(w)o(orse)f(of)n(f,)g(then)g
(it)f(should)i(be)g(done.)-5 b(\224)-152 3517 y Fu(Contrib)n(utions)26
b(and)g(Findings)-152 3637 y Ft(The)15 b(main)h(contrib)o(ution)g(of)f
(this)g(paper)h(is)e(to)i(e)o(xploit)f(the)g(intuition)g(behind)-152
3725 y(the)j(aforementioned)h(concepts)f(for)g(de)n(vising)g(ne)n(w)g
(algorithms)g(for)f(senti-)-152 3812 y(ment)22 b(stream)f(analysis.)32
b(In)21 b(practice,)h(we)g(claim)f(the)g(follo)n(wing)h(bene\002ts)-152
3899 y(and)e(contrib)o(utions:)p 0 TeXcolorgray -41 4077
a Fn(\017)p 0 TeXcolorgray 38 w Ft(W)-6 b(e)29 b(formulate)h
(simple-to-compute)h(yet)f(ef)n(fecti)n(v)o(e)g(utility)f(mea-)35
4165 y(sures)24 b(that)g(capture)h(the)f(notions)h(of)f(adapti)n(v)o
(eness)h(and)g(memora-)35 4252 y(bility)-5 b(.)23 b(F)o(or)c(instance,)
g(the)h(similarity)e(between)i(messages)g(that)f(are)35
4339 y(candidate)25 b(to)e(compose)i(the)f(current)f(training)h(set)f
(and)h(the)g(tar)o(get)35 4426 y(message,)c(as)f(well)g(as)g(the)g
(freshness)h(of)f(the)h(candidate)g(messages,)35 4513
y(are)g(measures)g(that)f(tend)h(to)g(pri)n(vile)o(ge)g(adapti)n(v)o
(eness.)26 b(In)20 b(contrast,)35 4600 y(candidate)29
b(messages)f(are)g(also)f(randomly)i(shuf)n(\003ed,)h(thus)e(pri)n(vi-)
35 4688 y(le)o(ging)17 b(memorability)-5 b(.)22 b(These)16
b(utility)g(measures)h(result)e(in)h(a)g(utility)35 4775
y(space,)22 b(and)g(the)g(e)o(xtent)f(to)h(which)f(each)h(candidate)h
(message)f(con-)35 4862 y(trib)o(utes)d(to)g(adapti)n(v)o(eness)i(and)f
(memorability)g(depends)h(on)e(where)35 4949 y(it)f(is)h(placed)h(in)e
(this)h(space.)p 0 TeXcolorgray -41 5116 a Fn(\017)p
0 TeXcolorgray 38 w Ft(W)-6 b(e)30 b(e)o(xploit)g(the)h(concept)g(of)f
(P)o(areto)g(Ef)n(\002cienc)o(y)g(by)h(separating)35
5203 y(messages)24 b(\(vie)n(wed)f(as)f(points)h(in)f(the)h(utility)f
(space\))h(that)f(are)g(not)35 5290 y(dominated)h(by)f(an)o(y)f(other)h
(message.)31 b(These)22 b(messages)g(compose)35 5378
y(the)j(P)o(areto)g(frontier)f([28],)j(and)e(messages)h(lying)f(in)g
(this)g(frontier)p 0 TeXcolorgray 0 TeXcolorgray 2227
-69 a(correspond)18 b(to)f(cases)g(for)g(which)g(no)g(P)o(areto)g
(impro)o(v)o(ement)h(is)e(pos-)2227 19 y(sible.)24 b(These)19
b(messages)h(pri)n(vile)o(ge)f(either)g(adapti)n(v)o(eness)i(or)e(mem-)
2227 106 y(orability)-5 b(,)26 b(and)f(thus)g(the)o(y)g(are)f(selected)
h(to)f(compose)i(the)f(current)2227 193 y(training)19
b(set)g(from)g(which)g(the)g(classi\002er)f(is)h(b)o(uilt.)p
0 TeXcolorgray 2151 335 a Fn(\017)p 0 TeXcolorgray 38
w Ft(W)-6 b(e)17 b(e)o(xploit)g(the)h(concept)g(of)f(Kaldor)o(-Hicks)h
(Ef)n(\002cienc)o(y)f(by)h(select-)2227 422 y(ing)k(an)g(additional)g
(set)f(of)h(messages)g(that,)g(although)h(not)f(lying)f(in)2227
509 y(the)15 b(P)o(areto)g(frontier)m(,)g(correspond)i(to)e(a)g(positi)
n(v)o(e)g(trade-of)n(f)h(between)2227 597 y(adapti)n(v)o(eness)j(and)g
(memorability)-5 b(.)23 b(These)18 b(messages)g(are)g(selected)2227
684 y(to)i(compose)h(the)g(current)f(training)g(set)g(from)g(which)h
(the)f(classi\002er)2227 771 y(is)e(b)o(uilt.)p 0 TeXcolorgray
2151 913 a Fn(\017)p 0 TeXcolorgray 38 w Ft(Our)28 b(algorithms)h(may)g
(operate)g(either)f(on)h(an)f(instance-basis)h(or)2227
1000 y(in)19 b(batch-mode,)h(by)g(emplo)o(ying)g(classi\002cation)f
(models)h(based)g(on)2227 1088 y(sentiment)15 b(rules)f(that)g(are)h(k)
o(ept)g(incrementally)g(as)f(the)h(stream)f(e)n(v)o(olv)o(es)2227
1175 y(and)19 b(training)h(sets)e(are)h(modi\002ed.)2115
1327 y(T)-6 b(o)27 b(e)n(v)n(aluate)i(the)e(ef)n(fecti)n(v)o(eness)i
(of)e(our)h(algorithms,)i(we)d(performed)2040 1414 y(e)o(xperiments)15
b(using)h(T)-6 b(witter)13 b(data)h(collected)h(from)g(three)f
(important)h(e)n(v)o(ents)2040 1501 y(in)25 b(2010,)i(spanning)f(dif)n
(ferent)f(sentiments)h(e)o(xpressed)g(in)e(dif)n(ferent)h(lan-)2040
1588 y(guages.)e(Results)14 b(sho)n(w)h(that)g(our)f(algorithms)h(mak)o
(e)g(classi\002ers)f(e)o(xtremely)2040 1675 y(ef)n(fecti)n(v)o(e,)22
b(with)g(gains)g(in)f(prediction)i(performance)g(that)e(are)h(up)g(to)g
(14\045)2040 1763 y(when)e(compared)h(against)e(the)g
(state-of-the-art.)24 b(Further)m(,)19 b(the)g(amount)h(of)2040
1850 y(training)15 b(resources)h(needed)g(is)e(decreased)i(by)g(tw)o(o)
f(orders)g(of)g(magnitude.)2040 2044 y Fu(2.)99 b(RELA)-9
b(TED)26 b(W)o(ORK)2115 2152 y Ft(In)g(the)h(data)g(stream)g(model,)h
(data)f(arri)n(v)o(es)g(at)f(high)h(speed)h(and)f(algo-)2040
2239 y(rithms)20 b(must)h(w)o(ork)g(in)g(real)f(time)g(and)i(with)e
(limited)g(resources.)29 b(Further)m(,)2040 2327 y(in)i(some)h
(domains,)j(algorithms)c(must)h(deal)f(either)g(with)g(b)o(urst)g
(detec-)2040 2414 y(tion)25 b([42])g(and)h(concept)g(drift)e(\(i.e.,)i
(data)f(which)g(nature)h(or)f(distrib)o(ution)2040 2501
y(change)19 b(o)o(v)o(er)e(time\).)22 b(\016liobait)2856
2500 y(\001)2852 2501 y(e)17 b([35])g(cate)o(gorizes)h(such)g(drifts)e
(as)h(sudden,)2040 2588 y(gradual,)24 b(incremental)g(and)f(recurring.)
35 b(When)23 b(data)g(distrib)o(ution)f(or)h(na-)2040
2675 y(ture)g(change)i(o)o(v)o(er)f(time,)f(its)g(rele)n(v)n(ance)h
(must)g(be)f(recalculated)h(to)g(a)o(v)o(oid)2040 2762
y(harming)d(the)f(model.)27 b(This)19 b(kind)i(of)f(data)g(stream)g(is)
f(kno)n(wn)j(as)d(e)n(v)o(olving)2040 2850 y(data)g(streams.)2115
2937 y(Man)o(y)27 b(techniques)h(ha)o(v)o(e)f(been)g(proposed)h(to)e
(allo)n(w)h(accurate)g(classi-)2040 3024 y(\002cation)j(in)g(e)n(v)o
(olving)i(data)e(streams.)57 b(N\372\361ez)31 b(et)f(al.)g([27])h
(proposed)g(a)2040 3111 y(method)23 b(for)e(k)o(eeping)j(a)d(v)n
(ariable)h(training)g(windo)n(w)h(by)f(adjusting)g(inter)o(-)2040
3198 y(nal)27 b(structures)g(of)f(decision)i(trees.)46
b(An)27 b(ensemble)g(of)g(Hoef)n(fding)h(trees)2040 3285
y(ha)o(v)o(e)f(been)h(proposed)h(in)e([5],)i(each)f(tree)f(is)f
(limited)h(to)g(a)g(small)g(subset)2040 3373 y(of)g(attrib)o(utes.)45
b(Gama)27 b(et)g(al.)f([17])h(proposed)h(a)f(mechanism)g(to)g(discard)
2040 3460 y(old)d(information)h(based)g(on)f(sliding)h(windo)n(ws.)39
b(Bifet)23 b(et)h(al.)f([6,)13 b(7])24 b(pro-)2040 3547
y(posed)d(an)g(adapti)n(v)o(e)g(sliding)g(windo)n(w)g(algorithm,)g
(called)f(AD)n(WIN,)f(suit-)2040 3634 y(able)25 b(for)f(data)g(streams)
g(with)g(sudden)i(drifts.)38 b(The)24 b(approach)i(presented)2040
3721 y(in)17 b([24])g(suggests)h(that)e(a)h(time-based)h(for)o(getting)
f(function,)g(which)g(mak)o(es)2040 3808 y(more)27 b(recent)h(observ)n
(ations)g(more)f(signi\002cant,)i(pro)o(vides)f(adapti)n(v)o(eness)2040
3896 y(to)19 b(the)h(classi\002er)l(.)j(Klink)o(enber)o(g)d([23])g
(compares)g(e)o(xample)g(selection,)g(of-)2040 3983 y(ten)h(used)h(in)f
(windo)n(wing)h(approaches)h(with)e(e)o(xample)h(weights.)30
b(Experi-)2040 4070 y(ments)21 b(sho)n(w)g(that)g(both)g(approaches)i
(are)e(ef)n(fecti)n(v)o(e.)28 b(In)21 b([30])g(the)g(authors)2040
4157 y(proposed)e(an)f(approach)i(based)e(on)g(a)g(training)g
(augmentation)h(procedure,)2040 4244 y(which)28 b(automatically)h
(incorporates)g(rele)n(v)n(ant)f(training)g(messages)h(into)2040
4332 y(the)19 b(training-set.)2115 4419 y(Some)25 b(w)o(orks)g(ha)o(v)o
(e)h(focused)g(on)f(feature)g(similarity)-5 b(,)26 b(such)g(as)f(T)-6
b(orres)2040 4506 y(et)26 b(al.)g([31])h(that)f(studied)h(dif)n(ferent)
f(methods)i(for)e(data)h(stream)f(classi\002-)2040 4593
y(cation)d(and)f(proposed)i(a)e(ne)n(w)h(w)o(ay)f(of)g(k)o(eeping)i
(the)e(representati)n(v)o(e)h(data)2040 4680 y(models)c(based)g(on)g
(similarity)e(measures.)24 b(Feng)18 b(et)g(al.)f([16])i(e)o(xtracted)f
(the)2040 4767 y(concept)h(from)f(each)g(data)g(block)g(using)h
(feature)e(similarity)g(probabilities.)2040 4855 y(Masud)k(et)e(al.)f
([25])i(proposed)h(a)e(no)o(v)o(el)h(technique)h(to)e(o)o(v)o(ercome)i
(the)e(lack)2040 4942 y(of)24 b(labeled)g(e)o(xamples)g(by)g(b)o
(uilding)g(models)g(from)f(unlabeled)i(instances)2040
5029 y(and)e(a)f(small)g(amount)h(of)f(labeled)h(ones.)34
b(Zhu)22 b(et)g(al.)g([41])g(emplo)o(yed)i(ac-)2040 5116
y(ti)n(v)o(e)i(learning)h(to)e(produce)j(a)e(classi\002er)f(ensemble)i
(that)f(selects)g(labeled)2040 5203 y(instances)g(from)g(data)g
(streams)f(to)h(b)o(uild)f(classi\002ers.)42 b(Also,)27
b(in)f([37,)14 b(38])2040 5290 y(acti)n(v)o(e)24 b(learning)h
(approaches)g(are)f(presented)h(for)f(data)g(streams)g(that)f(e)o(x-)
2040 5378 y(plicitly)e(handle)i(concept)g(drifts.)32
b(The)o(y)22 b(are)g(based)g(on)h(uncertainty)f([21],)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -152 -69 a Ft(dynamic)17 b(allocation)f(of)f(labeling)h
(ef)n(forts)g(o)o(v)o(er)g(time,)f(and)h(randomization)-152
19 y(of)i(the)f(search)h(space.)24 b(\016liobait)693
18 y(\001)689 19 y(e)17 b(et)g(al.)g([36])g(proposed)j(a)d(system)h
(that)f(im-)-152 106 y(plements)25 b(acti)n(v)o(e)f(learning)h(strate)o
(gies,)g(e)o(xtending)g(the)g(Massi)n(v)o(e)f(Online)-152
193 y(Analysis)c(\(MO)m(A\))f(frame)n(w)o(ork)h([8].)-77
280 y(W)-6 b(orks)26 b(abo)o(v)o(e)g(cited)g(attempt)g(to)f(f)o(ace)h
(concept)h(drift)e(in)h(data)g(stream)-152 367 y(through)18
b(manipulation)f(of)f(classi\002ers,)f(with)h(mechanisms)h(such)g(as)f
(train-)-152 454 y(ing)j(windo)n(ws)g(and)g(decay)g(functions,)g(acti)n
(v)o(e)f(learning)h(and)g(sampling.)24 b(In)-152 542
y(this)29 b(paper)h(we)f(present)h(ne)n(w)g(algorithms)f(that)g(select)
g(high-utility)h(e)o(x-)-152 629 y(amples)e(in)f(order)g(to)g(pro)o
(vide)h(adapti)n(v)o(eness)h(and)e(memorability)h(to)f(the)-152
716 y(classi\002er)l(.)41 b(In)25 b(order)g(to)g(balance)h(adapti)n(v)o
(eness)g(and)g(memorability)-5 b(,)27 b(we)-152 803 y(formalized)20
b(this)g(issue)f(as)h(a)f(multi-objecti)n(v)o(e)h(problem.)26
b(The)20 b(sample)g(se-)-152 890 y(lection)f(is)g(performed)h(using)f
(economic)i(ef)n(\002cienc)o(y)e(criteria:)j(P)o(areto)d(and)-152
977 y(Kaldor)o(-Hicks.)38 b(W)-6 b(e)23 b(did)h(not)g(\002nd)g(in)g
(the)f(recent)i(literature)e(approaches)-152 1065 y(that)g(emplo)o(y)i
(multi-objecti)n(v)o(e)e(models)h(based)g(on)g(economic)g(ef)n
(\002cienc)o(y)-152 1152 y(criteria)19 b(to)f(deal)i(with)e(issues)h
(in)g(the)g(data)g(stream)g(en)m(vironment.)-152 1364
y Fu(3.)100 b(ALGORITHMS)-77 1472 y Ft(In)25 b(this)g(section)h(we)f
(present)h(no)o(v)o(el)g(selecti)n(v)o(e)g(sampling)g(approaches)-152
1559 y(for)d(learning)g(classi\002ers)f(to)g(distinguish)h(between)h
(dif)n(ferent)e(sentiments)-152 1646 y(e)o(xpressed)16
b(in)e(T)-6 b(witter)14 b(messages.)22 b(W)-6 b(e)14
b(start)g(by)h(discussing)g(models)g(based)-152 1734
y(on)31 b(specialized)g(association)g(rules.)58 b(Then)30
b(we)h(present)g(measures)g(for)-152 1821 y(adapti)n(v)o(eness)h(and)e
(memorability)-5 b(,)33 b(and)d(describe)h(the)f(message)g(utility)-152
1908 y(space.)48 b(Finally)-5 b(,)29 b(we)d(discuss)i(P)o(areto)e(and)i
(Kaldor)o(-Hicks)f(criteria,)h(and)-152 1995 y(algorithms)20
b(that)e(select)h(training)g(messages)h(using)g(these)f(criteria.)-152
2155 y Fu(3.1)99 b(Sentiment)27 b(Str)n(eam)f(Analysis)-77
2263 y Ft(In)16 b(our)h(conte)o(xt,)g(the)g(task)f(of)g(learning)h
(sentiment)g(streams)f(is)g(precisely)-152 2350 y(de\002ned)30
b(as)f(follo)n(ws.)52 b(At)29 b(time)f(step)h Fm(n)p
Ft(,)i(we)e(ha)o(v)o(e)g(as)f(input)i(a)e(training)-152
2438 y(set)j(referred)g(to)f(as)h Fn(D)469 2446 y Fl(n)512
2438 y Ft(,)i(which)e(consists)g(of)g(a)f(set)h(of)f(records)i(of)f
(the)-152 2525 y(form)e Fm(<)40 b(d;)13 b(s)232 2533
y Fl(i)298 2525 y Fm(>)p Ft(,)30 b(where)f Fm(d)g Ft(is)f(a)h(message)g
(\(represented)h(as)f(a)g(list)f(of)-152 2612 y(terms\),)e(and)f
Fm(s)252 2620 y Fl(i)303 2612 y Ft(is)f(the)h(sentiment)g(implicit)f
(in)g Fm(d)p Ft(.)40 b(The)25 b(sentiment)g(v)n(ari-)-152
2699 y(able)19 b Fm(s)g Ft(dra)o(ws)g(its)f(v)n(alues)i(from)f(a)g
(pre-de\002ned,)g(\002x)o(ed)g(and)h(discrete)f(set)g(of)-152
2786 y(possibilities)i(\(e.g.,)f Fm(s)434 2794 y Fk(1)468
2786 y Ft(,)g Fm(s)543 2794 y Fk(2)578 2786 y Ft(,)g
Fm(:)13 b(:)g(:)p Ft(,)21 b Fm(s)782 2795 y Fl(k)820
2786 y Ft(\).)27 b(The)20 b(training)h(set)f(is)g(used)h(to)g(b)o(uild)
-152 2873 y(a)i(classi\002er)e(relating)i(te)o(xtual)f(patterns)h(in)f
(the)h(messages)g(to)f(their)g(corre-)-152 2961 y(sponding)29
b(sentiments.)48 b(A)27 b(sequence)h(of)f(future)h(messages)g(referred)
f(to)-152 3048 y(as)21 b Fn(T)45 b Fj(=)25 b Fn(f)p Fm(t)169
3056 y Fl(n)212 3048 y Fm(;)13 b(t)274 3056 y Fl(n)p
Fk(+1)393 3048 y Fm(;)g(:)g(:)h(:)p Fn(g)p Ft(,)21 b(consists)h(of)f
(messages)h(for)f(which)g(only)h(their)-152 3135 y(terms)16
b(are)g(kno)n(wn,)h(while)e(the)h(corresponding)i(sentiments)e(are)g
(unkno)n(wn.)-152 3222 y(The)j(classi\002er)g(obtained)h(from)f
Fn(D)767 3230 y Fl(n)828 3222 y Ft(is)g(used)g(to)g(score)g(the)g
(sentiments)h(for)-152 3309 y(message)j Fm(t)151 3317
y Fl(n)215 3309 y Ft(in)f Fn(T)d Ft(.)32 b(Messages)23
b(in)f Fn(T)41 b Ft(are)22 b(e)n(v)o(entually)h(incorporated)h(into)
-152 3396 y(the)19 b(ne)o(xt)h(training)f(set.)-77 3484
y(There)27 b(are)h(countless)g(strate)o(gies)f(for)h(de)n(vising)g(a)f
(classi\002er)g(for)g(sen-)-152 3571 y(timent)e(analysis.)43
b(Man)o(y)26 b(of)f(these)h(strate)o(gies,)g(ho)n(we)n(v)o(er)m(,)i
(are)d(not)g(well-)-152 3658 y(suited)c(to)g(deal)g(with)f(data)h
(streams.)28 b(Some)21 b(are)f(speci\002cally)h(de)n(vised)h(for)-152
3745 y(of)n(\003ine)h(classi\002cation)f([12,)12 b(14],)23
b(and)g(this)f(is)g(problematic)h(because)g(pro-)-152
3832 y(ducing)e(classi\002ers)d(on-the-\003y)i(w)o(ould)g(be)g
(unacceptably)h(costly)-5 b(.)25 b(In)19 b(such)-152
3920 y(circumstances,)g(alternate)f(classi\002cation)h(strate)o(gies)e
(may)i(become)g(more)-152 4007 y(con)m(v)o(enient)i([33].)-152
4167 y Fu(3.2)99 b(Sentiment)27 b(Rules)e(and)g(Classi\002ers)-77
4275 y Ft(Ne)o(xt)d(we)g(describe)g(classi\002ers)f(composed)j(of)e
(association)h(rules,)f(and)-152 4362 y(ho)n(w)d(these)f(rules)f(are)h
(used)g(for)g(sentiment-scoring.)24 b(Such)18 b(classi\002ers)f(are)
-152 4449 y(b)o(uilt)e(on-the-\003y)h([32,)t(34],)g(being)h(thus)e
(well-suited)h(for)f(sentiment)h(stream)-152 4536 y(analysis,)j(as)g
(sho)n(wn)h(in)f([30].)-152 4723 y Fs(De\002nition)30
b(1)p Fi(.)42 b Ft(A)31 b(sentiment)h(rule)g(is)f(a)h(specialized)g
(association)h(rule)-152 4810 y Fn(X)h(\000)-60 b(!)24
b Fm(s)74 4818 y Fl(i)100 4810 y Ft(,)19 b(where)i(the)f(antecedent)h
Fn(X)30 b Ft(is)20 b(a)g(set)g(of)g(terms)f(\(i.e.,)g(a)h(termset\),)
-152 4897 y(and)k(the)f(consequent)i Fm(s)488 4905 y
Fl(i)536 4897 y Ft(is)e(the)g(predicted)h(sentiment.)35
b(The)23 b(domain)h(for)-152 4985 y Fn(X)29 b Ft(is)17
b(the)h(v)o(ocab)o(ulary)h(of)f(the)g(training)g(set)g
Fn(D)1054 4993 y Fl(n)1097 4985 y Ft(.)23 b(The)17 b(support)i(of)f
Fn(X)29 b Ft(is)17 b(de-)-152 5072 y(noted)k(as)g Fm(\033)s
Fj(\()p Fn(X)11 b Fj(\))p Ft(,)19 b(and)i(is)f(the)g(number)i(of)e
(messages)i(in)e Fn(D)1408 5080 y Fl(n)1471 5072 y Ft(ha)o(ving)h
Fn(X)31 b Ft(as)-152 5159 y(a)19 b(subset.)24 b(The)c(con\002dence)g
(of)f(rule)g Fn(X)33 b(\000)-60 b(!)21 b Fm(s)1045 5167
y Fl(i)1090 5159 y Ft(is)e(denoted)h(as)f Fm(\022)r Fj(\()p
Fn(X)32 b(\000)-60 b(!)22 b Fm(s)1785 5167 y Fl(i)1811
5159 y Fj(\))-152 5290 y Ft(and)e(is)e(gi)n(v)o(en)i(as)316
5242 y Fm(\033)s Fj(\()p Fn(X)27 b([)17 b Fm(s)579 5250
y Fl(i)606 5242 y Fj(\))p 316 5273 320 4 v 390 5341 a
Fm(\033)s Fj(\()p Fn(X)11 b Fj(\))645 5290 y Ft(.)p 0
TeXcolorgray 0 TeXcolorgray 2040 -69 a Fu(Sentiment)27
b(Scoring)2040 52 y Ft(W)-6 b(e)23 b(denote)i(as)f Fn(R)p
Fj(\()p Fm(t)2593 60 y Fl(n)2635 52 y Fj(\))f Ft(the)h(classi\002er)f
(obtained)i(at)e(time)h(step)g Fm(n)p Ft(,)g(by)g(e)o(x-)2040
139 y(tracting)g(rules)g(from)h Fn(D)2690 147 y Fl(n)2732
139 y Ft(.)39 b(Basically)-5 b(,)25 b(the)f(classi\002er)g(is)f(a)h
(poll)h(of)f(rules,)2040 226 y(and)c(each)f(rule)g Fn(fX)32
b(\000)-60 b(!)22 b Fm(s)2717 234 y Fl(i)2743 226 y Fn(g)f(2)h(R)p
Fj(\()p Fm(t)2998 234 y Fl(n)3040 226 y Fj(\))d Ft(is)f(a)h(v)o(ote)g
(gi)n(v)o(en)h(for)f(sentiment)g Fm(s)3988 234 y Fl(i)4014
226 y Ft(.)2040 313 y(Gi)n(v)o(en)g(message)h Fm(t)2538
321 y Fl(n)2580 313 y Ft(,)f(a)g(rule)g(is)f(a)h(v)n(alid)g(v)o(ote)g
(if)f(it)h(is)f(applicable)i(to)f Fm(t)3861 321 y Fl(n)3903
313 y Ft(.)2040 500 y Fs(De\002nition)h(2)p Fi(.)41 b
Ft(A)21 b(rule)h Fn(fX)36 b(\000)-60 b(!)26 b Fm(s)2959
508 y Fl(i)2985 500 y Fn(g)g(2)g(R)p Fj(\()p Fm(t)3249
508 y Fl(n)3292 500 y Fj(\))21 b Ft(is)f(said)i(to)f(be)h(applicable)
2040 587 y(to)d(message)h Fm(t)2417 595 y Fl(n)2480 587
y Fn(2)i(T)38 b Ft(if)18 b(all)g(terms)h(in)g Fn(X)29
b Ft(are)19 b(in)g Fm(t)3351 595 y Fl(n)3393 587 y Ft(.)2115
762 y(W)-6 b(e)20 b(denote)i(as)f Fn(R)2601 770 y Fl(a)2639
762 y Fj(\()p Fm(t)2697 770 y Fl(n)2739 762 y Fj(\))f
Ft(the)h(set)g(of)f(rules)h(in)g Fn(R)p Fj(\()p Fm(t)3455
770 y Fl(n)3497 762 y Fj(\))g Ft(that)f(are)h(applica-)2040
849 y(ble)k(to)f(message)i Fm(t)2544 857 y Fl(n)2586
849 y Ft(.)40 b(Thus,)26 b(only)g(rules)e(in)h Fn(R)3314
857 y Fl(a)3352 849 y Fj(\()p Fm(t)3410 857 y Fl(n)3452
849 y Fj(\))g Ft(are)f(considered)i(as)2040 936 y(v)n(alid)f(v)o(otes)f
(when)h(scoring)g(sentiments)f(in)g Fm(t)3275 944 y Fl(n)3317
936 y Ft(.)39 b(Further)m(,)25 b(we)f(denote)h(as)2040
1023 y Fn(R)2105 991 y Fl(s)2134 1002 y Fh(i)2105 1036
y Fl(a)2165 1023 y Fj(\()p Fm(t)2223 1031 y Fl(n)2265
1023 y Fj(\))20 b Ft(the)g(subset)h(of)g Fn(R)p Fj(\()p
Fm(t)2839 1031 y Fl(n)2881 1023 y Fj(\))f Ft(containing)i(only)f(rules)
f(predicting)h(sen-)2040 1110 y(timent)h Fm(s)2289 1118
y Fl(i)2315 1110 y Ft(.)34 b(V)-10 b(otes)23 b(in)f Fn(R)2700
1079 y Fl(s)2729 1090 y Fh(i)2700 1123 y Fl(a)2760 1110
y Fj(\()p Fm(t)2818 1118 y Fl(n)2860 1110 y Fj(\))g Ft(ha)o(v)o(e)h
(dif)n(ferent)f(weights,)h(depending)i(on)2040 1197 y(the)c
(con\002dence)i(of)f(the)f(corresponding)j(rules.)30
b(The)21 b(weighted)h(v)o(otes)g(for)2040 1285 y(sentiment)c
Fm(s)2384 1293 y Fl(i)2427 1285 y Ft(are)f(a)o(v)o(eraged,)h(gi)n(ving)
g(the)f(score)h(for)f Fm(s)3467 1293 y Fl(i)3510 1285
y Ft(with)g(re)o(gard)h(to)f Fm(t)3970 1293 y Fl(n)4012
1285 y Ft(:)2610 1517 y Fm(s)p Fj(\()p Fm(t)2704 1525
y Fl(n)2746 1517 y Fm(;)c(s)2816 1525 y Fl(i)2842 1517
y Fj(\))21 b(=)2974 1446 y Fg(X)3108 1469 y Fm(\022)r
Fj(\()p Fn(X)32 b(\000)-60 b(!)21 b Fm(s)3397 1477 y
Fl(i)3423 1469 y Fj(\))p 3108 1500 346 4 v 3132 1568
a Fn(jR)3218 1531 y Fl(s)3247 1542 y Fh(i)3218 1576 y
Fl(a)3278 1568 y Fj(\()p Fm(t)3336 1576 y Fl(n)3378 1568
y Fj(\))p Fn(j)3946 1517 y Ft(\(1\))2115 1678 y(Finally)-5
b(,)22 b(the)g(scores)h(are)f(normalized,)i(thus)e(gi)n(ving)h(the)f
(lik)o(elihood)h(of)2040 1765 y(sentiment)c Fm(s)2385
1773 y Fl(i)2430 1765 y Ft(being)h(the)f(attitude)g(in)g(message)g
Fm(t)3344 1773 y Fl(n)3387 1765 y Ft(:)2660 1997 y Fj(^)-45
b Fm(p)p Fj(\()p Fm(s)2758 2005 y Fl(i)2784 1997 y Fn(j)p
Fm(t)2833 2005 y Fl(n)2875 1997 y Fj(\))22 b(=)3083 1949
y Fm(s)p Fj(\()p Fm(t)3177 1957 y Fl(n)3218 1949 y Fm(;)14
b(s)3289 1957 y Fl(i)3315 1949 y Fj(\))p 3018 1980 392
4 v 3056 2033 a Fl(k)3018 2055 y Fg(X)3021 2212 y Fl(j)s
Fk(=1)3141 2126 y Fm(s)p Fj(\()p Fm(t)3235 2134 y Fl(n)3277
2126 y Fm(;)f(s)3347 2134 y Fl(j)3380 2126 y Fj(\))3946
1997 y Ft(\(2\))2040 2368 y Fu(Rule)25 b(Extraction)2040
2488 y Ft(The)d(simplest)g(approach)i(to)d(rule)h(e)o(xtraction)h(is)f
(the)g(of)n(\003ine)g(one.)33 b(In)22 b(this)2040 2576
y(case,)32 b(rule)d(e)o(xtraction)g(is)g(di)n(vided)h(into)f(tw)o(o)g
(steps:)43 b(support)30 b(counting)2040 2663 y(and)23
b(con\002dence)h(computation.)35 b(Once)23 b(the)f(support)i
Fm(\033)s Fj(\()p Fn(X)11 b Fj(\))21 b Ft(is)h(kno)n(wn,)i(it)2040
2750 y(is)h(straightforw)o(ard)i(to)e(compute)i(the)f(con\002dence)h
Fm(\022)r Fj(\()p Fn(X)44 b(\000)-60 b(!)34 b Fm(s)3747
2758 y Fl(i)3774 2750 y Fj(\))25 b Ft(for)g(the)2040
2837 y(corresponding)20 b(rules)d([40].)23 b(There)18
b(are)f(se)n(v)o(eral)h(smart)f(support-counting)2040
2924 y(strate)o(gies)g([1,)7 b(18,)g(40],)18 b(and)g(man)o(y)g(f)o(ast)
f(implementations)h([3])f(that)g(can)h(be)2040 3011 y(used.)29
b(W)-6 b(e)21 b(emplo)o(y)g(the)g(v)o(ertical)g(counting)h(strate)o(gy)
-5 b(,)21 b(which)g(is)f(based)i(on)2040 3099 y(the)16
b(use)f(of)h(in)m(v)o(erted)f(lists)g([39].)22 b(Speci\002cally)-5
b(,)16 b(an)f(in)m(v)o(erted)h(list)f(associated)2040
3186 y(with)j(termset)g Fn(X)11 b Ft(,)18 b(is)g(denoted)i(as)e
Fn(L)p Fj(\()p Fn(X)11 b Fj(\))p Ft(,)17 b(and)j(contains)f(the)f
(identi\002ers)g(of)2040 3273 y(the)29 b(messages)h(in)e
Fn(D)2616 3281 y Fl(n)2688 3273 y Ft(ha)o(ving)h(termset)g
Fn(X)39 b Ft(as)29 b(a)g(subset.)53 b(An)29 b(in)m(v)o(erted)2040
3360 y(list)19 b Fn(L)p Fj(\()p Fn(X)11 b Fj(\))19 b
Ft(is)g(obtained)i(by)g(performing)g(the)f(intersection)g(of)g(tw)o(o)g
(proper)2040 3447 y(subsets)28 b(of)f(termset)g Fn(X)11
b Ft(.)47 b(The)27 b(support)h(of)f(termset)g Fn(X)37
b Ft(is)27 b(gi)n(v)o(en)h(by)f(the)2040 3534 y(cardinality)19
b(of)g Fn(L)p Fj(\()p Fn(X)11 b Fj(\))p Ft(,)18 b(that)h(is,)f
Fm(\033)s Fj(\()p Fn(X)11 b Fj(\))20 b(=)h Fn(jL)p Fj(\()p
Fn(X)11 b Fj(\))p Fn(j)p Ft(.)2115 3622 y(Usually)-5
b(,)26 b(the)e(support)i(for)e(dif)n(ferent)h(sets)f(of)h(terms)f(in)g
Fn(D)3696 3630 y Fl(n)3764 3622 y Ft(are)g(com-)2040
3709 y(puted)i(in)f(a)g(bottom-up)h(w)o(ay)-5 b(,)26
b(which)g(starts)e(by)i(scanning)g(all)e(messages)2040
3796 y(in)e Fn(D)2179 3804 y Fl(n)2243 3796 y Ft(and)g(computing)h(the)
f(support)g(of)g(each)g(term)f(in)h(isolation.)31 b(In)21
b(the)2040 3883 y(ne)o(xt)e(iteration,)f(pairs)g(of)h(terms)f(are)g
(enumerated,)i(and)f(their)f(support)h(v)n(al-)2040 3970
y(ues)d(are)f(calculated)i(by)f(performing)g(the)g(intersection)g(of)f
(the)h(correspond-)2040 4058 y(ing)22 b(proper)h(subsets.)33
b(The)21 b(search)i(for)f(sets)g(of)f(terms)h(proceeds,)i(and)e(the)
2040 4145 y(enumeration)d(process)g(is)f(repeated)g(until)g(the)g
(support)h(v)n(alues)f(for)g(all)g(sets)2040 4232 y(of)28
b(terms)g(in)g Fn(D)2469 4240 y Fl(n)2539 4232 y Ft(are)g(\002nally)g
(computed.)52 b(Ob)o(viously)-5 b(,)31 b(the)d(number)h(of)2040
4319 y(rules)24 b(increases)g(e)o(xponentially)h(with)e(the)h(size)f
(of)h(the)f(v)o(ocab)o(ulary)i(\(i.e.,)2040 4406 y(the)j(number)i(of)e
(distinct)g(terms)g(in)g Fn(D)3093 4414 y Fl(n)3136 4406
y Ft(\),)i(and)f(computational)g(cost)g(re-)2040 4493
y(strictions)20 b(ha)o(v)o(e)g(to)g(be)g(imposed)h(during)g(rule)f(e)o
(xtraction.)27 b(T)-6 b(ypically)h(,)20 b(the)2040 4581
y(search)h(space)h(for)e(rules)h(is)f(restricted)h(by)g(pruning)h
(rules)f(that)f(do)h(not)g(ap-)2040 4668 y(pear)c(frequently)h(in)f
Fn(D)2643 4676 y Fl(n)2702 4668 y Ft(\(i.e.,)f(the)h(minimum)g(support)
h(approach\).)24 b(While)2040 4755 y(such)30 b(restrictions)g(mak)o(e)g
(rule)g(e)o(xtraction)g(feasible,)i(the)o(y)e(also)g(lead)f(to)2040
4842 y(lossy)21 b(classi\002ers,)g(since)g(some)g(rules)g(are)g(pruned)
h(and)f(therefore)g(are)g(not)2040 4929 y(included)f(into)f
Fn(R)p Fj(\()p Fm(t)2574 4937 y Fl(n)2616 4929 y Fj(\))p
Ft(.)2040 5116 y Fs(Online)i(Rule)g(Extraction)p Fi(.)42
b Ft(An)22 b(alternati)n(v)o(e)h(to)f(of)n(\003ine)g(rule)g(e)o
(xtraction)2040 5203 y(is)j(to)g(e)o(xtract)h(rules)f(on-the-\003y)-5
b(.)43 b(Such)26 b(alternati)n(v)o(e,)h(which)f(we)f(call)g(on-)2040
5290 y(line)h(rule)h(e)o(xtraction,)h(has)f(se)n(v)o(eral)g(adv)n
(antages)h([30].)46 b(F)o(or)26 b(instance,)i(it)2040
5378 y(becomes)22 b(possible)g(to)e(ef)n(\002ciently)h(e)o(xtract)g
(rules)g(from)g Fn(D)3602 5386 y Fl(n)3665 5378 y Ft(without)g(per)o(-)
p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -152 -69 a Ft(forming)16 b(support-based)i(pruning.)23
b(The)15 b(idea)h(behind)g(online)g(rule)g(e)o(xtrac-)-152
19 y(tion)j(is)g(to)f(ensure)i(that)f(only)g(applicable)h(rules)f(are)g
(e)o(xtracted)g(by)g(project-)-152 106 y(ing)c Fn(D)17
114 y Fl(n)75 106 y Ft(on)g(a)g(demand-dri)n(v)o(en)i(basis.)22
b(More)16 b(speci\002cally)-5 b(,)15 b(rule)g(e)o(xtraction)-152
193 y(is)21 b(delayed)i(until)e(a)g(message)h Fm(t)687
201 y Fl(n)756 193 y Fn(2)k(T)40 b Ft(is)21 b(gi)n(v)o(en.)31
b(Then,)22 b(terms)f(in)g Fm(t)1686 201 y Fl(n)1750 193
y Ft(are)-152 280 y(used)c(as)e(a)h(\002lter)e(which)i(con\002gures)h
Fn(D)867 288 y Fl(n)925 280 y Ft(in)e(a)h(w)o(ay)g(that)f(only)i(rules)
e(that)h(are)-152 367 y(applicable)25 b(to)f Fm(t)289
375 y Fl(n)355 367 y Ft(can)g(be)h(e)o(xtracted.)38 b(This)24
b(\002ltering)f(process)i(produces)-152 454 y(a)20 b(projected)g
(training-set,)f(denoted)i(as)e Fn(D)974 423 y Ff(\003)972
468 y Fl(n)1015 454 y Ft(,)g(which)h(contains)g(only)g(terms)-152
542 y(that)f(are)g(present)g(in)g(message)h Fm(t)700
550 y Fl(n)742 542 y Ft(.)-152 728 y Fs(Lemma)g(1)p Fi(.)42
b Ft(All)18 b(rules)h(e)o(xtracted)g(from)g Fn(D)1008
697 y Ff(\003)1006 741 y Fl(n)1067 728 y Ft(are)g(applicable)h(to)f
Fm(t)1608 736 y Fl(n)1650 728 y Ft(.)-152 915 y Fs(Pr)o(oof)p
Fi(.)42 b Ft(Since)23 b(all)f(training)h(messages)h(in)f
Fn(D)1078 883 y Ff(\003)1076 928 y Fl(n)1142 915 y Ft(contain)g(only)h
(terms)f(that)-152 1002 y(are)17 b(present)h(in)f(message)h
Fm(t)562 1010 y Fl(n)604 1002 y Ft(,)f(the)g(e)o(xistence)h(of)f(a)g
(rule)g Fn(X)32 b(\000)-60 b(!)21 b Fm(s)1525 1010 y
Fl(i)1568 1002 y Ft(e)o(xtracted)-152 1089 y(from)e Fn(D)73
1058 y Ff(\003)71 1103 y Fl(n)114 1089 y Ft(,)f(such)i(that)f
Fn(X)32 b Fe(*)21 b Fm(t)632 1097 y Fl(n)674 1089 y Ft(,)e(is)f
(impossible.)24 b Fd(\004)-77 1264 y Ft(Lemma)15 b(1)f(implies)g(that)h
(online)g(rule)f(e)o(xtraction)h(assures)g(that)f Fn(R)p
Fj(\()p Fm(t)1700 1272 y Fl(n)1742 1264 y Fj(\))22 b(=)-152
1351 y Fn(R)-87 1359 y Fl(a)-49 1351 y Fj(\()p Fm(t)9
1359 y Fl(n)51 1351 y Fj(\))p Ft(.)51 b(The)28 b(ne)o(xt)g(theorem)h
(states)f(that)g(search)h(space)g(for)f(rules)g(in-)-152
1438 y(duced)c(by)e Fn(D)206 1406 y Ff(\003)204 1451
y Fl(n)269 1438 y Ft(is)f(much)i(narro)n(wer)g(than)f(the)g(search)h
(space)g(for)f(rules)g(in-)-152 1525 y(duced)f(by)f Fn(D)199
1533 y Fl(n)242 1525 y Ft(.)k(Thus,)c(rules)f(can)h(be)g(ef)n
(\002ciently)f(e)o(xtracted)h(from)f Fn(D)1687 1494 y
Ff(\003)1685 1539 y Fl(n)1728 1525 y Ft(,)g(no)-152 1613
y(matter)g(the)g(minimum-support)h(v)n(alue)g(\(which)f(can)g(be)h
(arbitrary)f(lo)n(w\).)-152 1799 y Fs(Theor)o(em)32 b(1)p
Fi(.)42 b Ft(The)32 b(number)i(of)e(rules)g(e)o(xtracted)h(from)f
Fn(D)1494 1768 y Ff(\003)1492 1812 y Fl(n)1567 1799 y
Ft(increases)-152 1887 y(polynomially)21 b(with)d(the)h(number)h(of)f
(distinct)g(terms)f(in)h Fn(D)1414 1895 y Fl(n)1457 1887
y Ft(.)-152 2073 y Fs(Pr)o(oof)p Fi(.)42 b Ft(Let)17
b Fm(k)i Ft(be)f(the)g(number)h(of)f(distinct)f(terms)h(in)f
Fn(D)1344 2081 y Fl(n)1387 2073 y Ft(.)22 b(Since)c(an)g(arbi-)-152
2160 y(trary)j(message)g Fm(t)311 2168 y Fl(n)378 2160
y Fn(2)k(T)40 b Ft(contains)22 b(at)e(most)h Fm(l)g Ft(terms)g(\(with)f
Fm(l)26 b Fn(\034)f Fm(k)r Ft(\),)20 b(then)-152 2248
y(an)o(y)f(rule)g(applicable)g(to)f Fm(t)537 2256 y Fl(n)597
2248 y Ft(can)h(ha)o(v)o(e)g(at)f(most)g Fm(l)i Ft(terms)e(in)g(its)g
(antecedent.)-152 2335 y(That)i(is,)g(for)h(an)o(y)f(rule)h
Fn(fX)35 b(\000)-60 b(!)24 b Fm(s)730 2343 y Fl(i)756
2335 y Fn(g)p Ft(,)c(such)h(that)f Fn(X)35 b(\022)24
b Fm(t)1324 2343 y Fl(n)1366 2335 y Ft(,)c Fn(jX)11 b(j)24
b(\024)g Fm(l)q Ft(.)j(Con-)-152 2422 y(sequently)-5
b(,)23 b(the)e(number)i(of)e(possible)h(rules)f(that)g(are)h
(applicable)g(to)f Fm(t)1728 2430 y Fl(n)1791 2422 y
Ft(is)-152 2509 y Fm(l)15 b Fj(+)-41 2449 y Fg(\000)-1
2476 y Fl(l)-6 2535 y Fk(2)25 2449 y Fg(\001)73 2509
y Fj(+)e Fm(:)g(:)h(:)f Fj(+)322 2449 y Fg(\000)358 2476
y Fl(l)358 2535 y(l)378 2449 y Fg(\001)434 2509 y Fj(=)21
b Fm(O)r Fj(\(2)643 2477 y Fl(l)668 2509 y Fj(\))g Fn(\034)g
Fm(O)r Fj(\()p Fm(k)949 2477 y Fl(l)974 2509 y Fj(\))p
Ft(.)i(Thus,)18 b(the)g(number)h(of)f(appli-)-152 2596
y(cable)i(rules)f(increases)g(polynomially)h(in)f Fm(k)r
Ft(.)k Fd(\004)-152 2870 y Fs(Extending)h(Classi\002ers)g(Dynamically)p
Fi(.)42 b Ft(Let)24 b Fn(R)33 b Fj(=)f Fn(fR)p Fj(\()p
Fm(t)1495 2878 y Fk(1)1530 2870 y Fj(\))21 b Fn([)g(R)p
Fj(\()p Fm(t)1776 2878 y Fk(2)1811 2870 y Fj(\))-152
2957 y Fn([)13 b Fm(:)g(:)h(:)23 b Fn([)h(R)p Fj(\()p
Fm(t)223 2965 y Fl(n)265 2957 y Fj(\))p Fn(g)p Ft(.)48
b(W)m(ith)27 b(online)h(rule)f(e)o(xtraction,)i Fn(R)f
Ft(is)f(e)o(xtended)h(dy-)-152 3045 y(namically)20 b(as)g(messages)g
Fm(t)573 3053 y Fl(i)621 3045 y Fn(2)j(T)38 b Ft(are)20
b(processed.)26 b(Initially)19 b Fn(R)g Ft(is)g(empty;)-152
3132 y(a)24 b(classi\002er)f Fn(R)259 3140 y Fl(t)283
3151 y Fh(i)337 3132 y Ft(is)g(appended)j(to)d Fn(R)h
Ft(e)n(v)o(ery)g(time)g(a)f(message)i Fm(t)1594 3140
y Fl(i)1643 3132 y Ft(is)e(pro-)-152 3219 y(cessed.)i(Producing)c(a)e
(classi\002er)g Fn(R)p Fj(\()p Fm(t)873 3227 y Fl(i)899
3219 y Fj(\))g Ft(in)m(v)o(olv)o(es)g(e)o(xtracting)h(rules)g(from)-152
3306 y(the)33 b(corresponding)h(training-set.)63 b(This)32
b(operation)i(has)e(a)g(signi\002cant)-152 3393 y(computational)20
b(cost,)f(since)g(it)f(is)g(necessary)i(perform)f(multiple)g(accesses)
-152 3481 y(to)24 b Fn(D)-11 3489 y Fl(i)16 3481 y Ft(.)37
b(Dif)n(ferent)23 b(messages)i(in)e Fn(T)50 b Fj(=)30
b Fn(f)p Fm(t)1002 3489 y Fk(1)1037 3481 y Fm(;)13 b(t)1099
3489 y Fk(2)1133 3481 y Fm(;)g(:)h(:)f(:)g(;)g(t)1332
3489 y Fl(m)1390 3481 y Fn(g)24 b Ft(may)g(demand)-152
3568 y(dif)n(ferent)19 b(classi\002ers)g Fn(fR)539 3576
y Fl(t)563 3586 y Fc(1)600 3568 y Fm(;)13 b Fn(R)699
3576 y Fl(t)723 3586 y Fc(2)759 3568 y Fm(;)g(:)h(:)f(:)g(;)19
b Fn(R)1001 3576 y Fl(t)1025 3584 y Fh(m)1084 3568 y
Fn(g)p Ft(,)g(b)o(ut)f(dif)n(ferent)h(classi\002ers)-152
3655 y(may)h(share)h(some)f(rules)g(\(i.e.,)e Fn(fR)773
3663 y Fl(t)797 3674 y Fh(i)846 3655 y Fn(\\)g(R)980
3663 y Fl(t)1004 3674 y Fh(j)1039 3655 y Fn(g)23 b(6)p
Fj(=)g Fn(;)p Ft(\).)i(In)20 b(this)g(case,)g(mem-)-152
3742 y(orization)28 b(is)f(v)o(ery)h(ef)n(fecti)n(v)o(e)g(in)f(a)o(v)o
(oiding)h(w)o(ork)g(replication,)h(reducing)-152 3829
y(the)21 b(number)h(of)f(data)f(access)i(operations.)29
b(Thus,)21 b(before)h(e)o(xtracting)f(rule)-152 3916
y Fn(X)32 b(\000)-60 b(!)21 b Fm(s)69 3924 y Fl(i)96
3916 y Ft(,)16 b(the)g(classi\002er)f(\002rst)g(checks)i(whether)f
(this)g(rule)g(is)f(already)i(in)f Fn(R)p Ft(.)-152 4004
y(If)i(an)h(entry)g(is)g(found,)g(then)g(the)g(rule)g(in)f
Fn(R)h Ft(is)f(used)h(instead)h(of)e(e)o(xtracting)-152
4091 y(it)h(from)g(the)g(training-set.)24 b(If)19 b(it)f(is)h(not)g
(found,)h(the)f(rule)g(is)g(e)o(xtracted)h(from)-152
4178 y(the)f(training-set)g(and)h(then)f(it)f(is)h(inserted)g(into)g
Fn(R)p Ft(.)-152 4485 y Fu(3.3)99 b(Utility)25 b(Space)h(and)f(Selecti)
o(v)o(e)h(Sampling)-77 4593 y Ft(Our)i(approach)h(to)f(sentiment)h
(stream)f(analysis)g(is)g(based)g(on)h(select-)-152 4680
y(ing)23 b(high-utility)g(messages)h(to)e(compose)i(the)f(training)g
(set)f(at)h(each)g(time)-152 4767 y(step.)k(T)m(raining)21
b(sets)f(must)g(pro)o(vide)h(adapti)n(v)o(eness)h(and)f(memorability)g
(to)-152 4855 y(the)28 b(corresponding)i(classi\002ers.)48
b(Impro)o(ving)28 b(adapti)n(v)o(eness)h(and)g(mem-)-152
4942 y(orability)24 b(simultaneously)-5 b(,)26 b(ho)n(we)n(v)o(er)m(,)g
(is)e(a)g(con\003icting-objecti)n(v)o(e)h(prob-)-152
5029 y(lem.)39 b(Instead,)26 b(our)f(approaches)h(create)e(training)h
(sets)f(that)g(balance)h(be-)-152 5116 y(tween)k(adapti)n(v)o(eness)g
(and)g(memorability)-5 b(.)52 b(Speci\002cally)-5 b(,)29
b(at)f(each)h(time)-152 5203 y(step,)e(candidate)f(messages)g(are)f
(placed)h(into)f(an)g(n-dimensional)h(space,)-152 5290
y(in)20 b(which)f(each)h(dimension)h(corresponds)g(to)e(a)g(utility)g
(measure)h(which)g(is)-152 5378 y(either)f(related)g(to)g(adapti)n(v)o
(eness)h(or)f(memorability)-5 b(.)p 0 TeXcolorgray 0
TeXcolorgray 2040 -69 a Fu(Utility)24 b(Measur)n(es)2040
52 y Ft(At)d(each)h(time)f(step,)g(the)h(classi\002er)e(must)i(score)f
(sentiments)h(that)f(are)g(e)o(x-)2040 139 y(pressed)g(in)e(the)h(tar)o
(get)f(message.)26 b(Some)20 b(of)g(the)f(utility)g(measures)i(we)e
(are)2040 226 y(going)25 b(to)f(discuss)h(ne)o(xt)f(are)g(based)h(on)f
(the)g(distance)h(to)f(the)g(tar)o(get)f(mes-)2040 313
y(sage.)31 b(By)21 b(minimizing)g(such)h(distance)g(we)f(are)g
(essentially)h(maximizing)2040 400 y(adapti)n(v)o(eness,)k(since)e(the)
f(selected)h(messages)h(are)e(similar)g(to)g(the)h(tar)o(get)2040
488 y(message.)51 b(As)27 b(for)h(memorability)-5 b(,)30
b(we)e(are)g(going)g(to)g(discuss)g(a)g(utility)2040
575 y(measure)20 b(based)g(on)f(randomly)h(shuf)n(\003ing)g(candidate)g
(messages:)p 0 TeXcolorgray 2151 775 a Fn(\017)p 0 TeXcolorgray
38 w Fs(Distance)g(in)f(space)h Fn(\000)g Ft(The)g(similarity)f
(between)i(the)f(tar)o(get)f(mes-)2227 862 y(sage)k Fm(t)2410
870 y Fl(n)2475 862 y Ft(and)g(an)g(arbitrary)g(message)g
Fm(t)3281 870 y Fl(j)3336 862 y Ft(is)f(gi)n(v)o(en)i(by)f(the)f
(number)2227 949 y(of)k(rules)h(in)f(the)g(classi\002er)g
Fn(R)3045 957 y Fl(a)3083 949 y Fj(\()p Fm(t)3141 957
y Fl(n)3183 949 y Fj(\))g Ft(that)g(are)h(also)f(applicable)h(to)2227
1036 y Fm(t)2255 1044 y Fl(j)2287 1036 y Ft(.)g(Dif)n(ferently)21
b(from)f(traditional)g(measures)h(such)g(as)g(cosine)g(and)2227
1123 y(Jaccard)g([2],)g(the)g(rule-based)h(similarity)e(considers)h
(not)g(only)h(iso-)2227 1211 y(lated)f(terms,)h(b)o(ut)f(also)h
(combination)h(of)f(terms.)30 b(Thus,)22 b(the)g(utility)2227
1298 y(of)d(message)h Fm(t)2608 1306 y Fl(j)2659 1298
y Ft(is)e(gi)n(v)o(en)i(as:)2674 1602 y Fm(U)2726 1610
y Fl(s)2759 1602 y Fj(\()p Fm(t)2817 1610 y Fl(j)2849
1602 y Fj(\))i(=)2992 1553 y Fn(jR)3078 1561 y Fl(a)3116
1553 y Fj(\()p Fm(t)3174 1561 y Fl(n)3216 1553 y Fj(\))17
b Fn(\\)g(R)3396 1561 y Fl(a)3434 1553 y Fj(\()p Fm(t)3492
1561 y Fl(j)3525 1553 y Fj(\))p Fn(j)p 2992 1585 585
4 v 3107 1652 a(jfR)3231 1660 y Fl(a)3270 1652 y Fj(\()p
Fm(t)3328 1660 y Fl(n)3370 1652 y Fj(\))p Fn(gj)3946
1602 y Ft(\(3\))p 0 TeXcolorgray 2151 1839 a Fn(\017)p
0 TeXcolorgray 38 w Fs(Distance)22 b(in)f(time)h Fn(\000)g
Ft(Let)f Fm(\015)t Fj(\()p Fm(t)3075 1847 y Fl(j)3107
1839 y Fj(\))h Ft(be)h(a)f(function)h(that)f(returns)g(the)2227
1926 y(time)f(in)g(which)h(message)g Fm(t)2966 1934 y
Fl(j)3020 1926 y Ft(arri)n(v)o(ed.)31 b(The)21 b(utility)g(of)g
(message)h Fm(t)4000 1934 y Fl(j)2227 2014 y Ft(is)c(gi)n(v)o(en)i(as:)
2882 2318 y Fm(U)2934 2326 y Fl(t)2962 2318 y Fj(\()p
Fm(t)3020 2326 y Fl(j)3052 2318 y Fj(\))h(=)3199 2269
y Fm(\015)t Fj(\()p Fm(t)3301 2277 y Fl(j)3333 2269 y
Fj(\))p 3194 2300 174 4 v 3194 2368 a Fm(\015)t Fj(\()p
Fm(t)3296 2376 y Fl(n)3338 2368 y Fj(\))3946 2318 y Ft(\(4\))p
0 TeXcolorgray 2151 2551 a Fn(\017)p 0 TeXcolorgray 38
w Fs(Memorability)16 b Fn(\000)g Ft(In)h(order)g(to)f(pro)o(vide)i
(memorability)-5 b(,)17 b(the)g(train-)2227 2638 y(ing)22
b(set)g(must)g(contain)h(messages)g(posted)g(in)g(dif)n(ferent)f(time)g
(peri-)2227 2725 y(ods.)27 b(A)20 b(simple)g(w)o(ay)h(to)f(force)g
(this)g(is)g(to)g(generate)h(a)f(random)h(per)o(-)2227
2812 y(mutation)i(of)f(the)h(candidate)g(messages,)h(that)e(is,)h
(randomly)g(shuf-)2227 2899 y(\003ing)i(the)h(candidate)g(messages)g
([15].)43 b(Let)25 b Fm(\013)p Fj(\()p Fm(t)3542 2907
y Fl(j)3574 2899 y Fj(\))h Ft(be)f(a)h(function)2227
2987 y(that)h(returns)h(the)f(position)h(of)f(message)i
Fm(t)3385 2995 y Fl(j)3444 2987 y Ft(in)e(the)h(shuf)n(\003e.)48
b(The)2227 3074 y(utility)18 b(of)h(message)h Fm(t)2805
3082 y Fl(j)2856 3074 y Ft(is)e(gi)n(v)o(en)i(as:)2881
3378 y Fm(U)2933 3386 y Fl(r)2967 3378 y Fj(\()p Fm(t)3025
3386 y Fl(j)3058 3378 y Fj(\))h(=)3200 3329 y Fm(\013)p
Fj(\()p Fm(t)3307 3337 y Fl(j)3339 3329 y Fj(\))p 3200
3360 170 4 v 3212 3428 a Fn(jD)3292 3436 y Fl(n)3335
3428 y Fn(j)3946 3378 y Ft(\(5\))2115 3610 y(Each)28
b(candidate)h(message)g(is)e(judged)i(based)g(on)g(these)f(three)g
(utility)2040 3697 y(measures.)23 b(The)16 b(need)h(to)f(judge)h(one)f
(situation)g(better)g(than)h(another)g(moti-)2040 3784
y(v)n(ates)h(much)h(of)f(Economics,)g(and)h(ne)o(xt)f(we)f(discuss)i
(concepts)g(from)f(Eco-)2040 3871 y(nomics)g(and)g(ho)n(w)f(the)o(y)h
(can)f(be)h(applied)g(to)f(select)g(messages)h(to)f(compose)2040
3959 y(the)i(training)g(set.)2040 4136 y Fu(3.4)99 b(Economic)26
b(Ef\002ciency)2115 4244 y Ft(When)17 b(the)h(society)g(is)f
(economically)i(ef)n(\002cient,)e(an)o(y)h(changes)g(made)g(to)2040
4332 y(assist)g(one)h(person)g(w)o(ould)g(harm)g(another)l(.)24
b(The)18 b(same)h(intuition)f(could)h(be)2040 4419 y(e)o(xploited)d
(for)f(the)g(sak)o(e)h(of)f(selecting)g(messages)h(to)f(compose)h(the)f
(training)2040 4506 y(set)26 b(at)f(each)i(time)e(step.)45
b(In)26 b(this)f(case,)j(a)e(training)g(set)g(is)f(economically)2040
4593 y(ef)n(\002cient)f(if)f(it)h(is)f(only)i(possible)g(to)e(impro)o
(v)o(e)i(memorability)f(at)g(the)g(cost)2040 4680 y(of)19
b(adapti)n(v)o(eness,)h(and)g(vice-v)o(ersa)f([26,)10
b(29].)2115 4767 y(There)20 b(is)f(an)h(alternati)n(v)o(e,)g(less)g
(stringent)g(notion)h(of)f(ef)n(\002cienc)o(y)-5 b(,)20
b(which)2040 4855 y(is)30 b(based)h(on)g(the)g(principle)g(of)f
(compensation)j([13].)57 b(Under)31 b(ne)n(w)g(ar)o(-)2040
4942 y(rangements)18 b(in)f(the)g(society)-5 b(,)17 b(some)h(may)f(be)g
(better)g(of)n(f)g(while)g(others)g(may)2040 5029 y(be)25
b(w)o(orse)f(of)n(f.)40 b(Compensation)26 b(holds)f(if)e(those)i(made)g
(better)f(of)n(f)g(under)2040 5116 y(the)d(ne)n(w)f(set)h(of)f
(conditions)i(could)f(compensate)h(those)f(made)g(w)o(orse)g(of)n(f.)
2040 5203 y(Ne)o(xt)i(we)h(discuss)g(algorithms)f(that)h(e)o(xploit)f
(these)h(tw)o(o)f(notions)i(of)e(eco-)2040 5290 y(nomic)f(ef)n
(\002cienc)o(y)g(in)f(order)h(to)f(select)g(messages)h(to)g(compose)g
(the)g(train-)2040 5378 y(ing)d(sets.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0.75  setgray   tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /P1 { -5.4 0 0 } def
/P2 { 0 2.7 0 } def /P3 { 0 0 2.7 } def /SphericalCoor false def /xUnit
{ 28.45274  mul } def /yUnit { 28.45274  mul } def P1 saveCoor SphericalCoor
{ ConvertToCartesian } if ConvertTo2D /x0 x2D xUnit def /y0 y2D yUnit
def P2 saveCoor SphericalCoor { ConvertToCartesian } if ConvertTo2D
/x1 x2D xUnit x0 add def /y1 y2D yUnit y0 add def P3 saveCoor SphericalCoor
{ ConvertToCartesian } if ConvertTo2D /x2 x2D xUnit x1 add def /y2
y2D yUnit y1 add def P2 saveCoor SphericalCoor { ConvertToCartesian
} if ConvertTo2D /x3 x2D xUnit neg x2 add def /y3 y2D yUnit neg y2
add def [ x0 y0 x1 y1 x2 y2 x3 y3 x0 y0   /Lineto /lineto load def
1  setlinejoin false  Line  closepath end  gsave 0.8  setgray  1. .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.75  setgray  1. .setopacityalpha  
1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0.75  setgray   tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /P1 { -2.7 -3.5625 0
} def /P2 { 2.7 0 0 } def /P3 { 0 0 2.7 } def /SphericalCoor false
def /xUnit { 28.45274  mul } def /yUnit { 28.45274  mul } def P1 saveCoor
SphericalCoor { ConvertToCartesian } if ConvertTo2D /x0 x2D xUnit def
/y0 y2D yUnit def P2 saveCoor SphericalCoor { ConvertToCartesian }
if ConvertTo2D /x1 x2D xUnit x0 add def /y1 y2D yUnit y0 add def P3
saveCoor SphericalCoor { ConvertToCartesian } if ConvertTo2D /x2 x2D
xUnit x1 add def /y2 y2D yUnit y1 add def P2 saveCoor SphericalCoor
{ ConvertToCartesian } if ConvertTo2D /x3 x2D xUnit neg x2 add def
/y3 y2D yUnit neg y2 add def [ x0 y0 x1 y1 x2 y2 x3 y3 x0 y0   /Lineto
/lineto load def 1  setlinejoin false  Line  closepath end  gsave 0.8
 setgray  1. .setopacityalpha  fill  grestore gsave 0.8 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0.75  setgray   tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /P1 { -2.7 0 -2.1375
} def /P2 { 2.7 0 0 } def /P3 { 0 2.7 0 } def /SphericalCoor false
def /xUnit { 28.45274  mul } def /yUnit { 28.45274  mul } def P1 saveCoor
SphericalCoor { ConvertToCartesian } if ConvertTo2D /x0 x2D xUnit def
/y0 y2D yUnit def P2 saveCoor SphericalCoor { ConvertToCartesian }
if ConvertTo2D /x1 x2D xUnit x0 add def /y1 y2D yUnit y0 add def P3
saveCoor SphericalCoor { ConvertToCartesian } if ConvertTo2D /x2 x2D
xUnit x1 add def /y2 y2D yUnit y1 add def P2 saveCoor SphericalCoor
{ ConvertToCartesian } if ConvertTo2D /x3 x2D xUnit neg x2 add def
/y3 y2D yUnit neg y2 add def [ x0 y0 x1 y1 x2 y2 x3 y3 x0 y0   /Lineto
/lineto load def 1  setlinejoin false  Line  closepath end  gsave 0.8
 setgray  1. .setopacityalpha  fill  grestore gsave 0.8 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -5.4
0 2.7 -2.7 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -5.4
0 0 -2.7 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -5.4
2.7 0 -2.7 2.7 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -2.7
-3.5625 2.7 -2.7 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.
 def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0. 
def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
-3.5625 2.7 0 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0. 
def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def
/zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -2.7
-3.5625 0 -2.7 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
-3.5625 0 0 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -2.7
0 -2.025 -2.7 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -2.7
2.7 -2.025 -2.7 2.7 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.
 def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0. 
def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
0 -2.025 0 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
2.7 -2.025 0 2.7 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
0 0 -2.7 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -2.7
2.7 0 -2.7 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -2.7
0 2.7 -2.7 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
535 1277 a
tx@Dict begin { 17.07181 69.70912 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fn(\017)535 1277 y
tx@Dict begin  PutEnd  end
 535
1277 a 535 1277 a
tx@Dict begin { 45.52455 73.40813 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fn(\017)535 1277
y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 65.44139 68.57121 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fn(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 89.91077 44.10184 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fn(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 51.7842 36.98865 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fn(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 22.76227 46.66248 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fn(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 17.07181 41.25638 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fn(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 31.29819 33.57402 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fn(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 65.44139 11.66573 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fn(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 86.78094 7.11317 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fn(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 80.23694 9.95863 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fn(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 51.7842 11.38092 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fn(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 51.7842 2.84544 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fn(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 48.93875 -2.84544 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fn(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 25.60728 21.05518 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fn(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin { 22.76227 18.20973 } PutCoor PutBegin  end
 535 1277 a 516 1294 a Fn(\017)535
1277 y
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -2.7 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 2.7 0 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
0 2.7 0 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 0 0 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 0 0 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
2.7 0 0 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
2.7 0 0 2.7 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
2.7 2.7 2.7 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
2.7 2.7 0 2.7 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
2.7 2.7 0 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 0 2.7 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 0 2.7 2.7 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
2.7 0 2.7 2.7 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
2.7 2.7 2.7 2.7 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -6 1.5 1.875 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535
1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fn(\017)573 1277
y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -4 2 1.875 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535
1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277
a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -4 2 2.875 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end

535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -3.5 2 3.2 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277
a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a
535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -5.5 1 2.2 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fn(\017)573
1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -5 2.9 2.2 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535
1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end

573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -4.5 2.1 1.7 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535
1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277
a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -4.5 1.4 1.9 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end

535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -4.7 0.8 1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277
a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a
535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -5.6 0.8 1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fn(\017)573
1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -5.6 0.8 1.6 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535
1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end

573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -5.6 0.8 0.2 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535
1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277
a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -5.6 1.8 0.2 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end

535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.75 1.5 -2.25 1.0 mul /z ED 1.0 mul /y ED 1 mul /x
ED ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 90.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535
1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 90.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED Beta sin 0 lt {/SignFlag -1}{/SignFlag 1}ifelse def Alpha
sin 0 gt {/AlphaOffset 180 -90 SignFlag mul add} {/AlphaOffset 180
90 SignFlag mul add} ifelse def /Delta Beta SignFlag mul sin Alpha
SignFlag mul AlphaOffset add sin mul Alpha SignFlag mul AlphaOffset
add cos atan neg 90 add def /Gamma Beta SignFlag mul sin Alpha SignFlag
mul AlphaOffset add cos mul neg Alpha SignFlag mul AlphaOffset add
sin atan def 270 Delta sub rotate /Rho 90 Gamma add Delta add def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277
a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.5 0.5 -2.25 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535
1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 90.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 90.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED Beta sin 0 lt {/SignFlag -1}{/SignFlag 1}ifelse def Alpha
sin 0 gt {/AlphaOffset 180 -90 SignFlag mul add} {/AlphaOffset 180
90 SignFlag mul add} ifelse def /Delta Beta SignFlag mul sin Alpha
SignFlag mul AlphaOffset add sin mul Alpha SignFlag mul AlphaOffset
add cos atan neg 90 add def /Gamma Beta SignFlag mul sin Alpha SignFlag
mul AlphaOffset add cos mul neg Alpha SignFlag mul AlphaOffset add
sin atan def 270 Delta sub rotate /Rho 90 Gamma add Delta add def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end

535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.5 1.5 -2 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535
1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 90.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 90.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED Beta sin 0 lt {/SignFlag -1}{/SignFlag 1}ifelse def Alpha
sin 0 gt {/AlphaOffset 180 -90 SignFlag mul add} {/AlphaOffset 180
90 SignFlag mul add} ifelse def /Delta Beta SignFlag mul sin Alpha
SignFlag mul AlphaOffset add sin mul Alpha SignFlag mul AlphaOffset
add cos atan neg 90 add def /Gamma Beta SignFlag mul sin Alpha SignFlag
mul AlphaOffset add cos mul neg Alpha SignFlag mul AlphaOffset add
sin atan def 270 Delta sub rotate /Rho 90 Gamma add Delta add def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277
a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a
535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.5 2.5 -2 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 90.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535
1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 90.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED Beta sin 0 lt {/SignFlag -1}{/SignFlag 1}ifelse def Alpha
sin 0 gt {/AlphaOffset 180 -90 SignFlag mul add} {/AlphaOffset 180
90 SignFlag mul add} ifelse def /Delta Beta SignFlag mul sin Alpha
SignFlag mul AlphaOffset add sin mul Alpha SignFlag mul AlphaOffset
add cos atan neg 90 add def /Gamma Beta SignFlag mul sin Alpha SignFlag
mul AlphaOffset add cos mul neg Alpha SignFlag mul AlphaOffset add
sin atan def 270 Delta sub rotate /Rho 90 Gamma add Delta add def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fn(\017)573 1277
y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277
a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1.5 2.2 -2 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 90.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 90.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED Beta sin 0 lt {/SignFlag -1}{/SignFlag 1}ifelse def Alpha
sin 0 gt {/AlphaOffset 180 -90 SignFlag mul add} {/AlphaOffset 180
90 SignFlag mul add} ifelse def /Delta Beta SignFlag mul sin Alpha
SignFlag mul AlphaOffset add sin mul Alpha SignFlag mul AlphaOffset
add cos atan neg 90 add def /Gamma Beta SignFlag mul sin Alpha SignFlag
mul AlphaOffset add cos mul neg Alpha SignFlag mul AlphaOffset add
sin atan def 270 Delta sub rotate /Rho 90 Gamma add Delta add def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end

535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 2.5 -1.7 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535
1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 90.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 90.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED Beta sin 0 lt {/SignFlag -1}{/SignFlag 1}ifelse def Alpha
sin 0 gt {/AlphaOffset 180 -90 SignFlag mul add} {/AlphaOffset 180
90 SignFlag mul add} ifelse def /Delta Beta SignFlag mul sin Alpha
SignFlag mul AlphaOffset add sin mul Alpha SignFlag mul AlphaOffset
add cos atan neg 90 add def /Gamma Beta SignFlag mul sin Alpha SignFlag
mul AlphaOffset add cos mul neg Alpha SignFlag mul AlphaOffset add
sin atan def 270 Delta sub rotate /Rho 90 Gamma add Delta add def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277
a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a
535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1.1 1.5 -1.7 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 90.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535
1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 90.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED Beta sin 0 lt {/SignFlag -1}{/SignFlag 1}ifelse def Alpha
sin 0 gt {/AlphaOffset 180 -90 SignFlag mul add} {/AlphaOffset 180
90 SignFlag mul add} ifelse def /Delta Beta SignFlag mul sin Alpha
SignFlag mul AlphaOffset add sin mul Alpha SignFlag mul AlphaOffset
add cos atan neg 90 add def /Gamma Beta SignFlag mul sin Alpha SignFlag
mul AlphaOffset add cos mul neg Alpha SignFlag mul AlphaOffset add
sin atan def 270 Delta sub rotate /Rho 90 Gamma add Delta add def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fn(\017)573 1277
y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277
a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1.1 1.1 -1.9 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 90.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 90.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED Beta sin 0 lt {/SignFlag -1}{/SignFlag 1}ifelse def Alpha
sin 0 gt {/AlphaOffset 180 -90 SignFlag mul add} {/AlphaOffset 180
90 SignFlag mul add} ifelse def /Delta Beta SignFlag mul sin Alpha
SignFlag mul AlphaOffset add sin mul Alpha SignFlag mul AlphaOffset
add cos atan neg 90 add def /Gamma Beta SignFlag mul sin Alpha SignFlag
mul AlphaOffset add cos mul neg Alpha SignFlag mul AlphaOffset add
sin atan def 270 Delta sub rotate /Rho 90 Gamma add Delta add def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end

535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1.8 0.4 -2.5 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535
1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 90.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 90.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED Beta sin 0 lt {/SignFlag -1}{/SignFlag 1}ifelse def Alpha
sin 0 gt {/AlphaOffset 180 -90 SignFlag mul add} {/AlphaOffset 180
90 SignFlag mul add} ifelse def /Delta Beta SignFlag mul sin Alpha
SignFlag mul AlphaOffset add sin mul Alpha SignFlag mul AlphaOffset
add cos atan neg 90 add def /Gamma Beta SignFlag mul sin Alpha SignFlag
mul AlphaOffset add cos mul neg Alpha SignFlag mul AlphaOffset add
sin atan def 270 Delta sub rotate /Rho 90 Gamma add Delta add def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277
a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a
535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.325 -3.25 1.875 1.0 mul /z ED 1.0 mul /y ED 1 mul
/x ED ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch
} false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end
 end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535
1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277 a Fn(\017)573 1277
y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277
a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.5 -3.8 1.5 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277 a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end

535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1.5 -3.8 1.5 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535
1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277
a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a
535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -2.5 -4 1.5 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535
1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277 a Fn(\017)573 1277
y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277
a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -2.5 -3.5 1.7 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277 a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end

535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -2.5 -3.8 1.1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535
1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277
a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a
535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.4 -3 1.5 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535
1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277 a Fn(\017)573 1277
y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277
a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -2 -3.8 0.7 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277 a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end

535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -2.3 -3.8 0.7 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535
1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277
a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a
535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1.3 -3.8 0.7 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535
1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277 a Fn(\017)573 1277
y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277
a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.3 -3.8 0.7 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277 a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end

535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.3 -3.2 2.2 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535
1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277
a Fn(\017)573 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 573 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a
535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ -5.4 3.0375 0 -5.4 0 0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta
20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ -5.4 0 3.0375 -5.4 0 0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta
20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -3.2 2.2 0.6 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535
1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Ft(Adapti)n(v)o(eness)934
1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 934 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -2.2 2.2 0.6 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535
1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Ft(\(Distance)19 b(in)f(time\))1074
1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1074 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -6.4 -1 3.1725 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535
1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Ft(\(Distance)h(in)f(space\))1107
1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1107 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -5.4 0 3.1725 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535
1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Ft(Adapti)n(v)o(eness)934
1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 934 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ -3.1725 0 -2.1375 0 0 -2.1375  tx@3DPlotDict begin   /RotX
0.  def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1. 
def /yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def
/dzUnit 1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.
 def /Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta
cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /SphericalCoor
false def /xUnit { 28.45274  mul } def /yUnit { 28.45274  mul } def
convertStackTo2D end   /Lineto /lineto load def 1  setlinejoin false
 Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 0 3.1725 -2.1375 0 0 -2.1375  tx@3DPlotDict begin   /RotX
0.  def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1. 
def /yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def
/dzUnit 1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.
 def /Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta
cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /SphericalCoor
false def /xUnit { 28.45274  mul } def /yUnit { 28.45274  mul } def
convertStackTo2D end   /Lineto /lineto load def 1  setlinejoin false
 Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -3.1725 0 -2.025 1.0 mul /z ED 1.0 mul /y ED 1 mul /x
ED ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 90.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 90.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED Beta sin 0 lt {/SignFlag -1}{/SignFlag 1}ifelse def Alpha
sin 0 gt {/AlphaOffset 180 -90 SignFlag mul add} {/AlphaOffset 180
90 SignFlag mul add} ifelse def /Delta Beta SignFlag mul sin Alpha
SignFlag mul AlphaOffset add sin mul Alpha SignFlag mul AlphaOffset
add cos atan neg 90 add def /Gamma Beta SignFlag mul sin Alpha SignFlag
mul AlphaOffset add cos mul neg Alpha SignFlag mul AlphaOffset add
sin atan def 270 Delta sub rotate /Rho 90 Gamma add Delta add def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277 a Ft(Memorability)945 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 945 1277 a 535
1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0.4 -0.1 -2.4 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535
1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 90.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 90.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED Beta sin 0 lt {/SignFlag -1}{/SignFlag 1}ifelse def Alpha
sin 0 gt {/AlphaOffset 180 -90 SignFlag mul add} {/AlphaOffset 180
90 SignFlag mul add} ifelse def /Delta Beta SignFlag mul sin Alpha
SignFlag mul AlphaOffset add sin mul Alpha SignFlag mul AlphaOffset
add cos atan neg 90 add def /Gamma Beta SignFlag mul sin Alpha SignFlag
mul AlphaOffset add cos mul neg Alpha SignFlag mul AlphaOffset add
sin atan def 270 Delta sub rotate /Rho 90 Gamma add Delta add def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277
a Ft(Adapti)n(v)o(eness)934 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 934 1277 a 535 1277
a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 1.4 0.1 -2.4 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535
1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 90.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 90.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED Beta sin 0 lt {/SignFlag -1}{/SignFlag 1}ifelse def Alpha
sin 0 gt {/AlphaOffset 180 -90 SignFlag mul add} {/AlphaOffset 180
90 SignFlag mul add} ifelse def /Delta Beta SignFlag mul sin Alpha
SignFlag mul AlphaOffset add sin mul Alpha SignFlag mul AlphaOffset
add cos atan neg 90 add def /Gamma Beta SignFlag mul sin Alpha SignFlag
mul AlphaOffset add cos mul neg Alpha SignFlag mul AlphaOffset add
sin atan def 270 Delta sub rotate /Rho 90 Gamma add Delta add def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 535 1277
a Ft(\(Distance)h(in)f(time\))1074 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1074 1277 a
535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ -3.1725 -3.5625 0 0 -3.5625 0  tx@3DPlotDict begin   /RotX
0.  def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1. 
def /yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def
/dzUnit 1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.
 def /Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta
cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /SphericalCoor
false def /xUnit { 28.45274  mul } def /yUnit { 28.45274  mul } def
convertStackTo2D end   /Lineto /lineto load def 1  setlinejoin false
 Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 0 -3.5625 3.1725 0 -3.5625 0  tx@3DPlotDict begin   /RotX
0.  def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1. 
def /yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def
/dzUnit 1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.
 def /Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta
cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /SphericalCoor
false def /xUnit { 28.45274  mul } def /yUnit { 28.45274  mul } def
convertStackTo2D end   /Lineto /lineto load def 1  setlinejoin false
 Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -2.69 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277 a Ft(Memorability)945 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 945 1277 a 535
1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 -4.6 3.375 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED
ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535
1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277
a Ft(\(Distance)h(in)f(space\))1107 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1107 1277
a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.5 -3.6 3.375 1.0 mul /z ED 1.0 mul /y ED 1 mul /x
ED ConvertTo2D x2D y2D end  28.45274 mul exch 28.45274 mul exch } false
/N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535
1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 180.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 535 1277 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 535 1277 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 535 1277 a 535 1277
a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 180.  def
/RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def
/dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def
/RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1 Beta sin def
/Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def Alpha cos 0 gt {/AlphaOffset 180}{/AlphaOffset
0}ifelse def /Delta Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset
add sin mul Alpha SignFlag mul AlphaOffset add cos atan neg 90 add
def /Gamma Beta SignFlag mul sin Alpha SignFlag mul AlphaOffset add
cos mul neg Alpha SignFlag mul AlphaOffset add sin atan def 270 Delta
sub rotate /Rho 180 Delta add def Rho cos Rho sin 0 0 ] concat} tx@Dict
/TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if /TMatrix
[ TMatrix CM ] cvx def /cp [ currentpoint ] cvx def CM CP T STV CM
matrix invertmatrix matrix concatmatrix exch exec concat cp moveto
 end
 535 1277 a Ft(Adapti)n(v)o(eness)934 1277 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 934 1277
a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 535 1277 a
tx@Dict begin  PutEnd  end
 535 1277 a 21 2251
a Fs(Figur)o(e)g(1:)23 b(Illustrati)o(v)o(e)c(example.)24
b(The)18 b(3D)h(utility)e(space.)p 0 TeXcolorgray -152
2539 a Fu(P)o(ar)n(eto)26 b(Fr)n(ontier)-152 2659 y Ft(Messages)18
b(that)e(are)g(candidate)h(to)f(compose)i(the)e(training)g(set)g(at)g
(time)f(step)-152 2746 y Fm(n)29 b Ft(are)g(placed)h(in)e(a)h
(3-dimensional)h(space,)i(according)e(to)f(their)f(utility)-152
2833 y(measures,)19 b(as)f(sho)n(wn)h(in)f(Figure)g(1.)23
b(Thus,)18 b(each)h(message)g Fm(a)f Ft(is)f(a)h(point)h(in)-152
2921 y(such)h(utility)e(space,)i(and)f(is)g(gi)n(v)o(en)g(as)g
Fm(<)i(U)995 2929 y Fl(s)1029 2921 y Fj(\()p Fm(a)p Fj(\))p
Fm(;)12 b(U)1215 2929 y Fl(t)1243 2921 y Fj(\()p Fm(a)p
Fj(\))p Fm(;)h(U)1430 2929 y Fl(r)1465 2921 y Fj(\()p
Fm(a)p Fj(\))21 b Fm(>)p Ft(.)-152 3107 y Fs(De\002nition)e(3)p
Fi(.)41 b Ft(Message)21 b Fm(a)f Ft(is)f(said)h(to)g(dominate)h
(message)g Fm(b)f Ft(if)n(f)f(both)i(of)-152 3194 y(the)e(follo)n(wing)
h(conditions)g(are)f(hold:)p 0 TeXcolorgray -41 3382
a Fn(\017)p 0 TeXcolorgray 38 w Fm(U)87 3390 y Fl(s)121
3382 y Fj(\()p Fm(a)p Fj(\))h Fn(\025)h Fm(U)375 3390
y Fl(s)409 3382 y Fj(\()p Fm(b)p Fj(\))d Ft(and)i Fm(U)699
3390 y Fl(t)727 3382 y Fj(\()p Fm(a)p Fj(\))h Fn(\025)g
Fm(U)982 3390 y Fl(t)1010 3382 y Fj(\()p Fm(b)p Fj(\))d
Ft(and)i Fm(U)1300 3390 y Fl(r)1335 3382 y Fj(\()p Fm(a)p
Fj(\))g Fn(\025)h Fm(U)1589 3390 y Fl(r)1624 3382 y Fj(\()p
Fm(b)p Fj(\))p 0 TeXcolorgray -41 3609 a Fn(\017)p 0
TeXcolorgray 38 w Fm(U)87 3617 y Fl(s)121 3609 y Fj(\()p
Fm(a)p Fj(\))f Fm(>)h(U)375 3617 y Fl(s)409 3609 y Fj(\()p
Fm(b)p Fj(\))d Ft(or)h Fm(U)653 3617 y Fl(t)681 3609
y Fj(\()p Fm(a)p Fj(\))i Fm(>)g(U)936 3617 y Fl(t)964
3609 y Fj(\()p Fm(b)p Fj(\))e Ft(or)f Fm(U)1208 3617
y Fl(r)1243 3609 y Fj(\()p Fm(a)p Fj(\))j Fm(>)g(U)1498
3617 y Fl(r)1533 3609 y Fj(\()p Fm(b)p Fj(\))-152 3796
y Ft(Therefore,)d(the)f(dominance)i(operator)f(relates)f(tw)o(o)g
(messages)h(so)g(that)f(the)-152 3883 y(result)25 b(of)h(the)f
(operation)i(has)e(tw)o(o)h(possibilities)f(as)h(sho)n(wn)g(in)f
(Figure)g(2)-152 3970 y(\(Left\):)e(\(i\))c(one)h(message)g(dominates)h
(another)f(or)f(\(ii\))g(the)g(tw)o(o)h(messages)-152
4058 y(do)g(not)f(dominate)h(each)f(other)l(.)-152 4244
y Fs(De\002nition)25 b(4)p Fi(.)42 b Ft(T)m(raining)27
b(set)f Fn(P)736 4252 y Fl(n)813 4244 y Fj(=)36 b Fn(f)p
Fm(d)987 4252 y Fk(1)1021 4244 y Fm(;)14 b(d)1096 4252
y Fk(2)1130 4244 y Fm(;)f(:)g(:)g(:)g(;)h(d)1341 4252
y Fl(m)1399 4244 y Fn(g)27 b Ft(is)f(said)g(to)g(be)-152
4332 y(P)o(areto-ef)n(\002cient)21 b(at)f(time)h(step)g
Fm(n)p Ft(,)g(if)f Fn(P)902 4340 y Fl(n)970 4332 y Fn(\022)25
b(D)1114 4340 y Fl(n)1177 4332 y Ft(and)d(there)f(is)f(no)i(pair)f(of)
-152 4419 y(messages)f Fj(\()p Fm(d)219 4427 y Fl(i)245
4419 y Fm(;)13 b(d)319 4427 y Fl(j)352 4419 y Fj(\))21
b Fn(2)g(P)529 4427 y Fl(n)590 4419 y Ft(for)e(which)g
Fm(d)937 4427 y Fl(i)982 4419 y Ft(dominates)h Fm(d)1348
4427 y Fl(j)1380 4419 y Ft(.)-77 4593 y(Messages)d(that)e(are)g(not)g
(dominated)i(by)e(an)o(y)h(other)g(message,)g(lie)f(on)h(the)-152
4680 y(P)o(areto)25 b(frontier)g([28].)42 b(Therefore,)26
b(by)g(de\002nition,)g(the)f(P)o(areto-ef)n(\002cient)-152
4767 y(training)i(set)f(at)f(time)h(step)g Fm(n)p Ft(,)i
Fn(P)747 4775 y Fl(n)789 4767 y Ft(,)g(is)d(composed)j(by)f(all)e(the)i
(messages)-152 4855 y(lying)17 b(in)g(the)g(P)o(areto)f(frontier)h
(that)f(is)h(b)o(uilt)f(from)g Fn(D)1215 4863 y Fl(n)1258
4855 y Ft(.)22 b(There)17 b(are)g(ef)n(\002cient)-152
4942 y(algorithms)h(for)g(b)o(uilding)g(and)g(maintaining)h(the)f(P)o
(areto)f(frontier)m(,)g(and)i(we)-152 5029 y(emplo)o(yed)27
b(the)e(algorithm)h(proposed)g(in)f([11])h(which)f(ensures)h
Fm(O)r Ft(\()p Fn(jD)1751 5037 y Fl(n)1795 5029 y Fn(j)p
Ft(\))-152 5116 y(comple)o(xity)-5 b(.)49 b(W)-6 b(e)27
b(denote)h(the)f(process)h(of)f(e)o(xploiting)h(P)o(areto-ef)n
(\002cient)-152 5203 y(training)15 b(sets)f(as)h(P)o(areto-Ef)n
(\002cient)e(Selecti)n(v)o(e)h(Sampling,)h(or)g(simply)f(PESS.)-152
5290 y(Figure)j(2)f(\(Middle\))h(sho)n(ws)g(an)f(illustrati)n(v)o(e)g
(e)o(xample)h(of)g(a)f(P)o(areto)g(frontier)-152 5378
y(b)o(uilt)j(from)f(arbitrary)h(points)h(in)f(the)g(utility)f(space.)p
0 TeXcolorgray 0 TeXcolorgray 2040 -69 a Fu(Kaldor)l(-Hicks)25
b(Region)2040 52 y Ft(The)20 b(PESS)e(strate)o(gy)i(follo)n(ws)g(a)f
(stringent)i(criterion,)e(which)h(tends)h(to)f(se-)2040
139 y(lect)15 b(only)h(fe)n(w)f(messages)i(to)e(compose)i(the)e
(training)h(sets.)21 b(As)15 b(a)h(result,)f(the)2040
226 y(training)g(sets)g(may)h(become)g(e)o(xcessi)n(v)o(ely)g(small)f
(and)h(prone)g(to)f(noise.)22 b(The)2040 313 y(Kaldor)o(-Hicks)28
b(criterion,)i(on)f(the)f(other)h(hand,)i(follo)n(ws)d(a)g
(cost-bene\002t)2040 400 y(analysis)22 b(and)g(circumv)o(ents)g(the)f
(small)g(training)g(set)g(problem)h(by)f(stating)2040
488 y(that)e(ef)n(\002cienc)o(y)h(is)f(achie)n(v)o(ed)h(if)f(those)h
(that)f(are)g(made)h(better)f(of)n(f)g(could)h(in)2040
575 y(theory)i(compensate)g(those)f(that)g(are)g(made)g(w)o(orse)h(of)n
(f.)28 b(Thus,)22 b(under)f(the)2040 662 y(Kaldor)o(-Hicks)30
b(criterion,)h(an)f(utility)f(measure)h(can)g(compensate)h(other)2040
749 y(utility)20 b(measures,)i(and)g(therefore,)f(this)g(criterion)g
(selects)g(messages)h(that)2040 836 y(are)i(located)g(inside)g(a)g(re)o
(gion)h(which)f(is)f(belo)n(w)i(the)f(P)o(areto)f(frontier)l(.)38
b(T)-6 b(o)2040 923 y(de\002ne)23 b(this)f(re)o(gion)h(we)f(must)g
(\002rst)g(de\002ne)g(the)h(o)o(v)o(erall)f(utility)g(of)g(a)g(mes-)
2040 1011 y(sage.)2040 1197 y Fs(De\002nition)j(5)p Fi(.)42
b Ft(Assuming)28 b(that)f(all)f(measures)i(are)f(equally)g(important,)
2040 1285 y(the)19 b(o)o(v)o(erall)g(utility)f(of)h(an)g(arbitrary)g
(message)h Fm(d)3329 1293 y Fl(i)3377 1285 y Fn(2)h(D)3508
1293 y Fl(n)3570 1285 y Ft(is:)2483 1492 y Fm(U)8 b Fj(\()p
Fm(d)2613 1500 y Fl(i)2639 1492 y Fj(\))22 b(=)f Fm(U)2824
1500 y Fl(s)2857 1492 y Fj(\()p Fm(d)2927 1500 y Fl(i)2953
1492 y Fj(\))c(+)g Fm(U)3129 1500 y Fl(t)3157 1492 y
Fj(\()p Fm(d)3227 1500 y Fl(i)3253 1492 y Fj(\))g(+)g
Fm(U)3429 1500 y Fl(r)3464 1492 y Fj(\()p Fm(d)3534 1500
y Fl(i)3560 1492 y Fj(\))356 b Ft(\(6\))2040 1613 y(That)24
b(is,)h(the)g(o)o(v)o(erall)f(utility)g(of)g(a)h(message)g(is)f(gi)n(v)
o(en)h(as)f(the)h(sum)g(of)f(its)2040 1700 y(utility)e(measures.)36
b(Also,)24 b(the)e(baseline)i(message,)g(which)g(is)e(denoted)i(as)2040
1787 y Fm(d)2080 1756 y Ff(\003)2116 1787 y Ft(,)18 b(is)h(de\002ned)g
(as:)2345 1995 y Fm(d)2385 1959 y Ff(\003)2442 1995 y
Fj(=)i Fn(f)p Fm(d)2601 2003 y Fl(i)2649 1995 y Fn(2)h(P)2776
2003 y Fl(n)2818 1995 y Fn(j8)p Fm(d)2922 2003 y Fl(j)2976
1995 y Fn(2)f(P)3102 2003 y Fl(n)3165 1995 y Fj(:)h Fm(U)8
b Fj(\()p Fm(d)3338 2003 y Fl(i)3364 1995 y Fj(\))22
b Fn(\024)f Fm(U)8 b Fj(\()p Fm(d)3627 2003 y Fl(j)3659
1995 y Fj(\))p Fn(g)219 b Ft(\(7\))2040 2116 y(That)22
b(is,)f(the)h(baseline)h(is)e(the)h(message)h(lying)f(in)g(the)g
(frontier)f(for)h(which)2040 2203 y(the)d(o)o(v)o(erall)g(utility)f
(assumes)i(its)e(lo)n(west)h(v)n(alue.)2115 2377 y(The)d(Kaldor)o
(-Hicks)h(re)o(gion)g(is)g(composed)h(of)f(messages)h(for)e(which)h
(the)2040 2465 y(o)o(v)o(erall)22 b(utility)g(is)g(not)g(smaller)g
(than)h(the)f(baseline)h(o)o(v)o(erall)g(utility)-5 b(.)32
b(Such)2040 2552 y(baseline)26 b(utility)f(is)g(the)h(utility)f
(associated)h(with)f(the)h(message)h(lying)e(in)2040
2639 y(the)19 b(P)o(areto)g(frontier)f(for)h(which)g(the)g(o)o(v)o
(erall)g(utility)g(is)f(the)h(lo)n(west.)2040 2826 y
Fs(De\002nition)24 b(6)p Fi(.)42 b Ft(T)m(raining)26
b(set)g Fn(K)2930 2834 y Fl(n)3008 2826 y Fj(=)34 b Fn(f)p
Fm(d)3180 2834 y Fk(1)3215 2826 y Fm(;)13 b(d)3289 2834
y Fk(2)3323 2826 y Fm(;)h(:)f(:)g(:)g(;)g(d)3534 2834
y Fl(m)3593 2826 y Fn(g)26 b Ft(is)f(said)h(to)g(be)2040
2913 y(Kaldor)o(-Hicks-ef)n(\002cient)i(at)g(time)g(step)g
Fm(n)p Ft(,)j(if)c Fn(P)3355 2921 y Fl(n)3436 2913 y
Fn(\022)39 b(K)3593 2921 y Fl(n)3675 2913 y Fn(\022)g(D)3833
2921 y Fl(n)3876 2913 y Ft(,)30 b(and)2040 3000 y(there)19
b(is)g(no)g(message)h Fm(d)2682 3008 y Fl(i)2729 3000
y Fn(2)i(K)2860 3008 y Fl(n)2921 3000 y Ft(such)e(that)f
Fm(U)8 b Fj(\()p Fm(d)3338 2968 y Ff(\003)3374 3000 y
Fj(\))21 b Fm(>)g(U)8 b Fj(\()p Fm(d)3636 3008 y Fl(i)3662
3000 y Fj(\))p Ft(.)2115 3174 y(W)-6 b(e)15 b(denote)h(the)g(process)g
(of)f(e)o(xploiting)i(Kaldor)o(-Hicks-ef)n(\002cient)e(train-)2040
3262 y(ing)28 b(sets)g(as)g(Kaldor)o(-Hicks-Ef)n(\002cient)f(Selecti)n
(v)o(e)g(Sampling,)j(or)e(simply)2040 3349 y(KHSS.)17
b(Figure)i(2)f(\(Right\))h(sho)n(ws)g(an)g(illustrati)n(v)o(e)f(e)o
(xample)i(of)e(a)h(Kaldor)o(-)2040 3436 y(Hicks)g(re)o(gion)h(b)o(uilt)
e(from)h(arbitrary)g(points)g(in)g(the)g(utility)f(space.)2040
3624 y Fu(4.)99 b(EXPERIMENT)-9 b(AL)27 b(EV)-13 b(ALU)-6
b(A)d(TION)2115 3732 y Ft(In)28 b(this)f(section)i(we)f(empirically)g
(analyze)h(the)f(performance)h(of)f(our)2040 3819 y(classi\002ers.)h(W)
-6 b(e)21 b(emplo)o(y)h(the)f(mean)h(squared)g(error)f(\(MSE\))f(as)h
(the)g(basic)2040 3907 y(e)n(v)n(aluation)j(measure)f(in)g(our)g(e)o
(xperiments,)h(since)f(we)f(are)h(primarily)g(in-)2040
3994 y(terested)f(in)g(e)n(v)n(aluating)h(sentiment)f(scoring)g(gi)n(v)
o(en)h(by)f(Equation)h(2.)31 b(The)2040 4081 y(MSE)18
b(measure)i(is)f(gi)n(v)o(en)g(as:)2512 4306 y Fb(MSE)30
b Fj(=)2829 4258 y(1)p 2797 4289 104 4 v 2797 4357 a
Fn(jT)19 b(j)2956 4235 y Fg(X)2923 4395 y Ff(8)p Fl(t)2982
4406 y Fh(i)3008 4395 y Ff(2T)3099 4306 y Fj(\(1)e Fn(\000)23
b Fj(^)-44 b Fm(p)o Fj(\()p Fm(s)3365 4314 y Fl(i)3391
4306 y Fn(j)p Fm(t)3440 4314 y Fl(i)3467 4306 y Fj(\)\))3527
4271 y Fk(2)3946 4306 y Ft(\(8\))2040 4506 y(where)30
b Fm(s)2288 4514 y Fl(i)2344 4506 y Ft(is)g(the)g(correct)g(sentiment)h
(associated)f(with)g(message)h Fm(t)3913 4514 y Fl(i)3981
4506 y Fn(2)2040 4593 y(T)19 b Ft(,)j(and)28 b Fj(^)-44
b Fm(p)o Fj(\()p Fm(s)2375 4601 y Fl(i)2401 4593 y Fn(j)p
Fm(t)2450 4601 y Fl(i)2477 4593 y Fj(\))21 b Ft(is)f(the)i(sentiment)f
(score)h(assigned)h(by)e(the)h(classi\002er)e(to)2040
4680 y(message)g Fm(t)2340 4688 y Fl(i)2387 4680 y Fn(2)i(T)d
Ft(.)2115 4767 y(T)-6 b(o)14 b(e)n(v)n(aluate)h(the)g(amount)g(of)g
(computing)h(resources)f(used)g(as)g(the)f(stream)2040
4855 y(e)n(v)o(olv)o(es,)i(we)e(emplo)o(y)i(the)e(RAM-Hours)h(measure)g
([9],)g(where)g(e)n(v)o(ery)g(RAM-)2040 4942 y(Hour)23
b(equals)g(a)f(GB)g(of)g(RAM)h(deplo)o(yed)h(for)e(1)h(hour)g(of)f(e)o
(x)o(ecution.)35 b(W)-6 b(e)2040 5029 y(also)26 b(e)n(v)n(aluate)g(the)
g(amount)g(of)f(training)h(resources)g(used)g(o)o(v)o(er)g(time,)g(as)
2040 5116 y(the)d(number)g(of)f(messages)i(labeled)f(during)g(the)f
(process.)34 b(W)-6 b(e)22 b(used)h(Ho-)2040 5203 y(ef)n(fding)g
(Adapti)n(v)o(e)g(T)m(rees)f([4,)12 b(10])22 b(\(abbre)n(viated)i(as)e
(HA)-8 b(T\),)21 b(Acti)n(v)o(e)h(Clas-)2040 5290 y(si\002er)e([37,)11
b(38])20 b(\(abbre)n(viated)i(as)e(A)m(C\),)g(and)h(Incremental)g(Lazy)
f(Associa-)2040 5378 y(ti)n(v)o(e)d(Classi\002er)g([30])g(\(abbre)n
(viated)i(as)e(ILA)m(C\))g(as)g(baselines.)23 b(All)17
b(datasets)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 287 888 a
tx@Dict begin { 17.07181 75.39958 } PutCoor PutBegin  end
 287 888 a 267 904
a Fm(a)287 888 y
tx@Dict begin  PutEnd  end
 287 888 a 287 888 a
tx@Dict begin { 17.07181 69.70912 } PutCoor PutBegin  end
 287 888 a 268 904
a Fn(\016)287 888 y
tx@Dict begin  PutEnd  end
 287 888 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 45.52455
73.40813 17.07181 69.70912    /Lineto /lineto load def 1  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0
add  DotLine  grestore end


@endspecial 287 888 a
tx@Dict begin { 45.52455 80.5213 } PutCoor PutBegin  end
 287 888 a 271 914 a Fm(b)287 888
y
tx@Dict begin  PutEnd  end
 287 888 a 287 888 a
tx@Dict begin { 45.52455 73.40813 } PutCoor PutBegin  end
 287 888 a 268 904 a Fn(\016)287
888 y
tx@Dict begin  PutEnd  end
 287 888 a 287 888 a
tx@Dict begin { 65.44139 68.57121 } PutCoor PutBegin  end
 287 888 a 268 904 a Fn(\016)287
888 y
tx@Dict begin  PutEnd  end
 287 888 a 287 888 a
tx@Dict begin { 89.91077 44.10184 } PutCoor PutBegin  end
 287 888 a 268 904 a Fn(\016)287
888 y
tx@Dict begin  PutEnd  end
 287 888 a 287 888 a
tx@Dict begin { 51.7842 36.98865 } PutCoor PutBegin  end
 287 888 a 268 904 a Fn(\016)287
888 y
tx@Dict begin  PutEnd  end
 287 888 a 287 888 a
tx@Dict begin { 22.76227 46.66248 } PutCoor PutBegin  end
 287 888 a 268 904 a Fn(\016)287
888 y
tx@Dict begin  PutEnd  end
 287 888 a 287 888 a
tx@Dict begin { 17.07181 41.25638 } PutCoor PutBegin  end
 287 888 a 268 904 a Fn(\016)287
888 y
tx@Dict begin  PutEnd  end
 287 888 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow  moveto } def
/ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale
 false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow  moveto
} def /ArrowB { } def  [ 45.52455 73.40813 31.29819 36.41946    /Lineto
/lineto load def 1  setlinejoin false Line  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   3.0 0 -1 add  DotLine  grestore end
 
@endspecial
287 888 a
tx@Dict begin { 31.29819 28.45274 } PutCoor PutBegin  end
 287 888 a 270 904 a Fm(c)287 888 y
tx@Dict begin  PutEnd  end
 287 888
a 287 888 a
tx@Dict begin { 31.29819 33.57402 } PutCoor PutBegin  end
 287 888 a 268 904 a Fn(\016)287 888 y
tx@Dict begin  PutEnd  end
 287
888 a 287 888 a
tx@Dict begin { 65.44139 11.66573 } PutCoor PutBegin  end
 287 888 a 268 904 a Fn(\016)287 888 y
tx@Dict begin  PutEnd  end

287 888 a 287 888 a
tx@Dict begin { 86.78094 7.11317 } PutCoor PutBegin  end
 287 888 a 268 904 a Fn(\016)287 888
y
tx@Dict begin  PutEnd  end
 287 888 a 287 888 a
tx@Dict begin { 80.23694 9.95863 } PutCoor PutBegin  end
 287 888 a 268 904 a Fn(\016)287
888 y
tx@Dict begin  PutEnd  end
 287 888 a 287 888 a
tx@Dict begin { 51.7842 11.38092 } PutCoor PutBegin  end
 287 888 a 268 904 a Fn(\016)287
888 y
tx@Dict begin  PutEnd  end
 287 888 a 287 888 a
tx@Dict begin { 51.7842 2.84544 } PutCoor PutBegin  end
 287 888 a 268 904 a Fn(\016)287
888 y
tx@Dict begin  PutEnd  end
 287 888 a 287 888 a
tx@Dict begin { 48.93875 -2.84544 } PutCoor PutBegin  end
 287 888 a 268 904 a Fn(\016)287
888 y
tx@Dict begin  PutEnd  end
 287 888 a 287 888 a
tx@Dict begin { 25.60728 21.05518 } PutCoor PutBegin  end
 287 888 a 268 904 a Fn(\016)287
888 y
tx@Dict begin  PutEnd  end
 287 888 a 287 888 a
tx@Dict begin { 22.76227 18.20973 } PutCoor PutBegin  end
 287 888 a 268 904 a Fn(\016)287
888 y
tx@Dict begin  PutEnd  end
 287 888 a 287 888 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -2.7 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 287 888 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end


@endspecial 287 888 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 287 888 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 2.7 0 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
0 2.7 0 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 0 0 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 0 0 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
2.7 0 0 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
2.7 0 0 2.7 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
2.7 2.7 2.7 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
2.7 2.7 0 2.7 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
2.7 2.7 0 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 0 2.7 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 0 2.7 2.7 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
2.7 0 2.7 2.7 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
2.7 2.7 2.7 2.7 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
287 888 a
tx@Dict begin  PutEnd  end
 287 888 a 1468 904 a
tx@Dict begin { 17.07181 69.70912 } PutCoor PutBegin  end
 1468 904 a 1449 921 a
Fn(\017)1468 904 y
tx@Dict begin  PutEnd  end
 1468 904 a 1468 904 a
tx@Dict begin { 45.52455 73.40813 } PutCoor PutBegin  end
 1468 904 a 1449
921 a Fn(\017)1468 904 y
tx@Dict begin  PutEnd  end
 1468 904 a 1468 904 a
tx@Dict begin { 65.44139 68.57121 } PutCoor PutBegin  end
 1468 904
a 1449 921 a Fn(\017)1468 904 y
tx@Dict begin  PutEnd  end
 1468 904 a 1468 904 a
tx@Dict begin { 89.91077 44.10184 } PutCoor PutBegin  end

1468 904 a 1449 921 a Fn(\017)1468 904 y
tx@Dict begin  PutEnd  end
 1468 904 a 1468
904 a
tx@Dict begin { 51.7842 36.98865 } PutCoor PutBegin  end
 1468 904 a 1449 921 a Fn(\017)1468 904 y
tx@Dict begin  PutEnd  end
 1468 904
a 1468 904 a
tx@Dict begin { 22.76227 46.66248 } PutCoor PutBegin  end
 1468 904 a 1449 921 a Fn(\017)1468 904 y
tx@Dict begin  PutEnd  end

1468 904 a 1468 904 a
tx@Dict begin { 17.07181 41.25638 } PutCoor PutBegin  end
 1468 904 a 1449 921 a Fn(\016)1468
904 y
tx@Dict begin  PutEnd  end
 1468 904 a 1468 904 a
tx@Dict begin { 31.29819 33.57402 } PutCoor PutBegin  end
 1468 904 a 1449 921 a Fn(\016)1468
904 y
tx@Dict begin  PutEnd  end
 1468 904 a 1468 904 a
tx@Dict begin { 65.44139 11.66573 } PutCoor PutBegin  end
 1468 904 a 1449 921 a Fn(\016)1468
904 y
tx@Dict begin  PutEnd  end
 1468 904 a 1468 904 a
tx@Dict begin { 86.78094 7.11317 } PutCoor PutBegin  end
 1468 904 a 1449 921 a Fn(\016)1468
904 y
tx@Dict begin  PutEnd  end
 1468 904 a 1468 904 a
tx@Dict begin { 80.23694 9.95863 } PutCoor PutBegin  end
 1468 904 a 1449 921 a Fn(\016)1468
904 y
tx@Dict begin  PutEnd  end
 1468 904 a 1468 904 a
tx@Dict begin { 51.7842 11.38092 } PutCoor PutBegin  end
 1468 904 a 1449 921 a Fn(\016)1468
904 y
tx@Dict begin  PutEnd  end
 1468 904 a 1468 904 a
tx@Dict begin { 51.7842 2.84544 } PutCoor PutBegin  end
 1468 904 a 1449 921 a Fn(\016)1468
904 y
tx@Dict begin  PutEnd  end
 1468 904 a 1468 904 a
tx@Dict begin { 48.93875 -2.84544 } PutCoor PutBegin  end
 1468 904 a 1449 921 a Fn(\016)1468
904 y
tx@Dict begin  PutEnd  end
 1468 904 a 1468 904 a
tx@Dict begin { 25.60728 21.05518 } PutCoor PutBegin  end
 1468 904 a 1449 921 a Fn(\016)1468
904 y
tx@Dict begin  PutEnd  end
 1468 904 a 1468 904 a
tx@Dict begin { 22.76227 18.20973 } PutCoor PutBegin  end
 1468 904 a 1449 921 a Fn(\016)1468
904 y
tx@Dict begin  PutEnd  end
 1468 904 a 1468 904 a
tx@Dict begin { 45.52455 110.96552 } PutCoor PutBegin  end
 1468 904 a 1252 929 a Ft(P)o(areto)18
b(frontier)1468 904 y
tx@Dict begin  PutEnd  end
 1468 904 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 45.52455 105.27505 113.81097 39.83366 60.0353 42.96349  
1. 0.1 0.  /c ED /b ED /a ED false OpenCurve  gsave 0.8 SLW 0.5  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0  setgray  [ 22.76227 46.66248 51.7842 36.98865 89.91077
44.10184 65.44139 68.57121 45.52455 73.40813 17.07181 69.70912   /Lineto
/lineto load def 1  setlinejoin false Polygon  gsave 0.5  setgray 
0.4 .setopacityalpha  fill  grestore end
 
@endspecial 1468
904 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -2.7 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 1468 904 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
1468 904 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1468 904 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 2.7 0 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
0 2.7 0 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 0 0 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 0 0 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
2.7 0 0 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
2.7 0 0 2.7 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
2.7 2.7 2.7 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
2.7 2.7 0 2.7 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
2.7 2.7 0 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 0 2.7 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 0 2.7 2.7 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
2.7 0 2.7 2.7 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
2.7 2.7 2.7 2.7 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
1468 904 a
tx@Dict begin  PutEnd  end
 1468 904 a 2649 920 a
tx@Dict begin { 17.07181 69.70912 } PutCoor PutBegin  end
 2649 920 a 2630 937
a Fn(\017)2649 920 y
tx@Dict begin  PutEnd  end
 2649 920 a 2649 920 a
tx@Dict begin { 45.52455 73.40813 } PutCoor PutBegin  end
 2649 920 a
2630 937 a Fn(\017)2649 920 y
tx@Dict begin  PutEnd  end
 2649 920 a 2649 920 a
tx@Dict begin { 65.44139 68.57121 } PutCoor PutBegin  end
 2649
920 a 2630 937 a Fn(\017)2649 920 y
tx@Dict begin  PutEnd  end
 2649 920 a 2649 920
a
tx@Dict begin { 89.91077 44.10184 } PutCoor PutBegin  end
 2649 920 a 2630 937 a Fn(\017)2649 920 y
tx@Dict begin  PutEnd  end
 2649 920 a
2649 920 a
tx@Dict begin { 51.7842 36.98865 } PutCoor PutBegin  end
 2649 920 a 2630 937 a Fn(\017)2649 920 y
tx@Dict begin  PutEnd  end
 2649
920 a 2649 920 a
tx@Dict begin { 22.76227 46.66248 } PutCoor PutBegin  end
 2649 920 a 2630 937 a Fn(\017)2649 920
y
tx@Dict begin  PutEnd  end
 2649 920 a 2649 920 a
tx@Dict begin { 17.07181 41.25638 } PutCoor PutBegin  end
 2649 920 a 2630 937 a Fn(\017)2649
920 y
tx@Dict begin  PutEnd  end
 2649 920 a 2649 920 a
tx@Dict begin { 31.29819 33.57402 } PutCoor PutBegin  end
 2649 920 a 2630 937 a Fn(\017)2649
920 y
tx@Dict begin  PutEnd  end
 2649 920 a 2649 920 a
tx@Dict begin { 65.44139 11.66573 } PutCoor PutBegin  end
 2649 920 a 2630 937 a Fn(\016)2649
920 y
tx@Dict begin  PutEnd  end
 2649 920 a 2649 920 a
tx@Dict begin { 86.78094 7.11317 } PutCoor PutBegin  end
 2649 920 a 2630 937 a Fn(\016)2649
920 y
tx@Dict begin  PutEnd  end
 2649 920 a 2649 920 a
tx@Dict begin { 80.23694 9.95863 } PutCoor PutBegin  end
 2649 920 a 2630 937 a Fn(\016)2649
920 y
tx@Dict begin  PutEnd  end
 2649 920 a 2649 920 a
tx@Dict begin { 51.7842 11.38092 } PutCoor PutBegin  end
 2649 920 a 2630 937 a Fn(\016)2649
920 y
tx@Dict begin  PutEnd  end
 2649 920 a 2649 920 a
tx@Dict begin { 51.7842 2.84544 } PutCoor PutBegin  end
 2649 920 a 2630 937 a Fn(\016)2649
920 y
tx@Dict begin  PutEnd  end
 2649 920 a 2649 920 a
tx@Dict begin { 48.93875 -2.84544 } PutCoor PutBegin  end
 2649 920 a 2630 937 a Fn(\016)2649
920 y
tx@Dict begin  PutEnd  end
 2649 920 a 2649 920 a
tx@Dict begin { 25.60728 21.05518 } PutCoor PutBegin  end
 2649 920 a 2630 937 a Fn(\017)2649
920 y
tx@Dict begin  PutEnd  end
 2649 920 a 2649 920 a
tx@Dict begin { 22.76227 18.20973 } PutCoor PutBegin  end
 2649 920 a 2630 937 a Fn(\017)2649
920 y
tx@Dict begin  PutEnd  end
 2649 920 a 2649 920 a
tx@Dict begin { 45.52455 110.96552 } PutCoor PutBegin  end
 2649 920 a 2342 938 a Ft(Kaldor)o(-Hicks)h
(re)o(gion)2649 920 y
tx@Dict begin  PutEnd  end
 2649 920 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
2.  2.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 45.52455 105.27505 113.81097 39.83366 36.98865 22.76227 
 1. 0.1 0.  /c ED /b ED /a ED false OpenCurve  gsave 0.8 SLW 0.5  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0  setgray  [ 22.76227 46.66248 51.7842 36.98865 89.91077
44.10184 65.44139 68.57121 45.52455 73.40813 17.07181 69.70912   /Lineto
/lineto load def 1  setlinejoin false Polygon  gsave 0.5  setgray 
0.4 .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0  setgray  [ 0.0 0.0 89.91077 44.10184 65.44139 68.57121
45.52455 73.40813 17.07181 69.70912   /Lineto /lineto load def 1  setlinejoin
false Polygon  gsave 0.5  setgray  0.4 .setopacityalpha  fill  grestore
end
 
@endspecial 2649 920 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 50.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -2.7 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end  28.45274 mul exch 28.45274 mul exch } false /N@temp@pstNode
10 {InitPnode } /NodeScale {} def NewNode end  end
 2649 920 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial 2649 920 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 2649 920 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 2.7 0 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
0 2.7 0 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 0 0 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 0 0 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
2.7 0 0 0 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
2.7 0 0 2.7 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
2.7 2.7 2.7 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
2.7 2.7 0 2.7 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
2.7 2.7 0 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 0 2.7 0 2.7  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
0 0 2.7 2.7 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ
0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0
2.7 0 2.7 2.7 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.75  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 2.7
2.7 2.7 2.7 2.7 0  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def
/RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec
0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence
(xyz ) def /RotSet (set ) def /Alpha 50.  def /Beta 20.  def /Sin1
Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos
def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2
Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end   /Lineto
/lineto load def 1  setlinejoin false  Line  gsave 0.5 SLW 0.75  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 2649 920 a
tx@Dict begin  PutEnd  end
 2649 920 a -152 1232
a Fs(Figur)o(e)k(2:)33 b(Illustrati)o(v)o(e)24 b(example.)37
b(\(Left\))23 b(The)g(dominance)g(operator:)34 b(neither)23
b Fm(a)g Fs(or)h Fm(b)f Fs(dominates)g(each)h(other)-7
b(,)25 b(b)o(ut)d Fm(b)h Fs(dominates)g Fm(c)p Fs(.)38
b(\(Middle\))-152 1319 y(P)o(oints)18 b(lying)g(in)g(the)h(P)o(ar)o
(eto)g(fr)o(ontier)-7 b(.)22 b(\(Right\))c(P)o(oints)f(inside)h(the)g
(Kaldor)m(-Hicks)h(r)o(egion.)p 0 TeXcolorgray -152 1567
a Ft(used)32 b(in)e(our)h(e)o(xperiments)g(were)g(manually)g(labeled)h
(by)f(three)f(to)h(\002)n(v)o(e)-152 1654 y(human)e(annotators.)48
b(W)-6 b(e)27 b(e)o(xpended)i(signi\002cant)e(time,)h(ef)n(fort,)h(and)
f(re-)-152 1741 y(sources)22 b(to)f(obtain)h(high)f(quality)h
(\(labeled\))f(data)g(from)g(T)-6 b(witter)20 b(streams,)-152
1829 y(which)g(shall)e(be)i(made)f(a)o(v)n(ailable)g(at)g(publication)h
(time.)-77 1916 y(All)30 b(e)o(xperiments)h(were)g(performed)g(on)g(a)f
(1.93)h(GHz)g(Core)f(i7)h(ma-)-152 2003 y(chines)23 b(with)f(8GB)g(of)g
(memory)-5 b(,)24 b(using)f(the)f(MO)m(A)h(system)f([8],)h(an)f(en)m
(vi-)-152 2090 y(ronment)h(for)e(running)i(e)o(xperiments)g(with)e(e)n
(v)o(olving)h(data)g(streams.)32 b(Our)-152 2177 y(e)n(v)n(aluation)16
b(follo)n(ws)f(the)f(T)-5 b(est-Then-T)m(rain)14 b(methodology)-5
b(,)18 b(in)c(which)h(each)-152 2264 y(indi)n(vidual)20
b(message)g(in)e Fn(T)38 b Ft(is)18 b(used)h(to)g(test)f(the)h
(classi\002er)f(and)h(then)g(it)f(be-)-152 2352 y(comes)28
b(a)o(v)n(ailable)f(for)g(training.)48 b(Finally)-5 b(,)28
b(we)f(consider)h(three)f(possible)-152 2439 y(settings:)p
0 TeXcolorgray -41 2593 a Fn(\017)p 0 TeXcolorgray 38
w Fs(Instance)f(Pr)o(ocessing)g Fn(\000)g Ft(Once)g(processed,)k
(message)d Fm(t)1614 2601 y Fl(n)1682 2593 y Ft(is)f(in-)35
2680 y(cluded)e(into)f Fm(D)459 2688 y Fl(n)p Fk(+1)579
2680 y Ft(,)g(and)h(then)f(a)g(ne)n(w)g(classi\002er)f(is)h(b)o(uilt.)
34 b(Under)35 2768 y(this)19 b(setting,)f(message)i Fm(t)698
2776 y Fl(n)759 2768 y Ft(is)f(mandatorily)g(labeled.)p
0 TeXcolorgray -41 2929 a Fn(\017)p 0 TeXcolorgray 38
w Fs(Batch)i(Pr)o(ocessing)g Fn(\000)f Ft(After)h(a)g(batch)g(of)h
Fm(b)e Ft(messages)i Fm(B)30 b Fj(=)25 b Fn(f)p Fm(t)1777
2937 y Fl(n)1820 2929 y Fm(;)35 3017 y(t)63 3025 y Fl(n)p
Fk(+1)182 3017 y Fm(;)18 b(:)13 b(:)g(:)g(;)g(t)385 3026
y Fl(n)p Fk(+)p Fl(b)501 3017 y Fn(g)18 b Ft(is)f(processed,)h(only)g
(a)g(subset)f(of)h Fm(B)j Ft(is)c(included)35 3104 y(into)f
Fm(D)230 3113 y Fl(n)p Fk(+)p Fl(b)347 3104 y Ft(,)g(since)h(some)f
(messages)h(in)g Fm(B)i Ft(may)e(be)f(similar)g(to)g(each)35
3191 y(other)l(.)23 b(Under)17 b(this)f(setting,)h(not)g(all)f
(messages)i(in)f Fm(B)j Ft(need)d(to)g(be)g(la-)35 3278
y(beled,)f(since)g(only)g(a)f(subset)h(of)g Fm(B)j Ft(is)c(included)h
(into)f Fm(D)1484 3287 y Fl(n)p Fk(+)p Fl(b)1601 3278
y Ft(.)22 b(There-)35 3365 y(fore,)g(there)g(is)g(a)f(trade-of)n(f)h
(between)h(batch)f(size)g(and)h(labeling)f(ef-)35 3452
y(fort,)31 b(and)f(a)f(similarity)g(threshold,)j(denoted)f(as)e
Fm(\016)s Ft(,)i(controls)f(the)35 3540 y(messages)20
b(in)f(the)g(batch)g(that)g(must)g(be)g(labeled.)-77
3694 y(In)c(the)g(follo)n(wing)g(we)f(describe)i(our)f(e)n(v)n
(aluation)h(scenarios)g(and)f(discuss)-152 3781 y(the)k(performance)i
(of)d(the)h(classi\002ers.)-152 3942 y Fu(4.1)99 b(Brazilian)25
b(Pr)n(esidential)h(Elections)-77 4050 y Ft(The)19 b(presidential)h
(election)f(campaigns)i(were)e(held)h(from)f(June)h(to)f(Oc-)-152
4137 y(tober)i(2010.)27 b(the)20 b(candidate)h(Dilma)f(Roussef)n(f)h
(launched)g(a)f(T)-6 b(witter)19 b(page)-152 4224 y(during)k(a)f
(public)h(announcement,)i(and)e(she)f(used)h(T)-6 b(witter)21
b(as)h(one)g(of)h(the)-152 4312 y(main)18 b(sources)g(of)f(information)
g(for)g(her)h(v)o(oters.)k(The)17 b(campaign)i(attracted)-152
4399 y(more)i(than)f(500,000)h(follo)n(wers)g(and)f(as)g(a)g(result)g
(Dilma)f(w)o(as)h(the)g(second)-152 4486 y(most)i(cited)g(person)g(on)g
(T)-6 b(witter)20 b(in)i(2010.)32 b(The)22 b(election)g(came)g(to)f(a)h
(sec-)-152 4573 y(ond)j(round)h(v)o(ote,)f(and)g(Dilma)f(Roussef)n(f)h
(w)o(on)g(the)f(runof)n(f)h(with)f(56\045)h(of)-152 4660
y(the)19 b(v)o(otes.)-152 4821 y Fu(Dilma)24 b(Rousseff)h(Election)h
(Campaign)-152 4942 y Ft(W)-6 b(e)32 b(collected)g(66,643)h(messages)f
(in)g(Portuguese)g(referencing)h(Dilma)-152 5029 y(Roussef)n(f)26
b(in)g(T)-6 b(witter)24 b(during)i(her)g(campaign.)44
b(W)-6 b(e)25 b(labeled)h(these)g(mes-)-152 5116 y(sages)20
b(in)f(order)h(to)f(track)g(the)h(population)g(sentiment)g(of)f(appro)o
(v)n(al)i(during)-152 5203 y(this)e(period.)25 b(As)18
b(sho)n(wn)j(in)e(Figure)g(3)g(\(a\),)f(appro)o(v)n(al)j(v)n(aried)e
(signi\002cantly)-152 5290 y(o)o(v)o(er)28 b(the)g(time)g(due)g(to)g
(se)n(v)o(eral)g(polemic)g(statements)g(and)h(political)e(at-)-152
5378 y(tacks,)19 b(and)h(our)f(goal)g(is)g(to)g(score)g(appro)o(v)n(al)
h(during)g(her)f(campaign.)p 0 TeXcolorgray 0 TeXcolorgray
2115 1567 a(Figure)i(3)g(\(b\))g(sho)n(ws)h(the)f(results)g(in)g(terms)
g(of)g(MSE)g(obtained)h(for)f(the)2040 1654 y(e)n(v)n(aluation)29
b(of)f(the)g(classi\002ers)f(in)h(this)g(dataset.)50
b(All)27 b(classi\002ers)h(e)n(v)n(alu-)2040 1741 y(ated)f(in)h(this)e
(e)o(xperiment)i(operate)g(on)g(an)f(instance)h(basis.)48
b(The)27 b(x-axis)2040 1829 y(represents)j(dif)n(ferent)g(time)f(steps)
h(\(i.e.,)g(each)h(message)f(that)f(passes)h(in)2040
1916 y(the)24 b(stream\),)h(while)f(the)g(y-axis)h(sho)n(ws)g(the)f
(MSE)f(so)i(f)o(ar)l(.)38 b(As)24 b(it)f(can)i(be)2040
2003 y(seen,)f(a)f(better)g(approximation)i(is)d(obtained)i(using)g
(our)f(proposed)i(algo-)2040 2090 y(rithms,)j(namely)f(PESS)e(and)i
(KHSS.)e(A)m(C)h(and)h(ILA)m(C)f(were)g(v)o(ery)h(com-)2040
2177 y(petiti)n(v)o(e)18 b(during)h(all)f(the)g(campaign.)24
b(Both)19 b(PESS)d(and)j(KHSS)e(algorithms)2040 2264
y(started)f(much)g(better)f(than)h(the)g(other)g(competing)h
(algorithms,)f(b)o(ut)f(slo)n(wly)2040 2352 y(con)m(v)o(er)o(ges)20
b(to)f(the)g(baseline)h(numbers)g(as)f(the)f(stream)h(e)n(v)o(olv)o
(es.)2115 2439 y(Figure)26 b(3)g(\(c\))f(sho)n(ws)i(results)f
(concerning)h(the)f(proposed)i(algorithms)2040 2526 y(when)g(operating)
f(in)g(batch)h(mode.)47 b(The)27 b(\002gure)g(sho)n(ws)h(the)f(number)g
(of)2040 2613 y(messages)e(that)f(were)h(labeled)g(during)g(the)f
(process)h(as)f(a)h(function)g(of)f Fm(\016)s Ft(,)2040
2700 y(the)g(minimum)h(similarity)f(threshold)h(discussed)g(in)f
(Section)h(3.1.)39 b(Basi-)2040 2787 y(cally)-5 b(,)17
b(we)f(calculate)h(the)g(Jaccard)g(coef)n(\002cient)f(associated)i
(with)e(each)h(pos-)2040 2875 y(sible)k(pair)f(of)h(messages)g(in)g
(the)g(batch,)g(and)g(if)f(the)h(coef)n(\002cient)g(is)f(greater)2040
2962 y(than)30 b Fm(\016)s Ft(,)h(the)f(corresponding)i(messages)e(are)
f(mer)o(ged)h(into)g(a)f(ne)n(w)h(one.)2040 3049 y(The)d(process)g
(continues)h(mer)o(ging)f(similar)f(messages)i(until)f(no)g(pair)f(of)
2040 3136 y(messages)i(are)e(similar)g(enough,)k(and)d(the)g(process)g
(stops.)46 b(At)26 b(the)h(end,)2040 3223 y(only)22 b(the)g(mer)o(ged)g
(messages)h(are)f(labeled.)31 b(Clearly)-5 b(,)22 b(higher)h(v)n(alues)
f(of)g Fm(\016)2040 3310 y Ft(implies)e(that)f(less)h(messages)g(are)g
(mer)o(ged,)g(and)g(thus)g(incurring)h(more)f(la-)2040
3398 y(beling)e(ef)n(fort.)23 b(Further)m(,)17 b(as)h(the)g(\002gure)f
(sho)n(ws,)i(the)f(dependence)i(between)2040 3485 y(labeling)g(ef)n
(fort)e(and)i Fm(\016)h Ft(tends)f(to)f(be)g(linear)l(.)2115
3572 y(By)25 b(v)n(arying)i Fm(\016)s Ft(,)g(we)e(also)h(study)h(the)e
(trade-of)n(f)h(between)h(labeling)f(ef-)2040 3659 y(fort)e(and)h(MSE.)
f(As)g(sho)n(wn)i(in)e(Figure)h(3)f(\(d\),)i(MSE)e(decreases)h(if)f
(more)2040 3746 y(labeling)19 b(ef)n(fort)f(is)g(spent)h(during)h(the)e
(process.)24 b(Speci\002cally)-5 b(,)18 b(best)h(results)2040
3834 y(are)g(achie)n(v)o(ed)g(when)h(about)f(40\045)g(of)g(the)f
(messages)i(in)e(the)h(stream)f(are)h(la-)2040 3921 y(beled)k(during)f
(the)g(process.)33 b(Although)23 b(both)g(PESS)d(and)i(KHSS)f(require)
2040 4008 y(the)16 b(same)g(amount)h(of)e(training)h(resources,)h(KHSS)
e(pro)o(vides)i(slightly)e(bet-)2040 4095 y(ter)25 b(MSE)f(numbers.)43
b(Furthermore,)26 b(smaller)f(batch)g(sizes)g(incur)h(in)f(less)2040
4182 y(labeling)20 b(ef)n(fort)e(for)h(this)g(dataset.)2115
4269 y(W)-6 b(e)17 b(assume)i(that)f(HA)-8 b(T)17 b(requires)i(only)f
(the)g(tar)o(get)g(message)h(for)f(updat-)2040 4357 y(ing)f(its)f(tree)
g(model,)i(and)f(thus)g(we)g(consider)g(that)g(the)g(training)f(set)h
(is)f(com-)2040 4444 y(posed)h(only)g(by)f(the)h(tar)o(get)e(message.)
23 b(The)16 b(A)m(C)g(algorithm)g(requires)h(much)2040
4531 y(more)k(messages)g(within)f(each)g(training)h(set.)26
b(An)20 b(abrupt)h(decrease)g(in)f(the)2040 4618 y(number)26
b(of)e(training)h(messages)g(is)f(al)o(w)o(ays)h(observ)o(ed)h(after)e
(drifts.)39 b(The)2040 4705 y(proposed)28 b(PESS)c(algorithm)i
(requires)g(v)o(ery)g(small)g(training)g(sets,)h(since)2040
4792 y(the)19 b(P)o(areto)f(frontier)h(at)g(each)g(time)g(step)g(is)f
(composed)j(by)e(fe)n(w)g(messages,)2040 4880 y(b)o(ut)29
b(these)g(messages)h(are)f(still)f(able)h(to)g(mak)o(e)g(the)g
(classi\002er)g(rob)o(ust)f(to)2040 4967 y(drifts)e(as)g(the)g(stream)g
(e)n(v)o(olv)o(es.)45 b(Further)m(,)27 b(despite)f(being)h(less)f
(stringent)2040 5054 y(than)17 b(PESS,)d(the)i(proposed)i(KHSS)d
(algorithm)h(also)g(requires)h(small)f(train-)2040 5141
y(ing)j(sets,)g(as)g(sho)n(wn)h(in)e(Figure)h(3)g(\(e\).)2115
5228 y(Figure)d(3)h(\(f\))f(sho)n(ws)i(RAM-Hours)f(numbers)h(for)f(the)
f(algorithms.)23 b(A)m(C,)2040 5315 y(as)28 b(well)f(as)h(PESS)d
(\(instance\))j(and)h(KHSS)d(\(instance\),)k(are)e(clearly)f(the)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 32 808 a @beginspecial 50
@llx 50 @lly 410 @urx 377 @ury 1512 @rwi 1152 @rhi @setspecial
%%BeginDocument: dilmaPositividade.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: dilmaPositividade.eps
%%Creator: gnuplot 4.4 patchlevel 4
%%CreationDate: Sat Aug 31 20:46:05 2013
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 377
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following true/false flags may be edited by hand if desired.
% The unit line width and grayscale image gamma correction may also be changed.
%
/Color true def
/Blacktext false def
/Solid false def
/Dashlength 1 def
/Landscape false def
/Level1 false def
/Rounded false def
/ClipToBoundingBox false def
/TransparentPatterns false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/Gamma 1.0 def
%
/vshift -100 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
Level1 {} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (dilmaPositividade.eps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.4 patchlevel 4)
  /Author (adriano)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Sat Aug 31 20:46:05 2013)
  /DOCINFO pdfmark
end
} ifelse
/doclip {
  ClipToBoundingBox {
    newpath 50 50 moveto 410 50 lineto 410 377 lineto 50 377 lineto closepath
    clip
  } if
} def
%
% Gnuplot Prolog Version 4.4 (August 2010)
%
%/SuppressPDFMark true def
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/g {setgray} bind def
/Gshow {show} def   % May be redefined later in the file to support UTF-8
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
3.8 setmiterlimit
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  gsave 1 setgray fill grestore clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {Gshow} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} def
/Gswidth {dup type /stringtype eq {stringwidth} {pop (n) stringwidth} ifelse} def
/MFwidth {0 exch { dup 5 get 3 ge { 5 get 3 eq { 0 } { pop } ifelse }
 {dup 3 get{dup dup 0 get findfont exch 1 get scalefont setfont
     6 get Gswidth pop add} {pop} ifelse} ifelse} forall} def
/MLshow { currentpoint stroke M
  0 exch R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/XYsave    { [( ) 1 2 true false 3 ()] } bind def
/XYrestore { [( ) 1 2 true false 4 ()] } bind def
end
%%EndProlog
gnudict begin
gsave
doclip
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 300 scalefont setfont
1.000 UL
LTb
1470 960 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 960 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0)]
] -100.0 MRshow
1.000 UL
LTb
1470 2006 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 2006 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.2)]
] -100.0 MRshow
1.000 UL
LTb
1470 3052 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 3052 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.4)]
] -100.0 MRshow
1.000 UL
LTb
1470 4099 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 4099 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.6)]
] -100.0 MRshow
1.000 UL
LTb
1470 5145 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 5145 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.8)]
] -100.0 MRshow
1.000 UL
LTb
1470 6191 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 6191 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1)]
] -100.0 MRshow
1.000 UL
LTb
1470 960 M
0 63 V
0 5168 R
0 -63 V
stroke
1470 660 M
[ [(Helvetica) 300.0 0.0 true true 0 (05/01)]
] -100.0 MCshow
1.000 UL
LTb
1751 960 M
0 31 V
0 5200 R
0 -31 V
2032 960 M
0 31 V
0 5200 R
0 -31 V
2353 960 M
0 63 V
0 5168 R
0 -63 V
stroke
2353 660 M
[ [(Helvetica) 300.0 0.0 true true 0 (06/01)]
] -100.0 MCshow
1.000 UL
LTb
2634 960 M
0 31 V
0 5200 R
0 -31 V
2915 960 M
0 31 V
0 5200 R
0 -31 V
3181 960 M
0 63 V
0 5168 R
0 -63 V
stroke
3181 660 M
[ [(Helvetica) 300.0 0.0 true true 0 (07/01)]
] -100.0 MCshow
1.000 UL
LTb
3462 960 M
0 31 V
0 5200 R
0 -31 V
3743 960 M
0 31 V
0 5200 R
0 -31 V
4064 960 M
0 63 V
0 5168 R
0 -63 V
stroke
4064 660 M
[ [(Helvetica) 300.0 0.0 true true 0 (08/01)]
] -100.0 MCshow
1.000 UL
LTb
4345 960 M
0 31 V
0 5200 R
0 -31 V
4626 960 M
0 31 V
0 5200 R
0 -31 V
4920 960 M
0 63 V
0 5168 R
0 -63 V
stroke
4920 660 M
[ [(Helvetica) 300.0 0.0 true true 0 (09/01)]
] -100.0 MCshow
1.000 UL
LTb
5201 960 M
0 31 V
0 5200 R
0 -31 V
5482 960 M
0 31 V
0 5200 R
0 -31 V
5775 960 M
0 63 V
0 5168 R
0 -63 V
stroke
5775 660 M
[ [(Helvetica) 300.0 0.0 true true 0 (10/01)]
] -100.0 MCshow
1.000 UL
LTb
6056 960 M
0 31 V
0 5200 R
0 -31 V
6337 960 M
0 31 V
0 5200 R
0 -31 V
6659 960 M
0 63 V
0 5168 R
0 -63 V
stroke
6659 660 M
[ [(Helvetica) 300.0 0.0 true true 0 (11/01)]
] -100.0 MCshow
1.000 UL
LTb
1.000 UL
LTb
1470 6191 N
0 -5231 V
5189 0 V
0 5231 V
-5189 0 V
Z stroke
LCb setrgbcolor
240 3575 M
currentpoint gsave translate -270 rotate 0 0 moveto
[ [(Helvetica) 300.0 0.0 true true 0 (Approval)]
] -100.0 MCshow
grestore
LTb
LCb setrgbcolor
4064 210 M
[ [(Helvetica) 300.0 0.0 true true 0 (Time)]
] -100.0 MCshow
LTb
1.000 UP
1.000 UL
LTb
% Begin plot #1
5.000 UL
LT0
1688 2006 M
46 -304 V
47 -140 V
46 -23 V
47 132 V
47 246 V
46 210 V
47 64 V
48 -87 V
51 -168 V
56 -152 V
65 -56 V
73 86 V
81 225 V
84 314 V
81 329 V
76 268 V
69 166 V
62 65 V
56 5 V
54 1 V
51 41 V
51 100 V
50 151 V
50 180 V
50 183 V
50 169 V
49 149 V
48 131 V
48 121 V
48 114 V
47 108 V
46 99 V
47 85 V
47 70 V
46 56 V
47 45 V
47 41 V
46 41 V
47 41 V
46 36 V
47 26 V
46 7 V
47 -18 V
46 -47 V
47 -72 V
47 -89 V
46 -92 V
47 -79 V
46 -51 V
47 -11 V
46 32 V
47 72 V
46 102 V
47 119 V
47 122 V
46 113 V
47 95 V
46 71 V
47 45 V
46 16 V
47 -15 V
47 -45 V
46 -71 V
47 -92 V
46 -100 V
47 -95 V
46 -77 V
47 -49 V
46 -19 V
47 6 V
47 19 V
46 20 V
47 11 V
46 3 V
47 0 V
46 7 V
47 25 V
46 42 V
47 49 V
47 41 V
46 12 V
47 -33 V
46 -85 V
47 -133 V
46 -163 V
47 -164 V
46 -129 V
47 -59 V
47 27 V
46 86 V
47 80 V
46 -4 V
47 -108 V
46 -127 V
47 -4 V
47 151 V
46 87 V
47 -213 V
46 36 V
% End plot #1
stroke
1.000 UL
LTb
1470 6191 N
0 -5231 V
5189 0 V
0 5231 V
-5189 0 V
Z stroke
1.000 UP
1.000 UL
LTb
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica

%%EndDocument
 @endspecial 107 895 a Ft(\(a\))29 b(Appro)o(v)n(al)g(o)o(v)o(er)g
(Dilma)e(Roussef)n(f)t(')l(s)107 970 y(campaign.)56 b(Appro)o(v)n(al)31
b(sentiment)f(v)n(ar)o(-)107 1045 y(ied)19 b(greatly)g(from)g(05/2010)h
(to)f(11/2010.)1310 808 y @beginspecial 50 @llx 50 @lly
410 @urx 377 @ury 1512 @rwi 1152 @rhi @setspecial
%%BeginDocument: dilma_1_temporal_mse.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: dilma_1_temporal_mse.eps
%%Creator: gnuplot 4.4 patchlevel 4
%%CreationDate: Sat Aug 31 19:44:17 2013
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 377
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following true/false flags may be edited by hand if desired.
% The unit line width and grayscale image gamma correction may also be changed.
%
/Color true def
/Blacktext false def
/Solid false def
/Dashlength 1 def
/Landscape false def
/Level1 false def
/Rounded false def
/ClipToBoundingBox false def
/TransparentPatterns false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/Gamma 1.0 def
%
/vshift -100 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
Level1 {} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (dilma_1_temporal_mse.eps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.4 patchlevel 4)
  /Author (adriano)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Sat Aug 31 19:44:17 2013)
  /DOCINFO pdfmark
end
} ifelse
/doclip {
  ClipToBoundingBox {
    newpath 50 50 moveto 410 50 lineto 410 377 lineto 50 377 lineto closepath
    clip
  } if
} def
%
% Gnuplot Prolog Version 4.4 (August 2010)
%
%/SuppressPDFMark true def
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/g {setgray} bind def
/Gshow {show} def   % May be redefined later in the file to support UTF-8
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
3.8 setmiterlimit
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  gsave 1 setgray fill grestore clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {Gshow} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} def
/Gswidth {dup type /stringtype eq {stringwidth} {pop (n) stringwidth} ifelse} def
/MFwidth {0 exch { dup 5 get 3 ge { 5 get 3 eq { 0 } { pop } ifelse }
 {dup 3 get{dup dup 0 get findfont exch 1 get scalefont setfont
     6 get Gswidth pop add} {pop} ifelse} ifelse} forall} def
/MLshow { currentpoint stroke M
  0 exch R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/XYsave    { [( ) 1 2 true false 3 ()] } bind def
/XYrestore { [( ) 1 2 true false 4 ()] } bind def
end
%%EndProlog
gnudict begin
gsave
doclip
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 300 scalefont setfont
1.000 UL
LTb
1470 960 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 960 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0)]
] -100.0 MRshow
1.000 UL
LTb
1470 1707 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 1707 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.1)]
] -100.0 MRshow
1.000 UL
LTb
1470 2455 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 2455 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.2)]
] -100.0 MRshow
1.000 UL
LTb
1470 3202 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 3202 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.3)]
] -100.0 MRshow
1.000 UL
LTb
1470 3949 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 3949 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.4)]
] -100.0 MRshow
1.000 UL
LTb
1470 4696 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 4696 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.5)]
] -100.0 MRshow
1.000 UL
LTb
1470 5444 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 5444 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.6)]
] -100.0 MRshow
1.000 UL
LTb
1470 6191 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 6191 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.7)]
] -100.0 MRshow
1.000 UL
LTb
1470 960 M
0 63 V
0 5168 R
0 -63 V
stroke
1470 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0)]
] -100.0 MCshow
1.000 UL
LTb
2508 960 M
0 63 V
0 5168 R
0 -63 V
stroke
2508 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.2)]
] -100.0 MCshow
1.000 UL
LTb
3546 960 M
0 63 V
0 5168 R
0 -63 V
stroke
3546 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.4)]
] -100.0 MCshow
1.000 UL
LTb
4583 960 M
0 63 V
0 5168 R
0 -63 V
stroke
4583 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.6)]
] -100.0 MCshow
1.000 UL
LTb
5621 960 M
0 63 V
0 5168 R
0 -63 V
stroke
5621 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.8)]
] -100.0 MCshow
1.000 UL
LTb
6659 960 M
0 63 V
0 5168 R
0 -63 V
stroke
6659 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1)]
] -100.0 MCshow
1.000 UL
LTb
1.000 UL
LTb
1470 6191 N
0 -5231 V
5189 0 V
0 5231 V
-5189 0 V
Z stroke
LCb setrgbcolor
240 3575 M
currentpoint gsave translate -270 rotate 0 0 moveto
[ [(Helvetica) 300.0 0.0 true true 0 (MSE)]
] -100.0 MCshow
grestore
LTb
LCb setrgbcolor
4064 210 M
[ [(Helvetica) 300.0 0.0 true true 0 (Stream Progress)]
] -100.0 MCshow
LTb
1.000 UP
1.000 UL
LTb
% Begin plot #1
5.000 UL
LT0
LCb setrgbcolor
5336 5978 M
[ [(Helvetica) 300.0 0.0 true true 0 (AC)]
] -100.0 MRshow
LT0
5516 5978 M
783 0 V
1522 3417 M
53 -516 V
52 -172 V
53 52 V
52 -98 V
52 -104 V
53 103 V
52 120 V
52 108 V
53 -23 V
52 -45 V
53 -88 V
52 -51 V
52 -79 V
53 -91 V
52 -74 V
52 -34 V
53 -41 V
52 132 V
53 12 V
52 97 V
52 28 V
53 -8 V
52 26 V
52 -5 V
53 21 V
52 -40 V
53 -38 V
52 5 V
52 -22 V
53 -31 V
52 -31 V
53 -22 V
52 50 V
52 -16 V
53 -16 V
52 7 V
52 -12 V
53 -4 V
52 17 V
53 14 V
52 3 V
52 12 V
53 -2 V
52 -21 V
52 7 V
53 8 V
52 21 V
53 1 V
52 -5 V
52 10 V
53 -2 V
52 -6 V
53 -12 V
52 -13 V
52 -15 V
53 -11 V
52 -7 V
52 -11 V
53 8 V
52 -1 V
53 8 V
52 -18 V
52 -18 V
53 -1 V
52 -1 V
52 52 V
53 24 V
52 25 V
53 17 V
52 2 V
52 7 V
53 2 V
52 4 V
52 10 V
53 -5 V
52 -6 V
53 -8 V
52 22 V
52 3 V
53 -6 V
52 -14 V
53 -5 V
52 6 V
52 2 V
53 -4 V
52 -4 V
52 -5 V
53 3 V
52 16 V
53 7 V
52 11 V
52 6 V
53 22 V
52 19 V
52 10 V
53 1 V
52 -1 V
53 -10 V
3 0 V
% End plot #1
% Begin plot #2
stroke
LT1
LCb setrgbcolor
5336 5678 M
[ [(Helvetica) 300.0 0.0 true true 0 (HAT)]
] -100.0 MRshow
LT1
5516 5678 M
783 0 V
1522 4023 M
53 -853 V
52 -134 V
53 179 V
52 -273 V
52 -164 V
53 32 V
52 293 V
52 47 V
53 -166 V
52 -95 V
53 94 V
52 300 V
52 303 V
53 300 V
52 254 V
52 194 V
53 187 V
52 -34 V
53 -116 V
52 76 V
52 118 V
53 131 V
52 48 V
52 -103 V
53 -79 V
52 -117 V
53 53 V
52 74 V
52 -14 V
53 -102 V
52 -97 V
53 29 V
52 9 V
52 -25 V
53 54 V
52 55 V
52 -71 V
53 -59 V
52 -20 V
53 -9 V
52 -55 V
52 -50 V
53 -35 V
52 76 V
52 34 V
53 -28 V
52 -40 V
53 -49 V
52 -22 V
52 32 V
53 10 V
52 -29 V
53 -47 V
52 -44 V
52 5 V
53 48 V
52 48 V
52 -38 V
53 36 V
52 -21 V
53 -28 V
52 -46 V
52 -8 V
53 39 V
52 -15 V
52 -18 V
53 -31 V
52 -1 V
53 7 V
52 -28 V
52 -25 V
53 -26 V
52 12 V
52 -26 V
53 -28 V
52 -26 V
53 36 V
52 9 V
52 -14 V
53 -27 V
52 -30 V
53 21 V
52 5 V
52 -24 V
53 -24 V
52 -8 V
52 35 V
53 26 V
52 7 V
53 -16 V
52 -21 V
52 -14 V
53 2 V
52 -6 V
52 -17 V
53 -20 V
52 32 V
53 38 V
3 3 V
% End plot #2
% Begin plot #3
stroke
LT2
LCb setrgbcolor
5336 5378 M
[ [(Helvetica) 300.0 0.0 true true 0 (ILAC)]
] -100.0 MRshow
LT2
5516 5378 M
783 0 V
1522 4607 M
53 -988 V
52 -658 V
53 -239 V
52 -211 V
52 -113 V
53 67 V
52 20 V
52 -63 V
53 -101 V
52 -15 V
53 -68 V
52 -3 V
52 -43 V
53 -62 V
52 -43 V
52 -9 V
53 -23 V
52 198 V
53 181 V
52 -8 V
52 -7 V
53 -28 V
52 46 V
52 3 V
53 35 V
52 -35 V
53 -31 V
52 10 V
52 -19 V
53 -30 V
52 -7 V
53 -5 V
52 58 V
52 -10 V
53 -10 V
52 13 V
52 -9 V
53 0 V
52 23 V
53 32 V
52 6 V
52 27 V
53 0 V
52 -18 V
52 8 V
53 10 V
52 30 V
53 25 V
52 9 V
52 8 V
53 3 V
52 4 V
53 -9 V
52 -6 V
52 -14 V
53 -7 V
52 -7 V
52 -5 V
53 6 V
52 3 V
53 7 V
52 -18 V
52 -15 V
53 1 V
52 0 V
52 52 V
53 59 V
52 13 V
53 7 V
52 -1 V
52 1 V
53 5 V
52 8 V
52 7 V
53 -10 V
52 -7 V
53 -8 V
52 22 V
52 -1 V
53 -6 V
52 -14 V
53 -6 V
52 6 V
52 13 V
53 1 V
52 -5 V
52 -5 V
53 2 V
52 17 V
53 6 V
52 17 V
52 8 V
53 24 V
52 27 V
52 2 V
53 0 V
52 -10 V
53 -12 V
3 -1 V
% End plot #3
% Begin plot #4
stroke
LT3
LCb setrgbcolor
5336 5078 M
[ [(Helvetica) 300.0 0.0 true true 0 (PESS \(instance\))]
] -100.0 MRshow
LT3
5516 5078 M
783 0 V
1522 1712 M
53 -96 V
52 -46 V
53 215 V
52 91 V
52 47 V
53 103 V
52 62 V
52 60 V
53 -45 V
52 18 V
53 -33 V
52 -19 V
52 -21 V
53 -54 V
52 -37 V
52 -11 V
53 -27 V
52 0 V
53 12 V
52 8 V
52 -7 V
53 -6 V
52 26 V
52 12 V
53 26 V
52 -16 V
53 -17 V
52 33 V
52 -7 V
53 -14 V
52 -11 V
53 7 V
52 38 V
52 11 V
53 0 V
52 23 V
52 3 V
53 7 V
52 24 V
53 21 V
52 15 V
52 20 V
53 15 V
52 -4 V
52 26 V
53 22 V
52 24 V
53 0 V
52 11 V
52 12 V
53 17 V
52 4 V
53 0 V
52 6 V
52 -1 V
53 3 V
52 1 V
52 6 V
53 7 V
52 5 V
53 15 V
52 -12 V
52 -3 V
53 11 V
52 5 V
52 -2 V
53 -4 V
52 11 V
53 12 V
52 10 V
52 10 V
53 1 V
52 7 V
52 6 V
53 -2 V
52 2 V
53 -1 V
52 14 V
52 5 V
53 0 V
52 -9 V
53 2 V
52 11 V
52 12 V
53 7 V
52 2 V
52 4 V
53 9 V
52 10 V
53 9 V
52 6 V
52 14 V
53 14 V
52 13 V
52 5 V
53 8 V
52 -4 V
53 -9 V
3 0 V
% End plot #4
% Begin plot #5
stroke
LT4
LCb setrgbcolor
5336 4778 M
[ [(Helvetica) 300.0 0.0 true true 0 (KHSS \(instance\))]
] -100.0 MRshow
LT4
5516 4778 M
783 0 V
1522 1652 M
53 -67 V
52 -57 V
53 178 V
52 92 V
52 55 V
53 77 V
52 52 V
52 58 V
53 -48 V
52 13 V
53 -28 V
52 -19 V
52 -26 V
53 -48 V
52 -32 V
52 -8 V
53 -24 V
52 0 V
53 8 V
52 8 V
52 -5 V
53 -4 V
52 25 V
52 10 V
53 21 V
52 -12 V
53 -11 V
52 32 V
52 -5 V
53 -14 V
52 -11 V
53 6 V
52 40 V
52 9 V
53 -1 V
52 19 V
52 1 V
53 6 V
52 23 V
53 17 V
52 14 V
52 18 V
53 13 V
52 -3 V
52 21 V
53 17 V
52 21 V
53 1 V
52 12 V
52 10 V
53 15 V
52 4 V
53 -2 V
52 6 V
52 -2 V
53 4 V
52 2 V
52 6 V
53 4 V
52 4 V
53 13 V
52 -12 V
52 -3 V
53 10 V
52 3 V
52 -2 V
53 -3 V
52 9 V
53 11 V
52 8 V
52 8 V
53 3 V
52 6 V
52 5 V
53 -1 V
52 1 V
53 0 V
52 12 V
52 5 V
53 0 V
52 -8 V
53 0 V
52 9 V
52 13 V
53 6 V
52 1 V
52 3 V
53 7 V
52 11 V
53 7 V
52 6 V
52 11 V
53 14 V
52 11 V
52 5 V
53 8 V
52 -3 V
53 -8 V
3 -1 V
% End plot #5
stroke
1.000 UL
LTb
1470 6191 N
0 -5231 V
5189 0 V
0 5231 V
-5189 0 V
Z stroke
1.000 UP
1.000 UL
LTb
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica

%%EndDocument
 @endspecial 1385 895 a(\(b\))27 b(MSE)20 b(numbers)i(as)f(the)g
(stream)g(e)n(v)o(o-)1385 970 y(lv)o(es.)2589 808 y @beginspecial
50 @llx 50 @lly 410 @urx 377 @ury 1512 @rwi 1152 @rhi
@setspecial
%%BeginDocument: dilma_2_similaridade_rotulacoes.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: dilma_2_similaridade_rotulacoes.eps
%%Creator: gnuplot 4.4 patchlevel 4
%%CreationDate: Sat Aug 31 19:44:21 2013
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 377
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following true/false flags may be edited by hand if desired.
% The unit line width and grayscale image gamma correction may also be changed.
%
/Color true def
/Blacktext false def
/Solid false def
/Dashlength 1 def
/Landscape false def
/Level1 false def
/Rounded false def
/ClipToBoundingBox false def
/TransparentPatterns false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/Gamma 1.0 def
%
/vshift -100 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
Level1 {} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (dilma_2_similaridade_rotulacoes.eps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.4 patchlevel 4)
  /Author (adriano)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Sat Aug 31 19:44:21 2013)
  /DOCINFO pdfmark
end
} ifelse
/doclip {
  ClipToBoundingBox {
    newpath 50 50 moveto 410 50 lineto 410 377 lineto 50 377 lineto closepath
    clip
  } if
} def
%
% Gnuplot Prolog Version 4.4 (August 2010)
%
%/SuppressPDFMark true def
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/g {setgray} bind def
/Gshow {show} def   % May be redefined later in the file to support UTF-8
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
3.8 setmiterlimit
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  gsave 1 setgray fill grestore clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {Gshow} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} def
/Gswidth {dup type /stringtype eq {stringwidth} {pop (n) stringwidth} ifelse} def
/MFwidth {0 exch { dup 5 get 3 ge { 5 get 3 eq { 0 } { pop } ifelse }
 {dup 3 get{dup dup 0 get findfont exch 1 get scalefont setfont
     6 get Gswidth pop add} {pop} ifelse} ifelse} forall} def
/MLshow { currentpoint stroke M
  0 exch R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/XYsave    { [( ) 1 2 true false 3 ()] } bind def
/XYrestore { [( ) 1 2 true false 4 ()] } bind def
end
%%EndProlog
gnudict begin
gsave
doclip
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 300 scalefont setfont
1.000 UL
LTb
1470 960 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 960 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0)]
] -100.0 MRshow
1.000 UL
LTb
1470 1483 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 1483 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.1)]
] -100.0 MRshow
1.000 UL
LTb
1470 2006 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 2006 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.2)]
] -100.0 MRshow
1.000 UL
LTb
1470 2529 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 2529 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.3)]
] -100.0 MRshow
1.000 UL
LTb
1470 3052 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 3052 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.4)]
] -100.0 MRshow
1.000 UL
LTb
1470 3576 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 3576 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.5)]
] -100.0 MRshow
1.000 UL
LTb
1470 4099 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 4099 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.6)]
] -100.0 MRshow
1.000 UL
LTb
1470 4622 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 4622 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.7)]
] -100.0 MRshow
1.000 UL
LTb
1470 5145 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 5145 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.8)]
] -100.0 MRshow
1.000 UL
LTb
1470 5668 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 5668 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.9)]
] -100.0 MRshow
1.000 UL
LTb
1470 6191 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 6191 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1)]
] -100.0 MRshow
1.000 UL
LTb
1470 960 M
0 63 V
0 5168 R
0 -63 V
stroke
1470 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0)]
] -100.0 MCshow
1.000 UL
LTb
2508 960 M
0 63 V
0 5168 R
0 -63 V
stroke
2508 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.2)]
] -100.0 MCshow
1.000 UL
LTb
3546 960 M
0 63 V
0 5168 R
0 -63 V
stroke
3546 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.4)]
] -100.0 MCshow
1.000 UL
LTb
4583 960 M
0 63 V
0 5168 R
0 -63 V
stroke
4583 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.6)]
] -100.0 MCshow
1.000 UL
LTb
5621 960 M
0 63 V
0 5168 R
0 -63 V
stroke
5621 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.8)]
] -100.0 MCshow
1.000 UL
LTb
6659 960 M
0 63 V
0 5168 R
0 -63 V
stroke
6659 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1)]
] -100.0 MCshow
1.000 UL
LTb
1.000 UL
LTb
1470 6191 N
0 -5231 V
5189 0 V
0 5231 V
-5189 0 V
Z stroke
LCb setrgbcolor
240 3575 M
currentpoint gsave translate -270 rotate 0 0 moveto
[ [(Helvetica) 300.0 0.0 true true 0 (Labeling Effort)]
] -100.0 MCshow
grestore
LTb
LCb setrgbcolor
4064 210 M
[ [(Symbol) 300.0 0.0 true true 0 (s)]
] -100.0 MCshow
LTb
1.000 UP
1.000 UL
LTb
% Begin plot #1
5.000 UL
LT0
LCb setrgbcolor
4478 5779 M
[ [(Helvetica) 300.0 0.0 true true 0 (PESS \(batch-0.01\))]
] -100.0 MRshow
LT0
4658 5779 M
783 0 V
1989 1276 M
42 66 V
42 64 V
42 62 V
42 60 V
42 59 V
41 58 V
42 56 V
42 54 V
42 53 V
42 52 V
42 50 V
42 49 V
42 48 V
42 46 V
42 46 V
42 44 V
42 43 V
42 42 V
42 41 V
42 39 V
43 39 V
42 38 V
42 38 V
42 36 V
42 35 V
43 35 V
42 34 V
42 34 V
43 32 V
42 32 V
43 32 V
42 31 V
43 31 V
43 30 V
43 30 V
43 30 V
42 29 V
44 29 V
43 29 V
43 29 V
43 29 V
44 29 V
43 28 V
44 29 V
44 29 V
44 29 V
44 29 V
44 29 V
45 30 V
44 30 V
45 30 V
45 31 V
45 31 V
45 32 V
46 33 V
45 33 V
46 33 V
46 35 V
46 35 V
47 36 V
47 37 V
46 38 V
48 38 V
47 40 V
48 41 V
48 42 V
48 43 V
49 44 V
49 46 V
49 47 V
49 49 V
50 49 V
50 52 V
51 53 V
51 54 V
51 56 V
52 58 V
51 60 V
53 61 V
53 63 V
53 66 V
53 67 V
55 69 V
54 71 V
55 74 V
55 76 V
56 78 V
57 80 V
57 83 V
57 85 V
58 87 V
59 90 V
59 93 V
59 96 V
60 98 V
61 101 V
61 103 V
62 107 V
63 110 V
% End plot #1
% Begin plot #2
stroke
LT1
LCb setrgbcolor
4478 5479 M
[ [(Helvetica) 300.0 0.0 true true 0 (KHSS \(batch-0.01\))]
] -100.0 MRshow
LT1
4658 5479 M
783 0 V
1989 1276 M
42 66 V
42 64 V
42 62 V
42 60 V
42 59 V
41 58 V
42 56 V
42 54 V
42 53 V
42 52 V
42 50 V
42 49 V
42 48 V
42 46 V
42 46 V
42 44 V
42 43 V
42 42 V
42 41 V
42 39 V
43 39 V
42 38 V
42 38 V
42 36 V
42 35 V
43 35 V
42 34 V
42 34 V
43 32 V
42 32 V
43 32 V
42 31 V
43 31 V
43 30 V
43 30 V
43 30 V
42 29 V
44 29 V
43 29 V
43 29 V
43 29 V
44 29 V
43 28 V
44 29 V
44 29 V
44 29 V
44 29 V
44 29 V
45 30 V
44 30 V
45 30 V
45 31 V
45 31 V
45 32 V
46 33 V
45 33 V
46 33 V
46 35 V
46 35 V
47 36 V
47 37 V
46 38 V
48 38 V
47 40 V
48 41 V
48 42 V
48 43 V
49 44 V
49 46 V
49 47 V
49 49 V
50 49 V
50 52 V
51 53 V
51 54 V
51 56 V
52 58 V
51 60 V
53 61 V
53 63 V
53 66 V
53 67 V
55 69 V
54 71 V
55 74 V
55 76 V
56 78 V
57 80 V
57 83 V
57 85 V
58 87 V
59 90 V
59 93 V
59 96 V
60 98 V
61 101 V
61 103 V
62 107 V
63 110 V
% End plot #2
% Begin plot #3
stroke
LT2
LCb setrgbcolor
4478 5179 M
[ [(Helvetica) 300.0 0.0 true true 0 (PESS \(batch-0.05\))]
] -100.0 MRshow
LT2
4658 5179 M
783 0 V
1989 1098 M
42 61 V
42 59 V
42 57 V
42 56 V
42 55 V
41 54 V
42 52 V
42 50 V
42 50 V
42 48 V
42 47 V
42 46 V
42 45 V
42 44 V
42 43 V
42 42 V
42 40 V
42 40 V
42 39 V
42 38 V
43 37 V
42 37 V
42 36 V
42 35 V
42 34 V
43 34 V
42 33 V
42 32 V
43 32 V
42 32 V
43 31 V
42 30 V
43 30 V
43 30 V
43 30 V
43 30 V
42 29 V
44 29 V
43 29 V
43 29 V
43 29 V
44 28 V
43 29 V
44 29 V
44 30 V
44 29 V
44 30 V
44 29 V
45 31 V
44 30 V
45 31 V
45 32 V
45 32 V
45 32 V
46 33 V
45 34 V
46 34 V
46 36 V
46 36 V
47 36 V
47 38 V
46 39 V
48 39 V
47 41 V
48 42 V
48 43 V
48 44 V
49 45 V
49 47 V
49 48 V
49 49 V
50 51 V
50 52 V
51 54 V
51 55 V
51 58 V
52 58 V
51 61 V
53 62 V
53 65 V
53 66 V
53 68 V
55 70 V
54 72 V
55 75 V
55 77 V
56 78 V
57 82 V
57 83 V
57 86 V
58 89 V
59 91 V
59 94 V
59 96 V
60 99 V
61 102 V
61 104 V
62 108 V
63 111 V
% End plot #3
% Begin plot #4
stroke
LT3
LCb setrgbcolor
4478 4879 M
[ [(Helvetica) 300.0 0.0 true true 0 (KHSS \(batch-0.05\))]
] -100.0 MRshow
LT3
4658 4879 M
783 0 V
1989 1098 M
42 61 V
42 59 V
42 57 V
42 56 V
42 55 V
41 54 V
42 52 V
42 50 V
42 50 V
42 48 V
42 47 V
42 46 V
42 45 V
42 44 V
42 43 V
42 42 V
42 40 V
42 40 V
42 39 V
42 38 V
43 37 V
42 37 V
42 36 V
42 35 V
42 34 V
43 34 V
42 33 V
42 32 V
43 32 V
42 32 V
43 31 V
42 30 V
43 30 V
43 30 V
43 30 V
43 30 V
42 29 V
44 29 V
43 29 V
43 29 V
43 29 V
44 28 V
43 29 V
44 29 V
44 30 V
44 29 V
44 30 V
44 29 V
45 31 V
44 30 V
45 31 V
45 32 V
45 32 V
45 32 V
46 33 V
45 34 V
46 34 V
46 36 V
46 36 V
47 36 V
47 38 V
46 39 V
48 39 V
47 41 V
48 42 V
48 43 V
48 44 V
49 45 V
49 47 V
49 48 V
49 49 V
50 51 V
50 52 V
51 54 V
51 55 V
51 58 V
52 58 V
51 61 V
53 62 V
53 65 V
53 66 V
53 68 V
55 70 V
54 72 V
55 75 V
55 77 V
56 78 V
57 82 V
57 83 V
57 86 V
58 89 V
59 91 V
59 94 V
59 96 V
60 99 V
61 102 V
61 104 V
62 108 V
63 111 V
% End plot #4
% Begin plot #5
stroke
LT4
LCb setrgbcolor
4478 4579 M
[ [(Helvetica) 300.0 0.0 true true 0 (PESS \(batch-0.10\))]
] -100.0 MRshow
LT4
4658 4579 M
783 0 V
1989 1056 M
42 55 V
42 54 V
42 53 V
42 52 V
42 50 V
41 49 V
42 48 V
42 47 V
42 45 V
42 45 V
42 44 V
42 42 V
42 42 V
42 40 V
42 40 V
42 39 V
42 38 V
42 37 V
42 36 V
42 36 V
43 35 V
42 34 V
42 34 V
42 33 V
42 32 V
43 32 V
42 31 V
42 31 V
43 30 V
42 30 V
43 29 V
42 30 V
43 28 V
43 29 V
43 28 V
43 29 V
42 28 V
44 27 V
43 28 V
43 28 V
43 28 V
44 28 V
43 28 V
44 28 V
44 28 V
44 28 V
44 29 V
44 29 V
45 29 V
44 30 V
45 30 V
45 30 V
45 31 V
45 32 V
46 32 V
45 33 V
46 33 V
46 35 V
46 35 V
47 35 V
47 37 V
46 37 V
48 39 V
47 39 V
48 41 V
48 41 V
48 43 V
49 44 V
49 45 V
49 47 V
49 47 V
50 49 V
50 51 V
51 52 V
51 54 V
51 55 V
52 57 V
51 58 V
53 60 V
53 62 V
53 64 V
53 66 V
55 67 V
54 70 V
55 72 V
55 73 V
56 76 V
57 79 V
57 80 V
57 83 V
58 85 V
59 87 V
59 90 V
59 93 V
60 95 V
61 98 V
61 100 V
62 104 V
63 106 V
% End plot #5
% Begin plot #6
stroke
LT5
LCb setrgbcolor
4478 4279 M
[ [(Helvetica) 300.0 0.0 true true 0 (KHSS \(batch-0.10\))]
] -100.0 MRshow
LT5
4658 4279 M
783 0 V
1989 1056 M
42 55 V
42 54 V
42 53 V
42 52 V
42 50 V
41 49 V
42 48 V
42 47 V
42 45 V
42 45 V
42 44 V
42 42 V
42 42 V
42 40 V
42 40 V
42 39 V
42 38 V
42 37 V
42 36 V
42 36 V
43 35 V
42 34 V
42 34 V
42 33 V
42 32 V
43 32 V
42 31 V
42 31 V
43 30 V
42 30 V
43 29 V
42 30 V
43 28 V
43 29 V
43 28 V
43 29 V
42 28 V
44 27 V
43 28 V
43 28 V
43 28 V
44 28 V
43 28 V
44 28 V
44 28 V
44 28 V
44 29 V
44 29 V
45 29 V
44 30 V
45 30 V
45 30 V
45 31 V
45 32 V
46 32 V
45 33 V
46 33 V
46 35 V
46 35 V
47 35 V
47 37 V
46 37 V
48 39 V
47 39 V
48 41 V
48 41 V
48 43 V
49 44 V
49 45 V
49 47 V
49 47 V
50 49 V
50 51 V
51 52 V
51 54 V
51 55 V
52 57 V
51 58 V
53 60 V
53 62 V
53 64 V
53 66 V
55 67 V
54 70 V
55 72 V
55 73 V
56 76 V
57 79 V
57 80 V
57 83 V
58 85 V
59 87 V
59 90 V
59 93 V
60 95 V
61 98 V
61 100 V
62 104 V
63 106 V
% End plot #6
stroke
1.000 UL
LTb
1470 6191 N
0 -5231 V
5189 0 V
0 5231 V
-5189 0 V
Z stroke
1.000 UP
1.000 UL
LTb
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Symbol Helvetica

%%EndDocument
 @endspecial 2664 895 a(\(c\))32 b(X-Y)i(scatter)g(plot)g(correlating)h
(the)2664 970 y(minimum)25 b(similarity)f(threshold)i
Fm(\013)f Ft(and)2664 1045 y(labeling)19 b(ef)n(fort.)671
2071 y @beginspecial 50 @llx 50 @lly 410 @urx 377 @ury
1512 @rwi 1152 @rhi @setspecial
%%BeginDocument: dilma_3_rmse-labelling.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: dilma_3_rmse-labelling.eps
%%Creator: gnuplot 4.4 patchlevel 4
%%CreationDate: Sun Sep  1 00:27:57 2013
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 377
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following true/false flags may be edited by hand if desired.
% The unit line width and grayscale image gamma correction may also be changed.
%
/Color true def
/Blacktext false def
/Solid false def
/Dashlength 1 def
/Landscape false def
/Level1 false def
/Rounded false def
/ClipToBoundingBox false def
/TransparentPatterns false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/Gamma 1.0 def
%
/vshift -100 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
Level1 {} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (dilma_3_rmse-labelling.eps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.4 patchlevel 4)
  /Author (adriano)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Sun Sep  1 00:27:57 2013)
  /DOCINFO pdfmark
end
} ifelse
/doclip {
  ClipToBoundingBox {
    newpath 50 50 moveto 410 50 lineto 410 377 lineto 50 377 lineto closepath
    clip
  } if
} def
%
% Gnuplot Prolog Version 4.4 (August 2010)
%
%/SuppressPDFMark true def
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/g {setgray} bind def
/Gshow {show} def   % May be redefined later in the file to support UTF-8
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
3.8 setmiterlimit
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  gsave 1 setgray fill grestore clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {Gshow} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} def
/Gswidth {dup type /stringtype eq {stringwidth} {pop (n) stringwidth} ifelse} def
/MFwidth {0 exch { dup 5 get 3 ge { 5 get 3 eq { 0 } { pop } ifelse }
 {dup 3 get{dup dup 0 get findfont exch 1 get scalefont setfont
     6 get Gswidth pop add} {pop} ifelse} ifelse} forall} def
/MLshow { currentpoint stroke M
  0 exch R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/XYsave    { [( ) 1 2 true false 3 ()] } bind def
/XYrestore { [( ) 1 2 true false 4 ()] } bind def
end
%%EndProlog
gnudict begin
gsave
doclip
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 300 scalefont setfont
1.000 UL
LTb
1650 960 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 960 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.22)]
] -100.0 MRshow
1.000 UL
LTb
1650 1614 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 1614 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.23)]
] -100.0 MRshow
1.000 UL
LTb
1650 2268 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 2268 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.24)]
] -100.0 MRshow
1.000 UL
LTb
1650 2922 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 2922 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.25)]
] -100.0 MRshow
1.000 UL
LTb
1650 3576 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 3576 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.26)]
] -100.0 MRshow
1.000 UL
LTb
1650 4229 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 4229 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.27)]
] -100.0 MRshow
1.000 UL
LTb
1650 4883 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 4883 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.28)]
] -100.0 MRshow
1.000 UL
LTb
1650 5537 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 5537 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.29)]
] -100.0 MRshow
1.000 UL
LTb
1650 6191 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 6191 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.3)]
] -100.0 MRshow
1.000 UL
LTb
1650 960 M
0 63 V
0 5168 R
0 -63 V
stroke
1650 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0)]
] -100.0 MCshow
1.000 UL
LTb
2652 960 M
0 63 V
0 5168 R
0 -63 V
stroke
2652 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.2)]
] -100.0 MCshow
1.000 UL
LTb
3654 960 M
0 63 V
0 5168 R
0 -63 V
stroke
3654 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.4)]
] -100.0 MCshow
1.000 UL
LTb
4655 960 M
0 63 V
0 5168 R
0 -63 V
stroke
4655 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.6)]
] -100.0 MCshow
1.000 UL
LTb
5657 960 M
0 63 V
0 5168 R
0 -63 V
stroke
5657 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.8)]
] -100.0 MCshow
1.000 UL
LTb
6659 960 M
0 63 V
0 5168 R
0 -63 V
stroke
6659 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1)]
] -100.0 MCshow
1.000 UL
LTb
1.000 UL
LTb
1650 6191 N
0 -5231 V
5009 0 V
0 5231 V
-5009 0 V
Z stroke
LCb setrgbcolor
240 3575 M
currentpoint gsave translate -270 rotate 0 0 moveto
[ [(Helvetica) 300.0 0.0 true true 0 (MSE)]
] -100.0 MCshow
grestore
LTb
LCb setrgbcolor
4154 210 M
[ [(Helvetica) 300.0 0.0 true true 0 (Labeling Effort)]
] -100.0 MCshow
LTb
1.000 UP
1.000 UL
LTb
% Begin plot #1
5.000 UL
LT0
LCb setrgbcolor
5336 5978 M
[ [(Helvetica) 300.0 0.0 true true 0 (PESS \(batch-0.01\))]
] -100.0 MRshow
LT0
5516 5978 M
783 0 V
1948 4611 M
62 -126 V
60 -123 V
59 -118 V
57 -113 V
56 -110 V
54 -105 V
53 -102 V
51 -98 V
50 -94 V
49 -91 V
47 -87 V
47 -83 V
45 -80 V
43 -77 V
43 -74 V
42 -71 V
40 -67 V
40 -65 V
38 -62 V
38 -59 V
37 -56 V
36 -54 V
35 -51 V
34 -49 V
33 -47 V
33 -44 V
32 -42 V
32 -40 V
31 -38 V
30 -35 V
30 -34 V
29 -32 V
29 -31 V
29 -28 V
28 -27 V
28 -25 V
28 -24 V
27 -22 V
27 -21 V
28 -19 V
27 -19 V
27 -17 V
27 -16 V
27 -14 V
27 -14 V
27 -13 V
28 -11 V
28 -11 V
28 -10 V
28 -9 V
29 -9 V
29 -7 V
29 -7 V
30 -7 V
31 -6 V
31 -5 V
32 -5 V
32 -4 V
33 -4 V
34 -4 V
35 -3 V
36 -3 V
36 -3 V
38 -3 V
38 -2 V
40 -3 V
41 -2 V
41 -2 V
43 -2 V
45 -2 V
45 -2 V
47 -2 V
49 -2 V
50 -2 V
51 -2 V
53 -2 V
55 -3 V
56 -2 V
58 -3 V
60 -3 V
61 -3 V
64 -3 V
65 -4 V
67 -4 V
69 -4 V
72 -4 V
73 -5 V
76 -5 V
78 -5 V
80 -6 V
83 -5 V
85 -7 V
88 -6 V
90 -7 V
92 -7 V
95 -7 V
98 -8 V
101 -8 V
103 -9 V
% End plot #1
% Begin plot #2
stroke
LT1
LCb setrgbcolor
5336 5678 M
[ [(Helvetica) 300.0 0.0 true true 0 (KHSS \(batch-0.01\))]
] -100.0 MRshow
LT1
5516 5678 M
783 0 V
1948 4332 M
62 -137 V
60 -133 V
59 -127 V
57 -124 V
56 -118 V
54 -114 V
53 -110 V
51 -106 V
50 -102 V
49 -97 V
47 -94 V
47 -90 V
45 -87 V
43 -82 V
43 -80 V
42 -76 V
40 -73 V
40 -69 V
38 -66 V
38 -64 V
37 -60 V
36 -58 V
35 -55 V
34 -52 V
33 -50 V
33 -47 V
32 -45 V
32 -42 V
31 -40 V
30 -38 V
30 -36 V
29 -34 V
29 -32 V
29 -29 V
28 -28 V
28 -27 V
28 -24 V
27 -23 V
27 -21 V
28 -20 V
27 -18 V
27 -17 V
27 -15 V
27 -14 V
27 -13 V
27 -12 V
28 -11 V
28 -9 V
28 -8 V
28 -8 V
29 -6 V
29 -5 V
29 -5 V
30 -4 V
31 -3 V
31 -2 V
32 -1 V
32 -1 V
33 0 V
34 0 V
35 2 V
36 1 V
36 3 V
38 3 V
38 3 V
40 4 V
41 4 V
41 5 V
43 5 V
45 5 V
45 6 V
47 6 V
49 7 V
50 7 V
51 7 V
53 8 V
55 8 V
56 8 V
58 9 V
60 9 V
61 9 V
64 10 V
65 9 V
67 11 V
69 10 V
72 11 V
73 11 V
76 12 V
78 11 V
80 13 V
83 12 V
85 13 V
88 14 V
90 13 V
92 15 V
95 14 V
98 16 V
101 15 V
103 17 V
% End plot #2
% Begin plot #3
stroke
LT2
LCb setrgbcolor
5336 5378 M
[ [(Helvetica) 300.0 0.0 true true 0 (PESS \(batch-0.05\))]
] -100.0 MRshow
LT2
5516 5378 M
783 0 V
1780 5736 M
57 -158 V
56 -155 V
54 -149 V
53 -145 V
52 -140 V
50 -136 V
49 -132 V
48 -127 V
47 -124 V
46 -119 V
44 -115 V
44 -112 V
42 -108 V
41 -104 V
41 -100 V
39 -97 V
38 -93 V
38 -90 V
37 -87 V
36 -84 V
35 -80 V
34 -77 V
34 -74 V
33 -72 V
32 -68 V
32 -66 V
31 -62 V
31 -61 V
30 -57 V
30 -56 V
29 -52 V
29 -51 V
28 -48 V
29 -45 V
28 -44 V
27 -41 V
28 -40 V
27 -37 V
28 -35 V
27 -34 V
27 -32 V
27 -30 V
28 -28 V
27 -26 V
27 -25 V
28 -24 V
28 -21 V
28 -21 V
29 -19 V
29 -18 V
29 -16 V
29 -15 V
31 -14 V
30 -13 V
32 -11 V
31 -11 V
33 -9 V
33 -9 V
34 -8 V
35 -6 V
35 -6 V
37 -5 V
37 -4 V
39 -4 V
39 -3 V
40 -2 V
42 -1 V
43 -1 V
44 0 V
45 0 V
47 1 V
47 1 V
50 2 V
51 2 V
52 2 V
54 3 V
55 4 V
57 3 V
59 4 V
61 4 V
62 4 V
65 5 V
66 5 V
68 5 V
70 5 V
72 5 V
75 6 V
77 6 V
78 5 V
82 6 V
83 6 V
86 6 V
88 6 V
91 6 V
94 6 V
96 6 V
98 6 V
102 6 V
104 6 V
% End plot #3
% Begin plot #4
stroke
LT3
LCb setrgbcolor
5336 5078 M
[ [(Helvetica) 300.0 0.0 true true 0 (KHSS \(batch-0.05\))]
] -100.0 MRshow
LT3
5516 5078 M
783 0 V
1780 5788 M
57 -166 V
56 -161 V
54 -157 V
53 -152 V
52 -148 V
50 -143 V
49 -139 V
48 -134 V
47 -131 V
46 -126 V
44 -123 V
44 -118 V
42 -115 V
41 -111 V
41 -107 V
39 -104 V
38 -100 V
38 -97 V
37 -93 V
36 -90 V
35 -86 V
34 -84 V
34 -80 V
33 -78 V
32 -74 V
32 -72 V
31 -68 V
31 -66 V
30 -63 V
30 -61 V
29 -57 V
29 -56 V
28 -53 V
29 -50 V
28 -48 V
27 -46 V
28 -44 V
27 -41 V
28 -40 V
27 -37 V
27 -35 V
27 -33 V
28 -32 V
27 -29 V
27 -28 V
28 -26 V
28 -24 V
28 -23 V
29 -21 V
29 -19 V
29 -18 V
29 -17 V
31 -15 V
30 -13 V
32 -13 V
31 -11 V
33 -10 V
33 -8 V
34 -7 V
35 -7 V
35 -5 V
37 -4 V
37 -3 V
39 -2 V
39 -1 V
40 -1 V
42 1 V
43 2 V
44 2 V
45 3 V
47 4 V
47 4 V
50 6 V
51 6 V
52 6 V
54 8 V
55 7 V
57 9 V
59 9 V
61 9 V
62 10 V
65 11 V
66 11 V
68 11 V
70 12 V
72 12 V
75 12 V
77 13 V
78 14 V
82 13 V
83 14 V
86 15 V
88 14 V
91 15 V
94 15 V
96 16 V
98 15 V
102 16 V
104 16 V
% End plot #4
% Begin plot #5
stroke
LT4
LCb setrgbcolor
5336 4778 M
[ [(Helvetica) 300.0 0.0 true true 0 (PESS \(batch-0.10\))]
] -100.0 MRshow
LT4
5516 4778 M
783 0 V
1741 5375 M
52 -134 V
51 -130 V
49 -126 V
49 -122 V
47 -118 V
47 -114 V
45 -110 V
44 -107 V
43 -104 V
42 -100 V
41 -96 V
41 -93 V
39 -90 V
38 -87 V
38 -84 V
36 -80 V
36 -78 V
35 -75 V
34 -72 V
34 -69 V
33 -66 V
32 -64 V
32 -62 V
31 -59 V
30 -56 V
30 -54 V
30 -52 V
29 -50 V
28 -47 V
29 -46 V
27 -43 V
28 -41 V
27 -40 V
27 -37 V
27 -36 V
26 -34 V
27 -33 V
26 -30 V
26 -29 V
27 -28 V
26 -26 V
26 -24 V
27 -23 V
26 -22 V
27 -21 V
26 -19 V
27 -18 V
28 -17 V
27 -16 V
28 -15 V
29 -13 V
28 -13 V
30 -12 V
29 -11 V
31 -10 V
31 -9 V
31 -9 V
33 -7 V
32 -7 V
34 -7 V
35 -5 V
35 -6 V
36 -4 V
38 -4 V
38 -4 V
39 -3 V
40 -2 V
42 -2 V
42 -2 V
44 -1 V
45 -2 V
47 0 V
47 -1 V
49 0 V
51 0 V
52 0 V
53 1 V
56 0 V
56 1 V
59 1 V
60 1 V
62 1 V
64 1 V
65 1 V
68 1 V
70 2 V
71 1 V
74 1 V
76 1 V
78 2 V
80 1 V
83 1 V
85 1 V
87 1 V
90 2 V
92 1 V
95 0 V
97 1 V
100 1 V
% End plot #5
% Begin plot #6
stroke
LT5
LCb setrgbcolor
5336 4478 M
[ [(Helvetica) 300.0 0.0 true true 0 (KHSS \(batch-0.10\))]
] -100.0 MRshow
LT5
5516 4478 M
783 0 V
1741 5459 M
52 -153 V
51 -147 V
49 -144 V
49 -138 V
47 -135 V
47 -130 V
45 -126 V
44 -121 V
43 -118 V
42 -114 V
41 -110 V
41 -106 V
39 -102 V
38 -99 V
38 -95 V
36 -91 V
36 -89 V
35 -85 V
34 -81 V
34 -79 V
33 -75 V
32 -73 V
32 -69 V
31 -67 V
30 -64 V
30 -61 V
30 -59 V
29 -56 V
28 -53 V
29 -51 V
27 -48 V
28 -47 V
27 -44 V
27 -41 V
27 -40 V
26 -38 V
27 -35 V
26 -34 V
26 -32 V
27 -29 V
26 -29 V
26 -26 V
27 -25 V
26 -23 V
27 -21 V
26 -20 V
27 -19 V
28 -17 V
27 -16 V
28 -14 V
29 -14 V
28 -12 V
30 -10 V
29 -10 V
31 -9 V
31 -7 V
31 -7 V
33 -5 V
32 -5 V
34 -4 V
35 -3 V
35 -2 V
36 -1 V
38 -1 V
38 0 V
39 1 V
40 1 V
42 2 V
42 2 V
44 4 V
45 3 V
47 4 V
47 5 V
49 5 V
51 5 V
52 6 V
53 6 V
56 6 V
56 7 V
59 7 V
60 7 V
62 8 V
64 8 V
65 8 V
68 8 V
70 9 V
71 8 V
74 9 V
76 9 V
78 9 V
80 10 V
83 9 V
85 9 V
87 10 V
90 10 V
92 10 V
95 9 V
97 10 V
100 10 V
% End plot #6
stroke
1.000 UL
LTb
1650 6191 N
0 -5231 V
5009 0 V
0 5231 V
-5009 0 V
Z stroke
1.000 UP
1.000 UL
LTb
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica

%%EndDocument
 @endspecial 746 2158 a(\(d\))24 b(X-Y)15 b(scatter)g(plot)h
(correlating)g(label-)746 2233 y(ing)j(ef)n(fort)g(and)g(MSE)g
(numbers.)1950 2071 y @beginspecial 50 @llx 50 @lly 410
@urx 377 @ury 1512 @rwi 1152 @rhi @setspecial
%%BeginDocument: dilma_window.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: dilma_window.eps
%%Creator: gnuplot 4.4 patchlevel 4
%%CreationDate: Sun Sep  1 00:16:08 2013
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 377
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following true/false flags may be edited by hand if desired.
% The unit line width and grayscale image gamma correction may also be changed.
%
/Color true def
/Blacktext false def
/Solid false def
/Dashlength 1 def
/Landscape false def
/Level1 false def
/Rounded false def
/ClipToBoundingBox false def
/TransparentPatterns false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/Gamma 1.0 def
%
/vshift -100 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
Level1 {} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (dilma_window.eps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.4 patchlevel 4)
  /Author (adriano)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Sun Sep  1 00:16:08 2013)
  /DOCINFO pdfmark
end
} ifelse
/doclip {
  ClipToBoundingBox {
    newpath 50 50 moveto 410 50 lineto 410 377 lineto 50 377 lineto closepath
    clip
  } if
} def
%
% Gnuplot Prolog Version 4.4 (August 2010)
%
%/SuppressPDFMark true def
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/g {setgray} bind def
/Gshow {show} def   % May be redefined later in the file to support UTF-8
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
3.8 setmiterlimit
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  gsave 1 setgray fill grestore clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {Gshow} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} def
/Gswidth {dup type /stringtype eq {stringwidth} {pop (n) stringwidth} ifelse} def
/MFwidth {0 exch { dup 5 get 3 ge { 5 get 3 eq { 0 } { pop } ifelse }
 {dup 3 get{dup dup 0 get findfont exch 1 get scalefont setfont
     6 get Gswidth pop add} {pop} ifelse} ifelse} forall} def
/MLshow { currentpoint stroke M
  0 exch R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/XYsave    { [( ) 1 2 true false 3 ()] } bind def
/XYrestore { [( ) 1 2 true false 4 ()] } bind def
end
%%EndProlog
gnudict begin
gsave
doclip
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 300 scalefont setfont
1.000 UL
LTb
2010 960 M
63 0 V
4586 0 R
-63 0 V
stroke
1830 960 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1)]
] -100.0 MRshow
1.000 UL
LTb
2010 1275 M
31 0 V
4618 0 R
-31 0 V
2010 1691 M
31 0 V
4618 0 R
-31 0 V
2010 1905 M
31 0 V
4618 0 R
-31 0 V
2010 2006 M
63 0 V
4586 0 R
-63 0 V
stroke
1830 2006 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 10)]
] -100.0 MRshow
1.000 UL
LTb
2010 2321 M
31 0 V
4618 0 R
-31 0 V
2010 2737 M
31 0 V
4618 0 R
-31 0 V
2010 2951 M
31 0 V
4618 0 R
-31 0 V
2010 3052 M
63 0 V
4586 0 R
-63 0 V
stroke
1830 3052 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 100)]
] -100.0 MRshow
1.000 UL
LTb
2010 3367 M
31 0 V
4618 0 R
-31 0 V
2010 3784 M
31 0 V
4618 0 R
-31 0 V
2010 3997 M
31 0 V
4618 0 R
-31 0 V
2010 4099 M
63 0 V
4586 0 R
-63 0 V
stroke
1830 4099 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1000)]
] -100.0 MRshow
1.000 UL
LTb
2010 4414 M
31 0 V
4618 0 R
-31 0 V
2010 4830 M
31 0 V
4618 0 R
-31 0 V
2010 5043 M
31 0 V
4618 0 R
-31 0 V
2010 5145 M
63 0 V
4586 0 R
-63 0 V
stroke
1830 5145 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 10000)]
] -100.0 MRshow
1.000 UL
LTb
2010 5460 M
31 0 V
4618 0 R
-31 0 V
2010 5876 M
31 0 V
4618 0 R
-31 0 V
2010 6090 M
31 0 V
4618 0 R
-31 0 V
2010 6191 M
63 0 V
4586 0 R
-63 0 V
stroke
1830 6191 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 100000)]
] -100.0 MRshow
1.000 UL
LTb
2010 960 M
0 63 V
0 5168 R
0 -63 V
stroke
2010 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0)]
] -100.0 MCshow
1.000 UL
LTb
2940 960 M
0 63 V
0 5168 R
0 -63 V
stroke
2940 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.2)]
] -100.0 MCshow
1.000 UL
LTb
3870 960 M
0 63 V
0 5168 R
0 -63 V
stroke
3870 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.4)]
] -100.0 MCshow
1.000 UL
LTb
4799 960 M
0 63 V
0 5168 R
0 -63 V
stroke
4799 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.6)]
] -100.0 MCshow
1.000 UL
LTb
5729 960 M
0 63 V
0 5168 R
0 -63 V
stroke
5729 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.8)]
] -100.0 MCshow
1.000 UL
LTb
6659 960 M
0 63 V
0 5168 R
0 -63 V
stroke
6659 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1)]
] -100.0 MCshow
1.000 UL
LTb
1.000 UL
LTb
2010 6191 N
0 -5231 V
4649 0 V
0 5231 V
-4649 0 V
Z stroke
LCb setrgbcolor
240 3575 M
currentpoint gsave translate -270 rotate 0 0 moveto
[ [(Helvetica) 300.0 0.0 true true 0 (Training Set Size)]
] -100.0 MCshow
grestore
LTb
LCb setrgbcolor
4334 210 M
[ [(Helvetica) 300.0 0.0 true true 0 (Stream Progress)]
] -100.0 MCshow
LTb
1.000 UP
1.000 UL
LTb
% Begin plot #1
5.000 UL
LT0
LCb setrgbcolor
5423 3925 M
[ [(Helvetica) 300.0 0.0 true true 0 (AC)]
] -100.0 MRshow
LT0
5603 3925 M
783 0 V
2056 3280 M
47 273 V
46 159 V
47 159 V
46 106 V
47 80 V
46 59 V
47 53 V
46 37 V
47 23 V
46 22 V
47 21 V
46 20 V
47 19 V
46 19 V
47 18 V
46 17 V
47 17 V
46 16 V
47 15 V
46 15 V
47 15 V
46 13 V
47 14 V
46 13 V
47 13 V
46 12 V
47 13 V
46 11 V
47 12 V
46 11 V
47 11 V
46 11 V
47 10 V
46 10 V
47 10 V
46 10 V
47 10 V
46 9 V
47 9 V
46 9 V
47 9 V
46 9 V
47 8 V
46 8 V
47 9 V
46 8 V
47 8 V
46 7 V
47 8 V
46 8 V
46 7 V
47 7 V
46 7 V
47 7 V
46 7 V
47 7 V
46 7 V
47 7 V
46 6 V
47 7 V
46 6 V
47 6 V
46 6 V
47 6 V
46 6 V
47 6 V
46 6 V
47 6 V
46 6 V
47 5 V
46 6 V
47 5 V
46 6 V
47 5 V
46 6 V
47 5 V
46 5 V
47 5 V
46 5 V
47 5 V
46 5 V
47 5 V
46 5 V
47 5 V
46 5 V
47 4 V
46 5 V
47 5 V
46 4 V
47 5 V
46 4 V
47 5 V
46 4 V
47 4 V
46 5 V
47 4 V
46 4 V
47 4 V
46 1 V
% End plot #1
% Begin plot #2
stroke
LT1
LCb setrgbcolor
5423 3625 M
[ [(Helvetica) 300.0 0.0 true true 0 (HAT)]
] -100.0 MRshow
LT1
5603 3625 M
783 0 V
2149 960 M
0 1129 V
47 0 V
46 0 V
47 0 V
46 558 V
47 0 V
46 0 V
47 0 V
46 0 V
47 142 V
46 0 V
47 0 V
46 0 V
47 0 V
46 0 V
47 0 V
46 0 V
47 0 V
46 383 V
47 0 V
46 0 V
47 0 V
46 0 V
47 0 V
46 0 V
47 37 V
46 0 V
47 0 V
46 0 V
47 0 V
46 40 V
47 0 V
46 715 V
47 0 V
46 0 V
47 0 V
46 0 V
47 25 V
46 0 V
47 0 V
46 0 V
47 23 V
46 0 V
47 0 V
46 0 V
47 0 V
46 0 V
47 50 V
46 0 V
46 0 V
47 0 V
46 0 V
47 0 V
46 9 V
47 0 V
46 0 V
47 144 V
46 0 V
47 0 V
46 0 V
47 0 V
46 13 V
47 0 V
46 0 V
47 0 V
46 0 V
47 8 V
46 0 V
47 0 V
46 0 V
47 0 V
46 41 V
47 0 V
46 0 V
47 0 V
46 4 V
47 0 V
46 0 V
47 0 V
46 0 V
47 29 V
46 0 V
47 0 V
46 0 V
47 22 V
46 0 V
47 0 V
46 0 V
47 0 V
46 0 V
47 26 V
46 0 V
47 0 V
46 0 V
47 136 V
46 0 V
47 0 V
46 0 V
% End plot #2
% Begin plot #3
stroke
LT2
LCb setrgbcolor
5423 3325 M
[ [(Helvetica) 300.0 0.0 true true 0 (ILAC)]
] -100.0 MRshow
LT2
5603 3325 M
783 0 V
2056 4229 M
47 184 V
46 131 V
47 101 V
46 83 V
47 70 V
46 61 V
47 53 V
46 48 V
47 43 V
46 40 V
47 36 V
46 34 V
47 31 V
46 30 V
47 27 V
46 26 V
47 25 V
46 23 V
47 22 V
46 21 V
47 21 V
46 19 V
47 18 V
46 18 V
47 17 V
46 17 V
47 16 V
46 15 V
47 15 V
46 15 V
47 14 V
46 13 V
47 13 V
46 13 V
47 13 V
46 12 V
47 11 V
46 12 V
47 11 V
46 11 V
47 11 V
46 10 V
47 11 V
46 9 V
47 10 V
46 10 V
47 9 V
46 9 V
47 9 V
46 9 V
46 9 V
47 8 V
46 9 V
47 8 V
46 8 V
47 8 V
46 8 V
47 7 V
46 8 V
47 7 V
46 7 V
47 8 V
46 7 V
47 7 V
46 6 V
47 7 V
46 7 V
47 6 V
46 7 V
47 6 V
46 6 V
47 7 V
46 6 V
47 6 V
46 6 V
47 5 V
46 6 V
47 6 V
46 6 V
47 5 V
46 6 V
47 5 V
46 5 V
47 6 V
46 5 V
47 5 V
46 5 V
47 5 V
46 5 V
47 5 V
46 5 V
47 5 V
46 5 V
47 5 V
46 4 V
47 5 V
46 5 V
47 4 V
46 1 V
% End plot #3
% Begin plot #4
stroke
LT3
LCb setrgbcolor
5423 3025 M
[ [(Helvetica) 300.0 0.0 true true 0 (PESS \(instance\))]
] -100.0 MRshow
LT3
5603 3025 M
783 0 V
2056 1774 M
47 -83 V
46 -101 V
47 0 V
46 101 V
47 -101 V
46 0 V
47 0 V
46 -131 V
47 -184 V
46 416 V
47 153 V
46 -153 V
47 0 V
46 -101 V
47 0 V
46 101 V
47 -101 V
46 0 V
47 -315 V
46 315 V
47 0 V
46 101 V
47 -101 V
46 101 V
47 0 V
46 0 V
47 153 V
46 0 V
47 -569 V
46 416 V
47 153 V
46 -70 V
47 -184 V
46 184 V
47 -184 V
46 -131 V
47 0 V
46 0 V
47 232 V
46 153 V
47 -385 V
46 -184 V
47 416 V
46 -416 V
47 499 V
46 -83 V
47 -101 V
46 254 V
47 -254 V
46 0 V
46 460 V
47 -591 V
46 315 V
47 -184 V
46 0 V
47 0 V
46 0 V
47 101 V
46 -101 V
47 184 V
46 -184 V
47 254 V
46 -153 V
47 0 V
46 214 V
47 53 V
46 -184 V
47 -184 V
46 254 V
47 -254 V
46 657 V
47 -556 V
46 83 V
47 -83 V
46 -232 V
47 0 V
46 131 V
47 0 V
46 101 V
47 -232 V
46 0 V
47 385 V
46 -70 V
47 -184 V
46 0 V
47 184 V
46 0 V
47 -184 V
46 101 V
47 -101 V
46 254 V
47 -70 V
46 -184 V
47 101 V
46 -232 V
47 131 V
46 0 V
47 101 V
46 -101 V
% End plot #4
% Begin plot #5
stroke
LT4
LCb setrgbcolor
5423 2725 M
[ [(Helvetica) 300.0 0.0 true true 0 (KHSS \(instance\))]
] -100.0 MRshow
LT4
5603 2725 M
783 0 V
2056 1905 M
47 -315 V
46 0 V
47 184 V
46 -83 V
47 -101 V
46 101 V
47 -101 V
46 0 V
47 0 V
46 101 V
47 153 V
46 -70 V
47 0 V
46 -184 V
47 184 V
46 -315 V
47 232 V
46 -101 V
47 -315 V
46 315 V
47 101 V
46 0 V
47 -416 V
46 499 V
47 -184 V
46 101 V
47 153 V
46 0 V
47 -254 V
46 101 V
47 153 V
46 0 V
47 -153 V
46 267 V
47 -184 V
46 0 V
47 0 V
46 -315 V
47 232 V
46 83 V
47 -315 V
46 -184 V
47 499 V
46 -315 V
47 131 V
46 184 V
47 -184 V
46 254 V
47 -70 V
46 -499 V
46 775 V
47 -359 V
46 83 V
47 -315 V
46 131 V
47 0 V
46 0 V
47 184 V
46 -184 V
47 -131 V
46 -184 V
47 416 V
46 83 V
47 0 V
46 -83 V
47 398 V
46 -131 V
47 -368 V
46 0 V
47 0 V
46 795 V
47 -611 V
46 0 V
47 0 V
46 70 V
47 -254 V
46 -131 V
47 232 V
46 153 V
47 -153 V
46 -232 V
47 315 V
46 -83 V
47 153 V
46 -153 V
47 -416 V
46 569 V
47 -153 V
46 0 V
47 -101 V
46 0 V
47 254 V
46 61 V
47 -315 V
46 0 V
47 184 V
46 -315 V
47 232 V
46 -101 V
% End plot #5
stroke
1.000 UL
LTb
2010 6191 N
0 -5231 V
4649 0 V
0 5231 V
-4649 0 V
Z stroke
1.000 UP
1.000 UL
LTb
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica

%%EndDocument
 @endspecial 2025 2158 a(\(e\))33 b(Size)i(of)h(the)g(training)g(sets)g
(as)g(the)2025 2233 y(stream)18 b(e)n(v)o(olv)o(es.)854
2433 y Fs(Figur)o(e)g(3:)23 b(Brazilian)c(Pr)o(esidential)e(Elections.)
23 b(T)-6 b(weets)19 b(ar)o(e)g(in)f(P)o(ortuguese.)p
0 TeXcolorgray -152 2681 a Ft(best)33 b(performers)f(in)g(terms)g(of)g
(amount)h(of)f(computing)i(resources)f(re-)-152 2768
y(quired.)49 b(Also,)29 b(resources)f(required)g(during)g(the)f
(process)h(signi\002cantly)-152 2855 y(increases)23 b(when)g(PESS)e
(and)i(KHSS)e(operate)i(on)f(batch)h(mode,)h(b)o(ut)e(still,)-152
2942 y(ILA)m(C)c(is)h(the)g(w)o(orst)g(performer)l(.)-152
3131 y Fu(4.2)99 b(TIME')l(s)26 b(P)n(erson)g(of)e(the)i(Y)-11
b(ear)-77 3238 y Ft(Ev)o(ery)15 b(year)m(,)h(TIME)e(magazine)i(selects)
f(the)g(person)g(\(or)g(a)g(group)h(of)f(per)o(-)-152
3326 y(sons\))h(that)f(has)g(mostly)h(in\003uenced)g(during)g(the)f
(year)l(.)22 b(The)15 b(chosen)i(person)-152 3413 y(for)23
b(2010)h(w)o(as)f(Mark)h(Zuck)o(erber)o(g.)35 b(The)23
b(reader)g(choice,)i(ho)n(we)n(v)o(er)m(,)f(w)o(as)-152
3500 y(Julian)c(Assange,)f(with)g(an)g(o)o(v)o(erwhelming)h
(superiority)f(of)g(v)o(otes.)-152 3688 y Fu(Zuck)o(erber)o(g)28
b(and)d(Assange)-152 3808 y Ft(W)-6 b(e)33 b(collected)g(5,616)h
(messages)g(in)f(English)g(referencing)h(Julian)f(As-)-152
3896 y(sange)18 b(and)f(Mark)g(Zuck)o(erber)o(g)g(from)g(1-15-2010)h
(to)e(12-21-2010.)25 b(W)-6 b(e)16 b(la-)-152 3983 y(beled)21
b(them)f(in)f(order)i(to)e(track)h(di)n(v)o(erse)h(sentiments)f(re)o
(garding)g(the)g(mag-)-152 4070 y(azine')l(s)i(decision.)31
b(Sentiments)21 b(include)h(\(dis\)appro)o(v)n(al,)h(surprise)e
(\(since)-152 4157 y(the)j(reader)h(choice)f(w)o(as)g(pointing)h(to)f
(Julian)g(Assange\),)h(and)g(e)n(v)o(en)g(fury)-5 b(.)-152
4244 y(The)21 b(dataset)g(contains)h(7,294)g(distinct)f(terms,)g(and)g
(a)g(message)h(is)f(posted)-152 4332 y(e)n(v)o(ery)f(45)f(seconds,)h
(on)g(a)o(v)o(erage.)-77 4419 y(Figure)29 b(4)g(\(a\))g(sho)n(ws)g(the)
g(results)g(in)g(terms)g(of)g(MSE.)f(As)h(it)f(can)h(be)-152
4506 y(seen,)h(a)d(better)h(approximation)h(is)e(obtained)h(by)g(HA)-8
b(T)27 b(and)h(ILA)m(C.)e(F)o(or)-152 4593 y(this)19
b(dataset,)g(A)m(C)g(w)o(as)g(not)g(ef)n(fecti)n(v)o(e)h(in)f(the)g
(\002rst)f(time)h(steps.)k(At)c(the)g(end)-152 4680 y(of)28
b(the)g(process,)j(both)d(PESS)e(\(instance\))j(and)f(KHSS)f
(\(instance\))h(algo-)-152 4767 y(rithms)d(achie)n(v)o(ed)h(competiti)n
(v)o(e)g(numbers)g(when)f(compared)i(against)e(the)-152
4855 y(best)19 b(performers.)-77 4942 y(Figure)14 b(4)h(\(b\))f(sho)n
(ws)h(the)g(trade-of)n(f)g(between)g(labeling)g(ef)n(fort)f(and)h(MSE.)
-152 5029 y(Again,)j(MSE)f(numbers)h(decrease)g(as)g(more)g(labeling)g
(ef)n(fort)f(is)g(spent)h(dur)o(-)-152 5116 y(ing)29
b(the)f(process.)52 b(This)27 b(trend)i(is)f(particularly)g(e)n
(videnced)i(for)e(smaller)-152 5203 y(batch)g(sizes.)48
b(Further)m(,)29 b(the)f(KHSS)e(algorithms)h(sho)n(ws)h(a)f(better)h
(trade-)-152 5290 y(of)n(f)d(between)h(labeling)f(ef)n(fort)g(and)g
(MSE.)f(Finally)-5 b(,)26 b(Figure)e(4)h(\(c\))g(sho)n(ws)-152
5378 y(RAM-Hours)e(numbers)g(for)g(the)f(e)n(v)n(aluated)i(algorithms.)
33 b(The)22 b(A)m(C)g(algo-)p 0 TeXcolorgray 0 TeXcolorgray
2040 2681 a(rithm,)f(as)g(well)g(as)g(PESS)e(\(instance\))j(and)g(KHSS)
e(\(instance\))h(are,)g(again,)2040 2768 y(e)o(xtremely)h(competiti)n
(v)o(e)g(in)g(terms)f(of)h(amount)g(of)g(computing)g(resources)2040
2855 y(required.)i(Further)m(,)18 b(the)g(amount)i(of)e(resources)i
(required)f(during)h(the)e(pro-)2040 2942 y(cess)e(signi\002cantly)g
(increases)g(when)g(PESS)d(and)j(KHSS)f(operate)h(on)g(batch)2040
3030 y(mode,)j(b)o(ut)g(still,)f(ILA)m(C)g(is)g(the)h(w)o(orst)g
(performer)l(.)2040 3218 y Fu(4.3)99 b(FIF)-9 b(A)25
b(W)-7 b(orld)24 b(Cup)2115 3326 y Ft(The)g(2010)g(Soccer)g(W)-6
b(orld)24 b(Cup)g(in)m(v)o(olv)o(ed)g(32)g(teams.)38
b(The)24 b(Brazilian)2040 3413 y(team)e(w)o(as)g(defeated)h(by)g(the)f
(Dutch)g(team)g(on)g(07-02-2010,)j(after)d(a)g(con-)2040
3500 y(tro)o(v)o(ersial)c(match.)23 b(The)18 b(Brazilian)g(team)f
(scored)i(\002rst,)e(b)o(ut)h(soon)h(after)e(the)2040
3587 y(Dutch)28 b(team)g(scored)g(twice)f(and)h(w)o(on)g(the)g(match.)
49 b(A)28 b(speci\002c)f(player)m(,)2040 3674 y(Felipe)18
b(Melo,)g(had)g(decisi)n(v)o(e)h(participation)f(\(for)g(better)f(and)i
(w)o(orse\))f(in)g(all)2040 3762 y(three)23 b(goals.)34
b(Speci\002cally)-5 b(,)23 b(Figure)f(5)g(\(a\))h(sho)n(ws)g(ho)n(w)g
(the)f(appreciation)2040 3849 y(for)d(Felipe)f(Melo)i(v)n(aried)f
(during)h(the)f(match.)2040 4037 y Fu(The)26 b(Brazilian)f(Defeat)2040
4157 y Ft(W)-6 b(e)14 b(collected)h(3,214)g(messages)h(in)e(Portuguese)
h(referencing)h(Felipe)e(Melo)2040 4244 y(that)h(were)h(posted)g(in)f
(T)-6 b(witter)14 b(as)h(the)h(match)g(w)o(as)f(happening.)24
b(W)-6 b(e)15 b(labeled)2040 4332 y(them)22 b(in)h(order)f(to)g(track)g
(the)h(appreciation)g(for)f(the)g(participation)h(of)f(Fe-)2040
4419 y(lipe)d(Melo.)2115 4506 y(Figure)31 b(5)g(\(b\))g(sho)n(ws)g(the)
h(results)e(in)h(terms)g(of)g(MSE.As)f(it)h(can)g(be)2040
4593 y(seen,)25 b(the)e(A)m(C)g(algorithm)h(achie)n(v)o(ed)h(the)e(w)o
(orst)h(MSE)f(numbers)h(for)g(this)2040 4680 y(dataset.)63
b(On)33 b(the)f(other)h(hand,)j(HA)-8 b(T)i(,)31 b(ILA)m(C,)g(as)i
(well)e(as)h(PESS)f(\(in-)2040 4767 y(stance\))23 b(and)g(KHSS)e
(\(instance\))i(sho)n(wed)h(e)o(xtremely)f(competiti)n(v)o(e)g(num-)
2040 4855 y(bers.)59 b(This)30 b(is)g(e)o(xpected,)35
b(since)30 b(this)h(dataset)g(contains)g(three)g(sudden)2040
4942 y(drifts)19 b(\(as)h(sho)n(wn)h(in)f(Figure)g(5)g(\(a\)\),)f(and)h
(HA)-8 b(T)i(,)19 b(ILA)m(C,)g(PESS)f(\(instance\))2040
5029 y(and)i(KHSS)e(\(instance\))h(were)g(all)g(able)g(to)g(ensure)h
(adapti)n(v)o(eness.)25 b(F)o(or)19 b(this)2040 5116
y(dataset,)k(memorability)g(is)f(not)h(mandatory)g(\(as)g(the)f
(sentiment)h(distrib)o(u-)2040 5203 y(tion)k(ne)n(v)o(er)h(returns)f
(to)f(a)h(pre-drift)g(distrib)o(ution\),)h(and)g(thus)f(PESS)e(\(in-)
2040 5290 y(stance\))h(and)g(KHSS)e(\(instance\))h(were)h(not)f(able)h
(to)f(pro)o(vide)h(signi\002cant)2040 5378 y(impro)o(v)o(ements,)20
b(although)g(being)g(the)f(best)g(performers)g(o)o(v)o(erall.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray -58 808 a @beginspecial 50
@llx 50 @lly 410 @urx 377 @ury 1584 @rwi 1152 @rhi @setspecial
%%BeginDocument: assange_1_temporal_mse.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: assange_1_temporal_mse.eps
%%Creator: gnuplot 4.4 patchlevel 4
%%CreationDate: Sat Aug 31 19:46:08 2013
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 377
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following true/false flags may be edited by hand if desired.
% The unit line width and grayscale image gamma correction may also be changed.
%
/Color true def
/Blacktext false def
/Solid false def
/Dashlength 1 def
/Landscape false def
/Level1 false def
/Rounded false def
/ClipToBoundingBox false def
/TransparentPatterns false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/Gamma 1.0 def
%
/vshift -100 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
Level1 {} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (assange_1_temporal_mse.eps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.4 patchlevel 4)
  /Author (adriano)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Sat Aug 31 19:46:08 2013)
  /DOCINFO pdfmark
end
} ifelse
/doclip {
  ClipToBoundingBox {
    newpath 50 50 moveto 410 50 lineto 410 377 lineto 50 377 lineto closepath
    clip
  } if
} def
%
% Gnuplot Prolog Version 4.4 (August 2010)
%
%/SuppressPDFMark true def
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/g {setgray} bind def
/Gshow {show} def   % May be redefined later in the file to support UTF-8
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
3.8 setmiterlimit
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  gsave 1 setgray fill grestore clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {Gshow} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} def
/Gswidth {dup type /stringtype eq {stringwidth} {pop (n) stringwidth} ifelse} def
/MFwidth {0 exch { dup 5 get 3 ge { 5 get 3 eq { 0 } { pop } ifelse }
 {dup 3 get{dup dup 0 get findfont exch 1 get scalefont setfont
     6 get Gswidth pop add} {pop} ifelse} ifelse} forall} def
/MLshow { currentpoint stroke M
  0 exch R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/XYsave    { [( ) 1 2 true false 3 ()] } bind def
/XYrestore { [( ) 1 2 true false 4 ()] } bind def
end
%%EndProlog
gnudict begin
gsave
doclip
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 300 scalefont setfont
1.000 UL
LTb
1470 960 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 960 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.1)]
] -100.0 MRshow
1.000 UL
LTb
1470 2006 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 2006 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.2)]
] -100.0 MRshow
1.000 UL
LTb
1470 3052 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 3052 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.3)]
] -100.0 MRshow
1.000 UL
LTb
1470 4099 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 4099 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.4)]
] -100.0 MRshow
1.000 UL
LTb
1470 5145 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 5145 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.5)]
] -100.0 MRshow
1.000 UL
LTb
1470 6191 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 6191 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.6)]
] -100.0 MRshow
1.000 UL
LTb
1470 960 M
0 63 V
0 5168 R
0 -63 V
stroke
1470 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0)]
] -100.0 MCshow
1.000 UL
LTb
2508 960 M
0 63 V
0 5168 R
0 -63 V
stroke
2508 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.2)]
] -100.0 MCshow
1.000 UL
LTb
3546 960 M
0 63 V
0 5168 R
0 -63 V
stroke
3546 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.4)]
] -100.0 MCshow
1.000 UL
LTb
4583 960 M
0 63 V
0 5168 R
0 -63 V
stroke
4583 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.6)]
] -100.0 MCshow
1.000 UL
LTb
5621 960 M
0 63 V
0 5168 R
0 -63 V
stroke
5621 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.8)]
] -100.0 MCshow
1.000 UL
LTb
6659 960 M
0 63 V
0 5168 R
0 -63 V
stroke
6659 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1)]
] -100.0 MCshow
1.000 UL
LTb
1.000 UL
LTb
1470 6191 N
0 -5231 V
5189 0 V
0 5231 V
-5189 0 V
Z stroke
LCb setrgbcolor
240 3575 M
currentpoint gsave translate -270 rotate 0 0 moveto
[ [(Helvetica) 300.0 0.0 true true 0 (MSE)]
] -100.0 MCshow
grestore
LTb
LCb setrgbcolor
4064 210 M
[ [(Helvetica) 300.0 0.0 true true 0 (Stream Progress)]
] -100.0 MCshow
LTb
1.000 UP
1.000 UL
LTb
% Begin plot #1
5.000 UL
LT0
LCb setrgbcolor
5336 5978 M
[ [(Helvetica) 300.0 0.0 true true 0 (AC)]
] -100.0 MRshow
LT0
5516 5978 M
783 0 V
1489 4099 M
18 -1047 V
19 1221 V
19 218 V
18 -79 V
19 558 V
19 324 V
18 178 V
19 80 V
19 325 V
18 76 V
19 107 V
19 91 V
18 -109 V
19 44 V
18 -91 V
19 -112 V
19 17 V
18 -12 V
19 41 V
19 -161 V
18 -29 V
19 20 V
19 -135 V
18 2 V
19 -39 V
19 -16 V
18 78 V
19 1 V
19 -34 V
18 52 V
19 -16 V
19 32 V
18 15 V
19 -61 V
19 30 V
18 -43 V
19 -40 V
19 -24 V
18 2 V
19 79 V
19 -36 V
18 -11 V
19 -46 V
18 -9 V
19 26 V
19 -54 V
18 -29 V
19 3 V
19 -17 V
18 -37 V
19 -26 V
19 -5 V
18 -33 V
19 -4 V
19 24 V
18 -60 V
19 -84 V
19 -73 V
18 -70 V
19 -85 V
19 -74 V
18 -55 V
19 -61 V
19 -67 V
18 -50 V
19 -56 V
19 -47 V
18 -45 V
19 -66 V
19 -35 V
18 -56 V
19 -33 V
18 -53 V
19 -59 V
19 -50 V
18 -49 V
19 -8 V
19 -40 V
18 -20 V
19 -45 V
19 -50 V
18 -18 V
19 -36 V
19 -35 V
18 -41 V
19 -45 V
19 -38 V
18 -44 V
19 -37 V
19 -41 V
18 -41 V
19 -40 V
19 -39 V
18 -33 V
19 -21 V
19 -37 V
18 -36 V
19 -35 V
19 -29 V
18 -34 V
19 -34 V
19 -27 V
stroke 3392 3256 M
18 -33 V
19 -21 V
18 -31 V
19 -31 V
19 -29 V
18 -30 V
19 -29 V
19 -23 V
18 -28 V
19 -27 V
19 -23 V
18 -26 V
19 -26 V
19 -25 V
18 -26 V
19 -15 V
19 -20 V
18 -20 V
19 -19 V
19 -24 V
18 -14 V
19 -10 V
19 -14 V
18 -10 V
19 -17 V
19 -22 V
18 -5 V
19 -17 V
19 -13 V
18 -16 V
19 -20 V
18 -20 V
19 0 V
19 -12 V
18 -16 V
19 -18 V
19 -19 V
18 -15 V
19 -14 V
19 -15 V
18 -10 V
19 -17 V
19 -18 V
18 -10 V
19 12 V
19 11 V
18 -6 V
19 -10 V
19 8 V
18 -7 V
19 15 V
19 -10 V
18 -9 V
19 7 V
19 1 V
18 -9 V
19 -6 V
19 -6 V
18 -5 V
19 -12 V
18 1 V
19 -6 V
19 1 V
18 4 V
19 -8 V
19 1 V
18 -15 V
19 -5 V
19 -14 V
18 -5 V
19 4 V
19 -11 V
18 -5 V
19 -13 V
19 -14 V
18 -4 V
19 -8 V
19 -7 V
18 -7 V
19 -5 V
19 -4 V
18 -7 V
19 -4 V
19 -7 V
18 -7 V
19 -4 V
19 -1 V
18 -4 V
19 -7 V
18 -12 V
19 -1 V
19 -11 V
18 -9 V
19 -9 V
19 -12 V
18 -8 V
19 -9 V
19 -11 V
18 -3 V
19 -4 V
19 -3 V
18 0 V
19 -6 V
19 -1 V
stroke 5332 2122 M
18 -10 V
19 -3 V
19 -11 V
18 -3 V
19 -10 V
19 -8 V
18 -10 V
19 0 V
19 -10 V
18 -10 V
19 -7 V
19 -10 V
18 -10 V
19 -9 V
18 -10 V
19 -9 V
19 -9 V
18 -9 V
19 -9 V
19 -9 V
18 -9 V
19 -9 V
19 -9 V
18 -9 V
19 -8 V
19 -9 V
18 -9 V
19 -8 V
19 -8 V
18 -9 V
19 -8 V
19 -8 V
18 -8 V
19 -8 V
19 -8 V
18 -8 V
19 -8 V
19 -7 V
18 -8 V
19 -8 V
19 -1 V
18 -3 V
19 -6 V
19 -5 V
18 -8 V
19 -7 V
18 -7 V
19 -7 V
19 -5 V
18 -8 V
19 -5 V
19 -7 V
18 -7 V
19 -6 V
19 -7 V
18 -7 V
19 -5 V
19 3 V
18 -6 V
19 -7 V
19 -7 V
18 -2 V
19 1 V
19 -6 V
18 -1 V
19 -1 V
19 17 V
18 5 V
19 8 V
19 7 V
18 7 V
3 5 V
% End plot #1
% Begin plot #2
stroke
LT1
LCb setrgbcolor
5336 5678 M
[ [(Helvetica) 300.0 0.0 true true 0 (HAT)]
] -100.0 MRshow
LT1
5516 5678 M
783 0 V
1489 3575 M
18 -523 V
19 1395 V
19 305 V
18 -340 V
19 210 V
19 299 V
18 -103 V
19 -22 V
19 -122 V
18 -243 V
19 -158 V
19 -54 V
18 -232 V
19 -28 V
18 -24 V
19 -144 V
19 -70 V
18 47 V
19 -36 V
19 -107 V
18 -2 V
19 21 V
19 -3 V
18 -24 V
19 -42 V
19 -19 V
18 19 V
19 19 V
19 -1 V
18 -1 V
19 -17 V
19 0 V
18 -15 V
19 1 V
19 14 V
18 -42 V
19 -26 V
19 1 V
18 -50 V
19 -10 V
19 -59 V
18 -45 V
19 -30 V
18 -29 V
19 40 V
19 17 V
18 -6 V
19 26 V
19 25 V
18 24 V
19 -7 V
19 -26 V
18 -16 V
19 -15 V
19 23 V
18 -6 V
19 -50 V
19 -58 V
18 -47 V
19 -54 V
19 -35 V
18 -26 V
19 -50 V
19 -48 V
18 -23 V
19 -30 V
19 -21 V
18 -29 V
19 -42 V
19 -12 V
18 -34 V
19 -32 V
18 -39 V
19 -23 V
19 -23 V
18 -23 V
19 -2 V
19 -21 V
18 -34 V
19 -21 V
19 -32 V
18 -13 V
19 -19 V
19 -24 V
18 -24 V
19 -30 V
19 -23 V
18 -28 V
19 -22 V
19 -27 V
18 -20 V
19 -26 V
19 -26 V
18 -25 V
19 -24 V
19 -24 V
18 -23 V
19 -23 V
19 -17 V
18 -22 V
19 -22 V
19 -16 V
stroke 3392 2077 M
18 -15 V
19 -16 V
18 -20 V
19 -20 V
19 -14 V
18 -19 V
19 -19 V
19 -18 V
18 -19 V
19 -17 V
19 -13 V
18 -17 V
19 -17 V
19 -17 V
18 -16 V
19 -16 V
19 -11 V
18 -16 V
19 -15 V
19 -11 V
18 -15 V
19 -2 V
19 -10 V
18 -6 V
19 -10 V
19 -14 V
18 -2 V
19 -13 V
19 2 V
18 -13 V
19 -13 V
18 -13 V
19 3 V
19 -5 V
18 -1 V
19 -13 V
19 -12 V
18 -8 V
19 -5 V
19 -8 V
18 -12 V
19 -11 V
19 -12 V
18 0 V
19 17 V
19 20 V
18 17 V
19 6 V
19 6 V
18 -1 V
19 16 V
19 -4 V
18 -4 V
19 9 V
19 5 V
18 -7 V
19 -5 V
19 0 V
18 -5 V
19 -4 V
18 3 V
19 2 V
19 2 V
18 -1 V
19 3 V
19 5 V
18 -10 V
19 2 V
19 -7 V
18 -1 V
19 -7 V
19 -9 V
18 -4 V
19 -7 V
19 -6 V
18 -1 V
19 -6 V
19 -9 V
18 -1 V
19 -6 V
19 -6 V
18 2 V
19 -3 V
19 -6 V
18 -3 V
19 -3 V
19 -6 V
18 -3 V
19 -9 V
18 -8 V
19 0 V
19 0 V
18 -6 V
19 -5 V
19 0 V
18 -6 V
19 -3 V
19 -7 V
18 -1 V
19 -2 V
19 0 V
18 -3 V
19 -5 V
19 0 V
stroke 5332 1483 M
18 -7 V
19 -8 V
19 -7 V
18 10 V
19 -8 V
19 -2 V
18 -5 V
19 0 V
19 -7 V
18 -7 V
19 -7 V
19 -7 V
18 -7 V
19 -7 V
18 -6 V
19 -7 V
19 -7 V
18 -6 V
19 -7 V
19 -6 V
18 -7 V
19 -6 V
19 -6 V
18 -7 V
19 -6 V
19 -6 V
18 -6 V
19 -6 V
19 -6 V
18 -6 V
19 -6 V
19 -6 V
18 -5 V
19 -6 V
19 -6 V
18 -5 V
19 -6 V
19 -6 V
18 -5 V
19 -6 V
19 -1 V
18 -1 V
19 -3 V
19 -5 V
18 -6 V
19 -5 V
18 -1 V
19 -1 V
19 -3 V
18 -5 V
19 -1 V
19 -1 V
18 -5 V
19 -5 V
19 -5 V
18 -1 V
19 -3 V
19 -1 V
18 -5 V
19 -5 V
19 -5 V
18 1 V
19 7 V
19 -4 V
18 -1 V
19 3 V
19 8 V
18 15 V
19 14 V
19 8 V
18 11 V
3 1 V
% End plot #2
% Begin plot #3
stroke
LT2
LCb setrgbcolor
5336 5378 M
[ [(Helvetica) 300.0 0.0 true true 0 (ILAC)]
] -100.0 MRshow
LT2
5516 5378 M
783 0 V
1489 2006 M
18 -523 V
19 1046 V
19 262 V
18 -366 V
19 366 V
19 112 V
18 19 V
19 14 V
19 -93 V
18 -123 V
19 -147 V
19 -3 V
18 34 V
19 135 V
18 117 V
19 -81 V
19 -13 V
18 235 V
19 3 V
19 3 V
18 2 V
19 93 V
19 20 V
18 -66 V
19 21 V
19 57 V
18 -40 V
19 -20 V
19 104 V
18 81 V
19 -6 V
19 -22 V
18 118 V
19 51 V
19 78 V
18 -12 V
19 -38 V
19 -9 V
18 -23 V
19 -33 V
19 5 V
18 -44 V
19 -18 V
18 -40 V
19 52 V
19 72 V
18 15 V
19 -7 V
19 35 V
18 23 V
19 -48 V
19 -36 V
18 4 V
19 23 V
19 -6 V
18 -43 V
19 -41 V
19 -58 V
18 -55 V
19 -54 V
19 -43 V
18 -26 V
19 -41 V
19 -40 V
18 -31 V
19 -22 V
19 -6 V
18 -13 V
19 -35 V
19 -20 V
18 -34 V
19 -40 V
18 -31 V
19 -38 V
19 -30 V
18 -30 V
19 -8 V
19 -8 V
18 -28 V
19 -27 V
19 -26 V
18 -13 V
19 -19 V
19 -12 V
18 -24 V
19 -30 V
19 -23 V
18 -28 V
19 -28 V
19 -27 V
18 -21 V
19 -26 V
19 -20 V
18 -25 V
19 -19 V
19 -3 V
18 -23 V
19 -24 V
19 -17 V
18 -17 V
19 -22 V
19 -17 V
stroke 3392 2123 M
18 -16 V
19 -21 V
18 -21 V
19 -20 V
19 -15 V
18 -19 V
19 -19 V
19 -14 V
18 -14 V
19 -13 V
19 -18 V
18 -13 V
19 -18 V
19 -17 V
18 -12 V
19 -3 V
19 -12 V
18 -12 V
19 -11 V
19 -16 V
18 -11 V
19 14 V
19 -11 V
18 -15 V
19 -10 V
19 -15 V
18 -10 V
19 -10 V
19 -10 V
18 -14 V
19 -14 V
18 -9 V
19 6 V
19 -2 V
18 -1 V
19 -6 V
19 -9 V
18 -12 V
19 -13 V
19 -5 V
18 -12 V
19 -12 V
19 -12 V
18 3 V
19 6 V
19 10 V
18 2 V
19 -1 V
19 2 V
18 -4 V
19 6 V
19 -8 V
18 -8 V
19 -4 V
19 -1 V
18 2 V
19 -1 V
19 -1 V
18 -10 V
19 -8 V
18 -4 V
19 -7 V
19 -7 V
18 3 V
19 -10 V
19 2 V
18 0 V
19 2 V
19 -3 V
18 5 V
19 -10 V
19 -6 V
18 -1 V
19 -9 V
19 -9 V
18 2 V
19 -6 V
19 -6 V
18 -4 V
19 0 V
19 -6 V
18 5 V
19 0 V
19 -3 V
18 -3 V
19 11 V
19 -9 V
18 -3 V
19 -8 V
18 -3 V
19 5 V
19 -8 V
18 -3 V
19 -8 V
19 -8 V
18 -8 V
19 -8 V
19 -6 V
18 -2 V
19 -3 V
19 -5 V
18 -7 V
19 -5 V
19 0 V
stroke 5332 1458 M
18 -5 V
19 -5 V
19 -7 V
18 7 V
19 -4 V
19 -5 V
18 -5 V
19 -2 V
19 -5 V
18 -7 V
19 -4 V
19 -7 V
18 -7 V
19 -6 V
18 -7 V
19 -7 V
19 -6 V
18 -7 V
19 -6 V
19 -7 V
18 -6 V
19 -6 V
19 -6 V
18 -7 V
19 -6 V
19 -6 V
18 -6 V
19 -6 V
19 -6 V
18 -6 V
19 -5 V
19 -6 V
18 -6 V
19 -5 V
19 -6 V
18 -6 V
19 -5 V
19 -6 V
18 -5 V
19 -5 V
19 -2 V
18 -5 V
19 -5 V
19 -3 V
18 -6 V
19 -5 V
18 -5 V
19 -3 V
19 -5 V
18 -5 V
19 -3 V
19 -5 V
18 -5 V
19 -5 V
19 -4 V
18 -1 V
19 -1 V
19 9 V
18 -5 V
19 -4 V
19 -3 V
18 3 V
19 -1 V
19 -3 V
18 2 V
19 1 V
19 7 V
18 3 V
19 6 V
19 9 V
18 9 V
3 1 V
% End plot #3
% Begin plot #4
stroke
LT3
LCb setrgbcolor
5336 5078 M
[ [(Helvetica) 300.0 0.0 true true 0 (PESS \(instance\))]
] -100.0 MRshow
LT3
5516 5078 M
783 0 V
1489 3052 M
18 -523 V
19 1570 V
19 392 V
18 -183 V
19 575 V
19 38 V
18 28 V
19 80 V
19 -146 V
18 -119 V
19 -142 V
19 120 V
18 -83 V
19 -2 V
18 95 V
19 24 V
19 -9 V
18 -8 V
19 72 V
19 -85 V
18 66 V
19 -31 V
19 15 V
18 -91 V
19 -23 V
19 -2 V
18 16 V
19 34 V
19 49 V
18 45 V
19 43 V
19 40 V
18 22 V
19 36 V
19 -24 V
18 6 V
19 -22 V
19 5 V
18 -21 V
19 19 V
19 -82 V
18 -30 V
19 -16 V
18 -4 V
19 53 V
19 18 V
18 5 V
19 59 V
19 5 V
18 24 V
19 -6 V
19 -26 V
18 23 V
19 -6 V
19 -15 V
18 -42 V
19 -59 V
19 -83 V
18 -72 V
19 -78 V
19 -59 V
18 -48 V
19 -63 V
19 -54 V
18 -44 V
19 -42 V
19 -18 V
18 -18 V
19 -54 V
19 -38 V
18 -23 V
19 -15 V
18 -36 V
19 -55 V
19 -34 V
18 -25 V
19 -6 V
19 -31 V
18 -4 V
19 -37 V
19 -42 V
18 -3 V
19 -22 V
19 -34 V
18 -33 V
19 -38 V
19 -38 V
18 -42 V
19 -35 V
19 -41 V
18 -40 V
19 -38 V
19 -38 V
18 -27 V
19 -20 V
19 -25 V
18 -35 V
19 -24 V
19 -29 V
18 -34 V
19 -32 V
19 -32 V
stroke 3392 3190 M
18 -32 V
19 -21 V
18 -30 V
19 -30 V
19 -25 V
18 -28 V
19 -29 V
19 -23 V
18 -27 V
19 -27 V
19 -22 V
18 -21 V
19 -26 V
19 -16 V
18 -20 V
19 -11 V
19 -20 V
18 -19 V
19 -19 V
19 -11 V
18 -5 V
19 6 V
19 -18 V
18 -5 V
19 -18 V
19 -18 V
18 -1 V
19 -17 V
19 -5 V
18 -9 V
19 -12 V
18 -16 V
19 -1 V
19 -16 V
18 -19 V
19 -12 V
19 -4 V
18 -15 V
19 -11 V
19 -19 V
18 -14 V
19 -14 V
19 -18 V
18 -7 V
19 -17 V
19 -17 V
18 -17 V
19 -13 V
19 -6 V
18 -6 V
19 -2 V
19 -10 V
18 -15 V
19 -9 V
19 1 V
18 1 V
19 1 V
19 -12 V
18 -8 V
19 -15 V
18 -9 V
19 2 V
19 10 V
18 14 V
19 4 V
19 2 V
18 -9 V
19 -5 V
19 -8 V
18 -7 V
19 -8 V
19 -8 V
18 -7 V
19 -11 V
19 -10 V
18 -5 V
19 -4 V
19 -10 V
18 -4 V
19 -5 V
19 -1 V
18 5 V
19 -10 V
19 -7 V
18 -7 V
19 2 V
19 -7 V
18 -6 V
19 -7 V
18 -6 V
19 -1 V
19 -12 V
18 -12 V
19 -8 V
19 -12 V
18 -11 V
19 -11 V
19 -11 V
18 -11 V
19 -6 V
19 -3 V
18 0 V
19 -3 V
19 -1 V
stroke 5332 2097 M
18 -10 V
19 -3 V
19 -8 V
18 5 V
19 -1 V
19 -5 V
18 -10 V
19 -5 V
19 -10 V
18 -10 V
19 -7 V
19 -10 V
18 -10 V
19 -9 V
18 -10 V
19 -9 V
19 -9 V
18 -9 V
19 -9 V
19 -9 V
18 -9 V
19 -9 V
19 -9 V
18 -9 V
19 -8 V
19 -9 V
18 -8 V
19 -9 V
19 -8 V
18 -8 V
19 -8 V
19 -9 V
18 -8 V
19 -8 V
19 -8 V
18 -7 V
19 -8 V
19 -8 V
18 -8 V
19 -7 V
19 -3 V
18 -8 V
19 -7 V
19 -6 V
18 -7 V
19 -7 V
18 -8 V
19 -7 V
19 -5 V
18 -7 V
19 -5 V
19 -7 V
18 -7 V
19 -6 V
19 -7 V
18 3 V
19 3 V
19 1 V
18 -6 V
19 -5 V
19 -3 V
18 0 V
19 -3 V
19 -3 V
18 -1 V
19 -2 V
19 7 V
18 3 V
19 -1 V
19 9 V
18 5 V
3 -1 V
% End plot #4
% Begin plot #5
stroke
LT4
LCb setrgbcolor
5336 4778 M
[ [(Helvetica) 300.0 0.0 true true 0 (KHSS \(instance\))]
] -100.0 MRshow
LT4
5516 4778 M
783 0 V
1489 2801 M
18 -481 V
19 1604 V
19 80 V
18 -240 V
19 321 V
19 91 V
18 9 V
19 114 V
19 -102 V
18 -83 V
19 -150 V
19 133 V
18 -24 V
19 12 V
18 160 V
19 57 V
19 -3 V
18 -3 V
19 69 V
19 -97 V
18 43 V
19 -24 V
19 18 V
18 -60 V
19 -37 V
19 1 V
18 -15 V
19 1 V
19 82 V
18 46 V
19 27 V
19 55 V
18 -4 V
19 -5 V
19 -31 V
18 23 V
19 9 V
19 33 V
18 -4 V
19 -5 V
19 -84 V
18 -47 V
19 -23 V
18 -1 V
19 42 V
19 29 V
18 18 V
19 37 V
19 7 V
18 25 V
19 -22 V
19 -3 V
18 24 V
19 -12 V
19 -20 V
18 -28 V
19 -60 V
19 -74 V
18 -64 V
19 -70 V
19 -52 V
18 -42 V
19 -57 V
19 -47 V
18 -38 V
19 -38 V
19 -22 V
18 -21 V
19 -49 V
19 -33 V
18 -19 V
19 -12 V
18 -31 V
19 -50 V
19 -35 V
18 -41 V
19 3 V
19 -27 V
18 -15 V
19 -32 V
19 -37 V
18 -1 V
19 -19 V
19 -29 V
18 -29 V
19 -34 V
19 -33 V
18 -37 V
19 -32 V
19 -36 V
18 -35 V
19 -34 V
19 -34 V
18 -23 V
19 -17 V
19 -22 V
18 -31 V
19 -21 V
19 -26 V
18 -29 V
19 -30 V
19 -28 V
stroke 3392 2820 M
18 -28 V
19 -23 V
18 -27 V
19 -26 V
19 -22 V
18 -25 V
19 -25 V
19 -20 V
18 -25 V
19 -23 V
19 -20 V
18 -18 V
19 -23 V
19 -14 V
18 -18 V
19 -9 V
19 -18 V
18 -17 V
19 -16 V
19 -9 V
18 -9 V
19 7 V
19 -16 V
18 -4 V
19 -16 V
19 -15 V
18 -4 V
19 -15 V
19 -4 V
18 -11 V
19 -11 V
18 -14 V
19 -3 V
19 -14 V
18 -17 V
19 -10 V
19 -3 V
18 -10 V
19 -10 V
19 -16 V
18 -9 V
19 -13 V
19 -15 V
18 -6 V
19 -12 V
19 -15 V
18 -15 V
19 -12 V
19 -5 V
18 -1 V
19 -2 V
19 -11 V
18 -14 V
19 -8 V
19 -5 V
18 2 V
19 -2 V
19 -10 V
18 -7 V
19 -14 V
18 -7 V
19 -4 V
19 8 V
18 13 V
19 2 V
19 -2 V
18 -4 V
19 -4 V
19 -7 V
18 -4 V
19 -6 V
19 -10 V
18 -3 V
19 -10 V
19 -9 V
18 -3 V
19 -1 V
19 -9 V
18 -3 V
19 1 V
19 2 V
18 5 V
19 -9 V
19 -6 V
18 -6 V
19 2 V
19 -3 V
18 -6 V
19 -5 V
18 -3 V
19 -1 V
19 -11 V
18 -10 V
19 -8 V
19 -10 V
18 -10 V
19 -10 V
19 -10 V
18 -9 V
19 -3 V
19 -7 V
18 2 V
19 -5 V
19 0 V
stroke 5332 1862 M
18 -9 V
19 -5 V
19 -7 V
18 7 V
19 2 V
19 -4 V
18 -9 V
19 -5 V
19 -9 V
18 -9 V
19 -6 V
19 -9 V
18 -8 V
19 -9 V
18 -8 V
19 -9 V
19 -8 V
18 -8 V
19 -8 V
19 -8 V
18 -8 V
19 -8 V
19 -8 V
18 -8 V
19 -7 V
19 -8 V
18 -8 V
19 -7 V
19 -8 V
18 -7 V
19 -7 V
19 -8 V
18 -7 V
19 -7 V
19 -7 V
18 -7 V
19 -7 V
19 -7 V
18 -7 V
19 -6 V
19 -3 V
18 -7 V
19 -7 V
19 -4 V
18 -7 V
19 -6 V
18 -7 V
19 -6 V
19 -5 V
18 -6 V
19 -4 V
19 -7 V
18 -6 V
19 -6 V
19 -6 V
18 3 V
19 1 V
19 0 V
18 -6 V
19 -4 V
19 -3 V
18 -2 V
19 -2 V
19 -2 V
18 1 V
19 -2 V
19 6 V
18 3 V
19 0 V
19 8 V
18 5 V
3 -1 V
% End plot #5
stroke
1.000 UL
LTb
1470 6191 N
0 -5231 V
5189 0 V
0 5231 V
-5189 0 V
Z stroke
1.000 UP
1.000 UL
LTb
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica

%%EndDocument
 @endspecial 17 895 a Ft(\(a\))49 b(MSE)68 b(numbers)i(as)f(the)g
(stream)17 970 y(e)n(v)o(olv)o(es.)1280 808 y @beginspecial
50 @llx 50 @lly 410 @urx 377 @ury 1584 @rwi 1152 @rhi
@setspecial
%%BeginDocument: assange_3_rmse-labelling.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: assange_3_rmse-labelling.eps
%%Creator: gnuplot 4.4 patchlevel 4
%%CreationDate: Sun Sep  1 00:29:14 2013
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 377
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following true/false flags may be edited by hand if desired.
% The unit line width and grayscale image gamma correction may also be changed.
%
/Color true def
/Blacktext false def
/Solid false def
/Dashlength 1 def
/Landscape false def
/Level1 false def
/Rounded false def
/ClipToBoundingBox false def
/TransparentPatterns false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/Gamma 1.0 def
%
/vshift -100 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
Level1 {} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (assange_3_rmse-labelling.eps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.4 patchlevel 4)
  /Author (adriano)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Sun Sep  1 00:29:14 2013)
  /DOCINFO pdfmark
end
} ifelse
/doclip {
  ClipToBoundingBox {
    newpath 50 50 moveto 410 50 lineto 410 377 lineto 50 377 lineto closepath
    clip
  } if
} def
%
% Gnuplot Prolog Version 4.4 (August 2010)
%
%/SuppressPDFMark true def
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/g {setgray} bind def
/Gshow {show} def   % May be redefined later in the file to support UTF-8
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
3.8 setmiterlimit
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  gsave 1 setgray fill grestore clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {Gshow} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} def
/Gswidth {dup type /stringtype eq {stringwidth} {pop (n) stringwidth} ifelse} def
/MFwidth {0 exch { dup 5 get 3 ge { 5 get 3 eq { 0 } { pop } ifelse }
 {dup 3 get{dup dup 0 get findfont exch 1 get scalefont setfont
     6 get Gswidth pop add} {pop} ifelse} ifelse} forall} def
/MLshow { currentpoint stroke M
  0 exch R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/XYsave    { [( ) 1 2 true false 3 ()] } bind def
/XYrestore { [( ) 1 2 true false 4 ()] } bind def
end
%%EndProlog
gnudict begin
gsave
doclip
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 300 scalefont setfont
1.000 UL
LTb
1650 960 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 960 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.2)]
] -100.0 MRshow
1.000 UL
LTb
1650 1832 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 1832 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.25)]
] -100.0 MRshow
1.000 UL
LTb
1650 2704 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 2704 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.3)]
] -100.0 MRshow
1.000 UL
LTb
1650 3575 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 3575 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.35)]
] -100.0 MRshow
1.000 UL
LTb
1650 4447 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 4447 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.4)]
] -100.0 MRshow
1.000 UL
LTb
1650 5319 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 5319 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.45)]
] -100.0 MRshow
1.000 UL
LTb
1650 6191 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 6191 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.5)]
] -100.0 MRshow
1.000 UL
LTb
1650 960 M
0 63 V
0 5168 R
0 -63 V
stroke
1650 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0)]
] -100.0 MCshow
1.000 UL
LTb
2652 960 M
0 63 V
0 5168 R
0 -63 V
stroke
2652 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.2)]
] -100.0 MCshow
1.000 UL
LTb
3654 960 M
0 63 V
0 5168 R
0 -63 V
stroke
3654 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.4)]
] -100.0 MCshow
1.000 UL
LTb
4655 960 M
0 63 V
0 5168 R
0 -63 V
stroke
4655 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.6)]
] -100.0 MCshow
1.000 UL
LTb
5657 960 M
0 63 V
0 5168 R
0 -63 V
stroke
5657 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.8)]
] -100.0 MCshow
1.000 UL
LTb
6659 960 M
0 63 V
0 5168 R
0 -63 V
stroke
6659 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1)]
] -100.0 MCshow
1.000 UL
LTb
1.000 UL
LTb
1650 6191 N
0 -5231 V
5009 0 V
0 5231 V
-5009 0 V
Z stroke
LCb setrgbcolor
240 3575 M
currentpoint gsave translate -270 rotate 0 0 moveto
[ [(Helvetica) 300.0 0.0 true true 0 (MSE)]
] -100.0 MCshow
grestore
LTb
LCb setrgbcolor
4154 210 M
[ [(Helvetica) 300.0 0.0 true true 0 (Labeling Effort)]
] -100.0 MCshow
LTb
1.000 UP
1.000 UL
LTb
% Begin plot #1
5.000 UL
LT0
LCb setrgbcolor
5336 5978 M
[ [(Helvetica) 300.0 0.0 true true 0 (PESS \(batch-0.01\))]
] -100.0 MRshow
LT0
5516 5978 M
783 0 V
1786 3275 M
3 -9 V
3 -10 V
3 -11 V
4 -13 V
4 -13 V
5 -15 V
5 -16 V
5 -16 V
6 -18 V
6 -19 V
6 -19 V
6 -21 V
7 -21 V
8 -22 V
7 -23 V
8 -24 V
9 -24 V
8 -25 V
9 -26 V
10 -26 V
10 -26 V
10 -28 V
11 -27 V
11 -29 V
12 -28 V
12 -29 V
13 -30 V
13 -30 V
14 -30 V
14 -30 V
15 -30 V
16 -31 V
16 -31 V
17 -31 V
17 -31 V
18 -32 V
19 -31 V
20 -31 V
21 -32 V
21 -31 V
22 -31 V
23 -32 V
24 -31 V
25 -31 V
26 -30 V
27 -31 V
28 -30 V
29 -30 V
31 -30 V
31 -30 V
33 -29 V
34 -29 V
36 -28 V
36 -28 V
38 -28 V
40 -27 V
41 -27 V
43 -26 V
44 -26 V
46 -25 V
48 -25 V
50 -23 V
51 -24 V
53 -23 V
55 -22 V
57 -21 V
60 -21 V
61 -20 V
63 -19 V
66 -18 V
68 -18 V
71 -17 V
72 -16 V
76 -15 V
78 -14 V
80 -14 V
83 -12 V
86 -12 V
89 -10 V
92 -10 V
95 -9 V
98 -7 V
101 -7 V
104 -6 V
107 -4 V
111 -4 V
114 -2 V
118 -2 V
122 0 V
125 1 V
129 2 V
132 3 V
137 5 V
141 5 V
145 7 V
149 8 V
153 9 V
158 10 V
162 12 V
% End plot #1
% Begin plot #2
stroke
LT1
LCb setrgbcolor
5336 5678 M
[ [(Helvetica) 300.0 0.0 true true 0 (KHSS \(batch-0.01\))]
] -100.0 MRshow
LT1
5516 5678 M
783 0 V
1786 3786 M
3 -37 V
3 -38 V
3 -38 V
4 -38 V
4 -39 V
5 -38 V
5 -39 V
5 -39 V
6 -40 V
6 -39 V
6 -40 V
6 -39 V
7 -40 V
8 -40 V
7 -40 V
8 -40 V
9 -40 V
8 -40 V
9 -40 V
10 -40 V
10 -40 V
10 -39 V
11 -40 V
11 -39 V
12 -40 V
12 -39 V
13 -39 V
13 -39 V
14 -39 V
14 -38 V
15 -39 V
16 -38 V
16 -38 V
17 -37 V
17 -37 V
18 -37 V
19 -37 V
20 -36 V
21 -36 V
21 -36 V
22 -35 V
23 -35 V
24 -35 V
25 -34 V
26 -34 V
27 -33 V
28 -33 V
29 -32 V
31 -32 V
31 -31 V
33 -31 V
34 -31 V
36 -30 V
36 -29 V
38 -29 V
40 -29 V
41 -28 V
43 -27 V
44 -27 V
46 -26 V
48 -26 V
50 -25 V
51 -25 V
53 -24 V
55 -23 V
57 -23 V
60 -22 V
61 -22 V
63 -20 V
66 -21 V
68 -19 V
71 -19 V
72 -19 V
76 -17 V
78 -18 V
80 -16 V
83 -16 V
86 -15 V
89 -14 V
92 -14 V
95 -13 V
98 -13 V
101 -11 V
104 -11 V
107 -11 V
111 -9 V
114 -9 V
118 -9 V
122 -7 V
125 -7 V
129 -7 V
132 -5 V
137 -5 V
141 -4 V
145 -4 V
149 -3 V
153 -2 V
158 -1 V
162 -1 V
% End plot #2
% Begin plot #3
stroke
LT2
LCb setrgbcolor
5336 5378 M
[ [(Helvetica) 300.0 0.0 true true 0 (PESS \(batch-0.05\))]
] -100.0 MRshow
LT2
5516 5378 M
783 0 V
1690 3677 M
2 103 V
2 97 V
2 92 V
3 86 V
3 81 V
3 77 V
3 71 V
3 67 V
4 62 V
4 57 V
4 53 V
5 49 V
4 44 V
5 40 V
6 36 V
5 32 V
6 28 V
6 24 V
7 20 V
7 17 V
7 14 V
8 10 V
8 6 V
8 4 V
9 0 V
10 -2 V
10 -6 V
10 -8 V
11 -11 V
12 -14 V
12 -16 V
12 -18 V
14 -21 V
14 -24 V
15 -25 V
15 -27 V
16 -30 V
17 -31 V
18 -33 V
19 -35 V
20 -36 V
20 -38 V
22 -40 V
22 -40 V
24 -42 V
25 -43 V
25 -44 V
28 -46 V
28 -46 V
29 -47 V
31 -47 V
33 -48 V
33 -49 V
35 -49 V
37 -50 V
38 -50 V
40 -50 V
41 -50 V
44 -51 V
45 -50 V
46 -50 V
49 -50 V
51 -50 V
53 -49 V
54 -49 V
57 -48 V
59 -48 V
62 -47 V
63 -46 V
66 -45 V
69 -45 V
71 -43 V
73 -43 V
77 -41 V
79 -40 V
81 -39 V
85 -37 V
88 -36 V
90 -34 V
94 -33 V
97 -30 V
100 -30 V
103 -27 V
107 -25 V
110 -24 V
114 -21 V
118 -19 V
121 -17 V
125 -15 V
129 -12 V
133 -10 V
137 -8 V
141 -4 V
145 -3 V
150 1 V
154 3 V
159 6 V
163 9 V
168 12 V
% End plot #3
% Begin plot #4
stroke
LT3
LCb setrgbcolor
5336 5078 M
[ [(Helvetica) 300.0 0.0 true true 0 (KHSS \(batch-0.05\))]
] -100.0 MRshow
LT3
5516 5078 M
783 0 V
1690 3853 M
2 -26 V
2 -26 V
2 -25 V
3 -24 V
3 -23 V
3 -22 V
3 -22 V
3 -21 V
4 -20 V
4 -20 V
4 -19 V
5 -19 V
4 -18 V
5 -17 V
6 -18 V
5 -17 V
6 -16 V
6 -16 V
7 -16 V
7 -16 V
7 -16 V
8 -15 V
8 -16 V
8 -15 V
9 -15 V
10 -15 V
10 -15 V
10 -14 V
11 -15 V
12 -15 V
12 -15 V
12 -15 V
14 -15 V
14 -15 V
15 -15 V
15 -15 V
16 -15 V
17 -16 V
18 -15 V
19 -16 V
20 -15 V
20 -16 V
22 -16 V
22 -16 V
24 -16 V
25 -17 V
25 -16 V
28 -16 V
28 -17 V
29 -17 V
31 -17 V
33 -16 V
33 -17 V
35 -17 V
37 -17 V
38 -17 V
40 -17 V
41 -17 V
44 -17 V
45 -17 V
46 -17 V
49 -17 V
51 -16 V
53 -17 V
54 -16 V
57 -16 V
59 -16 V
62 -16 V
63 -15 V
66 -15 V
69 -15 V
71 -14 V
73 -14 V
77 -13 V
79 -13 V
81 -12 V
85 -12 V
88 -11 V
90 -10 V
94 -10 V
97 -9 V
100 -8 V
103 -7 V
107 -6 V
110 -6 V
114 -4 V
118 -3 V
121 -2 V
125 -1 V
129 0 V
133 2 V
137 3 V
141 5 V
145 6 V
150 7 V
154 9 V
159 11 V
163 13 V
168 15 V
% End plot #4
% Begin plot #5
stroke
LT4
LCb setrgbcolor
5336 4778 M
[ [(Helvetica) 300.0 0.0 true true 0 (PESS \(batch-0.10\))]
] -100.0 MRshow
LT4
5516 4778 M
783 0 V
1673 4177 M
2 -11 V
1 -13 V
2 -14 V
2 -15 V
3 -16 V
2 -17 V
3 -19 V
3 -19 V
3 -19 V
3 -21 V
4 -20 V
3 -22 V
4 -21 V
5 -22 V
4 -22 V
5 -23 V
5 -22 V
6 -23 V
6 -22 V
6 -22 V
6 -22 V
7 -22 V
7 -22 V
8 -21 V
8 -21 V
9 -20 V
9 -20 V
9 -20 V
11 -18 V
10 -19 V
12 -17 V
12 -17 V
12 -17 V
13 -15 V
14 -15 V
15 -14 V
16 -13 V
16 -13 V
17 -11 V
18 -11 V
19 -10 V
20 -9 V
21 -9 V
22 -7 V
23 -6 V
24 -6 V
25 -5 V
27 -4 V
28 -3 V
29 -2 V
30 -2 V
32 0 V
33 0 V
35 0 V
37 2 V
38 2 V
39 3 V
42 4 V
43 4 V
45 5 V
47 5 V
48 6 V
51 6 V
53 7 V
55 6 V
57 8 V
60 7 V
61 8 V
65 8 V
66 8 V
69 8 V
72 7 V
74 8 V
77 7 V
80 8 V
83 7 V
86 6 V
88 6 V
92 5 V
95 5 V
98 4 V
102 3 V
105 2 V
108 1 V
112 0 V
116 -2 V
119 -3 V
123 -4 V
127 -6 V
131 -7 V
135 -9 V
140 -12 V
143 -13 V
148 -15 V
152 -18 V
157 -20 V
162 -22 V
166 -26 V
171 -28 V
% End plot #5
% Begin plot #6
stroke
LT5
LCb setrgbcolor
5336 4478 M
[ [(Helvetica) 300.0 0.0 true true 0 (KHSS \(batch-0.10\))]
] -100.0 MRshow
LT5
5516 4478 M
783 0 V
1673 4127 M
2 -8 V
1 -8 V
2 -11 V
2 -11 V
3 -13 V
2 -14 V
3 -16 V
3 -16 V
3 -18 V
3 -19 V
4 -20 V
3 -20 V
4 -22 V
5 -23 V
4 -24 V
5 -24 V
5 -25 V
6 -26 V
6 -27 V
6 -27 V
6 -28 V
7 -29 V
7 -29 V
8 -29 V
8 -30 V
9 -31 V
9 -31 V
9 -31 V
11 -31 V
10 -32 V
12 -32 V
12 -33 V
12 -32 V
13 -33 V
14 -33 V
15 -32 V
16 -33 V
16 -33 V
17 -33 V
18 -33 V
19 -33 V
20 -33 V
21 -33 V
22 -33 V
23 -32 V
24 -33 V
25 -32 V
27 -32 V
28 -31 V
29 -32 V
30 -31 V
32 -31 V
33 -30 V
35 -30 V
37 -30 V
38 -30 V
39 -29 V
42 -28 V
43 -29 V
45 -27 V
47 -28 V
48 -26 V
51 -27 V
53 -26 V
55 -25 V
57 -25 V
60 -24 V
61 -24 V
65 -23 V
66 -22 V
69 -22 V
72 -22 V
74 -21 V
77 -20 V
80 -19 V
83 -19 V
86 -19 V
88 -18 V
92 -17 V
95 -16 V
98 -16 V
102 -16 V
105 -14 V
108 -14 V
112 -14 V
116 -12 V
119 -12 V
123 -12 V
127 -11 V
131 -10 V
135 -10 V
140 -9 V
143 -8 V
148 -8 V
152 -7 V
157 -7 V
162 -6 V
166 -5 V
171 -5 V
% End plot #6
stroke
1.000 UL
LTb
1650 6191 N
0 -5231 V
5009 0 V
0 5231 V
-5009 0 V
Z stroke
1.000 UP
1.000 UL
LTb
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica

%%EndDocument
 @endspecial 1355 895 a(\(b\))31 b(X-Y)d(scatter)h(plot)g(correlating)h
(label-)1355 970 y(ing)19 b(ef)n(fort)g(and)h(MSE)e(numbers.)2619
808 y @beginspecial 50 @llx 50 @lly 410 @urx 377 @ury
1584 @rwi 1152 @rhi @setspecial
%%BeginDocument: assange_4.1_ram-hours_instance_baseline.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: assange_4.1_ram-hours_instance_baseline.eps
%%Creator: gnuplot 4.4 patchlevel 4
%%CreationDate: Sat Aug 31 19:46:21 2013
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 377
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following true/false flags may be edited by hand if desired.
% The unit line width and grayscale image gamma correction may also be changed.
%
/Color true def
/Blacktext false def
/Solid false def
/Dashlength 1 def
/Landscape false def
/Level1 false def
/Rounded false def
/ClipToBoundingBox false def
/TransparentPatterns false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/Gamma 1.0 def
%
/vshift -100 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
Level1 {} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (assange_4.1_ram-hours_instance_baseline.eps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.4 patchlevel 4)
  /Author (adriano)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Sat Aug 31 19:46:21 2013)
  /DOCINFO pdfmark
end
} ifelse
/doclip {
  ClipToBoundingBox {
    newpath 50 50 moveto 410 50 lineto 410 377 lineto 50 377 lineto closepath
    clip
  } if
} def
%
% Gnuplot Prolog Version 4.4 (August 2010)
%
%/SuppressPDFMark true def
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/g {setgray} bind def
/Gshow {show} def   % May be redefined later in the file to support UTF-8
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
3.8 setmiterlimit
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  gsave 1 setgray fill grestore clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {Gshow} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} def
/Gswidth {dup type /stringtype eq {stringwidth} {pop (n) stringwidth} ifelse} def
/MFwidth {0 exch { dup 5 get 3 ge { 5 get 3 eq { 0 } { pop } ifelse }
 {dup 3 get{dup dup 0 get findfont exch 1 get scalefont setfont
     6 get Gswidth pop add} {pop} ifelse} ifelse} forall} def
/MLshow { currentpoint stroke M
  0 exch R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/XYsave    { [( ) 1 2 true false 3 ()] } bind def
/XYrestore { [( ) 1 2 true false 4 ()] } bind def
end
%%EndProlog
gnudict begin
gsave
doclip
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 300 scalefont setfont
1.000 UL
LTb
2010 960 M
63 0 V
4586 0 R
-63 0 V
stroke
1830 960 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1e-09)]
] -100.0 MRshow
1.000 UL
LTb
2010 1185 M
31 0 V
4618 0 R
-31 0 V
2010 1482 M
31 0 V
4618 0 R
-31 0 V
2010 1635 M
31 0 V
4618 0 R
-31 0 V
-4618 72 R
63 0 V
4586 0 R
-63 0 V
stroke
1830 1707 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1e-08)]
] -100.0 MRshow
1.000 UL
LTb
2010 1932 M
31 0 V
4618 0 R
-31 0 V
2010 2230 M
31 0 V
4618 0 R
-31 0 V
2010 2382 M
31 0 V
4618 0 R
-31 0 V
-4618 73 R
63 0 V
4586 0 R
-63 0 V
stroke
1830 2455 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1e-07)]
] -100.0 MRshow
1.000 UL
LTb
2010 2680 M
31 0 V
4618 0 R
-31 0 V
2010 2977 M
31 0 V
4618 0 R
-31 0 V
2010 3129 M
31 0 V
4618 0 R
-31 0 V
-4618 73 R
63 0 V
4586 0 R
-63 0 V
stroke
1830 3202 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1e-06)]
] -100.0 MRshow
1.000 UL
LTb
2010 3427 M
31 0 V
4618 0 R
-31 0 V
2010 3724 M
31 0 V
4618 0 R
-31 0 V
2010 3877 M
31 0 V
4618 0 R
-31 0 V
-4618 72 R
63 0 V
4586 0 R
-63 0 V
stroke
1830 3949 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1e-05)]
] -100.0 MRshow
1.000 UL
LTb
2010 4174 M
31 0 V
4618 0 R
-31 0 V
2010 4471 M
31 0 V
4618 0 R
-31 0 V
2010 4624 M
31 0 V
4618 0 R
-31 0 V
-4618 72 R
63 0 V
4586 0 R
-63 0 V
stroke
1830 4696 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.0001)]
] -100.0 MRshow
1.000 UL
LTb
2010 4921 M
31 0 V
4618 0 R
-31 0 V
2010 5219 M
31 0 V
4618 0 R
-31 0 V
2010 5371 M
31 0 V
4618 0 R
-31 0 V
-4618 73 R
63 0 V
4586 0 R
-63 0 V
stroke
1830 5444 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.001)]
] -100.0 MRshow
1.000 UL
LTb
2010 5669 M
31 0 V
4618 0 R
-31 0 V
2010 5966 M
31 0 V
4618 0 R
-31 0 V
2010 6119 M
31 0 V
4618 0 R
-31 0 V
-4618 72 R
63 0 V
4586 0 R
-63 0 V
stroke
1830 6191 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.01)]
] -100.0 MRshow
1.000 UL
LTb
2010 960 M
0 63 V
0 5168 R
0 -63 V
stroke
2010 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0)]
] -100.0 MCshow
1.000 UL
LTb
2940 960 M
0 63 V
0 5168 R
0 -63 V
stroke
2940 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.2)]
] -100.0 MCshow
1.000 UL
LTb
3870 960 M
0 63 V
0 5168 R
0 -63 V
stroke
3870 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.4)]
] -100.0 MCshow
1.000 UL
LTb
4799 960 M
0 63 V
0 5168 R
0 -63 V
stroke
4799 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.6)]
] -100.0 MCshow
1.000 UL
LTb
5729 960 M
0 63 V
0 5168 R
0 -63 V
stroke
5729 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.8)]
] -100.0 MCshow
1.000 UL
LTb
6659 960 M
0 63 V
0 5168 R
0 -63 V
stroke
6659 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1)]
] -100.0 MCshow
1.000 UL
LTb
1.000 UL
LTb
2010 6191 N
0 -5231 V
4649 0 V
0 5231 V
-4649 0 V
Z stroke
LCb setrgbcolor
240 3575 M
currentpoint gsave translate -270 rotate 0 0 moveto
[ [(Helvetica) 300.0 0.0 true true 0 (RAM-Hours)]
] -100.0 MCshow
grestore
LTb
LCb setrgbcolor
4334 210 M
[ [(Helvetica) 300.0 0.0 true true 0 (Stream Progress)]
] -100.0 MCshow
LTb
1.000 UP
1.000 UL
LTb
% Begin plot #1
5.000 UL
LT0
LCb setrgbcolor
5336 2973 M
[ [(Helvetica) 300.0 0.0 true true 0 (AC)]
] -100.0 MRshow
LT0
5516 2973 M
783 0 V
2027 1733 M
16 564 V
17 87 V
17 60 V
17 42 V
16 40 V
17 35 V
17 33 V
16 29 V
17 28 V
17 37 V
17 38 V
16 23 V
17 22 V
17 26 V
16 29 V
17 21 V
17 18 V
17 16 V
16 17 V
17 16 V
17 15 V
16 14 V
17 12 V
17 13 V
17 11 V
16 11 V
17 11 V
17 10 V
16 11 V
17 12 V
17 10 V
17 9 V
16 10 V
17 10 V
17 9 V
16 9 V
17 10 V
17 9 V
17 10 V
16 8 V
17 7 V
17 7 V
16 7 V
17 7 V
17 6 V
17 6 V
16 6 V
17 6 V
17 6 V
16 6 V
17 6 V
17 5 V
17 6 V
16 5 V
17 5 V
17 4 V
16 5 V
17 5 V
17 4 V
17 5 V
16 4 V
17 5 V
17 4 V
16 4 V
17 5 V
17 4 V
17 4 V
16 4 V
17 4 V
17 4 V
16 4 V
17 4 V
17 3 V
17 4 V
16 4 V
17 4 V
17 3 V
16 4 V
17 4 V
17 3 V
17 4 V
16 3 V
17 3 V
17 4 V
16 3 V
17 3 V
17 4 V
17 3 V
16 3 V
17 3 V
17 4 V
16 3 V
17 3 V
17 3 V
17 3 V
16 3 V
17 3 V
17 3 V
16 3 V
17 3 V
17 3 V
17 3 V
stroke 3732 3391 M
16 3 V
17 2 V
17 3 V
16 3 V
17 3 V
17 2 V
17 3 V
16 3 V
17 2 V
17 3 V
16 3 V
17 2 V
17 3 V
17 2 V
16 3 V
17 2 V
17 3 V
16 2 V
17 3 V
17 2 V
17 3 V
16 2 V
17 2 V
17 3 V
16 2 V
17 3 V
17 2 V
17 2 V
16 3 V
17 2 V
17 2 V
16 2 V
17 3 V
17 2 V
17 2 V
16 2 V
17 2 V
17 2 V
16 2 V
17 3 V
17 2 V
17 2 V
16 2 V
17 2 V
17 2 V
16 2 V
17 2 V
17 2 V
17 2 V
16 2 V
17 2 V
17 3 V
16 2 V
17 3 V
17 2 V
17 2 V
16 2 V
17 2 V
17 2 V
16 2 V
17 2 V
17 2 V
17 2 V
16 2 V
17 3 V
17 2 V
16 2 V
17 2 V
17 2 V
17 1 V
16 2 V
17 2 V
17 2 V
16 1 V
17 2 V
17 2 V
17 2 V
16 2 V
17 2 V
17 2 V
16 2 V
17 2 V
17 2 V
17 2 V
16 2 V
17 2 V
17 2 V
16 2 V
17 2 V
17 2 V
17 2 V
16 1 V
17 2 V
17 2 V
16 1 V
17 2 V
17 1 V
17 2 V
16 1 V
17 2 V
17 1 V
16 2 V
17 1 V
17 2 V
stroke 5470 3612 M
17 2 V
16 2 V
17 1 V
17 2 V
16 2 V
17 1 V
17 2 V
17 1 V
16 2 V
17 1 V
17 2 V
16 1 V
17 2 V
17 1 V
17 1 V
16 2 V
17 1 V
17 1 V
16 2 V
17 2 V
17 1 V
17 2 V
16 1 V
17 1 V
17 2 V
16 1 V
17 2 V
17 1 V
17 1 V
16 2 V
17 1 V
17 2 V
16 2 V
17 1 V
17 2 V
17 1 V
16 2 V
17 1 V
17 2 V
16 2 V
17 1 V
17 2 V
17 1 V
16 2 V
17 1 V
17 2 V
16 2 V
17 2 V
17 2 V
16 1 V
17 2 V
17 1 V
17 2 V
16 1 V
17 2 V
17 1 V
16 2 V
17 1 V
17 1 V
17 2 V
16 1 V
17 1 V
17 2 V
16 1 V
17 2 V
17 1 V
17 2 V
16 1 V
17 2 V
17 1 V
16 1 V
3 2 V
% End plot #1
% Begin plot #2
stroke
LT1
LCb setrgbcolor
5336 2673 M
[ [(Helvetica) 300.0 0.0 true true 0 (HAT)]
] -100.0 MRshow
LT1
5516 2673 M
783 0 V
2027 1553 M
16 53 V
17 41 V
17 58 V
17 199 V
16 13 V
17 13 V
17 10 V
16 8 V
17 7 V
17 7 V
17 10 V
16 48 V
17 7 V
17 6 V
16 7 V
17 6 V
17 5 V
17 6 V
16 31 V
17 2 V
17 3 V
16 2 V
17 3 V
17 2 V
17 3 V
16 25 V
17 3 V
17 2 V
16 2 V
17 2 V
17 3 V
17 2 V
16 22 V
17 3 V
17 2 V
16 2 V
17 2 V
17 2 V
17 2 V
16 2 V
17 20 V
17 2 V
16 3 V
17 1 V
17 2 V
17 2 V
16 2 V
17 18 V
17 2 V
16 1 V
17 2 V
17 2 V
17 1 V
16 3 V
17 17 V
17 1 V
16 2 V
17 2 V
17 1 V
17 2 V
16 1 V
17 16 V
17 2 V
16 1 V
17 2 V
17 1 V
17 2 V
16 1 V
17 1 V
17 19 V
16 2 V
17 2 V
17 2 V
17 2 V
16 2 V
17 1 V
17 18 V
16 2 V
17 1 V
17 2 V
17 2 V
16 1 V
17 1 V
17 2 V
16 12 V
17 1 V
17 1 V
17 1 V
16 2 V
17 1 V
17 1 V
16 11 V
17 1 V
17 1 V
17 2 V
16 1 V
17 1 V
17 1 V
16 1 V
17 11 V
17 1 V
17 1 V
stroke 3732 2402 M
16 1 V
17 1 V
17 1 V
16 2 V
17 10 V
17 1 V
17 1 V
16 1 V
17 2 V
17 1 V
16 1 V
17 13 V
17 1 V
17 1 V
16 1 V
17 2 V
17 1 V
16 1 V
17 10 V
17 1 V
17 1 V
16 1 V
17 1 V
17 1 V
16 1 V
17 1 V
17 9 V
17 1 V
16 1 V
17 0 V
17 1 V
16 1 V
17 1 V
17 1 V
17 8 V
16 1 V
17 1 V
17 1 V
16 1 V
17 0 V
17 1 V
17 8 V
16 1 V
17 1 V
17 0 V
16 1 V
17 1 V
17 1 V
17 7 V
16 1 V
17 1 V
17 1 V
16 0 V
17 1 V
17 1 V
17 7 V
16 1 V
17 1 V
17 0 V
16 1 V
17 1 V
17 0 V
17 1 V
16 8 V
17 0 V
17 1 V
16 1 V
17 0 V
17 1 V
17 1 V
16 7 V
17 0 V
17 1 V
16 1 V
17 0 V
17 1 V
17 1 V
16 7 V
17 0 V
17 1 V
16 1 V
17 0 V
17 1 V
17 0 V
16 7 V
17 1 V
17 0 V
16 1 V
17 0 V
17 1 V
17 1 V
16 0 V
17 6 V
17 1 V
16 1 V
17 0 V
17 1 V
17 0 V
16 1 V
17 6 V
17 1 V
16 0 V
17 1 V
17 1 V
stroke 5470 2589 M
17 0 V
16 1 V
17 6 V
17 0 V
16 1 V
17 0 V
17 1 V
17 0 V
16 1 V
17 6 V
17 0 V
16 1 V
17 1 V
17 0 V
17 1 V
16 1 V
17 5 V
17 1 V
16 0 V
17 1 V
17 1 V
17 0 V
16 1 V
17 5 V
17 1 V
16 0 V
17 1 V
17 0 V
17 1 V
16 0 V
17 6 V
17 0 V
16 1 V
17 0 V
17 0 V
17 1 V
16 0 V
17 1 V
17 5 V
16 1 V
17 0 V
17 1 V
17 0 V
16 1 V
17 1 V
17 5 V
16 1 V
17 0 V
17 1 V
16 0 V
17 0 V
17 1 V
17 0 V
16 5 V
17 1 V
17 0 V
16 1 V
17 0 V
17 0 V
17 1 V
16 5 V
17 0 V
17 0 V
16 1 V
17 0 V
17 1 V
17 0 V
16 5 V
17 0 V
17 1 V
16 0 V
3 0 V
% End plot #2
% Begin plot #3
stroke
LT2
LCb setrgbcolor
5336 2373 M
[ [(Helvetica) 300.0 0.0 true true 0 (ILAC)]
] -100.0 MRshow
LT2
5516 2373 M
783 0 V
2027 2343 M
16 259 V
17 92 V
17 68 V
17 63 V
16 53 V
17 60 V
17 49 V
16 48 V
17 44 V
17 45 V
17 42 V
16 41 V
17 40 V
17 35 V
16 35 V
17 34 V
17 29 V
17 35 V
16 31 V
17 33 V
17 31 V
16 29 V
17 30 V
17 28 V
17 25 V
16 26 V
17 21 V
17 23 V
16 23 V
17 21 V
17 22 V
17 23 V
16 24 V
17 21 V
17 20 V
16 19 V
17 21 V
17 20 V
17 18 V
16 19 V
17 18 V
17 20 V
16 19 V
17 18 V
17 17 V
17 17 V
16 16 V
17 16 V
17 17 V
16 16 V
17 15 V
17 15 V
17 16 V
16 16 V
17 14 V
17 17 V
16 18 V
17 18 V
17 17 V
17 18 V
16 19 V
17 17 V
17 18 V
16 17 V
17 17 V
17 17 V
17 15 V
16 15 V
17 17 V
17 17 V
16 15 V
17 16 V
17 16 V
17 16 V
16 16 V
17 14 V
17 13 V
16 14 V
17 14 V
17 15 V
17 14 V
16 13 V
17 13 V
17 13 V
16 14 V
17 14 V
17 14 V
17 12 V
16 12 V
17 12 V
17 12 V
16 12 V
17 12 V
17 10 V
17 11 V
16 11 V
17 11 V
17 11 V
16 12 V
17 13 V
17 11 V
17 11 V
stroke 3732 4867 M
16 11 V
17 11 V
17 11 V
16 11 V
17 10 V
17 10 V
17 11 V
16 10 V
17 10 V
17 10 V
16 9 V
17 10 V
17 10 V
17 9 V
16 9 V
17 9 V
17 10 V
16 9 V
17 10 V
17 8 V
17 9 V
16 7 V
17 9 V
17 9 V
16 9 V
17 9 V
17 8 V
17 9 V
16 7 V
17 8 V
17 9 V
16 8 V
17 8 V
17 8 V
17 8 V
16 8 V
17 8 V
17 7 V
16 8 V
17 8 V
17 7 V
17 8 V
16 8 V
17 6 V
17 5 V
16 6 V
17 5 V
17 6 V
17 5 V
16 6 V
17 4 V
17 7 V
16 7 V
17 5 V
17 5 V
17 5 V
16 6 V
17 6 V
17 6 V
16 7 V
17 5 V
17 6 V
17 5 V
16 5 V
17 5 V
17 5 V
16 6 V
17 7 V
17 9 V
17 8 V
16 8 V
17 6 V
17 7 V
16 7 V
17 6 V
17 5 V
17 6 V
16 6 V
17 7 V
17 5 V
16 5 V
17 5 V
17 5 V
17 6 V
16 5 V
17 6 V
17 5 V
16 5 V
17 6 V
17 5 V
17 5 V
16 6 V
17 7 V
17 6 V
16 6 V
17 7 V
17 6 V
17 6 V
16 6 V
17 5 V
17 5 V
16 5 V
17 5 V
17 5 V
stroke 5470 5606 M
17 5 V
16 6 V
17 5 V
17 3 V
16 5 V
17 5 V
17 5 V
17 5 V
16 6 V
17 5 V
17 5 V
16 6 V
17 6 V
17 6 V
17 5 V
16 6 V
17 6 V
17 5 V
16 6 V
17 6 V
17 5 V
17 6 V
16 5 V
17 5 V
17 5 V
16 5 V
17 5 V
17 5 V
17 4 V
16 5 V
17 5 V
17 5 V
16 5 V
17 4 V
17 5 V
17 5 V
16 4 V
17 5 V
17 4 V
16 5 V
17 4 V
17 4 V
17 5 V
16 4 V
17 5 V
17 4 V
16 4 V
17 4 V
17 5 V
16 4 V
17 4 V
17 4 V
17 4 V
16 5 V
17 4 V
17 3 V
16 4 V
17 3 V
17 5 V
17 4 V
16 3 V
17 4 V
17 2 V
16 4 V
17 3 V
17 3 V
17 2 V
16 1 V
17 2 V
17 2 V
16 2 V
3 0 V
% End plot #3
% Begin plot #4
stroke
LT3
LCb setrgbcolor
5336 2073 M
[ [(Helvetica) 300.0 0.0 true true 0 (PESS \(instance\))]
] -100.0 MRshow
LT3
5516 2073 M
783 0 V
2027 2442 M
16 184 V
17 60 V
17 34 V
17 32 V
16 28 V
17 24 V
17 26 V
16 24 V
17 20 V
17 20 V
17 20 V
16 17 V
17 17 V
17 13 V
16 13 V
17 12 V
17 14 V
17 12 V
16 11 V
17 12 V
17 8 V
16 8 V
17 8 V
17 7 V
17 6 V
16 8 V
17 7 V
17 6 V
16 5 V
17 6 V
17 5 V
17 6 V
16 9 V
17 8 V
17 5 V
16 5 V
17 4 V
17 5 V
17 5 V
16 4 V
17 5 V
17 4 V
16 5 V
17 6 V
17 5 V
17 5 V
16 5 V
17 6 V
17 5 V
16 4 V
17 3 V
17 4 V
17 4 V
16 7 V
17 4 V
17 3 V
16 4 V
17 4 V
17 6 V
17 5 V
16 7 V
17 4 V
17 4 V
16 4 V
17 6 V
17 4 V
17 4 V
16 4 V
17 4 V
17 7 V
16 4 V
17 5 V
17 5 V
17 4 V
16 5 V
17 4 V
17 3 V
16 3 V
17 2 V
17 4 V
17 3 V
16 3 V
17 3 V
17 2 V
16 5 V
17 4 V
17 5 V
17 3 V
16 3 V
17 3 V
17 3 V
16 5 V
17 5 V
17 4 V
17 2 V
16 3 V
17 6 V
17 3 V
16 4 V
17 4 V
17 5 V
17 3 V
stroke 3732 3422 M
16 4 V
17 4 V
17 6 V
16 6 V
17 4 V
17 2 V
17 2 V
16 2 V
17 2 V
17 4 V
16 3 V
17 2 V
17 2 V
17 3 V
16 2 V
17 2 V
17 2 V
16 2 V
17 3 V
17 2 V
17 2 V
16 2 V
17 3 V
17 2 V
16 2 V
17 2 V
17 2 V
17 2 V
16 2 V
17 2 V
17 2 V
16 2 V
17 1 V
17 4 V
17 2 V
16 2 V
17 2 V
17 2 V
16 2 V
17 4 V
17 2 V
17 3 V
16 3 V
17 2 V
17 1 V
16 2 V
17 2 V
17 2 V
17 1 V
16 1 V
17 2 V
17 1 V
16 1 V
17 2 V
17 1 V
17 1 V
16 2 V
17 1 V
17 1 V
16 2 V
17 1 V
17 1 V
17 1 V
16 2 V
17 1 V
17 1 V
16 2 V
17 1 V
17 1 V
17 2 V
16 1 V
17 1 V
17 1 V
16 2 V
17 1 V
17 2 V
17 1 V
16 1 V
17 1 V
17 2 V
16 1 V
17 1 V
17 1 V
17 2 V
16 1 V
17 1 V
17 1 V
16 1 V
17 2 V
17 1 V
17 1 V
16 1 V
17 3 V
17 3 V
16 3 V
17 2 V
17 2 V
17 2 V
16 2 V
17 1 V
17 1 V
16 2 V
17 1 V
17 1 V
stroke 5470 3621 M
17 2 V
16 1 V
17 1 V
17 1 V
16 1 V
17 1 V
17 2 V
17 1 V
16 1 V
17 1 V
17 1 V
16 2 V
17 4 V
17 7 V
17 8 V
16 14 V
17 12 V
17 15 V
16 18 V
17 18 V
17 17 V
17 14 V
16 16 V
17 18 V
17 12 V
16 3 V
17 2 V
17 4 V
17 4 V
16 7 V
17 7 V
17 7 V
16 7 V
17 5 V
17 2 V
17 2 V
16 3 V
17 3 V
17 2 V
16 2 V
17 1 V
17 2 V
17 0 V
16 1 V
17 1 V
17 1 V
16 2 V
17 1 V
17 2 V
16 2 V
17 1 V
17 1 V
17 1 V
16 1 V
17 2 V
17 1 V
16 1 V
17 0 V
17 1 V
17 2 V
16 0 V
17 1 V
17 0 V
16 1 V
17 1 V
17 0 V
17 1 V
16 0 V
17 1 V
17 0 V
16 0 V
3 1 V
% End plot #4
% Begin plot #5
stroke
LT4
LCb setrgbcolor
5336 1773 M
[ [(Helvetica) 300.0 0.0 true true 0 (KHSS \(instance\))]
] -100.0 MRshow
LT4
5516 1773 M
783 0 V
2027 2466 M
16 174 V
17 79 V
17 43 V
17 29 V
16 26 V
17 22 V
17 18 V
16 16 V
17 20 V
17 24 V
17 23 V
16 20 V
17 24 V
17 15 V
16 13 V
17 18 V
17 17 V
17 8 V
16 11 V
17 7 V
17 9 V
16 6 V
17 9 V
17 7 V
17 7 V
16 5 V
17 10 V
17 7 V
16 5 V
17 5 V
17 4 V
17 5 V
16 5 V
17 4 V
17 5 V
16 4 V
17 5 V
17 5 V
17 4 V
16 6 V
17 4 V
17 5 V
16 7 V
17 5 V
17 4 V
17 4 V
16 4 V
17 3 V
17 4 V
16 4 V
17 4 V
17 3 V
17 4 V
16 3 V
17 4 V
17 3 V
16 4 V
17 6 V
17 7 V
17 4 V
16 4 V
17 5 V
17 3 V
16 5 V
17 5 V
17 4 V
17 4 V
16 3 V
17 5 V
17 4 V
16 3 V
17 4 V
17 4 V
17 7 V
16 3 V
17 3 V
17 3 V
16 3 V
17 3 V
17 5 V
17 4 V
16 3 V
17 4 V
17 3 V
16 6 V
17 4 V
17 3 V
17 3 V
16 3 V
17 3 V
17 3 V
16 6 V
17 5 V
17 3 V
17 2 V
16 3 V
17 3 V
17 3 V
16 4 V
17 3 V
17 4 V
17 4 V
stroke 3732 3435 M
16 3 V
17 4 V
17 5 V
16 7 V
17 3 V
17 2 V
17 2 V
16 3 V
17 3 V
17 3 V
16 2 V
17 2 V
17 4 V
17 4 V
16 4 V
17 3 V
17 3 V
16 2 V
17 3 V
17 2 V
17 2 V
16 2 V
17 3 V
17 2 V
16 3 V
17 2 V
17 2 V
17 2 V
16 1 V
17 2 V
17 2 V
16 2 V
17 1 V
17 3 V
17 2 V
16 1 V
17 2 V
17 2 V
16 2 V
17 1 V
17 2 V
17 2 V
16 2 V
17 2 V
17 1 V
16 2 V
17 1 V
17 2 V
17 1 V
16 1 V
17 2 V
17 1 V
16 2 V
17 2 V
17 2 V
17 1 V
16 2 V
17 1 V
17 2 V
16 1 V
17 1 V
17 2 V
17 1 V
16 1 V
17 2 V
17 1 V
16 1 V
17 2 V
17 1 V
17 1 V
16 2 V
17 1 V
17 2 V
16 1 V
17 1 V
17 2 V
17 1 V
16 1 V
17 2 V
17 1 V
16 1 V
17 2 V
17 1 V
17 1 V
16 1 V
17 2 V
17 1 V
16 1 V
17 1 V
17 2 V
17 1 V
16 2 V
17 1 V
17 3 V
16 2 V
17 3 V
17 3 V
17 2 V
16 3 V
17 2 V
17 1 V
16 1 V
17 1 V
17 2 V
stroke 5470 3637 M
17 2 V
16 1 V
17 2 V
17 1 V
16 2 V
17 2 V
17 1 V
17 1 V
16 2 V
17 1 V
17 1 V
16 2 V
17 4 V
17 6 V
17 10 V
16 11 V
17 16 V
17 15 V
16 16 V
17 8 V
17 10 V
17 7 V
16 8 V
17 9 V
17 5 V
16 2 V
17 4 V
17 5 V
17 7 V
16 10 V
17 13 V
17 9 V
16 10 V
17 7 V
17 3 V
17 4 V
16 5 V
17 1 V
17 1 V
16 1 V
17 2 V
17 1 V
17 1 V
16 1 V
17 1 V
17 1 V
16 1 V
17 1 V
17 1 V
16 2 V
17 2 V
17 1 V
17 1 V
16 3 V
17 3 V
17 1 V
16 1 V
17 0 V
17 1 V
17 2 V
16 1 V
17 1 V
17 0 V
16 1 V
17 0 V
17 1 V
17 0 V
16 1 V
17 0 V
17 1 V
16 1 V
3 0 V
% End plot #5
% Begin plot #6
stroke
LT5
LCb setrgbcolor
5336 1473 M
[ [(Helvetica) 300.0 0.0 true true 0 (PESS \(batch-0.05\))]
] -100.0 MRshow
LT5
5516 1473 M
783 0 V
2027 2675 M
16 197 V
17 151 V
17 44 V
17 52 V
16 143 V
17 26 V
17 28 V
16 107 V
17 21 V
17 89 V
17 13 V
16 17 V
17 79 V
17 12 V
16 12 V
17 75 V
17 10 V
17 43 V
16 7 V
17 9 V
17 41 V
16 6 V
17 8 V
17 47 V
17 6 V
16 25 V
17 4 V
17 6 V
16 34 V
17 5 V
17 5 V
17 37 V
16 4 V
17 6 V
17 37 V
16 4 V
17 25 V
17 3 V
17 4 V
16 18 V
17 3 V
17 3 V
16 16 V
17 3 V
17 12 V
17 2 V
16 2 V
17 10 V
17 2 V
16 2 V
17 12 V
17 2 V
17 8 V
16 2 V
17 1 V
17 8 V
16 2 V
17 2 V
17 5 V
17 3 V
16 2 V
17 5 V
17 2 V
16 5 V
17 3 V
17 2 V
17 7 V
16 2 V
17 4 V
17 8 V
16 3 V
17 5 V
17 3 V
17 2 V
16 6 V
17 3 V
17 2 V
16 7 V
17 3 V
17 6 V
17 4 V
16 3 V
17 9 V
17 4 V
16 4 V
17 9 V
17 5 V
17 4 V
16 10 V
17 5 V
17 7 V
16 4 V
17 4 V
17 8 V
17 3 V
16 4 V
17 6 V
17 3 V
16 6 V
17 3 V
17 4 V
17 5 V
stroke 3732 4429 M
16 3 V
17 3 V
17 5 V
16 3 V
17 3 V
17 2 V
17 2 V
16 4 V
17 3 V
17 2 V
16 4 V
17 2 V
17 3 V
17 4 V
16 2 V
17 4 V
17 3 V
16 3 V
17 5 V
17 2 V
17 2 V
16 4 V
17 2 V
17 4 V
16 2 V
17 3 V
17 5 V
17 2 V
16 1 V
17 5 V
17 2 V
16 3 V
17 2 V
17 1 V
17 5 V
16 1 V
17 2 V
17 5 V
16 2 V
17 2 V
17 4 V
17 2 V
16 3 V
17 2 V
17 2 V
16 3 V
17 2 V
17 2 V
17 5 V
16 2 V
17 5 V
17 2 V
16 2 V
17 5 V
17 1 V
17 2 V
16 7 V
17 1 V
17 4 V
16 2 V
17 2 V
17 6 V
17 1 V
16 1 V
17 5 V
17 2 V
16 1 V
17 7 V
17 2 V
17 5 V
16 2 V
17 1 V
17 5 V
16 1 V
17 2 V
17 4 V
17 1 V
16 3 V
17 1 V
17 1 V
16 2 V
17 1 V
17 1 V
17 3 V
16 1 V
17 2 V
17 1 V
16 0 V
17 3 V
17 0 V
17 1 V
16 3 V
17 0 V
17 1 V
16 2 V
17 1 V
17 2 V
17 1 V
16 1 V
17 2 V
17 1 V
16 1 V
17 3 V
17 1 V
stroke 5470 4691 M
17 3 V
16 1 V
17 2 V
17 3 V
16 2 V
17 1 V
17 6 V
17 1 V
16 4 V
17 2 V
17 2 V
16 4 V
17 2 V
17 2 V
17 3 V
16 2 V
17 2 V
17 2 V
16 1 V
17 1 V
17 1 V
17 1 V
16 2 V
17 2 V
17 2 V
16 2 V
17 2 V
17 3 V
17 2 V
16 3 V
17 4 V
17 3 V
16 4 V
17 4 V
17 4 V
17 4 V
16 5 V
17 4 V
17 5 V
16 5 V
17 4 V
17 7 V
17 6 V
16 5 V
17 8 V
17 6 V
16 8 V
17 6 V
17 6 V
16 11 V
17 7 V
17 5 V
17 11 V
16 7 V
17 10 V
17 6 V
16 5 V
17 9 V
17 7 V
17 7 V
16 13 V
17 6 V
17 9 V
16 5 V
17 5 V
17 14 V
17 3 V
16 3 V
17 15 V
17 3 V
16 3 V
3 17 V
% End plot #6
% Begin plot #7
stroke
LT6
LCb setrgbcolor
5336 1173 M
[ [(Helvetica) 300.0 0.0 true true 0 (KHSS \(batch-0.05\))]
] -100.0 MRshow
LT6
5516 1173 M
783 0 V
2027 2679 M
16 160 V
17 70 V
17 71 V
17 59 V
16 49 V
17 45 V
17 41 V
16 40 V
17 33 V
17 31 V
17 29 V
16 28 V
17 109 V
17 43 V
16 46 V
17 45 V
17 38 V
17 37 V
16 34 V
17 33 V
17 31 V
16 29 V
17 28 V
17 28 V
17 24 V
16 127 V
17 7 V
17 8 V
16 10 V
17 10 V
17 11 V
17 12 V
16 12 V
17 13 V
17 11 V
16 11 V
17 12 V
17 11 V
17 11 V
16 100 V
17 4 V
17 5 V
16 5 V
17 6 V
17 5 V
17 6 V
16 6 V
17 5 V
17 7 V
16 6 V
17 6 V
17 7 V
17 40 V
16 2 V
17 4 V
17 3 V
16 4 V
17 3 V
17 4 V
17 4 V
16 4 V
17 4 V
17 4 V
16 4 V
17 5 V
17 4 V
17 27 V
16 4 V
17 5 V
17 6 V
16 5 V
17 5 V
17 6 V
17 6 V
16 6 V
17 5 V
17 5 V
16 5 V
17 5 V
17 17 V
17 4 V
16 4 V
17 4 V
17 4 V
16 5 V
17 6 V
17 4 V
17 5 V
16 5 V
17 4 V
17 5 V
16 4 V
17 5 V
17 17 V
17 4 V
16 4 V
17 4 V
17 4 V
16 4 V
17 5 V
17 4 V
17 5 V
stroke 3732 4600 M
16 4 V
17 5 V
17 5 V
16 4 V
17 10 V
17 4 V
17 4 V
16 4 V
17 4 V
17 5 V
16 4 V
17 4 V
17 4 V
17 5 V
16 4 V
17 4 V
17 4 V
16 5 V
17 9 V
17 3 V
17 3 V
16 3 V
17 3 V
17 3 V
16 4 V
17 4 V
17 3 V
17 4 V
16 3 V
17 3 V
17 4 V
16 7 V
17 3 V
17 3 V
17 3 V
16 4 V
17 3 V
17 3 V
16 4 V
17 4 V
17 3 V
17 4 V
16 5 V
17 3 V
17 3 V
16 14 V
17 1 V
17 2 V
17 2 V
16 2 V
17 2 V
17 2 V
16 3 V
17 2 V
17 2 V
17 2 V
16 3 V
17 2 V
17 9 V
16 2 V
17 1 V
17 2 V
17 2 V
16 2 V
17 2 V
17 1 V
16 3 V
17 2 V
17 2 V
17 3 V
16 2 V
17 2 V
17 13 V
16 3 V
17 1 V
17 2 V
17 2 V
16 2 V
17 3 V
17 2 V
16 2 V
17 1 V
17 3 V
17 2 V
16 2 V
17 9 V
17 2 V
16 2 V
17 1 V
17 2 V
17 2 V
16 2 V
17 3 V
17 2 V
16 3 V
17 2 V
17 3 V
17 3 V
16 2 V
17 10 V
17 2 V
16 2 V
17 2 V
17 1 V
stroke 5470 4951 M
17 3 V
16 2 V
17 2 V
17 2 V
16 2 V
17 2 V
17 3 V
17 2 V
16 9 V
17 2 V
17 3 V
16 2 V
17 3 V
17 2 V
17 3 V
16 3 V
17 2 V
17 3 V
16 2 V
17 3 V
17 2 V
17 3 V
16 5 V
17 2 V
17 2 V
16 2 V
17 2 V
17 2 V
17 3 V
16 2 V
17 2 V
17 3 V
16 2 V
17 3 V
17 2 V
17 3 V
16 2 V
17 2 V
17 2 V
16 2 V
17 3 V
17 2 V
17 2 V
16 2 V
17 2 V
17 3 V
16 2 V
17 2 V
17 2 V
16 4 V
17 2 V
17 3 V
17 3 V
16 3 V
17 3 V
17 2 V
16 2 V
17 2 V
17 3 V
17 3 V
16 3 V
17 2 V
17 4 V
16 3 V
17 3 V
17 3 V
17 2 V
16 1 V
17 2 V
17 2 V
16 2 V
3 0 V
% End plot #7
stroke
1.000 UL
LTb
2010 6191 N
0 -5231 V
4649 0 V
0 5231 V
-4649 0 V
Z stroke
1.000 UP
1.000 UL
LTb
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica

%%EndDocument
 @endspecial 2701 895 a(\(c\))25 b(RAM-Hours)20 b(as)f(the)g(stream)g
(e)n(v)o(olv)o(es.)1124 1171 y Fs(Figur)o(e)f(4:)23 b(P)o(erson)18
b(of)h(the)g(Y)-8 b(ear)h(.)22 b(T)-6 b(weets)20 b(ar)o(e)f(in)f
(English.)p 0 TeXcolorgray -77 1418 a Ft(Figure)28 b(5)f(\(c\))h(sho)n
(ws)g(a)g(X-Y)f(scatter)g(plot)h(correlating)g Fm(\016)i
Ft(and)f(label-)-152 1506 y(ing)22 b(ef)n(fort.)32 b(The)22
b(correlation)h(is)e(almost)h(linear)l(.)32 b(The)22
b(trade-of)n(f)g(between)-152 1593 y(labeling)c(ef)n(fort)e(and)h(MSE)f
(is)h(sho)n(wn)g(in)g(Figure)g(5)f(\(d\).)23 b(Clearly)-5
b(,)16 b(MSE)g(de-)-152 1680 y(creases)21 b(with)f(the)g(ef)n(fort)g
(spent)h(to)f(label)g(messages.)28 b(Figure)20 b(5)g(\(e\))g(sho)n(ws)
-152 1767 y(the)28 b(number)g(of)f(messages)h(composing)h(the)f
(training)f(set)g(at)g(each)h(time)-152 1854 y(step.)23
b(As)c(in)f(pre)n(vious)i(cases,)f(A)m(C)f(and)i(ILA)m(C)e(require)h
(much)g(more)g(train-)-152 1941 y(ing)28 b(resources)h(than)f(other)g
(competing)h(algorithms.)50 b(PESS)25 b(\(instance\))-152
2029 y(as)h(well)g(as)f(KHSS)g(\(instance\))h(require)g(much)h(less)f
(training)g(messages,)-152 2116 y(again,)h(sho)n(wing)f(that)f(the)g
(selecti)n(v)o(e)g(sampling)h(strate)o(gy)g(is)e(ef)n(fecti)n(v)o(e)i
(in)-152 2203 y(producing)21 b(small)e(and)g(ef)n(fecti)n(v)o(e)g(sets)
g(at)g(each)g(time)g(step.)-77 2290 y(Finally)-5 b(,)25
b(Figure)e(5)h(\(f\))g(sho)n(ws)g(RAM-Hours)h(numbers.)39
b(In)24 b(this)g(case,)-152 2377 y(A)m(C,)g(as)h(well)g(as)g(PESS)e
(\(instance\))i(and)g(KHSS)f(\(instance\),)j(are)e(clearly)-152
2464 y(the)20 b(best)g(performers)g(in)g(terms)g(of)g(amount)g(of)g
(computing)h(resources)g(re-)-152 2552 y(quired.)39 b(Further)m(,)24
b(the)g(amount)h(of)f(resources)g(required)h(during)f(the)g(pro-)-152
2639 y(cess)16 b(signi\002cantly)g(increases)g(when)g(PESS)e(and)i
(KHSS)e(operate)i(on)g(batch)-152 2726 y(mode,)k(b)o(ut)e(still,)g(as)h
(in)g(other)g(datasets,)g(ILA)m(C)f(is)g(the)h(w)o(orst)g(performer)l
(.)-152 2941 y Fu(5.)100 b(CONCLUSIONS)-77 3049 y Ft(This)16
b(paper)g(focused)h(on)f(sentiment)h(analysis)f(on)g(T)-6
b(witter)15 b(streams.)22 b(W)-6 b(e)-152 3136 y(ha)o(v)o(e)26
b(introduced)h(ne)n(w)e(algorithms)h(for)f(acti)n(v)o(e)h(training-set)
f(formation,)-152 3224 y(which)31 b(we)g(denote)h(as)f(P)o(areto-Ef)n
(\002cient)e(Selecti)n(v)o(e)i(Sampling)g(\(PESS\))-152
3311 y(and)c(Kaldor)o(-Hicks)f(Selecti)n(v)o(e)g(Sample)g(\(KHSS\).)e
(The)i(proposed)i(algo-)-152 3398 y(rithms)19 b(pro)o(vide)g(the)g
(resulting)g(classi\002er)f(with)g(memorability)h(and)g(adap-)-152
3485 y(ti)n(v)o(eness.)28 b(W)-6 b(e)20 b(formalized)h(the)f(selecti)n
(v)o(e)h(sampling)g(process)g(as)g(a)f(multi-)-152 3572
y(objecti)n(v)o(e)g(optimization)f(procedure,)g(which)g(\002nds)g(a)g
(proper)g(balance)g(be-)-152 3659 y(tween)g(adapti)n(v)o(eness)h(and)g
(memorability)-5 b(.)23 b(Adapti)n(v)o(eness)d(is)f(assessed)g(by)-152
3747 y(computing)24 b(the)e(distance)g(in)g(time)g(and)h(space)f
(between)h(the)f(tar)o(get)g(mes-)-152 3834 y(sage)29
b(and)g(the)g(candidate)g(ones.)52 b(Also,)30 b(candidate)g(messages)f
(are)g(ran-)-152 3921 y(domly)23 b(shuf)n(\003ed,)g(thus)g(pro)o
(viding)g(memorability)f(to)g(the)g(resulting)h(clas-)-152
4008 y(si\002er)l(.)28 b(The)20 b(message)i(utility)e(space)h(is)f
(composed)i(by)f(such)h(dimensions,)-152 4095 y(and)j(we)f(compute)h
(the)f(P)o(areto)f(Frontier)g(in)h(this)g(space)g(in)g(order)g(to)g
(pick)-152 4183 y(up)33 b(messages)g(satisfying)f(the)g(P)o(areto)g
(impro)o(v)o(ement)h(condition,)j(\002nd-)-152 4270 y(ing)21
b(a)g(proper)h(balance)f(between)h(adapti)n(v)o(eness)g(and)f
(memorability)-5 b(.)30 b(The)-152 4357 y(Kaldor)o(-Hicks)22
b(criterion)g(enables)h(memorability)f(to)g(compensate)i(adap-)-152
4444 y(ti)n(v)o(eness,)29 b(or)e(vice-v)o(ersa.)47 b(A)27
b(systematic)g(e)n(v)n(aluation)h(in)m(v)o(olving)f(recent)-152
4531 y(e)n(v)o(ents)20 b(demonstrated)g(the)f(ef)n(fecti)n(v)o(eness)h
(of)f(our)g(algorithms.)-77 4618 y(As)e(future)g(w)o(ork,)g(we)g
(intend)h(to)f(e)o(xtend)g(our)h(strate)o(gies)e(for)h(algorithms)-152
4706 y(that)i(do)g(not)h(depend)g(on)g(manual)f(labeling.)-152
4921 y Fu(6.)100 b(A)-5 b(CKNO)g(WLEDGMENTS)-77 5029
y Ft(Adriano)21 b(V)-8 b(eloso,)20 b(Adriano)h(Pereira,)e(W)-6
b(agner)21 b(Meira)f(Jr)l(.,)f(and)i(Renato)-152 5116
y(Ferreira)28 b(w)o(ould)h(lik)o(e)g(to)f(ackno)n(wledge)j(grants)d
(from)h(CNPq,)h(CAPES,)-152 5203 y(F)o(apemig,)d(Finep,)g(and)f(InW)-6
b(eb)25 b Fn(\000)g Ft(the)h(Brazilian)f(National)g(Institute)h(of)-152
5290 y(Science)33 b(and)f(T)-5 b(echnology)34 b(for)e(the)g(W)-6
b(eb)m(.)63 b(Srini)n(v)n(asan)33 b(P)o(arthasarathy)-152
5378 y(w)o(ould)16 b(lik)o(e)e(to)h(ackno)n(wledge)h(NSF)e(grant)h(IIS)
e(1111118)k(and)e(a)g(Google)g(re-)2040 1418 y(search)21
b(a)o(w)o(ard.)26 b(Roberto)21 b(Oli)n(v)o(eira)f(Jr)l(.)26
b(w)o(ould)20 b(lik)o(e)h(to)e(ackno)n(wledge)k(that)2040
1506 y(some)i(aspects)g(of)f(this)g(w)o(ork)h(w)o(as)f(conducted)i
(while)e(he)h(w)o(as)f(a)g(visiting)2040 1593 y(researcher)h(in)e
(Srini)n(v)n(asan)i(P)o(arthasarathy')l(s)e(lab)h(at)g(Ohio)g(State)f
(Uni)n(v)o(er)o(-)2040 1680 y(sity)-5 b(.)2040 1899 y
Fu(7.)99 b(REFERENCES)p 0 TeXcolorgray 2077 2028 a Ft([1])p
0 TeXcolorgray 38 w(R.)18 b(Agra)o(w)o(al,)h(T)-6 b(.)18
b(Imielinski,)h(and)g(A.)g(Sw)o(ami.)f(Mining)i(association)2202
2115 y(rules)f(between)h(sets)e(of)h(items)g(in)g(lar)o(ge)f
(databases.)i(In)f Fp(SIGMOD)p Ft(,)2202 2202 y(pages)h(207\226216.)h
(A)m(CM,)d(1993.)p 0 TeXcolorgray 2077 2297 a([2])p 0
TeXcolorgray 38 w(R.)g(Baeza-Y)-7 b(ates)19 b(and)g(B.)g(R-Neto.)f
Fp(Modern)i(Information)2202 2385 y(Retrie)o(val)p Ft(.)e(Addison-W)-6
b(esle)o(y-Longman,)21 b(1999.)p 0 TeXcolorgray 2077
2480 a([3])p 0 TeXcolorgray 38 w(R.)d(Bayardo,)i(B.)e(Goethals,)h(and)g
(M.)g(Zaki,)g(editors.)f Fp(W)-7 b(orkshop)21 b(on)2202
2567 y(F)l(r)m(equent)f(Itemset)e(Mining)i(Implementations)p
Ft(,)f(v)o(olume)g(126,)2202 2654 y(2004.)p 0 TeXcolorgray
2077 2750 a([4])p 0 TeXcolorgray 38 w(A.)f(Bifet)g(and)i(E.)e(Frank.)h
(Sentiment)f(kno)n(wledge)j(disco)o(v)o(ery)f(in)2202
2837 y(twitter)e(streaming)h(data.)g(In)g Fp(Disc.)f(Science)p
Ft(,)i(pages)g(1\22615,)f(2010.)p 0 TeXcolorgray 2077
2933 a([5])p 0 TeXcolorgray 38 w(A.)f(Bifet,)g(E.)g(Frank,)h(G.)f
(Holmes,)h(and)g(B.)g(Pf)o(ahringer)l(.)g(Ensembles)2202
3020 y(of)g(restricted)g(hoef)n(fding)h(trees.)e Fp(TIST)p
Ft(,)g(3\(2\):30:1\22630:20,)j(2012.)p 0 TeXcolorgray
2077 3115 a([6])p 0 TeXcolorgray 38 w(A.)d(Bifet)g(and)i(R.)e(Ga)o(v)n
(ald\340.)h(Learning)h(from)e(time-changing)j(data)2202
3202 y(with)d(adapti)n(v)o(e)i(windo)n(wing.)g(In)f Fp(SDM)p
Ft(,)g(2007.)p 0 TeXcolorgray 2077 3298 a([7])p 0 TeXcolorgray
38 w(A.)f(Bifet)g(and)i(R.)e(Ga)o(v)n(ald\340.)h(Adapti)n(v)o(e)h
(learning)f(from)g(e)n(v)o(olving)2202 3385 y(data)g(streams.)g(In)g
Fp(ID)m(A)p Ft(,)f(pages)i(249\226260,)h(2009.)p 0 TeXcolorgray
2077 3481 a([8])p 0 TeXcolorgray 38 w(A.)d(Bifet,)g(G.)g(Holmes,)h(R.)f
(Kirkby)-5 b(,)20 b(and)f(B.)f(Pf)o(ahringer)l(.)h(MO)m(A:)2202
3568 y(Massi)n(v)o(e)h(online)f(analysis.)g Fp(JMLR)p
Ft(,)f(11:1601\2261604,)k(2010.)p 0 TeXcolorgray 2077
3663 a([9])p 0 TeXcolorgray 38 w(A.)c(Bifet,)g(G.)g(Holmes,)h(B.)f(Pf)o
(ahringer)m(,)h(and)h(E.)e(Frank.)h(F)o(ast)2202 3750
y(perceptron)h(decision)g(tree)e(learning)i(from)f(e)n(v)o(olving)h
(data)f(streams.)2202 3838 y(In)g Fp(P)-7 b(AKDD)p Ft(,)18
b(pages)h(299\226310,)i(2010.)p 0 TeXcolorgray 2040 3933
a([10])p 0 TeXcolorgray 38 w(A.)d(Bifet,)g(G.)g(Holmes,)h(B.)f(Pf)o
(ahringer)m(,)h(and)h(R.)e(Ga)o(v)n(ald\340.)2202 4020
y(Detecting)h(sentiment)g(change)i(in)d(twitter)g(streaming)i(data.)e
Fp(JMLR)p Ft(,)2202 4107 y(17:5\22611,)i(2011.)p 0 TeXcolorgray
2040 4203 a([11])p 0 TeXcolorgray 38 w(S.)e(B\366rzs\366n)o(yi,)h(D.)g
(K)m(ossmann,)h(and)f(K.)g(Stock)o(er)l(.)f(The)h(sk)o(yline)2202
4290 y(operator)l(.)g(In)g Fp(ICDE)p Ft(,)f(pages)i(421\226430,)g
(2001.)p 0 TeXcolorgray 2040 4385 a([12])p 0 TeXcolorgray
38 w(L.)e(Breiman,)h(J.)f(Friedman,)h(R.)f(Olshen,)h(and)h(C.)e(Stone.)
2202 4473 y(Classi\002cation)g(and)i(re)o(gression)g(trees.)e
Fp(W)-7 b(adsworth)20 b(Intl.)p Ft(,)e(1984.)p 0 TeXcolorgray
2040 4568 a([13])p 0 TeXcolorgray 38 w(J.)g(Chipman.)i(Compensation)g
(principle.)f(In)g(S.)f(N.)g(Durlauf)h(and)2202 4655
y(L.)f(E.)g(Blume,)h(editors,)f Fp(The)h(Ne)o(w)g(P)-6
b(algr)o(ave)19 b(Dictionary)g(of)2202 4742 y(Economics)p
Ft(.)g(P)o(algra)o(v)o(e)g(Macmillan,)g(2008.)p 0 TeXcolorgray
2040 4838 a([14])p 0 TeXcolorgray 38 w(C.)f(Cortes)h(and)g(V)-10
b(.)19 b(V)-8 b(apnik.)19 b(Support-v)o(ector)h(netw)o(orks.)g
Fp(Mac)o(hine)2202 4925 y(Learning)p Ft(,)f(20\(3\):273\226297,)j
(1995.)p 0 TeXcolorgray 2040 5021 a([15])p 0 TeXcolorgray
38 w(R.)c(Durstenfeld.)h(Algorithm)g(235:)24 b(Random)c(permutation.)
2202 5108 y Fp(Commun.)f(A)n(CM)p Ft(,)f(7\(7\):420,)i(1964.)p
0 TeXcolorgray 2040 5203 a([16])p 0 TeXcolorgray 38 w(L.)e(Feng,)h(F)-6
b(.)18 b(Chen,)h(and)g(Y)-10 b(.)19 b(Y)-7 b(ao.)18 b(A)h(concept)h
(similarity)e(based)2202 5290 y(data)h(stream)g(classi\002cation)g
(model.)g Fp(J)n(ournal)h(of)f(Information)h(&)2202 5378
y(Computational)g(Science)p Ft(,)g(10\(4\):949\226957,)h(2013.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray -58 808 a @beginspecial 50
@llx 50 @lly 410 @urx 377 @ury 1584 @rwi 1152 @rhi @setspecial
%%BeginDocument: felipemeloPositividade.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: felipemeloPositividade.eps
%%Creator: gnuplot 4.4 patchlevel 4
%%CreationDate: Sat Aug 31 20:10:26 2013
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 377
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following true/false flags may be edited by hand if desired.
% The unit line width and grayscale image gamma correction may also be changed.
%
/Color true def
/Blacktext false def
/Solid false def
/Dashlength 1 def
/Landscape false def
/Level1 false def
/Rounded false def
/ClipToBoundingBox false def
/TransparentPatterns false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/Gamma 1.0 def
%
/vshift -100 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
Level1 {} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (felipemeloPositividade.eps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.4 patchlevel 4)
  /Author (adriano)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Sat Aug 31 20:10:26 2013)
  /DOCINFO pdfmark
end
} ifelse
/doclip {
  ClipToBoundingBox {
    newpath 50 50 moveto 410 50 lineto 410 377 lineto 50 377 lineto closepath
    clip
  } if
} def
%
% Gnuplot Prolog Version 4.4 (August 2010)
%
%/SuppressPDFMark true def
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/g {setgray} bind def
/Gshow {show} def   % May be redefined later in the file to support UTF-8
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
3.8 setmiterlimit
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  gsave 1 setgray fill grestore clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {Gshow} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} def
/Gswidth {dup type /stringtype eq {stringwidth} {pop (n) stringwidth} ifelse} def
/MFwidth {0 exch { dup 5 get 3 ge { 5 get 3 eq { 0 } { pop } ifelse }
 {dup 3 get{dup dup 0 get findfont exch 1 get scalefont setfont
     6 get Gswidth pop add} {pop} ifelse} ifelse} forall} def
/MLshow { currentpoint stroke M
  0 exch R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/XYsave    { [( ) 1 2 true false 3 ()] } bind def
/XYrestore { [( ) 1 2 true false 4 ()] } bind def
end
%%EndProlog
gnudict begin
gsave
doclip
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 300 scalefont setfont
1.000 UL
LTb
1470 960 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 960 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0)]
] -100.0 MRshow
1.000 UL
LTb
1470 2006 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 2006 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.2)]
] -100.0 MRshow
1.000 UL
LTb
1470 3052 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 3052 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.4)]
] -100.0 MRshow
1.000 UL
LTb
1470 4099 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 4099 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.6)]
] -100.0 MRshow
1.000 UL
LTb
1470 5145 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 5145 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.8)]
] -100.0 MRshow
1.000 UL
LTb
1470 6191 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 6191 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1)]
] -100.0 MRshow
1.000 UL
LTb
1470 960 M
0 63 V
0 5168 R
0 -63 V
stroke
1470 660 M
[ [(Helvetica) 300.0 0.0 true true 0 (00:00)]
] -100.0 MCshow
1.000 UL
LTb
1643 960 M
0 31 V
0 5200 R
0 -31 V
1816 960 M
0 31 V
0 5200 R
0 -31 V
1989 960 M
0 31 V
0 5200 R
0 -31 V
2162 960 M
0 31 V
0 5200 R
0 -31 V
2335 960 M
0 63 V
0 5168 R
0 -63 V
stroke
2335 660 M
[ [(Helvetica) 300.0 0.0 true true 0 (00:30)]
] -100.0 MCshow
1.000 UL
LTb
2508 960 M
0 31 V
0 5200 R
0 -31 V
2681 960 M
0 31 V
0 5200 R
0 -31 V
2854 960 M
0 31 V
0 5200 R
0 -31 V
3027 960 M
0 31 V
0 5200 R
0 -31 V
3200 960 M
0 63 V
0 5168 R
0 -63 V
stroke
3200 660 M
[ [(Helvetica) 300.0 0.0 true true 0 (01:00)]
] -100.0 MCshow
1.000 UL
LTb
3373 960 M
0 31 V
0 5200 R
0 -31 V
3546 960 M
0 31 V
0 5200 R
0 -31 V
3719 960 M
0 31 V
0 5200 R
0 -31 V
3892 960 M
0 31 V
0 5200 R
0 -31 V
4065 960 M
0 63 V
0 5168 R
0 -63 V
stroke
4065 660 M
[ [(Helvetica) 300.0 0.0 true true 0 (01:30)]
] -100.0 MCshow
1.000 UL
LTb
4237 960 M
0 31 V
0 5200 R
0 -31 V
4410 960 M
0 31 V
0 5200 R
0 -31 V
4583 960 M
0 31 V
0 5200 R
0 -31 V
4756 960 M
0 31 V
0 5200 R
0 -31 V
4929 960 M
0 63 V
0 5168 R
0 -63 V
stroke
4929 660 M
[ [(Helvetica) 300.0 0.0 true true 0 (02:00)]
] -100.0 MCshow
1.000 UL
LTb
5102 960 M
0 31 V
0 5200 R
0 -31 V
5275 960 M
0 31 V
0 5200 R
0 -31 V
5448 960 M
0 31 V
0 5200 R
0 -31 V
5621 960 M
0 31 V
0 5200 R
0 -31 V
5794 960 M
0 63 V
0 5168 R
0 -63 V
stroke
5794 660 M
[ [(Helvetica) 300.0 0.0 true true 0 (02:30)]
] -100.0 MCshow
1.000 UL
LTb
5967 960 M
0 31 V
0 5200 R
0 -31 V
6140 960 M
0 31 V
0 5200 R
0 -31 V
6313 960 M
0 31 V
0 5200 R
0 -31 V
6486 960 M
0 31 V
0 5200 R
0 -31 V
6659 960 M
0 63 V
0 5168 R
0 -63 V
stroke
6659 660 M
[ [(Helvetica) 300.0 0.0 true true 0 (03:00)]
] -100.0 MCshow
1.000 UL
LTb
1.000 UL
LTb
1470 6191 N
0 -5231 V
5189 0 V
0 5231 V
-5189 0 V
Z stroke
LCb setrgbcolor
240 3575 M
currentpoint gsave translate -270 rotate 0 0 moveto
[ [(Helvetica) 300.0 0.0 true true 0 (Appreciation)]
] -100.0 MCshow
grestore
LTb
LCb setrgbcolor
4064 210 M
[ [(Helvetica) 300.0 0.0 true true 0 (Time)]
] -100.0 MCshow
LTb
1.000 UP
1.000 UL
LTb
% Begin plot #1
5.000 UL
LT0
1643 6191 M
93 -2114 V
80 763 V
58 410 V
52 105 V
49 17 V
50 32 V
49 50 V
49 49 V
49 48 V
50 47 V
49 36 V
49 19 V
50 2 V
51 -5 V
51 -7 V
53 -15 V
55 -34 V
55 -57 V
56 -75 V
56 -76 V
55 -64 V
55 -45 V
53 -32 V
53 -34 V
51 -50 V
51 -77 V
50 -111 V
50 -148 V
49 -184 V
49 -224 V
50 -265 V
49 -307 V
49 -343 V
49 -367 V
49 -371 V
50 -355 V
49 -318 V
49 -266 V
49 -209 V
50 -154 V
49 -107 V
49 -72 V
49 -50 V
49 -38 V
50 -32 V
49 -30 V
49 -30 V
49 -28 V
49 -25 V
50 -21 V
49 -15 V
49 -9 V
49 -2 V
50 4 V
49 9 V
49 13 V
49 15 V
49 13 V
50 11 V
49 6 V
49 0 V
49 -7 V
49 -10 V
50 -13 V
49 -13 V
49 -12 V
49 -10 V
49 -7 V
50 -4 V
49 -3 V
49 0 V
49 2 V
50 4 V
49 7 V
49 10 V
49 11 V
49 12 V
50 10 V
49 6 V
49 -1 V
49 -7 V
49 -14 V
50 -17 V
49 -15 V
49 -9 V
49 -2 V
49 5 V
50 7 V
49 4 V
49 0 V
49 -5 V
50 -5 V
49 1 V
49 7 V
49 12 V
49 25 V
50 52 V
49 18 V
49 -153 V
% End plot #1
stroke
1.000 UL
LTb
1470 6191 N
0 -5231 V
5189 0 V
0 5231 V
-5189 0 V
Z stroke
1.000 UP
1.000 UL
LTb
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica

%%EndDocument
 @endspecial 17 895 a Ft(\(a\))23 b(Appreciation)17 b(associated)g
(with)e(Felipe)17 970 y(Melo)k(o)o(v)o(er)g(the)g(match.)1280
808 y @beginspecial 50 @llx 50 @lly 410 @urx 377 @ury
1584 @rwi 1152 @rhi @setspecial
%%BeginDocument: pt_1_temporal_mse.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: pt_1_temporal_mse.eps
%%Creator: gnuplot 4.4 patchlevel 4
%%CreationDate: Sun Sep  1 00:49:28 2013
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 377
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following true/false flags may be edited by hand if desired.
% The unit line width and grayscale image gamma correction may also be changed.
%
/Color true def
/Blacktext false def
/Solid false def
/Dashlength 1 def
/Landscape false def
/Level1 false def
/Rounded false def
/ClipToBoundingBox false def
/TransparentPatterns false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/Gamma 1.0 def
%
/vshift -100 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
Level1 {} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (pt_1_temporal_mse.eps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.4 patchlevel 4)
  /Author (adriano)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Sun Sep  1 00:49:28 2013)
  /DOCINFO pdfmark
end
} ifelse
/doclip {
  ClipToBoundingBox {
    newpath 50 50 moveto 410 50 lineto 410 377 lineto 50 377 lineto closepath
    clip
  } if
} def
%
% Gnuplot Prolog Version 4.4 (August 2010)
%
%/SuppressPDFMark true def
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/g {setgray} bind def
/Gshow {show} def   % May be redefined later in the file to support UTF-8
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
3.8 setmiterlimit
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  gsave 1 setgray fill grestore clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {Gshow} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} def
/Gswidth {dup type /stringtype eq {stringwidth} {pop (n) stringwidth} ifelse} def
/MFwidth {0 exch { dup 5 get 3 ge { 5 get 3 eq { 0 } { pop } ifelse }
 {dup 3 get{dup dup 0 get findfont exch 1 get scalefont setfont
     6 get Gswidth pop add} {pop} ifelse} ifelse} forall} def
/MLshow { currentpoint stroke M
  0 exch R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/XYsave    { [( ) 1 2 true false 3 ()] } bind def
/XYrestore { [( ) 1 2 true false 4 ()] } bind def
end
%%EndProlog
gnudict begin
gsave
doclip
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 300 scalefont setfont
1.000 UL
LTb
1650 960 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 960 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0)]
] -100.0 MRshow
1.000 UL
LTb
1650 1707 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 1707 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.05)]
] -100.0 MRshow
1.000 UL
LTb
1650 2455 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 2455 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.1)]
] -100.0 MRshow
1.000 UL
LTb
1650 3202 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 3202 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.15)]
] -100.0 MRshow
1.000 UL
LTb
1650 3949 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 3949 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.2)]
] -100.0 MRshow
1.000 UL
LTb
1650 4696 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 4696 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.25)]
] -100.0 MRshow
1.000 UL
LTb
1650 5444 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 5444 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.3)]
] -100.0 MRshow
1.000 UL
LTb
1650 6191 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 6191 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.35)]
] -100.0 MRshow
1.000 UL
LTb
1650 960 M
0 63 V
0 5168 R
0 -63 V
stroke
1650 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0)]
] -100.0 MCshow
1.000 UL
LTb
2652 960 M
0 63 V
0 5168 R
0 -63 V
stroke
2652 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.2)]
] -100.0 MCshow
1.000 UL
LTb
3654 960 M
0 63 V
0 5168 R
0 -63 V
stroke
3654 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.4)]
] -100.0 MCshow
1.000 UL
LTb
4655 960 M
0 63 V
0 5168 R
0 -63 V
stroke
4655 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.6)]
] -100.0 MCshow
1.000 UL
LTb
5657 960 M
0 63 V
0 5168 R
0 -63 V
stroke
5657 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.8)]
] -100.0 MCshow
1.000 UL
LTb
6659 960 M
0 63 V
0 5168 R
0 -63 V
stroke
6659 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1)]
] -100.0 MCshow
1.000 UL
LTb
1.000 UL
LTb
1650 6191 N
0 -5231 V
5009 0 V
0 5231 V
-5009 0 V
Z stroke
LCb setrgbcolor
240 3575 M
currentpoint gsave translate -270 rotate 0 0 moveto
[ [(Helvetica) 300.0 0.0 true true 0 (MSE)]
] -100.0 MCshow
grestore
LTb
LCb setrgbcolor
4154 210 M
[ [(Helvetica) 300.0 0.0 true true 0 (Stream Progress)]
] -100.0 MCshow
LTb
1.000 UP
1.000 UL
LTb
% Begin plot #1
5.000 UL
LT0
LCb setrgbcolor
5336 5978 M
[ [(Helvetica) 300.0 0.0 true true 0 (AC)]
] -100.0 MRshow
LT0
5516 5978 M
783 0 V
1681 3949 M
32 -1494 V
31 249 V
32 -63 V
31 -336 V
32 -224 V
31 -160 V
32 -27 V
31 -21 V
32 -91 V
31 -75 V
32 187 V
31 -72 V
31 -8 V
32 -57 V
31 -50 V
32 -44 V
31 -39 V
32 -35 V
31 -31 V
32 7 V
31 74 V
32 36 V
31 32 V
32 30 V
31 57 V
32 24 V
31 23 V
31 47 V
32 93 V
31 88 V
32 129 V
31 189 V
32 243 V
31 294 V
32 236 V
31 203 V
32 212 V
31 221 V
32 153 V
31 110 V
31 -21 V
32 -71 V
31 -69 V
32 -65 V
31 -46 V
32 -60 V
31 -58 V
32 -55 V
31 -39 V
32 37 V
31 237 V
32 227 V
31 164 V
31 212 V
32 151 V
31 159 V
32 179 V
31 123 V
32 143 V
31 139 V
32 134 V
31 130 V
32 126 V
31 133 V
32 107 V
31 -30 V
32 -74 V
31 -71 V
31 -69 V
32 -67 V
31 -66 V
32 -63 V
31 -62 V
32 -60 V
31 -59 V
32 -57 V
31 -55 V
32 -45 V
31 -53 V
32 -43 V
31 -5 V
31 -22 V
32 66 V
31 13 V
32 38 V
31 28 V
32 11 V
31 -6 V
32 -14 V
31 19 V
32 11 V
31 -6 V
32 2 V
31 -21 V
32 10 V
31 2 V
31 2 V
32 2 V
31 -5 V
32 2 V
31 17 V
32 9 V
stroke 4891 5255 M
31 -12 V
32 1 V
31 -12 V
32 -19 V
31 -5 V
32 -25 V
31 3 V
31 9 V
32 -25 V
31 3 V
32 -11 V
31 -11 V
32 -23 V
31 -4 V
32 -16 V
31 -35 V
32 -22 V
31 -3 V
32 -15 V
31 -27 V
31 -14 V
32 -3 V
31 -8 V
32 -14 V
31 -8 V
32 -13 V
31 -25 V
32 -19 V
31 -19 V
32 -24 V
31 -18 V
32 -17 V
31 -12 V
32 -17 V
31 -17 V
31 -22 V
32 -22 V
31 -22 V
32 -10 V
31 -16 V
32 -10 V
31 -26 V
32 -20 V
31 -15 V
32 -15 V
31 1 V
32 -19 V
31 -24 V
31 -19 V
32 -23 V
31 1 V
32 -13 V
31 -18 V
32 -18 V
31 16 V
32 -8 V
6 -5 V
% End plot #1
% Begin plot #2
stroke
LT1
LCb setrgbcolor
5336 5678 M
[ [(Helvetica) 300.0 0.0 true true 0 (HAT)]
] -100.0 MRshow
LT1
5516 5678 M
783 0 V
1681 3949 M
32 -1494 V
31 0 V
32 0 V
31 747 V
32 124 V
31 89 V
32 -26 V
31 -104 V
32 -233 V
31 -190 V
32 91 V
31 -154 V
31 -78 V
32 -117 V
31 -103 V
32 -46 V
31 -83 V
32 -35 V
31 -69 V
32 -63 V
31 46 V
32 -56 V
31 10 V
32 40 V
31 37 V
32 7 V
31 32 V
31 56 V
32 127 V
31 71 V
32 66 V
31 108 V
32 35 V
31 -9 V
32 53 V
31 71 V
32 -31 V
31 27 V
32 45 V
31 43 V
31 -12 V
32 -12 V
31 -29 V
32 -44 V
31 -25 V
32 -41 V
31 -38 V
32 -38 V
31 9 V
32 -20 V
31 -34 V
32 -5 V
31 -18 V
31 -18 V
32 -30 V
31 -16 V
32 -29 V
31 -2 V
32 -27 V
31 -26 V
32 -13 V
31 -25 V
32 -24 V
31 -23 V
32 12 V
31 -23 V
32 -21 V
31 -21 V
31 -10 V
32 -20 V
31 -20 V
32 -19 V
31 -18 V
32 -18 V
31 -17 V
32 -17 V
31 -7 V
32 -7 V
31 -16 V
32 -6 V
31 12 V
31 -7 V
32 3 V
31 3 V
32 -15 V
31 -6 V
32 3 V
31 -14 V
32 -13 V
31 -6 V
32 -13 V
31 -13 V
32 -12 V
31 -5 V
32 -12 V
31 -4 V
31 -12 V
32 -12 V
31 -11 V
32 -11 V
31 -11 V
32 -3 V
stroke 4891 2056 M
31 -11 V
32 -10 V
31 -3 V
32 -3 V
31 -10 V
32 -3 V
31 -10 V
31 -2 V
32 -10 V
31 -2 V
32 -9 V
31 -9 V
32 -9 V
31 -2 V
32 4 V
31 -2 V
32 4 V
31 -9 V
32 -2 V
31 -8 V
31 -8 V
32 -2 V
31 -1 V
32 -8 V
31 -8 V
32 -7 V
31 -8 V
32 -7 V
31 -7 V
32 -7 V
31 -7 V
32 -7 V
31 -1 V
32 -7 V
31 -6 V
31 -7 V
32 -1 V
31 -6 V
32 -6 V
31 -6 V
32 -6 V
31 -6 V
32 -6 V
31 -1 V
32 -6 V
31 -5 V
32 -6 V
31 -6 V
31 -5 V
32 -5 V
31 -1 V
32 0 V
31 -1 V
32 0 V
31 32 V
32 9 V
6 -1 V
% End plot #2
% Begin plot #3
stroke
LT2
LCb setrgbcolor
5336 5378 M
[ [(Helvetica) 300.0 0.0 true true 0 (ILAC)]
] -100.0 MRshow
LT2
5516 5378 M
783 0 V
1681 3949 M
32 -1494 V
31 249 V
32 -63 V
31 710 V
32 -274 V
31 -195 V
32 40 V
31 -135 V
32 -183 V
31 -149 V
32 62 V
31 -120 V
31 111 V
32 -103 V
31 -91 V
32 -35 V
31 -74 V
32 -26 V
31 -61 V
32 -19 V
31 50 V
32 -19 V
31 13 V
32 -17 V
31 12 V
32 40 V
31 36 V
31 86 V
32 130 V
31 25 V
32 140 V
31 177 V
32 276 V
31 197 V
32 164 V
31 136 V
32 129 V
31 26 V
32 100 V
31 76 V
31 2 V
32 -33 V
31 -32 V
32 -13 V
31 3 V
32 -61 V
31 -26 V
32 -41 V
31 -40 V
32 -38 V
31 -50 V
32 -35 V
31 -33 V
31 -33 V
32 -44 V
31 -43 V
32 -41 V
31 -27 V
32 -39 V
31 -38 V
32 -36 V
31 -35 V
32 -35 V
31 -33 V
32 -20 V
31 -20 V
32 -20 V
31 -30 V
31 -29 V
32 -28 V
31 -27 V
32 -27 V
31 -26 V
32 -25 V
31 -24 V
32 -24 V
31 -23 V
32 -14 V
31 -22 V
32 -12 V
31 -3 V
31 -21 V
32 -12 V
31 -2 V
32 -20 V
31 -11 V
32 -11 V
31 -18 V
32 -19 V
31 -9 V
32 -18 V
31 -9 V
32 -9 V
31 -1 V
32 -9 V
31 -16 V
31 -16 V
32 -15 V
31 -1 V
32 -15 V
31 0 V
32 -7 V
stroke 4891 2462 M
31 -15 V
32 8 V
31 -7 V
32 -7 V
31 -7 V
32 0 V
31 7 V
31 -7 V
32 -6 V
31 -6 V
32 6 V
31 1 V
32 -13 V
31 -13 V
32 1 V
31 -6 V
32 1 V
31 -12 V
32 0 V
31 -11 V
31 -12 V
32 1 V
31 7 V
32 -12 V
31 -5 V
32 -5 V
31 1 V
32 -5 V
31 -10 V
32 1 V
31 -5 V
32 1 V
31 -5 V
32 -4 V
31 11 V
31 -9 V
32 -5 V
31 -10 V
32 -9 V
31 1 V
32 -4 V
31 -4 V
32 1 V
31 1 V
32 -4 V
31 -4 V
32 -4 V
31 -4 V
31 -8 V
32 1 V
31 1 V
32 -4 V
31 2 V
32 1 V
31 34 V
32 6 V
6 -2 V
% End plot #3
% Begin plot #4
stroke
LT3
LCb setrgbcolor
5336 5078 M
[ [(Helvetica) 300.0 0.0 true true 0 (PESS \(instance\))]
] -100.0 MRshow
LT3
5516 5078 M
783 0 V
1681 4696 M
32 -1868 V
31 -124 V
32 -63 V
31 112 V
32 -49 V
31 -36 V
32 -120 V
31 73 V
32 -92 V
31 -74 V
32 62 V
31 -120 V
31 111 V
32 46 V
31 -53 V
32 -2 V
31 -3 V
32 -41 V
31 -75 V
32 3 V
31 38 V
32 -31 V
31 33 V
32 -28 V
31 2 V
32 30 V
31 28 V
31 0 V
32 99 V
31 69 V
32 135 V
31 36 V
32 -10 V
31 34 V
32 -31 V
31 11 V
32 -48 V
31 -27 V
32 30 V
31 -25 V
31 -42 V
32 -40 V
31 -39 V
32 -36 V
31 -19 V
32 -34 V
31 -32 V
32 -31 V
31 -15 V
32 44 V
31 -15 V
32 0 V
31 -14 V
31 -28 V
32 -26 V
31 -25 V
32 -25 V
31 -23 V
32 -23 V
31 -22 V
32 -21 V
31 -21 V
32 -20 V
31 -19 V
32 3 V
31 -18 V
32 -18 V
31 -18 V
31 -17 V
32 -16 V
31 -16 V
32 -16 V
31 -15 V
32 -15 V
31 -14 V
32 -14 V
31 -14 V
32 -4 V
31 -13 V
32 -4 V
31 -3 V
31 -13 V
32 -3 V
31 6 V
32 -12 V
31 -3 V
32 -3 V
31 -3 V
32 -11 V
31 -3 V
32 -10 V
31 -11 V
32 -10 V
31 -10 V
32 -10 V
31 -10 V
31 -9 V
32 -9 V
31 -9 V
32 -9 V
31 -9 V
32 -1 V
stroke 4891 1838 M
31 -9 V
32 -8 V
31 -8 V
32 -8 V
31 -8 V
32 -7 V
31 -8 V
31 -1 V
32 -7 V
31 -7 V
32 -7 V
31 -7 V
32 -7 V
31 -7 V
32 -6 V
31 -7 V
32 0 V
31 -6 V
32 0 V
31 -7 V
31 -6 V
32 0 V
31 0 V
32 -6 V
31 -5 V
32 -6 V
31 -6 V
32 -5 V
31 -6 V
32 -5 V
31 -5 V
32 -6 V
31 6 V
32 -5 V
31 -5 V
31 -5 V
32 1 V
31 -5 V
32 -5 V
31 -5 V
32 -5 V
31 -4 V
32 -5 V
31 1 V
32 -5 V
31 -4 V
32 -4 V
31 -5 V
31 -4 V
32 -4 V
31 1 V
32 0 V
31 1 V
32 1 V
31 19 V
32 10 V
6 0 V
% End plot #4
% Begin plot #5
stroke
LT4
LCb setrgbcolor
5336 4778 M
[ [(Helvetica) 300.0 0.0 true true 0 (KHSS \(instance\))]
] -100.0 MRshow
LT4
5516 4778 M
783 0 V
1681 4472 M
32 -1756 V
31 -117 V
32 -58 V
31 105 V
32 -47 V
31 -33 V
32 -113 V
31 68 V
32 -86 V
31 -70 V
32 58 V
31 -112 V
31 104 V
32 44 V
31 -50 V
32 -3 V
31 -2 V
32 -39 V
31 -70 V
32 3 V
31 35 V
32 -29 V
31 32 V
32 -27 V
31 2 V
32 28 V
31 26 V
31 0 V
32 94 V
31 65 V
32 126 V
31 34 V
32 -9 V
31 31 V
32 -29 V
31 11 V
32 -46 V
31 -25 V
32 29 V
31 -24 V
31 -40 V
32 -37 V
31 -36 V
32 -35 V
31 -17 V
32 -32 V
31 -31 V
32 -29 V
31 -14 V
32 41 V
31 -14 V
32 0 V
31 -13 V
31 -26 V
32 -24 V
31 -24 V
32 -23 V
31 -22 V
32 -22 V
31 -20 V
32 -20 V
31 -20 V
32 -19 V
31 -18 V
32 4 V
31 -18 V
32 -17 V
31 -16 V
31 -16 V
32 -16 V
31 -15 V
32 -15 V
31 -14 V
32 -14 V
31 -13 V
32 -14 V
31 -12 V
32 -4 V
31 -12 V
32 -4 V
31 -3 V
31 -12 V
32 -3 V
31 6 V
32 -12 V
31 -2 V
32 -3 V
31 -3 V
32 -10 V
31 -3 V
32 -10 V
31 -10 V
32 -9 V
31 -10 V
32 -9 V
31 -9 V
31 -9 V
32 -9 V
31 -8 V
32 -8 V
31 -9 V
32 -1 V
stroke 4891 1785 M
31 -8 V
32 -8 V
31 -7 V
32 -8 V
31 -7 V
32 -7 V
31 -7 V
31 -1 V
32 -7 V
31 -7 V
32 -6 V
31 -7 V
32 -6 V
31 -7 V
32 -6 V
31 -6 V
32 0 V
31 -6 V
32 0 V
31 -6 V
31 -6 V
32 0 V
31 0 V
32 -5 V
31 -6 V
32 -5 V
31 -5 V
32 -5 V
31 -5 V
32 -6 V
31 -4 V
32 -5 V
31 5 V
32 -5 V
31 -4 V
31 -5 V
32 0 V
31 -4 V
32 -5 V
31 -4 V
32 -5 V
31 -4 V
32 -4 V
31 0 V
32 -4 V
31 -4 V
32 -4 V
31 -4 V
31 -4 V
32 -4 V
31 1 V
32 0 V
31 1 V
32 1 V
31 18 V
32 9 V
6 0 V
% End plot #5
stroke
1.000 UL
LTb
1650 6191 N
0 -5231 V
5009 0 V
0 5231 V
-5009 0 V
Z stroke
1.000 UP
1.000 UL
LTb
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica

%%EndDocument
 @endspecial 1355 895 a(\(b\))49 b(MSE)67 b(numbers)j(as)e(the)g
(stream)1355 970 y(e)n(v)o(olv)o(es.)2619 808 y @beginspecial
50 @llx 50 @lly 410 @urx 377 @ury 1584 @rwi 1152 @rhi
@setspecial
%%BeginDocument: pt_2_similaridade_rotulacoes.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: pt_2_similaridade_rotulacoes.eps
%%Creator: gnuplot 4.4 patchlevel 4
%%CreationDate: Sat Aug 31 20:05:30 2013
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 377
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following true/false flags may be edited by hand if desired.
% The unit line width and grayscale image gamma correction may also be changed.
%
/Color true def
/Blacktext false def
/Solid false def
/Dashlength 1 def
/Landscape false def
/Level1 false def
/Rounded false def
/ClipToBoundingBox false def
/TransparentPatterns false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/Gamma 1.0 def
%
/vshift -100 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
Level1 {} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (pt_2_similaridade_rotulacoes.eps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.4 patchlevel 4)
  /Author (adriano)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Sat Aug 31 20:05:30 2013)
  /DOCINFO pdfmark
end
} ifelse
/doclip {
  ClipToBoundingBox {
    newpath 50 50 moveto 410 50 lineto 410 377 lineto 50 377 lineto closepath
    clip
  } if
} def
%
% Gnuplot Prolog Version 4.4 (August 2010)
%
%/SuppressPDFMark true def
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/g {setgray} bind def
/Gshow {show} def   % May be redefined later in the file to support UTF-8
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
3.8 setmiterlimit
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  gsave 1 setgray fill grestore clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {Gshow} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} def
/Gswidth {dup type /stringtype eq {stringwidth} {pop (n) stringwidth} ifelse} def
/MFwidth {0 exch { dup 5 get 3 ge { 5 get 3 eq { 0 } { pop } ifelse }
 {dup 3 get{dup dup 0 get findfont exch 1 get scalefont setfont
     6 get Gswidth pop add} {pop} ifelse} ifelse} forall} def
/MLshow { currentpoint stroke M
  0 exch R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/XYsave    { [( ) 1 2 true false 3 ()] } bind def
/XYrestore { [( ) 1 2 true false 4 ()] } bind def
end
%%EndProlog
gnudict begin
gsave
doclip
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 300 scalefont setfont
1.000 UL
LTb
1470 960 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 960 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0)]
] -100.0 MRshow
1.000 UL
LTb
1470 1483 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 1483 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.1)]
] -100.0 MRshow
1.000 UL
LTb
1470 2006 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 2006 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.2)]
] -100.0 MRshow
1.000 UL
LTb
1470 2529 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 2529 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.3)]
] -100.0 MRshow
1.000 UL
LTb
1470 3052 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 3052 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.4)]
] -100.0 MRshow
1.000 UL
LTb
1470 3576 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 3576 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.5)]
] -100.0 MRshow
1.000 UL
LTb
1470 4099 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 4099 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.6)]
] -100.0 MRshow
1.000 UL
LTb
1470 4622 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 4622 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.7)]
] -100.0 MRshow
1.000 UL
LTb
1470 5145 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 5145 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.8)]
] -100.0 MRshow
1.000 UL
LTb
1470 5668 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 5668 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.9)]
] -100.0 MRshow
1.000 UL
LTb
1470 6191 M
63 0 V
5126 0 R
-63 0 V
stroke
1290 6191 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1)]
] -100.0 MRshow
1.000 UL
LTb
1470 960 M
0 63 V
0 5168 R
0 -63 V
stroke
1470 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0)]
] -100.0 MCshow
1.000 UL
LTb
2508 960 M
0 63 V
0 5168 R
0 -63 V
stroke
2508 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.2)]
] -100.0 MCshow
1.000 UL
LTb
3546 960 M
0 63 V
0 5168 R
0 -63 V
stroke
3546 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.4)]
] -100.0 MCshow
1.000 UL
LTb
4583 960 M
0 63 V
0 5168 R
0 -63 V
stroke
4583 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.6)]
] -100.0 MCshow
1.000 UL
LTb
5621 960 M
0 63 V
0 5168 R
0 -63 V
stroke
5621 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.8)]
] -100.0 MCshow
1.000 UL
LTb
6659 960 M
0 63 V
0 5168 R
0 -63 V
stroke
6659 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1)]
] -100.0 MCshow
1.000 UL
LTb
1.000 UL
LTb
1470 6191 N
0 -5231 V
5189 0 V
0 5231 V
-5189 0 V
Z stroke
LCb setrgbcolor
240 3575 M
currentpoint gsave translate -270 rotate 0 0 moveto
[ [(Helvetica) 300.0 0.0 true true 0 (Labeling Effort)]
] -100.0 MCshow
grestore
LTb
LCb setrgbcolor
4064 210 M
[ [(Symbol) 300.0 0.0 true true 0 (s)]
] -100.0 MCshow
LTb
1.000 UP
1.000 UL
LTb
% Begin plot #1
5.000 UL
LT0
LCb setrgbcolor
4478 5779 M
[ [(Helvetica) 300.0 0.0 true true 0 (PESS \(batch-0.01\))]
] -100.0 MRshow
LT0
4658 5779 M
783 0 V
1729 1215 M
11 12 V
10 12 V
10 12 V
9 12 V
9 12 V
9 12 V
9 12 V
9 13 V
8 12 V
9 12 V
8 13 V
8 13 V
8 13 V
8 14 V
8 14 V
8 14 V
8 14 V
8 15 V
7 15 V
8 15 V
8 16 V
8 17 V
8 17 V
8 17 V
9 18 V
8 18 V
9 19 V
8 19 V
9 20 V
9 20 V
10 21 V
9 21 V
11 22 V
10 23 V
11 23 V
11 24 V
11 24 V
12 26 V
13 25 V
13 27 V
14 27 V
14 28 V
15 28 V
16 30 V
16 30 V
18 31 V
18 31 V
19 33 V
20 33 V
21 35 V
22 35 V
24 36 V
24 37 V
26 38 V
28 39 V
28 41 V
31 41 V
32 43 V
33 44 V
36 45 V
37 46 V
39 48 V
41 49 V
44 51 V
46 52 V
48 53 V
50 56 V
53 57 V
56 59 V
59 61 V
62 62 V
64 65 V
68 67 V
72 69 V
75 71 V
78 74 V
82 76 V
87 79 V
90 82 V
95 84 V
99 87 V
104 90 V
108 93 V
114 97 V
118 100 V
124 103 V
130 108 V
135 110 V
141 115 V
148 119 V
153 124 V
161 127 V
167 133 V
174 137 V
182 142 V
189 147 V
197 152 V
205 158 V
213 164 V
% End plot #1
% Begin plot #2
stroke
LT1
LCb setrgbcolor
4478 5479 M
[ [(Helvetica) 300.0 0.0 true true 0 (KHSS \(batch-0.01\))]
] -100.0 MRshow
LT1
4658 5479 M
783 0 V
1729 1215 M
11 12 V
10 12 V
10 12 V
9 12 V
9 12 V
9 12 V
9 12 V
9 13 V
8 12 V
9 12 V
8 13 V
8 13 V
8 13 V
8 14 V
8 14 V
8 14 V
8 14 V
8 15 V
7 15 V
8 15 V
8 16 V
8 17 V
8 17 V
8 17 V
9 18 V
8 18 V
9 19 V
8 19 V
9 20 V
9 20 V
10 21 V
9 21 V
11 22 V
10 23 V
11 23 V
11 24 V
11 24 V
12 26 V
13 25 V
13 27 V
14 27 V
14 28 V
15 28 V
16 30 V
16 30 V
18 31 V
18 31 V
19 33 V
20 33 V
21 35 V
22 35 V
24 36 V
24 37 V
26 38 V
28 39 V
28 41 V
31 41 V
32 43 V
33 44 V
36 45 V
37 46 V
39 48 V
41 49 V
44 51 V
46 52 V
48 53 V
50 56 V
53 57 V
56 59 V
59 61 V
62 62 V
64 65 V
68 67 V
72 69 V
75 71 V
78 74 V
82 76 V
87 79 V
90 82 V
95 84 V
99 87 V
104 90 V
108 93 V
114 97 V
118 100 V
124 103 V
130 108 V
135 110 V
141 115 V
148 119 V
153 124 V
161 127 V
167 133 V
174 137 V
182 142 V
189 147 V
197 152 V
205 158 V
213 164 V
% End plot #2
% Begin plot #3
stroke
LT2
LCb setrgbcolor
4478 5179 M
[ [(Helvetica) 300.0 0.0 true true 0 (PESS \(batch-0.05\))]
] -100.0 MRshow
LT2
4658 5179 M
783 0 V
1729 1034 M
11 6 V
10 5 V
10 6 V
9 5 V
9 5 V
9 6 V
9 5 V
9 6 V
8 6 V
9 5 V
8 6 V
8 6 V
8 7 V
8 6 V
8 7 V
8 7 V
8 7 V
8 7 V
7 8 V
8 7 V
8 9 V
8 8 V
8 9 V
8 9 V
9 10 V
8 9 V
9 11 V
8 10 V
9 12 V
9 11 V
10 12 V
9 13 V
11 13 V
10 13 V
11 15 V
11 14 V
11 16 V
12 16 V
13 16 V
13 18 V
14 18 V
14 18 V
15 20 V
16 20 V
16 22 V
18 22 V
18 23 V
19 24 V
20 25 V
21 26 V
22 28 V
24 28 V
24 30 V
26 31 V
28 32 V
28 34 V
31 35 V
32 37 V
33 38 V
36 40 V
37 42 V
39 43 V
41 46 V
44 47 V
46 50 V
48 51 V
50 54 V
53 57 V
56 58 V
59 62 V
62 63 V
64 67 V
68 70 V
72 72 V
75 76 V
78 79 V
82 82 V
87 86 V
90 90 V
95 93 V
99 97 V
104 101 V
108 106 V
114 110 V
118 114 V
124 120 V
130 124 V
135 129 V
141 134 V
148 140 V
153 146 V
161 151 V
167 158 V
174 164 V
182 170 V
189 177 V
197 184 V
205 191 V
213 198 V
% End plot #3
% Begin plot #4
stroke
LT3
LCb setrgbcolor
4478 4879 M
[ [(Helvetica) 300.0 0.0 true true 0 (KHSS \(batch-0.05\))]
] -100.0 MRshow
LT3
4658 4879 M
783 0 V
1729 1034 M
11 6 V
10 5 V
10 6 V
9 5 V
9 5 V
9 6 V
9 5 V
9 6 V
8 6 V
9 5 V
8 6 V
8 6 V
8 7 V
8 6 V
8 7 V
8 7 V
8 7 V
8 7 V
7 8 V
8 7 V
8 9 V
8 8 V
8 9 V
8 9 V
9 10 V
8 9 V
9 11 V
8 10 V
9 12 V
9 11 V
10 12 V
9 13 V
11 13 V
10 13 V
11 15 V
11 14 V
11 16 V
12 16 V
13 16 V
13 18 V
14 18 V
14 18 V
15 20 V
16 20 V
16 22 V
18 22 V
18 23 V
19 24 V
20 25 V
21 26 V
22 28 V
24 28 V
24 30 V
26 31 V
28 32 V
28 34 V
31 35 V
32 37 V
33 38 V
36 40 V
37 42 V
39 43 V
41 46 V
44 47 V
46 50 V
48 51 V
50 54 V
53 57 V
56 58 V
59 62 V
62 63 V
64 67 V
68 70 V
72 72 V
75 76 V
78 79 V
82 82 V
87 86 V
90 90 V
95 93 V
99 97 V
104 101 V
108 106 V
114 110 V
118 114 V
124 120 V
130 124 V
135 129 V
141 134 V
148 140 V
153 146 V
161 151 V
167 158 V
174 164 V
182 170 V
189 177 V
197 184 V
205 191 V
213 198 V
% End plot #4
% Begin plot #5
stroke
LT4
LCb setrgbcolor
4478 4579 M
[ [(Helvetica) 300.0 0.0 true true 0 (PESS \(batch-0.10\))]
] -100.0 MRshow
LT4
4658 4579 M
783 0 V
1729 1006 M
11 4 V
10 4 V
10 3 V
9 4 V
9 4 V
9 4 V
9 3 V
9 4 V
8 4 V
9 4 V
8 4 V
8 4 V
8 5 V
8 4 V
8 5 V
8 5 V
8 5 V
8 5 V
7 5 V
8 6 V
8 6 V
8 6 V
8 7 V
8 6 V
9 7 V
8 8 V
9 8 V
8 8 V
9 8 V
9 9 V
10 9 V
9 10 V
11 10 V
10 11 V
11 11 V
11 12 V
11 13 V
12 12 V
13 14 V
13 14 V
14 15 V
14 16 V
15 16 V
16 17 V
16 18 V
18 19 V
18 20 V
19 21 V
20 22 V
21 23 V
22 24 V
24 25 V
24 26 V
26 28 V
28 29 V
28 30 V
31 32 V
32 34 V
33 35 V
36 37 V
37 38 V
39 40 V
41 43 V
44 44 V
46 46 V
48 49 V
50 51 V
53 53 V
56 56 V
59 59 V
62 61 V
64 64 V
68 67 V
72 70 V
75 73 V
78 76 V
82 80 V
87 84 V
90 87 V
95 91 V
99 95 V
104 99 V
108 104 V
114 108 V
118 113 V
124 118 V
130 122 V
135 128 V
141 133 V
148 139 V
153 144 V
161 151 V
167 157 V
174 162 V
182 170 V
189 176 V
197 184 V
205 190 V
213 199 V
% End plot #5
% Begin plot #6
stroke
LT5
LCb setrgbcolor
4478 4279 M
[ [(Helvetica) 300.0 0.0 true true 0 (KHSS \(batch-0.10\))]
] -100.0 MRshow
LT5
4658 4279 M
783 0 V
1729 1006 M
11 4 V
10 4 V
10 3 V
9 4 V
9 4 V
9 4 V
9 3 V
9 4 V
8 4 V
9 4 V
8 4 V
8 4 V
8 5 V
8 4 V
8 5 V
8 5 V
8 5 V
8 5 V
7 5 V
8 6 V
8 6 V
8 6 V
8 7 V
8 6 V
9 7 V
8 8 V
9 8 V
8 8 V
9 8 V
9 9 V
10 9 V
9 10 V
11 10 V
10 11 V
11 11 V
11 12 V
11 13 V
12 12 V
13 14 V
13 14 V
14 15 V
14 16 V
15 16 V
16 17 V
16 18 V
18 19 V
18 20 V
19 21 V
20 22 V
21 23 V
22 24 V
24 25 V
24 26 V
26 28 V
28 29 V
28 30 V
31 32 V
32 34 V
33 35 V
36 37 V
37 38 V
39 40 V
41 43 V
44 44 V
46 46 V
48 49 V
50 51 V
53 53 V
56 56 V
59 59 V
62 61 V
64 64 V
68 67 V
72 70 V
75 73 V
78 76 V
82 80 V
87 84 V
90 87 V
95 91 V
99 95 V
104 99 V
108 104 V
114 108 V
118 113 V
124 118 V
130 122 V
135 128 V
141 133 V
148 139 V
153 144 V
161 151 V
167 157 V
174 162 V
182 170 V
189 176 V
197 184 V
205 190 V
213 199 V
% End plot #6
stroke
1.000 UL
LTb
1470 6191 N
0 -5231 V
5189 0 V
0 5231 V
-5189 0 V
Z stroke
1.000 UP
1.000 UL
LTb
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Symbol Helvetica

%%EndDocument
 @endspecial 2694 895 a(\(c\))39 b(X-Y)47 b(scatter)g(plot)h
(correlating)g(the)2694 970 y(minimum)19 b(similarity)f(threshold)h
Fm(\016)i Ft(and)f(la-)2694 1045 y(beling)f(ef)n(fort.)-58
2071 y @beginspecial 50 @llx 50 @lly 410 @urx 377 @ury
1584 @rwi 1152 @rhi @setspecial
%%BeginDocument: pt_3_rmse-labelling.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: pt_3_rmse-labelling.eps
%%Creator: gnuplot 4.4 patchlevel 4
%%CreationDate: Sun Sep  1 00:31:37 2013
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 377
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following true/false flags may be edited by hand if desired.
% The unit line width and grayscale image gamma correction may also be changed.
%
/Color true def
/Blacktext false def
/Solid false def
/Dashlength 1 def
/Landscape false def
/Level1 false def
/Rounded false def
/ClipToBoundingBox false def
/TransparentPatterns false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/Gamma 1.0 def
%
/vshift -100 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
Level1 {} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (pt_3_rmse-labelling.eps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.4 patchlevel 4)
  /Author (adriano)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Sun Sep  1 00:31:37 2013)
  /DOCINFO pdfmark
end
} ifelse
/doclip {
  ClipToBoundingBox {
    newpath 50 50 moveto 410 50 lineto 410 377 lineto 50 377 lineto closepath
    clip
  } if
} def
%
% Gnuplot Prolog Version 4.4 (August 2010)
%
%/SuppressPDFMark true def
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/g {setgray} bind def
/Gshow {show} def   % May be redefined later in the file to support UTF-8
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
3.8 setmiterlimit
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  gsave 1 setgray fill grestore clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {Gshow} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} def
/Gswidth {dup type /stringtype eq {stringwidth} {pop (n) stringwidth} ifelse} def
/MFwidth {0 exch { dup 5 get 3 ge { 5 get 3 eq { 0 } { pop } ifelse }
 {dup 3 get{dup dup 0 get findfont exch 1 get scalefont setfont
     6 get Gswidth pop add} {pop} ifelse} ifelse} forall} def
/MLshow { currentpoint stroke M
  0 exch R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/XYsave    { [( ) 1 2 true false 3 ()] } bind def
/XYrestore { [( ) 1 2 true false 4 ()] } bind def
end
%%EndProlog
gnudict begin
gsave
doclip
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 300 scalefont setfont
1.000 UL
LTb
1650 960 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 960 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0)]
] -100.0 MRshow
1.000 UL
LTb
1650 1667 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 1667 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.05)]
] -100.0 MRshow
1.000 UL
LTb
1650 2374 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 2374 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.1)]
] -100.0 MRshow
1.000 UL
LTb
1650 3081 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 3081 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.15)]
] -100.0 MRshow
1.000 UL
LTb
1650 3788 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 3788 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.2)]
] -100.0 MRshow
1.000 UL
LTb
1650 4494 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 4494 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.25)]
] -100.0 MRshow
1.000 UL
LTb
1650 5201 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 5201 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.3)]
] -100.0 MRshow
1.000 UL
LTb
1650 5908 M
63 0 V
4946 0 R
-63 0 V
stroke
1470 5908 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.35)]
] -100.0 MRshow
1.000 UL
LTb
1650 960 M
0 63 V
0 5168 R
0 -63 V
stroke
1650 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0)]
] -100.0 MCshow
1.000 UL
LTb
2902 960 M
0 63 V
0 5168 R
0 -63 V
stroke
2902 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.2)]
] -100.0 MCshow
1.000 UL
LTb
4155 960 M
0 63 V
0 5168 R
0 -63 V
stroke
4155 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.4)]
] -100.0 MCshow
1.000 UL
LTb
5407 960 M
0 63 V
0 5168 R
0 -63 V
stroke
5407 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.6)]
] -100.0 MCshow
1.000 UL
LTb
6659 960 M
0 63 V
0 5168 R
0 -63 V
stroke
6659 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.8)]
] -100.0 MCshow
1.000 UL
LTb
1.000 UL
LTb
1650 6191 N
0 -5231 V
5009 0 V
0 5231 V
-5009 0 V
Z stroke
LCb setrgbcolor
240 3575 M
currentpoint gsave translate -270 rotate 0 0 moveto
[ [(Helvetica) 300.0 0.0 true true 0 (MSE)]
] -100.0 MCshow
grestore
LTb
LCb setrgbcolor
4154 210 M
[ [(Helvetica) 300.0 0.0 true true 0 (Labeling Effort)]
] -100.0 MCshow
LTb
1.000 UP
1.000 UL
LTb
% Begin plot #1
5.000 UL
LT0
LCb setrgbcolor
5336 5978 M
[ [(Helvetica) 300.0 0.0 true true 0 (PESS \(batch-0.01\))]
] -100.0 MRshow
LT0
5516 5978 M
783 0 V
1893 2134 M
11 54 V
12 51 V
11 50 V
12 47 V
11 46 V
12 43 V
11 41 V
12 40 V
12 37 V
12 34 V
12 33 V
12 31 V
13 28 V
13 26 V
13 24 V
13 22 V
14 20 V
14 18 V
14 15 V
15 14 V
15 11 V
16 10 V
16 7 V
16 6 V
17 4 V
18 2 V
18 0 V
18 -1 V
19 -4 V
19 -4 V
20 -7 V
20 -8 V
21 -9 V
22 -11 V
22 -12 V
23 -14 V
23 -15 V
24 -16 V
25 -17 V
25 -18 V
26 -19 V
26 -20 V
27 -21 V
28 -22 V
29 -23 V
29 -23 V
31 -24 V
31 -24 V
31 -25 V
33 -25 V
34 -26 V
34 -25 V
35 -26 V
37 -27 V
37 -26 V
39 -26 V
39 -27 V
41 -26 V
41 -26 V
43 -26 V
45 -25 V
45 -26 V
47 -24 V
48 -25 V
50 -24 V
51 -24 V
53 -23 V
54 -22 V
56 -22 V
58 -21 V
60 -20 V
62 -20 V
63 -19 V
66 -18 V
68 -17 V
70 -17 V
73 -15 V
75 -15 V
78 -14 V
80 -13 V
83 -13 V
86 -11 V
89 -10 V
92 -10 V
95 -9 V
99 -8 V
102 -7 V
105 -7 V
110 -5 V
113 -5 V
118 -5 V
121 -4 V
126 -3 V
131 -2 V
135 -3 V
140 -2 V
146 -1 V
150 -2 V
156 -1 V
% End plot #1
% Begin plot #2
stroke
LT1
LCb setrgbcolor
5336 5678 M
[ [(Helvetica) 300.0 0.0 true true 0 (KHSS \(batch-0.01\))]
] -100.0 MRshow
LT1
5516 5678 M
783 0 V
1893 2396 M
11 41 V
12 40 V
11 37 V
12 35 V
11 33 V
12 31 V
11 29 V
12 27 V
12 25 V
12 23 V
12 21 V
12 18 V
13 17 V
13 15 V
13 14 V
13 11 V
14 9 V
14 8 V
14 6 V
15 4 V
15 2 V
16 1 V
16 -1 V
16 -3 V
17 -4 V
18 -5 V
18 -7 V
18 -9 V
19 -10 V
19 -11 V
20 -12 V
20 -14 V
21 -15 V
22 -15 V
22 -17 V
23 -18 V
23 -19 V
24 -20 V
25 -20 V
25 -22 V
26 -22 V
26 -22 V
27 -24 V
28 -24 V
29 -24 V
29 -25 V
31 -25 V
31 -25 V
31 -26 V
33 -26 V
34 -26 V
34 -26 V
35 -27 V
37 -26 V
37 -26 V
39 -26 V
39 -26 V
41 -26 V
41 -25 V
43 -25 V
45 -25 V
45 -24 V
47 -24 V
48 -23 V
50 -23 V
51 -23 V
53 -21 V
54 -21 V
56 -20 V
58 -20 V
60 -19 V
62 -18 V
63 -17 V
66 -17 V
68 -15 V
70 -15 V
73 -14 V
75 -13 V
78 -12 V
80 -11 V
83 -10 V
86 -9 V
89 -8 V
92 -7 V
95 -6 V
99 -6 V
102 -4 V
105 -3 V
110 -3 V
113 -1 V
118 -1 V
121 0 V
126 1 V
131 2 V
135 2 V
140 3 V
146 4 V
150 4 V
156 6 V
% End plot #2
% Begin plot #3
stroke
LT2
LCb setrgbcolor
5336 5378 M
[ [(Helvetica) 300.0 0.0 true true 0 (PESS \(batch-0.05\))]
] -100.0 MRshow
LT2
5516 5378 M
783 0 V
1720 4399 M
6 -38 V
5 -40 V
5 -41 V
5 -43 V
6 -45 V
5 -46 V
5 -47 V
5 -47 V
6 -49 V
5 -49 V
6 -50 V
6 -51 V
6 -50 V
6 -51 V
6 -51 V
7 -51 V
6 -50 V
7 -51 V
8 -50 V
7 -49 V
8 -50 V
8 -48 V
8 -48 V
9 -47 V
9 -46 V
10 -46 V
9 -44 V
11 -44 V
10 -42 V
11 -41 V
12 -41 V
12 -39 V
12 -38 V
13 -37 V
14 -35 V
14 -34 V
14 -33 V
15 -32 V
16 -30 V
17 -29 V
17 -28 V
18 -26 V
19 -25 V
19 -24 V
20 -22 V
21 -21 V
22 -19 V
23 -19 V
24 -17 V
25 -15 V
26 -15 V
27 -13 V
29 -12 V
29 -11 V
31 -10 V
32 -8 V
34 -8 V
35 -6 V
36 -5 V
38 -4 V
40 -4 V
41 -2 V
44 -1 V
45 -1 V
47 1 V
49 1 V
52 2 V
53 2 V
56 3 V
59 4 V
61 5 V
63 5 V
66 5 V
70 6 V
72 6 V
75 7 V
78 7 V
82 7 V
85 8 V
89 8 V
93 7 V
96 8 V
101 8 V
105 8 V
109 8 V
113 8 V
119 8 V
123 8 V
128 7 V
133 8 V
139 7 V
144 6 V
150 7 V
156 6 V
163 6 V
168 5 V
175 5 V
182 4 V
190 4 V
% End plot #3
% Begin plot #4
stroke
LT3
LCb setrgbcolor
5336 5078 M
[ [(Helvetica) 300.0 0.0 true true 0 (KHSS \(batch-0.05\))]
] -100.0 MRshow
LT3
5516 5078 M
783 0 V
1720 3803 M
6 -34 V
5 -33 V
5 -33 V
5 -32 V
6 -31 V
5 -30 V
5 -30 V
5 -30 V
6 -28 V
5 -29 V
6 -28 V
6 -27 V
6 -27 V
6 -27 V
6 -26 V
7 -26 V
6 -26 V
7 -26 V
8 -25 V
7 -25 V
8 -25 V
8 -24 V
8 -25 V
9 -24 V
9 -24 V
10 -24 V
9 -23 V
11 -24 V
10 -23 V
11 -23 V
12 -23 V
12 -22 V
12 -22 V
13 -23 V
14 -21 V
14 -22 V
14 -21 V
15 -21 V
16 -21 V
17 -21 V
17 -20 V
18 -20 V
19 -19 V
19 -19 V
20 -19 V
21 -19 V
22 -18 V
23 -17 V
24 -17 V
25 -17 V
26 -16 V
27 -16 V
29 -15 V
29 -15 V
31 -14 V
32 -14 V
34 -13 V
35 -13 V
36 -12 V
38 -11 V
40 -11 V
41 -10 V
44 -9 V
45 -9 V
47 -8 V
49 -8 V
52 -7 V
53 -6 V
56 -6 V
59 -5 V
61 -4 V
63 -4 V
66 -3 V
70 -2 V
72 -2 V
75 -1 V
78 0 V
82 0 V
85 1 V
89 1 V
93 2 V
96 3 V
101 3 V
105 3 V
109 4 V
113 5 V
119 5 V
123 5 V
128 5 V
133 6 V
139 6 V
144 6 V
150 7 V
156 6 V
163 7 V
168 6 V
175 7 V
182 6 V
190 6 V
% End plot #4
% Begin plot #5
stroke
LT4
LCb setrgbcolor
5336 4778 M
[ [(Helvetica) 300.0 0.0 true true 0 (PESS \(batch-0.10\))]
] -100.0 MRshow
LT4
5516 4778 M
783 0 V
1694 5427 M
4 -24 V
3 -26 V
4 -27 V
3 -30 V
4 -30 V
3 -33 V
4 -33 V
4 -35 V
3 -36 V
4 -36 V
4 -38 V
4 -38 V
4 -39 V
4 -39 V
5 -40 V
4 -40 V
5 -40 V
5 -40 V
5 -41 V
6 -40 V
5 -41 V
6 -40 V
6 -40 V
7 -40 V
7 -40 V
7 -39 V
7 -39 V
8 -38 V
8 -38 V
8 -37 V
9 -37 V
10 -36 V
9 -35 V
11 -35 V
10 -34 V
12 -33 V
11 -33 V
13 -31 V
13 -31 V
13 -30 V
14 -29 V
15 -29 V
16 -27 V
16 -27 V
17 -26 V
18 -24 V
19 -24 V
20 -23 V
21 -22 V
22 -22 V
23 -20 V
24 -19 V
25 -19 V
26 -17 V
28 -17 V
29 -16 V
30 -15 V
32 -14 V
33 -14 V
35 -12 V
37 -12 V
39 -11 V
40 -10 V
42 -10 V
44 -9 V
47 -8 V
48 -7 V
51 -6 V
53 -6 V
56 -6 V
58 -4 V
61 -4 V
64 -4 V
66 -3 V
70 -2 V
73 -2 V
76 -1 V
80 -1 V
83 0 V
87 0 V
90 1 V
95 1 V
99 2 V
103 2 V
107 2 V
112 3 V
117 3 V
122 4 V
127 3 V
132 5 V
138 4 V
143 5 V
149 5 V
155 6 V
162 5 V
168 6 V
175 7 V
181 6 V
189 7 V
% End plot #5
% Begin plot #6
stroke
LT5
LCb setrgbcolor
5336 4478 M
[ [(Helvetica) 300.0 0.0 true true 0 (KHSS \(batch-0.10\))]
] -100.0 MRshow
LT5
5516 4478 M
783 0 V
-4605 92 R
4 25 V
3 19 V
4 13 V
3 10 V
4 4 V
3 1 V
4 -4 V
4 -7 V
3 -11 V
4 -13 V
4 -17 V
4 -19 V
4 -22 V
4 -24 V
5 -26 V
4 -27 V
5 -30 V
5 -30 V
5 -32 V
6 -33 V
5 -34 V
6 -34 V
6 -36 V
7 -35 V
7 -36 V
7 -36 V
7 -36 V
8 -36 V
8 -36 V
8 -35 V
9 -36 V
10 -34 V
9 -34 V
11 -33 V
10 -33 V
12 -32 V
11 -31 V
13 -30 V
13 -29 V
13 -28 V
14 -26 V
15 -26 V
16 -25 V
16 -23 V
17 -22 V
18 -21 V
19 -20 V
20 -18 V
21 -17 V
22 -16 V
23 -15 V
24 -13 V
25 -12 V
26 -11 V
28 -10 V
29 -8 V
30 -7 V
32 -6 V
33 -5 V
35 -4 V
37 -3 V
39 -2 V
40 0 V
42 0 V
44 1 V
47 2 V
48 3 V
51 3 V
53 5 V
56 5 V
58 5 V
61 6 V
64 7 V
66 6 V
70 8 V
73 7 V
76 8 V
80 7 V
83 8 V
87 8 V
90 8 V
95 7 V
99 8 V
103 7 V
107 6 V
112 7 V
117 5 V
122 5 V
127 5 V
132 3 V
138 3 V
143 2 V
149 1 V
155 0 V
162 -1 V
168 -2 V
175 -4 V
181 -4 V
189 -7 V
% End plot #6
stroke
1.000 UL
LTb
1650 6191 N
0 -5231 V
5009 0 V
0 5231 V
-5009 0 V
Z stroke
1.000 UP
1.000 UL
LTb
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica

%%EndDocument
 @endspecial 17 2158 a(\(d\))30 b(X-Y)e(scatter)h(plot)g(correlating)h
(label-)17 2233 y(ing)19 b(ef)n(fort)f(and)i(MSE)e(numbers.)1280
2071 y @beginspecial 50 @llx 50 @lly 410 @urx 302 @ury
1584 @rwi 1152 @rhi @setspecial
%%BeginDocument: pt_window.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: window.eps
%%Creator: gnuplot 4.4 patchlevel 3
%%CreationDate: Mon Jan 27 14:28:31 2014
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following true/false flags may be edited by hand if desired.
% The unit line width and grayscale image gamma correction may also be changed.
%
/Color true def
/Blacktext false def
/Solid false def
/Dashlength 1 def
/Landscape false def
/Level1 false def
/Rounded false def
/ClipToBoundingBox false def
/TransparentPatterns false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/Gamma 1.0 def
%
/vshift -86 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
Level1 {} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (window.eps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.4 patchlevel 3)
  /Author (rloliveirajr)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Mon Jan 27 14:28:31 2014)
  /DOCINFO pdfmark
end
} ifelse
/doclip {
  ClipToBoundingBox {
    newpath 50 50 moveto 410 50 lineto 410 302 lineto 50 302 lineto closepath
    clip
  } if
} def
%
% Gnuplot Prolog Version 4.4 (August 2010)
%
%/SuppressPDFMark true def
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/g {setgray} bind def
/Gshow {show} def   % May be redefined later in the file to support UTF-8
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
3.8 setmiterlimit
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  gsave 1 setgray fill grestore clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {Gshow} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} def
/Gswidth {dup type /stringtype eq {stringwidth} {pop (n) stringwidth} ifelse} def
/MFwidth {0 exch { dup 5 get 3 ge { 5 get 3 eq { 0 } { pop } ifelse }
 {dup 3 get{dup dup 0 get findfont exch 1 get scalefont setfont
     6 get Gswidth pop add} {pop} ifelse} ifelse} forall} def
/MLshow { currentpoint stroke M
  0 exch R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/XYsave    { [( ) 1 2 true false 3 ()] } bind def
/XYrestore { [( ) 1 2 true false 4 ()] } bind def
end
%%EndProlog
gnudict begin
gsave
doclip
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 260 scalefont setfont
1.000 UL
LTb
1274 832 M
63 0 V
5394 0 R
-63 0 V
stroke
1118 832 M
[ [(Helvetica) 260.0 0.0 true true 0 ( 1)]
] -86.7 MRshow
1.000 UL
LTb
1274 1418 M
31 0 V
5426 0 R
-31 0 V
1274 1761 M
31 0 V
5426 0 R
-31 0 V
1274 2005 M
31 0 V
5426 0 R
-31 0 V
1274 2193 M
31 0 V
5426 0 R
-31 0 V
1274 2347 M
31 0 V
5426 0 R
-31 0 V
1274 2478 M
31 0 V
5426 0 R
-31 0 V
1274 2591 M
31 0 V
5426 0 R
-31 0 V
-5426 99 R
31 0 V
5426 0 R
-31 0 V
-5426 90 R
63 0 V
5394 0 R
-63 0 V
stroke
1118 2780 M
[ [(Helvetica) 260.0 0.0 true true 0 ( 10)]
] -86.7 MRshow
1.000 UL
LTb
1274 3366 M
31 0 V
5426 0 R
-31 0 V
1274 3709 M
31 0 V
5426 0 R
-31 0 V
1274 3952 M
31 0 V
5426 0 R
-31 0 V
1274 4141 M
31 0 V
5426 0 R
-31 0 V
1274 4295 M
31 0 V
5426 0 R
-31 0 V
1274 4425 M
31 0 V
5426 0 R
-31 0 V
1274 4538 M
31 0 V
5426 0 R
-31 0 V
1274 4638 M
31 0 V
5426 0 R
-31 0 V
-5426 89 R
63 0 V
5394 0 R
-63 0 V
stroke
1118 4727 M
[ [(Helvetica) 260.0 0.0 true true 0 ( 100)]
] -86.7 MRshow
1.000 UL
LTb
1274 832 M
0 63 V
0 3832 R
0 -63 V
stroke
1274 572 M
[ [(Helvetica) 260.0 0.0 true true 0 ( 0)]
] -86.7 MCshow
1.000 UL
LTb
2365 832 M
0 63 V
0 3832 R
0 -63 V
stroke
2365 572 M
[ [(Helvetica) 260.0 0.0 true true 0 ( 0.2)]
] -86.7 MCshow
1.000 UL
LTb
3457 832 M
0 63 V
0 3832 R
0 -63 V
stroke
3457 572 M
[ [(Helvetica) 260.0 0.0 true true 0 ( 0.4)]
] -86.7 MCshow
1.000 UL
LTb
4548 832 M
0 63 V
0 3832 R
0 -63 V
stroke
4548 572 M
[ [(Helvetica) 260.0 0.0 true true 0 ( 0.6)]
] -86.7 MCshow
1.000 UL
LTb
5640 832 M
0 63 V
0 3832 R
0 -63 V
stroke
5640 572 M
[ [(Helvetica) 260.0 0.0 true true 0 ( 0.8)]
] -86.7 MCshow
1.000 UL
LTb
6731 832 M
0 63 V
0 3832 R
0 -63 V
stroke
6731 572 M
[ [(Helvetica) 260.0 0.0 true true 0 ( 1)]
] -86.7 MCshow
1.000 UL
LTb
1.000 UL
LTb
1274 4727 N
0 -3895 V
5457 0 V
0 3895 V
-5457 0 V
Z stroke
LCb setrgbcolor
208 2779 M
currentpoint gsave translate -270 rotate 0 0 moveto
[ [(Helvetica) 260.0 0.0 true true 0 (Training Set Size)]
] -86.7 MCshow
grestore
LTb
LCb setrgbcolor
4002 182 M
[ [(Helvetica) 260.0 0.0 true true 0 (Stream Progress)]
] -86.7 MCshow
LTb
1.000 UP
1.000 UL
LTb
% Begin plot #1
5.000 UL
LT0
LCb setrgbcolor
5576 4534 M
[ [(Helvetica) 260.0 0.0 true true 0 (ILAC)]
] -86.7 MRshow
LT0
5732 4534 M
687 0 V
1329 3863 M
55 68 V
55 42 V
54 0 V
55 60 V
55 0 V
55 0 V
55 19 V
55 0 V
54 0 V
55 0 V
55 0 V
55 0 V
55 0 V
55 36 V
55 0 V
54 18 V
55 0 V
55 0 V
55 35 V
55 33 V
55 47 V
54 0 V
55 31 V
55 14 V
55 29 V
55 0 V
55 0 V
54 0 V
55 55 V
55 13 V
55 98 V
55 11 V
55 12 V
55 0 V
54 0 V
55 0 V
55 0 V
55 0 V
55 0 V
55 0 V
54 0 V
55 0 V
55 0 V
55 0 V
55 0 V
55 0 V
55 0 V
54 11 V
55 11 V
55 11 V
55 0 V
55 11 V
55 0 V
54 0 V
55 0 V
55 0 V
55 10 V
55 0 V
55 11 V
54 0 V
55 10 V
55 10 V
55 11 V
55 0 V
55 10 V
55 0 V
54 29 V
55 0 V
55 9 V
55 0 V
55 0 V
55 0 V
54 0 V
55 0 V
55 0 V
55 0 V
55 10 V
55 9 V
55 0 V
54 0 V
55 0 V
55 0 V
55 9 V
55 0 V
55 0 V
54 0 V
55 0 V
55 0 V
55 0 V
55 0 V
55 28 V
55 0 V
54 0 V
55 0 V
55 0 V
55 0 V
55 0 V
55 8 V
27 9 V
% End plot #1
% Begin plot #2
stroke
LT1
LCb setrgbcolor
5576 4274 M
[ [(Helvetica) 260.0 0.0 true true 0 (KHSS \(self-labeling-5-0.7\))]
] -86.7 MRshow
LT1
5732 4274 M
687 0 V
1329 3520 M
55 -74 V
55 -39 V
54 147 V
55 34 V
55 -142 V
55 74 V
55 -113 V
55 302 V
54 -263 V
55 0 V
55 108 V
55 -34 V
55 68 V
55 0 V
55 -142 V
54 174 V
55 116 V
55 0 V
55 27 V
55 26 V
55 -269 V
54 68 V
55 0 V
55 -68 V
55 100 V
55 -174 V
55 142 V
54 0 V
55 32 V
55 -136 V
55 136 V
55 -66 V
55 -34 V
55 0 V
54 160 V
55 -196 V
55 0 V
55 136 V
55 -100 V
55 130 V
54 0 V
55 59 V
55 -225 V
55 104 V
55 32 V
55 -100 V
55 -74 V
54 204 V
55 -166 V
55 136 V
55 -66 V
55 -34 V
55 -36 V
54 -118 V
55 80 V
55 -124 V
55 0 V
55 44 V
55 254 V
54 0 V
55 -32 V
55 -104 V
55 0 V
55 -38 V
55 38 V
55 104 V
54 -34 V
55 34 V
55 -142 V
55 38 V
55 36 V
55 -113 V
54 213 V
55 -136 V
55 0 V
55 136 V
55 0 V
55 -136 V
55 0 V
54 36 V
55 68 V
55 0 V
55 0 V
55 -34 V
55 -108 V
54 -124 V
55 387 V
55 -59 V
55 -96 V
55 66 V
55 89 V
55 -225 V
54 0 V
55 225 V
55 -189 V
55 189 V
55 -121 V
55 -104 V
27 -118 V
% End plot #2
% Begin plot #3
stroke
LT2
LCb setrgbcolor
5576 4014 M
[ [(Helvetica) 260.0 0.0 true true 0 (PESS \(self-labeling-5-0.8\))]
] -86.7 MRshow
LT2
5732 4014 M
687 0 V
1329 2934 M
55 -244 V
55 244 V
54 -74 V
55 204 V
55 -130 V
55 -343 V
55 269 V
55 317 V
54 -317 V
55 317 V
55 -176 V
55 -410 V
55 531 V
55 55 V
55 -586 V
54 473 V
55 -130 V
55 -74 V
55 262 V
55 -531 V
55 -398 V
54 984 V
55 -113 V
55 58 V
55 0 V
55 -58 V
55 0 V
54 58 V
55 -121 V
55 0 V
55 276 V
55 -155 V
55 -188 V
55 188 V
54 -121 V
55 -523 V
55 699 V
55 -55 V
55 155 V
55 -155 V
54 -58 V
55 -204 V
55 204 V
55 -63 V
55 276 V
55 -213 V
55 -63 V
54 63 V
55 113 V
55 -113 V
55 113 V
55 0 V
55 -397 V
54 542 V
55 -258 V
55 -63 V
55 -311 V
55 -99 V
55 0 V
54 637 V
55 -106 V
55 55 V
55 -113 V
55 -130 V
55 188 V
55 -58 V
54 164 V
55 -294 V
55 243 V
55 -176 V
55 63 V
55 58 V
54 -121 V
55 -67 V
55 188 V
55 324 V
55 -382 V
55 113 V
55 -176 V
54 63 V
55 -63 V
55 63 V
55 0 V
55 258 V
55 -258 V
54 58 V
55 55 V
55 -243 V
55 0 V
55 130 V
55 164 V
55 138 V
54 -244 V
55 106 V
55 49 V
55 -343 V
55 130 V
55 58 V
27 155 V
% End plot #3
stroke
1.000 UL
LTb
1274 4727 N
0 -3895 V
5457 0 V
0 3895 V
-5457 0 V
Z stroke
1.000 UP
1.000 UL
LTb
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica

%%EndDocument
 @endspecial 1355 2158 a(\(e\))38 b(Size)45 b(of)g(the)g(training)g
(sets)g(as)g(the)1355 2233 y(stream)19 b(e)n(v)o(olv)o(es.)2619
2071 y @beginspecial 50 @llx 50 @lly 410 @urx 377 @ury
1584 @rwi 1152 @rhi @setspecial
%%BeginDocument: pt_4.1_ram-hours_instance_baseline.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: pt_4.1_ram-hours_instance_baseline.eps
%%Creator: gnuplot 4.4 patchlevel 4
%%CreationDate: Sat Aug 31 19:53:36 2013
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 377
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following true/false flags may be edited by hand if desired.
% The unit line width and grayscale image gamma correction may also be changed.
%
/Color true def
/Blacktext false def
/Solid false def
/Dashlength 1 def
/Landscape false def
/Level1 false def
/Rounded false def
/ClipToBoundingBox false def
/TransparentPatterns false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/Gamma 1.0 def
%
/vshift -100 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
Level1 {} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (pt_4.1_ram-hours_instance_baseline.eps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.4 patchlevel 4)
  /Author (adriano)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Sat Aug 31 19:53:36 2013)
  /DOCINFO pdfmark
end
} ifelse
/doclip {
  ClipToBoundingBox {
    newpath 50 50 moveto 410 50 lineto 410 377 lineto 50 377 lineto closepath
    clip
  } if
} def
%
% Gnuplot Prolog Version 4.4 (August 2010)
%
%/SuppressPDFMark true def
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/g {setgray} bind def
/Gshow {show} def   % May be redefined later in the file to support UTF-8
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
3.8 setmiterlimit
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  gsave 1 setgray fill grestore clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {Gshow} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} def
/Gswidth {dup type /stringtype eq {stringwidth} {pop (n) stringwidth} ifelse} def
/MFwidth {0 exch { dup 5 get 3 ge { 5 get 3 eq { 0 } { pop } ifelse }
 {dup 3 get{dup dup 0 get findfont exch 1 get scalefont setfont
     6 get Gswidth pop add} {pop} ifelse} ifelse} forall} def
/MLshow { currentpoint stroke M
  0 exch R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/XYsave    { [( ) 1 2 true false 3 ()] } bind def
/XYrestore { [( ) 1 2 true false 4 ()] } bind def
end
%%EndProlog
gnudict begin
gsave
doclip
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 300 scalefont setfont
1.000 UL
LTb
2010 960 M
63 0 V
4586 0 R
-63 0 V
stroke
1830 960 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1e-09)]
] -100.0 MRshow
1.000 UL
LTb
2010 1222 M
31 0 V
4618 0 R
-31 0 V
2010 1569 M
31 0 V
4618 0 R
-31 0 V
2010 1747 M
31 0 V
4618 0 R
-31 0 V
-4618 85 R
63 0 V
4586 0 R
-63 0 V
stroke
1830 1832 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1e-08)]
] -100.0 MRshow
1.000 UL
LTb
2010 2094 M
31 0 V
4618 0 R
-31 0 V
2010 2441 M
31 0 V
4618 0 R
-31 0 V
2010 2619 M
31 0 V
4618 0 R
-31 0 V
-4618 85 R
63 0 V
4586 0 R
-63 0 V
stroke
1830 2704 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1e-07)]
] -100.0 MRshow
1.000 UL
LTb
2010 2966 M
31 0 V
4618 0 R
-31 0 V
2010 3313 M
31 0 V
4618 0 R
-31 0 V
2010 3491 M
31 0 V
4618 0 R
-31 0 V
-4618 85 R
63 0 V
4586 0 R
-63 0 V
stroke
1830 3576 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1e-06)]
] -100.0 MRshow
1.000 UL
LTb
2010 3838 M
31 0 V
4618 0 R
-31 0 V
2010 4185 M
31 0 V
4618 0 R
-31 0 V
2010 4363 M
31 0 V
4618 0 R
-31 0 V
-4618 84 R
63 0 V
4586 0 R
-63 0 V
stroke
1830 4447 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1e-05)]
] -100.0 MRshow
1.000 UL
LTb
2010 4710 M
31 0 V
4618 0 R
-31 0 V
2010 5057 M
31 0 V
4618 0 R
-31 0 V
2010 5235 M
31 0 V
4618 0 R
-31 0 V
-4618 84 R
63 0 V
4586 0 R
-63 0 V
stroke
1830 5319 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.0001)]
] -100.0 MRshow
1.000 UL
LTb
2010 5582 M
31 0 V
4618 0 R
-31 0 V
2010 5929 M
31 0 V
4618 0 R
-31 0 V
2010 6107 M
31 0 V
4618 0 R
-31 0 V
-4618 84 R
63 0 V
4586 0 R
-63 0 V
stroke
1830 6191 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.001)]
] -100.0 MRshow
1.000 UL
LTb
2010 960 M
0 63 V
0 5168 R
0 -63 V
stroke
2010 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0)]
] -100.0 MCshow
1.000 UL
LTb
2940 960 M
0 63 V
0 5168 R
0 -63 V
stroke
2940 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.2)]
] -100.0 MCshow
1.000 UL
LTb
3870 960 M
0 63 V
0 5168 R
0 -63 V
stroke
3870 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.4)]
] -100.0 MCshow
1.000 UL
LTb
4799 960 M
0 63 V
0 5168 R
0 -63 V
stroke
4799 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.6)]
] -100.0 MCshow
1.000 UL
LTb
5729 960 M
0 63 V
0 5168 R
0 -63 V
stroke
5729 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 0.8)]
] -100.0 MCshow
1.000 UL
LTb
6659 960 M
0 63 V
0 5168 R
0 -63 V
stroke
6659 660 M
[ [(Helvetica) 300.0 0.0 true true 0 ( 1)]
] -100.0 MCshow
1.000 UL
LTb
1.000 UL
LTb
2010 6191 N
0 -5231 V
4649 0 V
0 5231 V
-4649 0 V
Z stroke
LCb setrgbcolor
240 3575 M
currentpoint gsave translate -270 rotate 0 0 moveto
[ [(Helvetica) 300.0 0.0 true true 0 (RAM-Hours)]
] -100.0 MCshow
grestore
LTb
LCb setrgbcolor
4334 210 M
[ [(Helvetica) 300.0 0.0 true true 0 (Stream Progress)]
] -100.0 MCshow
LTb
1.000 UP
1.000 UL
LTb
% Begin plot #1
5.000 UL
LT0
LCb setrgbcolor
5336 2973 M
[ [(Helvetica) 300.0 0.0 true true 0 (AC)]
] -100.0 MRshow
LT0
5516 2973 M
783 0 V
2039 1923 M
29 960 V
30 139 V
29 95 V
29 79 V
29 62 V
29 48 V
30 45 V
29 48 V
29 52 V
29 40 V
29 36 V
30 27 V
29 24 V
29 22 V
29 21 V
29 28 V
30 19 V
29 18 V
29 15 V
29 14 V
29 14 V
30 14 V
29 13 V
29 13 V
29 11 V
29 11 V
30 14 V
29 10 V
29 12 V
29 11 V
29 11 V
30 10 V
29 9 V
29 9 V
29 9 V
29 9 V
30 9 V
29 9 V
29 8 V
29 9 V
29 7 V
30 8 V
29 9 V
29 7 V
29 6 V
30 7 V
29 6 V
29 6 V
29 6 V
29 6 V
30 6 V
29 6 V
29 5 V
29 6 V
29 6 V
30 5 V
29 7 V
29 6 V
29 7 V
29 6 V
30 6 V
29 7 V
29 5 V
29 5 V
29 6 V
30 4 V
29 5 V
29 4 V
29 4 V
29 4 V
30 5 V
29 4 V
29 4 V
29 4 V
29 4 V
30 4 V
29 4 V
29 5 V
29 4 V
29 4 V
30 3 V
29 4 V
29 4 V
29 4 V
29 4 V
30 4 V
29 3 V
29 4 V
29 4 V
29 4 V
30 3 V
29 4 V
29 3 V
29 4 V
29 3 V
30 4 V
29 3 V
29 4 V
29 3 V
29 4 V
30 3 V
29 3 V
stroke 5018 4229 M
29 4 V
29 3 V
29 3 V
30 3 V
29 4 V
29 3 V
29 3 V
29 3 V
30 3 V
29 3 V
29 4 V
29 3 V
29 3 V
30 3 V
29 3 V
29 3 V
29 3 V
29 3 V
30 3 V
29 3 V
29 3 V
29 3 V
29 3 V
30 3 V
29 3 V
29 3 V
29 3 V
29 2 V
30 3 V
29 3 V
29 3 V
29 2 V
30 3 V
29 3 V
29 2 V
29 3 V
29 2 V
30 3 V
29 2 V
29 3 V
29 3 V
29 2 V
30 4 V
29 3 V
29 3 V
29 2 V
29 3 V
30 2 V
29 2 V
29 3 V
29 2 V
29 3 V
30 3 V
29 3 V
29 2 V
29 3 V
6 2 V
% End plot #1
% Begin plot #2
stroke
LT1
LCb setrgbcolor
5336 2673 M
[ [(Helvetica) 300.0 0.0 true true 0 (HAT)]
] -100.0 MRshow
LT1
5516 2673 M
783 0 V
2039 1674 M
29 82 V
30 60 V
29 46 V
29 25 V
29 273 V
29 9 V
30 9 V
29 7 V
29 7 V
29 6 V
29 6 V
30 6 V
29 101 V
29 4 V
29 5 V
29 6 V
30 4 V
29 3 V
29 3 V
29 70 V
29 2 V
30 1 V
29 2 V
29 2 V
29 2 V
29 2 V
30 2 V
29 63 V
29 2 V
29 2 V
29 1 V
30 2 V
29 2 V
29 47 V
29 2 V
29 2 V
30 2 V
29 1 V
29 2 V
29 1 V
29 1 V
30 42 V
29 2 V
29 1 V
29 1 V
30 1 V
29 1 V
29 1 V
29 38 V
29 1 V
30 1 V
29 1 V
29 1 V
29 1 V
29 1 V
30 35 V
29 0 V
29 1 V
29 1 V
29 1 V
30 1 V
29 2 V
29 32 V
29 1 V
29 1 V
30 1 V
29 1 V
29 2 V
29 1 V
29 2 V
30 30 V
29 1 V
29 1 V
29 1 V
29 1 V
30 1 V
29 1 V
29 26 V
29 1 V
29 0 V
30 1 V
29 1 V
29 1 V
29 1 V
29 1 V
30 24 V
29 1 V
29 0 V
29 1 V
29 1 V
30 0 V
29 1 V
29 23 V
29 1 V
29 1 V
30 0 V
29 1 V
29 1 V
29 0 V
29 1 V
30 22 V
29 0 V
stroke 5018 2870 M
29 1 V
29 1 V
29 0 V
30 1 V
29 0 V
29 19 V
29 1 V
29 0 V
30 1 V
29 0 V
29 1 V
29 0 V
29 18 V
30 1 V
29 0 V
29 1 V
29 0 V
29 1 V
30 0 V
29 0 V
29 0 V
29 0 V
29 0 V
30 0 V
29 0 V
29 0 V
29 0 V
29 0 V
30 2 V
29 0 V
29 1 V
29 0 V
30 1 V
29 0 V
29 0 V
29 0 V
29 0 V
30 0 V
29 1 V
29 0 V
29 0 V
29 0 V
30 0 V
29 0 V
29 0 V
29 0 V
29 0 V
30 0 V
29 0 V
29 0 V
29 1 V
29 0 V
30 0 V
29 0 V
29 0 V
29 0 V
6 0 V
% End plot #2
% Begin plot #3
stroke
LT2
LCb setrgbcolor
5336 2373 M
[ [(Helvetica) 300.0 0.0 true true 0 (ILAC)]
] -100.0 MRshow
LT2
5516 2373 M
783 0 V
2039 2545 M
29 437 V
30 148 V
29 108 V
29 92 V
29 75 V
29 71 V
30 73 V
29 75 V
29 61 V
29 58 V
29 43 V
30 47 V
29 45 V
29 35 V
29 41 V
29 41 V
30 35 V
29 34 V
29 36 V
29 34 V
29 28 V
30 29 V
29 28 V
29 28 V
29 25 V
29 25 V
30 24 V
29 23 V
29 19 V
29 21 V
29 21 V
30 17 V
29 13 V
29 13 V
29 13 V
29 15 V
30 14 V
29 14 V
29 15 V
29 15 V
29 12 V
30 12 V
29 20 V
29 13 V
29 13 V
30 13 V
29 13 V
29 13 V
29 14 V
29 14 V
30 12 V
29 13 V
29 12 V
29 12 V
29 13 V
30 13 V
29 14 V
29 13 V
29 12 V
29 13 V
30 13 V
29 12 V
29 12 V
29 12 V
29 12 V
30 12 V
29 13 V
29 12 V
29 12 V
29 14 V
30 13 V
29 13 V
29 11 V
29 11 V
29 11 V
30 10 V
29 10 V
29 11 V
29 10 V
29 10 V
30 11 V
29 10 V
29 9 V
29 11 V
29 10 V
30 10 V
29 10 V
29 11 V
29 10 V
29 10 V
30 9 V
29 9 V
29 9 V
29 10 V
29 9 V
30 10 V
29 9 V
29 9 V
29 9 V
29 9 V
30 9 V
29 9 V
stroke 5018 5244 M
29 9 V
29 9 V
29 9 V
30 9 V
29 8 V
29 9 V
29 9 V
29 8 V
30 9 V
29 9 V
29 8 V
29 8 V
29 8 V
30 8 V
29 8 V
29 8 V
29 8 V
29 8 V
30 8 V
29 7 V
29 8 V
29 8 V
29 8 V
30 7 V
29 7 V
29 8 V
29 8 V
29 7 V
30 7 V
29 7 V
29 8 V
29 8 V
30 7 V
29 8 V
29 8 V
29 7 V
29 7 V
30 8 V
29 8 V
29 7 V
29 7 V
29 8 V
30 7 V
29 7 V
29 8 V
29 7 V
29 6 V
30 7 V
29 6 V
29 7 V
29 7 V
29 7 V
30 6 V
29 7 V
29 6 V
29 6 V
6 5 V
% End plot #3
% Begin plot #4
stroke
LT3
LCb setrgbcolor
5336 2073 M
[ [(Helvetica) 300.0 0.0 true true 0 (PESS \(instance\))]
] -100.0 MRshow
LT3
5516 2073 M
783 0 V
2039 2721 M
29 413 V
30 131 V
29 83 V
29 57 V
29 45 V
29 53 V
30 52 V
29 50 V
29 43 V
29 38 V
29 22 V
30 28 V
29 27 V
29 26 V
29 15 V
29 14 V
30 13 V
29 14 V
29 11 V
29 11 V
29 10 V
30 11 V
29 10 V
29 10 V
29 9 V
29 10 V
30 9 V
29 9 V
29 8 V
29 9 V
29 8 V
30 8 V
29 8 V
29 7 V
29 7 V
29 8 V
30 8 V
29 7 V
29 6 V
29 7 V
29 6 V
30 7 V
29 6 V
29 6 V
29 7 V
30 5 V
29 8 V
29 6 V
29 7 V
29 5 V
30 6 V
29 5 V
29 5 V
29 5 V
29 6 V
30 5 V
29 5 V
29 7 V
29 5 V
29 5 V
30 5 V
29 5 V
29 5 V
29 4 V
29 5 V
30 4 V
29 5 V
29 4 V
29 5 V
29 4 V
30 4 V
29 4 V
29 4 V
29 4 V
29 5 V
30 4 V
29 4 V
29 5 V
29 4 V
29 3 V
30 4 V
29 4 V
29 3 V
29 4 V
29 4 V
30 3 V
29 4 V
29 3 V
29 6 V
29 6 V
30 4 V
29 3 V
29 3 V
29 5 V
29 6 V
30 4 V
29 3 V
29 3 V
29 3 V
29 3 V
30 4 V
29 3 V
stroke 5018 4325 M
29 3 V
29 3 V
29 3 V
30 3 V
29 5 V
29 3 V
29 3 V
29 3 V
30 3 V
29 2 V
29 3 V
29 3 V
29 3 V
30 2 V
29 3 V
29 3 V
29 2 V
29 3 V
30 3 V
29 2 V
29 3 V
29 2 V
29 3 V
30 3 V
29 2 V
29 3 V
29 4 V
29 2 V
30 2 V
29 3 V
29 2 V
29 2 V
30 3 V
29 2 V
29 2 V
29 3 V
29 2 V
30 2 V
29 3 V
29 2 V
29 2 V
29 3 V
30 2 V
29 2 V
29 2 V
29 2 V
29 2 V
30 3 V
29 2 V
29 2 V
29 2 V
29 2 V
30 3 V
29 2 V
29 3 V
29 2 V
6 2 V
% End plot #4
% Begin plot #5
stroke
LT4
LCb setrgbcolor
5336 1773 M
[ [(Helvetica) 300.0 0.0 true true 0 (KHSS \(instance\))]
] -100.0 MRshow
LT4
5516 1773 M
783 0 V
2039 2759 M
29 426 V
30 149 V
29 87 V
29 70 V
29 56 V
29 50 V
30 42 V
29 38 V
29 33 V
29 29 V
29 27 V
30 21 V
29 23 V
29 22 V
29 22 V
29 20 V
30 19 V
29 16 V
29 16 V
29 15 V
29 14 V
30 13 V
29 14 V
29 12 V
29 13 V
29 12 V
30 14 V
29 13 V
29 12 V
29 11 V
29 12 V
30 11 V
29 11 V
29 9 V
29 10 V
29 9 V
30 9 V
29 8 V
29 8 V
29 8 V
29 8 V
30 7 V
29 8 V
29 7 V
29 7 V
30 7 V
29 7 V
29 7 V
29 6 V
29 7 V
30 6 V
29 7 V
29 6 V
29 6 V
29 6 V
30 6 V
29 6 V
29 5 V
29 6 V
29 6 V
30 5 V
29 6 V
29 5 V
29 6 V
29 5 V
30 5 V
29 5 V
29 5 V
29 5 V
29 5 V
30 5 V
29 4 V
29 5 V
29 4 V
29 5 V
30 5 V
29 4 V
29 5 V
29 2 V
29 2 V
30 4 V
29 5 V
29 4 V
29 4 V
29 4 V
30 4 V
29 4 V
29 4 V
29 5 V
29 4 V
30 4 V
29 4 V
29 4 V
29 4 V
29 4 V
30 3 V
29 4 V
29 4 V
29 3 V
29 4 V
30 3 V
29 4 V
stroke 5018 4474 M
29 3 V
29 4 V
29 3 V
30 3 V
29 4 V
29 4 V
29 3 V
29 3 V
30 3 V
29 3 V
29 3 V
29 4 V
29 3 V
30 3 V
29 3 V
29 3 V
29 3 V
29 3 V
30 3 V
29 3 V
29 3 V
29 3 V
29 3 V
30 3 V
29 2 V
29 3 V
29 2 V
29 1 V
30 1 V
29 2 V
29 2 V
29 3 V
30 2 V
29 3 V
29 3 V
29 3 V
29 2 V
30 3 V
29 3 V
29 2 V
29 3 V
29 3 V
30 2 V
29 3 V
29 2 V
29 3 V
29 3 V
30 2 V
29 3 V
29 2 V
29 2 V
29 3 V
30 2 V
29 3 V
29 2 V
29 3 V
6 2 V
% End plot #5
% Begin plot #6
stroke
LT5
LCb setrgbcolor
5336 1473 M
[ [(Helvetica) 300.0 0.0 true true 0 (PESS \(batch-0.05\))]
] -100.0 MRshow
LT5
5516 1473 M
783 0 V
2039 2856 M
29 408 V
30 127 V
29 105 V
29 94 V
29 63 V
29 73 V
30 50 V
29 38 V
29 47 V
29 35 V
29 39 V
30 38 V
29 28 V
29 35 V
29 35 V
29 22 V
30 27 V
29 19 V
29 26 V
29 21 V
29 15 V
30 17 V
29 17 V
29 12 V
29 15 V
29 10 V
30 13 V
29 13 V
29 10 V
29 16 V
29 16 V
30 8 V
29 14 V
29 7 V
29 15 V
29 11 V
30 7 V
29 11 V
29 11 V
29 7 V
29 11 V
30 5 V
29 6 V
29 7 V
29 5 V
30 6 V
29 6 V
29 5 V
29 8 V
29 5 V
30 8 V
29 8 V
29 5 V
29 9 V
29 7 V
30 4 V
29 10 V
29 5 V
29 9 V
29 7 V
30 5 V
29 9 V
29 7 V
29 4 V
29 7 V
30 4 V
29 10 V
29 8 V
29 3 V
29 7 V
30 6 V
29 4 V
29 7 V
29 4 V
29 7 V
30 5 V
29 4 V
29 5 V
29 5 V
29 3 V
30 6 V
29 3 V
29 6 V
29 6 V
29 3 V
30 7 V
29 6 V
29 3 V
29 6 V
29 3 V
30 6 V
29 3 V
29 3 V
29 4 V
29 3 V
30 3 V
29 6 V
29 3 V
29 7 V
29 5 V
30 3 V
29 8 V
stroke 5018 4784 M
29 5 V
29 3 V
29 5 V
30 2 V
29 4 V
29 4 V
29 3 V
29 5 V
30 4 V
29 2 V
29 5 V
29 2 V
29 5 V
30 3 V
29 3 V
29 4 V
29 4 V
29 2 V
30 5 V
29 2 V
29 5 V
29 4 V
29 2 V
30 5 V
29 4 V
29 2 V
29 4 V
29 2 V
30 4 V
29 3 V
29 2 V
29 4 V
30 3 V
29 2 V
29 4 V
29 3 V
29 5 V
30 4 V
29 2 V
29 4 V
29 3 V
29 2 V
30 4 V
29 2 V
29 3 V
29 3 V
29 1 V
30 3 V
29 3 V
29 1 V
29 5 V
29 1 V
30 4 V
29 3 V
29 1 V
29 3 V
6 2 V
% End plot #6
% Begin plot #7
stroke
LT6
LCb setrgbcolor
5336 1173 M
[ [(Helvetica) 300.0 0.0 true true 0 (KHSS \(batch-0.05\))]
] -100.0 MRshow
LT6
5516 1173 M
783 0 V
2039 2885 M
29 348 V
30 129 V
29 93 V
29 72 V
29 61 V
29 54 V
30 64 V
29 65 V
29 60 V
29 53 V
29 45 V
30 48 V
29 39 V
29 37 V
29 55 V
29 30 V
30 30 V
29 29 V
29 28 V
29 25 V
29 21 V
30 23 V
29 38 V
29 15 V
29 16 V
29 14 V
30 15 V
29 15 V
29 12 V
29 14 V
29 30 V
30 8 V
29 8 V
29 9 V
29 9 V
29 9 V
30 9 V
29 9 V
29 30 V
29 7 V
29 7 V
30 7 V
29 8 V
29 8 V
29 8 V
30 8 V
29 29 V
29 5 V
29 5 V
29 6 V
30 6 V
29 6 V
29 7 V
29 6 V
29 23 V
30 4 V
29 6 V
29 5 V
29 6 V
29 6 V
30 6 V
29 7 V
29 24 V
29 4 V
29 4 V
30 5 V
29 6 V
29 5 V
29 5 V
29 6 V
30 21 V
29 4 V
29 4 V
29 5 V
29 5 V
30 5 V
29 5 V
29 5 V
29 22 V
29 3 V
30 3 V
29 4 V
29 3 V
29 4 V
29 5 V
30 4 V
29 14 V
29 3 V
29 3 V
29 4 V
30 3 V
29 4 V
29 4 V
29 4 V
29 14 V
30 3 V
29 3 V
29 3 V
29 3 V
29 4 V
30 4 V
29 4 V
stroke 5018 4978 M
29 13 V
29 3 V
29 3 V
30 3 V
29 4 V
29 4 V
29 3 V
29 4 V
30 16 V
29 2 V
29 3 V
29 3 V
29 3 V
30 3 V
29 3 V
29 4 V
29 15 V
29 2 V
30 2 V
29 3 V
29 2 V
29 4 V
29 3 V
30 3 V
29 11 V
29 2 V
29 2 V
29 2 V
30 3 V
29 2 V
29 3 V
29 3 V
30 9 V
29 2 V
29 2 V
29 3 V
29 2 V
30 3 V
29 3 V
29 3 V
29 10 V
29 2 V
30 2 V
29 3 V
29 2 V
29 3 V
29 3 V
30 3 V
29 10 V
29 2 V
29 2 V
29 2 V
30 2 V
29 3 V
29 2 V
29 3 V
6 2 V
% End plot #7
stroke
1.000 UL
LTb
2010 6191 N
0 -5231 V
4649 0 V
0 5231 V
-4649 0 V
Z stroke
1.000 UP
1.000 UL
LTb
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica

%%EndDocument
 @endspecial 2705 2158 a(\(f\))25 b(RAM-Hours)20 b(as)f(the)g(stream)f
(e)n(v)o(olv)o(es.)1024 2433 y Fs(Figur)o(e)g(5:)23 b(The)18
b(Brazilian)h(Defeat.)k(T)-6 b(weets)19 b(ar)o(e)g(in)f(P)o(ortuguese.)
p 0 TeXcolorgray 0 TeXcolorgray -152 2681 a Ft([17])p
0 TeXcolorgray 38 w(J.)h(Gama,)f(R.)h(S.)e(ao,)i(and)h(P)-8
b(.)18 b(Rodrigues.)h(Issues)g(in)g(e)n(v)n(aluation)h(of)10
2768 y(stream)f(learning)h(algorithms.)f(In)g Fp(SIGKDD)p
Ft(,)f(page)i(329,)f(2009.)p 0 TeXcolorgray -152 2864
a([18])p 0 TeXcolorgray 38 w(J.)g(Han,)f(J.)h(Pei,)f(Y)-10
b(.)18 b(Y)l(in,)h(and)g(R.)f(Mao.)i(Mining)g(frequent)f(patterns)10
2951 y(without)g(candidate)h(generation:)25 b(A)18 b(frequent-pattern)i
(tree)10 3038 y(approach.)g Fp(Data)f(Mining)h(Knowledg)o(e)g(Disco)o
(very)p Ft(,)g(8\(1\):53\22687,)10 3125 y(2004.)p 0 TeXcolorgray
-152 3221 a([19])p 0 TeXcolorgray 38 w(J.)f(Hicks.)f(The)h(foundations)
i(of)e(welf)o(are)f(economics.)i Fp(The)10 3308 y(Economic)g(J)n
(ournal)p Ft(,)g(49\(196\):696\226712,)i(1939.)p 0 TeXcolorgray
-152 3403 a([20])p 0 TeXcolorgray 38 w(R.)c(Hof.)g(Real-time)g(adv)o
(ertising)h(has)g(arri)n(v)o(ed,)g(thanks)g(to)f(Oreo)h(and)10
3490 y(The)g(Super)g(Bo)n(wl,)f(April)h(2013.)h Fa(www.forbes.com/)p
Ft(.)p 0 TeXcolorgray -152 3586 a([21])p 0 TeXcolorgray
38 w(C.)e(Jin,)h(K.)f(Y)l(i,)g(L.)g(Chen,)h(J.)g(Y)-8
b(u,)18 b(and)i(X.)e(Lin.)g(Sliding-windo)n(w)10 3673
y(top-)p Fp(k)h Ft(queries)h(on)f(uncertain)h(streams.)f
Fp(VLDB)e(J)n(.)p Ft(,)h(19\(3\):411\226435,)10 3760
y(2010.)p 0 TeXcolorgray -152 3856 a([22])p 0 TeXcolorgray
38 w(N.)g(Kaldor)l(.)h(W)-6 b(elf)o(are)19 b(propositions)h(in)f
(economics)h(and)10 3943 y(interpersonal)g(comparisons)g(of)f(utility)
-5 b(.)18 b Fp(The)h(Economic)h(J)n(ournal)p Ft(,)10
4030 y(49\(195\):549\226552,)i(1939.)p 0 TeXcolorgray
-152 4126 a([23])p 0 TeXcolorgray 38 w(R.)c(Klink)o(enber)o(g.)i
(Learning)g(drifting)e(concepts:)25 b(Example)10 4213
y(selection)19 b(vs.)g(e)o(xample)h(weighting.)f Fp(Intell.)f(Data)h
(Anal.)p Ft(,)g(8\(3\),)10 4300 y(2004.)p 0 TeXcolorgray
-152 4395 a([24])p 0 TeXcolorgray 38 w(I.)f(K)m(o)o(yche)n(v)-5
b(.)21 b(Gradual)f(for)o(getting)f(for)g(adaptation)h(to)e(concept)10
4483 y(drift.)g(In)h Fp(ECAI)p Ft(,)e(pages)j(101\226106,)h(2000.)p
0 TeXcolorgray -152 4578 a([25])p 0 TeXcolorgray 38 w(M.)e(Masud,)h(J.)
e(Gao,)h(L.)f(Khan,)h(J.)g(Han,)f(and)i(B.)e(Thuraisingham.)10
4665 y(A)h(practical)g(approach)h(to)f(classify)g(e)n(v)o(olving)h
(data)f(streams:)10 4752 y(T)m(raining)h(with)e(limited)h(amount)g(of)g
(labeled)h(data.)f(In)g Fp(ICDM)p Ft(,)10 4840 y(pages)h(929\226934,)h
(2008.)p 0 TeXcolorgray -152 4935 a([26])p 0 TeXcolorgray
38 w(M.)e(Moreira,)g(J.)f(dos)i(Santos,)f(and)g(A.)f(V)-8
b(eloso.)19 b(Learning)h(to)e(rank)10 5022 y(similar)g(apparel)i
(styles)f(with)f(economically-ef)n(\002cient)j(rule-based)10
5109 y(acti)n(v)o(e)e(learning.)g(In)g Fp(ICMR)p Ft(,)f(pages)i
(361\226369,)h(2014.)p 0 TeXcolorgray -152 5205 a([27])p
0 TeXcolorgray 38 w(M.)e(N.)f(nez,)h(R.)g(Fidalgo,)f(and)i(R.)e
(Morales.)h(Learning)h(in)10 5276 y(en)m(vironments)h(with)d(unkno)n
(wn)j(dynamics:)j(T)-6 b(o)n(w)o(ards)20 b(more)f(rob)o(ust)10
5363 y(concept)h(learners.)f Fp(JMLR)p Ft(,)f(8,)h(2007.)p
0 TeXcolorgray 2040 2681 a([28])p 0 TeXcolorgray 38 w(F)-6
b(.)18 b(P)o(alda.)g Fp(P)-6 b(ar)m(eto')m(s)19 b(Republic)h(and)f(the)
g(ne)o(w)g(Science)h(of)f(P)-6 b(eace)p Ft(.)2202 2768
y(Cooper)o(-W)g(ol\003ing,)18 b(2011.)p 0 TeXcolorgray
2040 2864 a([29])p 0 TeXcolorgray 38 w(M.)h(Ribeiro,)f(A.)h(Lacerda,)g
(A.)f(V)-8 b(eloso,)19 b(and)g(N.)f(Zi)n(viani.)2202
2951 y(P)o(areto-ef)n(\002cient)g(hybridization)i(for)f(multi-objecti)n
(v)o(e)2202 3038 y(recommender)h(systems.)f(In)g Fp(RecSys)p
Ft(,)g(pages)h(19\22626,)g(2012.)p 0 TeXcolorgray 2040
3133 a([30])p 0 TeXcolorgray 38 w(I.)e(Santana,)h(J.)g(Gomide,)g(A.)f
(V)-8 b(eloso,)19 b(W)-7 b(.)18 b(M.)g(Jr)l(.,)g(and)i(R.)e(Ferreira.)
2202 3221 y(Ef)n(fecti)n(v)o(e)h(sentiment)g(stream)g(analysis)g(with)g
(self-augmenting)2202 3308 y(training)g(and)h(demand-dri)n(v)o(en)h
(projection.)e(In)g Fp(SIGIR)p Ft(,)f(pages)2202 3395
y(475\226484.)j(A)m(CM,)d(2011.)p 0 TeXcolorgray 2040
3490 a([31])p 0 TeXcolorgray 38 w(D.)g(T)-6 b(orres,)19
b(J.)f(Ruiz,)h(and)g(Y)-10 b(.)19 b(Sarabia.)f(Classi\002cation)h
(model)g(for)2202 3578 y(data)g(streams)g(based)h(on)f(similarity)-5
b(.)18 b(In)h Fp(IEA)p Ft(,)f(pages)i(1\2269,)f(2011.)p
0 TeXcolorgray 2040 3673 a([32])p 0 TeXcolorgray 38 w(A.)f(V)-8
b(eloso,)19 b(W)-7 b(.)18 b(M.)h(Jr)l(.,)f(and)h(M.)g(Zaki.)f(Lazy)h
(associati)n(v)o(e)2202 3760 y(classi\002cation.)f(In)h
Fp(ICDM)p Ft(,)g(pages)g(645\226654,)i(2006.)p 0 TeXcolorgray
2040 3856 a([33])p 0 TeXcolorgray 38 w(A.)d(V)-8 b(eloso,)19
b(W)-7 b(.)18 b(Meira)h(Jr)l(.,)f(M.)h(Gon\347alv)o(es,)g(H.)g(de)g
(Almeida,)g(and)2202 3943 y(M.)g(Zaki.)f(Calibrated)h(lazy)g(associati)
n(v)o(e)h(classi\002cation.)e Fp(Inf)o(.)h(Sci.)p Ft(,)2202
4030 y(181\(13\):2656\2262670,)k(2011.)p 0 TeXcolorgray
2040 4126 a([34])p 0 TeXcolorgray 38 w(A.)18 b(V)-8 b(eloso,)19
b(M.)g(Ote)o(y)-5 b(,)18 b(S.)g(P)o(arthasarathy)-5 b(,)19
b(and)h(W)-7 b(.)18 b(Meira)h(Jr)l(.)2202 4213 y(P)o(arallel)f(and)h
(distrib)o(uted)g(frequent)h(itemset)e(mining)i(on)f(dynamic)2202
4300 y(datasets.)g(In)g Fp(HiPC)p Ft(,)e(pages)j(184\226193,)h(2003.)p
0 TeXcolorgray 2040 4395 a([35])p 0 TeXcolorgray 38 w(I.)d(\016liobait)
2505 4394 y(\001)2501 4395 y(e.)g(Learning)i(under)g(concept)g(drift:)i
(an)d(o)o(v)o(ervie)n(w)-5 b(.)2202 4483 y Fp(CoRR)p
Ft(,)18 b(abs/1010.4784,)j(2010.)p 0 TeXcolorgray 2040
4578 a([36])p 0 TeXcolorgray 38 w(I.)d(\016liobait)2505
4577 y(\001)2501 4578 y(e,)g(A.)h(Bifet,)e(G.)i(Holmes,)g(and)g(B.)f
(Pf)o(ahringer)l(.)h(MO)m(A)2202 4665 y(concept)h(drift)e(acti)n(v)o(e)
h(learning)h(strate)o(gies)f(for)g(streaming)g(data.)2202
4752 y Fp(JMLR)p Ft(,)f(17:48\22655,)j(2011.)p 0 TeXcolorgray
2040 4848 a([37])p 0 TeXcolorgray 38 w(I.)d(\016liobait)2505
4847 y(\001)2501 4848 y(e,)g(A.)h(Bifet,)e(B.)i(Pf)o(ahringer)m(,)g
(and)g(G.)g(Holmes.)f(Acti)n(v)o(e)2202 4935 y(learning)h(with)g(e)n(v)
o(olving)h(streaming)f(data.)g(In)g Fp(Mac)o(hine)h(Learning)2202
5022 y(and)f(Knowledg)o(e)h(Disco)o(very)f(in)g(Databases)p
Ft(,)g(v)o(olume)g(6913,)g(pages)2202 5109 y(597\226612.)i(2011.)p
0 TeXcolorgray 2040 5205 a([38])p 0 TeXcolorgray 38 w(I.)d(\016liobait)
2505 5204 y(\001)2501 5205 y(e,)g(A.)h(Bifet,)e(B.)i(Pf)o(ahringer)m(,)
g(and)g(G.)g(Holmes.)f(Acti)n(v)o(e)2202 5292 y(learning)h(with)g
(drifting)g(streaming)g(data.)g Fp(IEEE)f(T)l(r)o(ans.)g(on)i(Neur)o
(al)2202 5379 y(Networks)f(and)h(Learning)f(Systems)p
Ft(,)g(PP\(99\):1\2261,)g(2013.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 10 10
TeXDict begin 10 9 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -152 -69 a Ft([39])p 0
TeXcolorgray 38 w(M.)19 b(Zaki)g(and)g(K.)f(Gouda.)i(F)o(ast)e(v)o
(ertical)h(mining)g(using)h(dif)n(fsets.)e(In)10 19 y
Fp(SIGKDD)p Ft(,)g(pages)i(326\226335,)h(2003.)p 0 TeXcolorgray
-152 114 a([40])p 0 TeXcolorgray 38 w(M.)e(Zaki,)f(S.)g(P)o
(arthasarathy)-5 b(,)19 b(M.)g(Ogihara,)g(and)g(W)-7
b(.)18 b(Li.)g(Ne)n(w)10 201 y(algorithms)h(for)g(f)o(ast)g(disco)o(v)o
(ery)h(of)f(association)h(rules.)e(In)10 288 y Fp(SIGKDD)p
Ft(,)g(pages)i(283\226286,)h(1997.)p 0 TeXcolorgray -152
384 a([41])p 0 TeXcolorgray 38 w(X.)d(Zhu,)h(P)-8 b(.)18
b(Zhang,)h(X.)f(Lin,)h(and)g(Y)-10 b(.)19 b(Shi.)f(Acti)n(v)o(e)h
(learning)g(from)2202 -69 y(stream)g(data)g(using)h(optimal)f(weight)g
(classi\002er)f(ensemble.)i Fp(IEEE)2202 19 y(T)l(r)o(ansactions)g(on)f
(Systems,)g(Man,)g(and)h(Cybernetics,)f(P)-6 b(art)19
b(B:)2202 106 y(Cybernetics)p Ft(,)g(40\(6\):1607\2261621,)j(2010.)p
0 TeXcolorgray 2040 201 a([42])p 0 TeXcolorgray 38 w(Y)-10
b(.)18 b(Zhu)h(and)h(D.)e(Shasha.)h(Ef)n(\002cient)f(elastic)g(b)o
(urst)h(detection)g(in)g(data)2202 288 y(streams.)g(In)f
Fp(KDD)p Ft(,)h(pages)g(336\226345,)i(2003.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
